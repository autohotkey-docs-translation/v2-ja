<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Array Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="An Array object contains a list or sequence of values." />
<meta name="ahk:equiv-v1" content="lib/Object.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Array Object</h1>
<pre class="NoIndent">class Array extends Object</pre>

<p>An <strong>Array</strong> object contains a list or sequence of values.</p>
<p>Values are addressed by their position within the array (known as an <em>array index</em>), where position 1 is the first element.</p>
<p>Arrays are often created by enclosing a list of values in brackets. For example:</p>
<pre>veg := ["Asparagus", "Broccoli", "Cucumber"]
Loop veg.Length
    MsgBox veg[A_Index]</pre>
<p>A negative index can be used to address elements in reverse, so -1 is the last element, -2 is the second last element, and so on.</p>
<p>Attempting to use an array index which is out of bounds (such as zero, or if its absolute value is greater than the <a href="#Length">Length</a> of the array) is considered an error and will cause an <a href="Error.htm#IndexError">IndexError</a> to be thrown. The best way to add new elements to the array is to call <a href="#InsertAt">InsertAt</a> or <a href="#Push">Push</a>. For example:</p>
<pre>users := Array()
users.Push A_UserName
MsgBox users[1]</pre>
<p>An array can also be extended by assigning a larger value to <a href="#Length">Length</a>. This changes which indices are valid, but <a href="#Has">Has</a> will show that the new elements have no value. Elements without a value are typically used for <a href="../Functions.htm#VariadicCall">variadic calls</a> or by <a href="../Functions.htm#Variadic">variadic functions</a>, but can be used for any purpose.</p>
<p>"ArrayObj" is used below as a placeholder for any Array object, as "Array" is the class itself.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, Array objects have the following predefined methods and properties.</p>

<h2 id="toc">Table of Contents</h2>
<ul class="indent">
  <li><a href="#StaticMethods">Static Methods</a>:
    <ul>
      <li><a href="#Call">Call</a>: Creates a new Array containing the specified values.</li>
    </ul>
  </li>
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Clone">Clone</a>: Returns a shallow copy of an array.</li>
      <li><a href="#Delete">Delete</a>: Removes the value of an array element, leaving the index without a value.</li>
      <li><a href="#Get">Get</a>: Returns the value at a given index, or a default value.</li>
      <li><a href="#Has">Has</a>: Returns a non-zero number if the index is valid and there is a value at that position.</li>
      <li><a href="#InsertAt">InsertAt</a>: Inserts one or more values at a given position.</li>
      <li><a href="#Pop">Pop</a>: Removes and returns the last array element.</li>
      <li><a href="#Push">Push</a>: Appends values to the end of an array.</li>
      <li><a href="#RemoveAt">RemoveAt</a>: Removes items from an array.</li>
      <li><a href="#__New">__New</a>: Appends items. Equivalent to Push.</li>
      <li><a href="#__Enum">__Enum</a>: Enumerates array elements.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#Length">Length</a>: Retrieves or sets the length of an array.</li>
      <li><a href="#Capacity">Capacity</a>: Retrieves or sets the current capacity of an array.</li>
      <li><a href="#Default">Default</a>: Defines the default value returned when an element with no value is requested.</li>
      <li><a href="#__Item">__Item</a>: Retrieves or sets the value of an array element.</li>
    </ul>
  </li>
</ul>

<h2 id="StaticMethods">Static Methods</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>Creates a new Array containing the specified values.</p>
<pre class="Syntax">ArrayObj := Array(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)
ArrayObj := Array.<span class="func">Call</span>(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)</pre>
<p>Parameters are defined by <a href="#__New">__New</a>.</p>
</div>

<h2 id="Methods">Methods</h2>

<div class="methodShort" id="Clone"><h3>Clone</h3>
<p>Returns a shallow copy of an array.</p>
<pre class="Syntax">Clone := ArrayObj.<span class="func">Clone</span>()</pre>
<p>All array elements are copied to the new array. Object <em>references</em> are copied (like with a normal assignment), not the objects themselves.</p>
<p>Own properties, own methods and base are copied as per <a href="Object.htm#Clone">Obj.Clone</a>.</p>
</div>

<div class="methodShort" id="Delete"><h3>Delete</h3>
<p>Removes the value of an array element, leaving the index without a value.</p>
<pre class="Syntax">RemovedValue := ArrayObj.<span class="func">Delete</span>(Index)</pre>
<h4 id="Delete_Parameters">Parameters</h4>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>A valid array index.</p>
  </dd>
</dl>
<h4 id="Delete_Return_Value">Return Value</h4>
<p>Type: <a href="../Concepts.htm#values">Any</a></p>
<p>This method returns the removed value (blank if none).</p>
<h4 id="Delete_Remarks">Remarks</h4>
<p>This method does not affect the <a href="#Length">Length</a> of the array.</p>
<p>A <a href="Error.htm#ValueError">ValueError</a> is thrown if <em>Index</em> is out of range.</p>
</div>

<div class="methodShort" id="Get"><h3>Get</h3>
<p>Returns the value at a given index, or a default value.</p>
<pre class="Syntax">Value := ArrayObj.<span class="func">Get</span>(Index <span class="optional">, Default</span>)</pre>
<p>This method does the following:</p>
<ul>
  <li>Throw an <a href="Error.htm#IndexError">IndexError</a> if <em>Index</em> is zero or out of range.</li>
  <li>Return the value at <em>Index</em>, if there is one (see <a href="#Has">Has</a>).</li>
  <li>Return the value of the <em>Default</em> parameter, if specified.</li>
  <li>Return the value of <code>ArrayObj.Default</code>, if defined.</li>
  <li>Throw an <a href="Error.htm#UnsetError">UnsetItemError</a>.</li>
</ul>
<p>When <em>Default</em> is omitted, this is equivalent to <code>ArrayObj[Index]</code>, except that <a href="#__Item">__Item</a> is not called.</p>
</div>

<div class="methodShort" id="Has"><h3>Has</h3>
<p>Returns a non-zero number if the index is valid and there is a value at that position.</p>
<pre class="Syntax">HasIndex := ArrayObj.<span class="func">Has</span>(Index)</pre>
</div>

<div class="methodShort" id="InsertAt"><h3>InsertAt</h3>
<p>Inserts one or more values at a given position.</p>
<pre class="Syntax">ArrayObj.<span class="func">InsertAt</span>(Index, Value1 <span class="optional">, Value2, ... Value<i>N</i></span>)</pre>
<h4 id="InsertAt_Parameters">Parameters</h4>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The position to insert <em>Value1</em> at. Subsequent values are inserted at Index+1, Index+2, etc. Specifying an index of 0 is the same as specifying <a href="#Length">Length</a> + 1.</p>
  </dd>
  <dt>Value1 ...</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>One or more values to insert. To insert an array of values, pass <code><a href="../Functions.htm#VariadicCall">theArray*</a></code> as the last parameter.</p>
  </dd>
</dl>
<h4 id="InsertAt_Remarks">Remarks</h4>
<p>InsertAt is the counterpart of <a href="#RemoveAt">RemoveAt</a>.</p>
<p>Any items previously at or to the right of <em>Index</em> are shifted to the right. Missing parameters are also inserted, but without a value. For example:</p>
<pre>x := []
x.InsertAt(1, "A", "B") <em>; =&gt;  ["A", "B"]</em>
x.InsertAt(2, "C")      <em>; =&gt;  ["A", "C", "B"]</em>

<em>; Missing elements are preserved:</em>
x := ["A", , "C"]
x.InsertAt(2, "B")      <em>; =&gt;  ["A", "B",    , "C"]</em>

x := ["C"]
x.InsertAt(1, , "B")    <em>; =&gt;  [   , "B", "C"]</em></pre>
<p>A <a href="Error.htm#ValueError">ValueError</a> is thrown if <em>Index</em> is less than <code>-ArrayObj.Length</code> or greater than <code>ArrayObj.Length + 1</code>. For example, with an array of 3 items, <em>Index</em> must be between -3 and 4, inclusive.</p>
</div>

<div class="methodShort" id="Pop"><h3>Pop</h3>
<p>Removes and returns the last array element.</p>
<pre class="Syntax">RemovedValue := ArrayObj.<span class="func">Pop</span>()</pre>
<p>All of the following are equivalent:</p>
<pre>RemovedValue := ArrayObj.Pop()
RemovedValue := ArrayObj.RemoveAt(ArrayObj.Length)
RemovedValue := ArrayObj.RemoveAt(-1)</pre>
<p>If the array is empty (<a href="#Length">Length</a> is 0), an <a href="Error.htm">Error</a> is thrown.</p>
</div>

<div class="methodShort" id="Push"><h3>Push</h3>
<p>Appends values to the end of an array.</p>
<pre class="Syntax">ArrayObj.<span class="func">Push</span>(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)</pre>
<h4 id="Push_Parameters">Parameters</h4>
<dl>
  <dt>Value ...</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>One or more values to insert. To insert an array of values, pass <code><a href="../Functions.htm#VariadicCall">theArray*</a></code> as the last parameter.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="RemoveAt"><h3>RemoveAt</h3>
<p>Removes items from an array.</p>
<pre class="Syntax">RemovedValue := ArrayObj.<span class="func">RemoveAt</span>(Index)
ArrayObj.<span class="func">RemoveAt</span>(Index, Length)</pre>
<h4 id="RemoveAt_Parameters">Parameters</h4>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The index of the value or values to remove.</p>
  </dd>
  
  <dt>Length</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, one item is removed. Otherwise, specify the length of the range of values to remove.</p>
  </dd>
</dl>
<h4 id="RemoveAt_Return_Value">Return Value</h4>
<p>Type: <a href="../Concepts.htm#values">Any</a></p>
<p>If <em>Length</em> is omitted, the removed value is returned (blank if none). Otherwise there is no return value.</p>
<h4 id="RemoveAt_Remarks">Remarks</h4>
<p>RemoveAt is the counterpart of <a href="#InsertAt">InsertAt</a>.</p>
<p>A <a href="Error.htm#ValueError">ValueError</a> is thrown if the range indicated by <em>Index</em> and <em>Length</em> is not entirely within the array's current bounds.</p>
<p>The remaining items to the right of <em>Pos</em> are shifted to the left by <em>Length</em> (or 1 if omitted). For example:</p>
<pre>x := ["A", "B"]
MsgBox x.RemoveAt(1)  <em>; A</em>
MsgBox x[1]           <em>; B</em>

x := ["A", , "C"]
MsgBox x.RemoveAt(1, 2)  <em>; 1</em>
MsgBox x[1]              <em>; C</em></pre>
</div>

<div class="methodShort" id="__New"><h3>__New</h3>
<p>Appends items. Equivalent to <a href="#Push">Push</a>.</p>
<pre class="Syntax">ArrayObj.<span class="func">__New</span>(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)</pre>
<p>This method exists to support <a href="#Call">Call</a>, and is not intended to be called directly. See <a href="../Objects.htm#Custom_NewDelete">Construction and Destruction</a>.</p>
</div>

<div class="methodShort" id="__Enum"><h3>__Enum</h3>
<p>Enumerates array elements.</p>
<pre class="Syntax">For Value in ArrayObj</pre>
<pre class="Syntax">For Index, Value in ArrayObj</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a>. This method is typically not called directly. Instead, the array object is passed directly to a <a href="For.htm">for-loop</a>, which calls __Enum once and then calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next array element. The for-loop's variables correspond to the enumerator's parameters, which are:</p>
<dl>
  <dt>Index</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The array index, typically the same as <a href="../Variables.htm#Index">A_Index</a>. This is present only in the two-parameter mode.</p>
  </dd>
  <dt>Value</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>The value (if there is no value, <em>Value</em> becomes <a href="../Concepts.htm#uninitialized-variables">uninitialized</a>).</p>
  </dd>
</dl>
</div>

<h2 id="Properties">Properties</h2>

<div class="methodShort" id="Length"><h3>Length</h3>
<p>Retrieves or sets the length of an array.</p>
<pre class="Syntax">Length := ArrayObj.<span class="func">Length</span></pre>
<pre class="Syntax">ArrayObj.<span class="func">Length</span> := Length</pre>
<p>The length includes elements which have no value. Increasing the length changes which indices are considered valid, but the new elements have no value (as indicated by <a href="#Has">Has</a>). Decreasing the length truncates the array.</p>
<pre>
MsgBox ["A", "B", "C"].Length  <em>;  3</em>
MsgBox ["A",    , "C"].Length  <em>;  3</em>
</pre>
</div>

<div class="methodShort" id="Capacity"><h3>Capacity</h3>
<p>Retrieves or sets the current capacity of an array.</p>
<pre class="Syntax">MaxItems := ArrayObj.<span class="func">Capacity</span></pre>
<pre class="Syntax">ArrayObj.<span class="func">Capacity</span> := MaxItems</pre>
<p><em>MaxItems</em> is an <a href="../Concepts.htm#numbers">integer</a> representing the maximum number of elements the array should be able to contain before it must be automatically expanded.  If setting a value less than <a href="#Length">Length</a>, elements are removed.</p>
</div>

<div class="methodShort" id="Default"><h3>Default</h3>
<p>Defines the default value returned when an element with no value is requested.</p>
<pre class="Syntax">ArrayObj.<span class="func">Default</span> := Value</pre>
<p>This property actually doesn't exist by default, but can be defined by the script. If defined, its value is returned by <a href="#__Item">__Item</a> or <a href="#Get">Get</a> if the requested element has no value, instead of throwing an <a href="Error.htm#UnsetError">UnsetItemError</a>. It can be implemented by any of the normal means, including a <a href="Object.htm#DefineProp">dynamic property</a> or <a href="../Objects.htm#Meta_Functions">meta-function</a>, but determining which key was queried would require overriding <a href="#__Item">__Item</a> or <a href="#Get">Get</a> instead.</p>
<p>Setting a default value does not prevent an error from being thrown when the index is out of range.</p>
</div>

<div class="methodShort" id="__Item"><h3>__Item</h3>
<p>Retrieves or sets the value of an array element.</p>
<pre class="Syntax">Value := ArrayObj[Index]
Value := ArrayObj.<span class="func">__Item</span>[Index]</pre>
<pre class="Syntax">ArrayObj[Index] := Value
ArrayObj.<span class="func">__Item</span>[Index] := Value</pre>
<p><em>Index</em> is an <a href="../Concepts.htm#numbers">integer</a> representing a valid array index; that is, an integer with absolute value between 1 and <a href="#Length">Length</a> (inclusive). A negative index can be used to address elements in reverse, so that -1 is the last element, -2 is the second last element, and so on. Attempting to use an index which is out of bounds (such as zero, or if its absolute value is greater than the <a href="#Length">Length</a> of the array) is considered an error and will cause an <a href="Error.htm#IndexError">IndexError</a> to be thrown.</p>
<p>The property name __Item is typically omitted, as shown above, but is used when overriding the property.</p>
</div>

</body>
</html>
