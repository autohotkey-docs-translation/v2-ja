<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Try - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Try statement guards one or more statements against runtime errors and values thrown by the Throw statement." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Try</h1>

<p>Guards one or more <a href="../Concepts.htm#statement">statements</a> against runtime errors and values thrown by the <a href="Throw.htm">Throw</a> statement.</p>

<pre class="Syntax"><span class="func">Try</span> <i>Statement</i></pre>
<pre class="Syntax" style="line-height: 100%"><span class="func">Try</span>
{
    <i>Statements</i>
}</pre>
<h2 id="Remarks">Remarks</h2>
<p>The <em>Try</em> statement is usually followed by a <a href="Block.htm">block</a> (one or more <a href="../Concepts.htm#statement">statements</a> enclosed in braces). If only a single statement is to be executed, it can be placed on the same line as <em>Try</em> or on the next line, and the braces can be omitted. To specify code that executes only when <em>Try</em> catches an error, use one or more <a href="Catch.htm">Catch</a> statements.</p>
<p>If <em>Try</em> is used without <em>Catch</em> or <em>Finally</em>, it is equivalent to having <code>catch Error</code> with an empty block.</p>
<p>A value can be thrown by the <a href="Throw.htm">Throw</a> statement or by the program when a runtime error occurs. When a value is thrown from within a <em>Try</em> block or a function called by one, the following occurs:</p>
<ul>
  <li>If there is a <a href="Catch.htm">Catch</a> statement which matches the class of the thrown value, execution is transferred into it.</li>
  <li>If there is no matching <em>Catch</em> statement but there is a <a href="Finally.htm">Finally</a> statement, it is executed, but once it finishes the value is automatically thrown again.</li>
  <li>If there is no matching <em>Catch</em> statement or <em>Finally</em> statement, the value is automatically thrown again (unless there is no <em>Catch</em> or <em>Finally</em> at all, as noted above).</li>
</ul>
<p>The last <em>Catch</em> can optionally be followed by <a href="Else.htm"><em>Else</em></a>. If the <em>Try</em> statement completes without an exception being thrown (and without control being transferred elsewhere by <em>Return</em>, <em>Break</em> or similar), the <em>Else</em> statement is executed. Exceptions thrown by the <em>Else</em> statement are not handled by its associated <em>Try</em> statement, but may be handled by an enclosing <em>Try</em> statement. <em>Finally</em> can also be present, but must be placed after <em>Else</em>, and is always executed last.</p>
<p>The <a href="Block.htm#otb">One True Brace (OTB) style</a> may optionally be used with the <em>Try</em> statement. For example:</p>
<pre>try {
    ...
} catch Error as err {
    ...
} else {
    ...
} finally {
    ...
}</pre>

<h2 id="Related">Related</h2>
<p><a href="Throw.htm">Throw</a>, <a href="Catch.htm">Catch</a>, <a href="Else.htm">Else</a>, <a href="Finally.htm">Finally</a>, <a href="Block.htm">Blocks</a>, <a href="OnError.htm">OnError</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ex_basic">
<p><a class="ex_number" href="#ex_basic"></a> Demonstrates the basic concept of <em>Try-Catch</em> and <em>Throw</em>.</p>
<pre>try  <em>; Attempts to execute code.</em>
{
    HelloWorld
    MakeToast
}
catch as e  <em>; Handles the first error thrown by the block above.</em>
{
    MsgBox "An error was thrown!`nSpecifically: " e.Message
    Exit
}

HelloWorld()  <em>; Always succeeds.</em>
{
    MsgBox "Hello, world!"
}

MakeToast()  <em>; Always fails.</em>
{
    <em>; Jump immediately to the try block's error handler:</em>
    <a href="Throw.htm">throw</a> Error(A_ThisFunc " is not implemented, sorry")
}
</pre>
</div>

<div class="ex" id="ex_el">
<p><a class="ex_number" href="#ex_el"></a> Demonstrates basic error handling of built-in functions.</p>
<pre>try
{
    <em>; The following tries to back up certain types of files:</em>
    FileCopy A_MyDocuments "\*.txt", "D:\Backup\Text documents"
    FileCopy A_MyDocuments "\*.doc", "D:\Backup\Text documents"
    FileCopy A_MyDocuments "\*.jpg", "D:\Backup\Photos"
}
catch
{
    MsgBox "There was a problem while backing the files up!",, "IconX"
    ExitApp 1
}
else
{
    MsgBox "Backup successful."
    ExitApp 0
}
</pre>
</div>

<div class="ex" id="ex_com">
<p><a class="ex_number" href="#ex_com"></a> Demonstrates the use of <em>Try-Catch</em> dealing with COM errors. For details about the COM object used below, see <a href="https://learn.microsoft.com/previous-versions/visualstudio/visual-studio-6.0/aa227633(v=vs.60)">Using the ScriptControl (Microsoft Docs)</a>.</p>
<pre>try
{
    obj := ComObject("ScriptControl")
    obj.ExecuteStatement('MsgBox "This is embedded VBScript"')  <em>; This line produces an Error.</em>
    obj.InvalidMethod()  <em>; This line would produce a MethodError.</em>
}
catch MemberError  <em>; Covers MethodError and PropertyError.</em>
{
    MsgBox "We tried to invoke a member that doesn't exist."
}
catch as e
{
    <em>; For more detail about the object that e contains, see <a href="Error.htm">Error Object</a>.</em>
    MsgBox("Exception thrown!`n`nwhat: " e.what "`nfile: " e.file 
        . "`nline: " e.line "`nmessage: " e.message "`nextra: " e.extra,, 16) 
}
</pre>
</div>

<div class="ex" id="ex_nesting">
<p><a class="ex_number" href="#ex_nesting"></a> Demonstrates nesting <em>Try-Catch</em> statements.</p>
<pre>try Example1 <em>; Any single statement can be on the same line with Try.</em>
catch Number as e
    MsgBox "Example1() threw " e

Example1()
{
    try Example2
    catch Number as e
    {
        if (e = 1)
            throw <em>; Rethrow the caught value to our caller.</em>
        else
            MsgBox "Example2() threw " e
    }
}

Example2()
{
    throw Random(1, 2)
}</pre>
</div>

</body>
</html>
