<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Sort - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Sort function arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates)." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Sort</h1>

<p>Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).</p>

<pre class="Syntax">SortedString := <span class="func">Sort</span>(String <span class="optional">, Options, Callback</span>)</pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>String</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The string to sort.</p>
  </dd>

  <dt>Options</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, <em>String</em> will be sorted in ascending alphabetical order (case-insensitive), using a linefeed (`n) as separator. Otherwise, specify a string of one or more options from the <a href="#Options">Options section</a> below (in any order, with optional spaces in between).</p>
  </dd>
  
  <dt id="callback">Callback</dt>
  <dd>
    <p>Type: <a href="../misc/Functor.htm">Function Object</a></p>
    <p>If omitted, no custom sorting will be performed. Otherwise, specify the function to call that compares any two items in the list.</p>
    <p>The callback accepts three parameters and can be <a href="../Functions.htm#intro">defined</a> as follows:</p>
    <pre class="NoIndent">MyCallback(First, Second, Offset) { ...</pre>
    <p>Although the names you give the parameters do not matter, the following values are sequentially assigned to them:</p>
    <ol>
      <li>The first item.</li>
      <li>The second item.</li>
      <li>The offset (in characters) of the second item from the first as seen in the original/unsorted list (see examples).</li>
    </ol>
    <p>You can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. <code>MyCallback(Param1, *)</code>.</p>
    <p>When the callback deems the first parameter to be greater than the second, it should return a positive integer; when it deems the two parameters to be equal, it should return 0, "", or nothing; otherwise, it should return a negative integer. If a decimal point is present in the returned value, that part is ignored (i.e. 0.8 is the same as 0).</p>
    <p>The callback uses the same global (or thread-specific) settings as the Sort function that called it.</p>
    <p class="note"><strong>Note:</strong> All options except D, Z, and U are ignored when <em>Callback</em> is specified (though N, C, and CL still affect how <a href="#unique">duplicates</a> are detected).</p>
  </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#strings">String</a></p>
<p>This function returns the sorted version of the specified string.</p>

<h2 id="Options">Options</h2>
<p><strong>C</strong>, <strong>C1</strong> or <strong>COn</strong>: Case-sensitive sort (ignored if the N option is also present).</p>
<p><strong>C0</strong> or <strong>COff</strong>: Case-insensitive sort. The uppercase letters A-Z are considered identical to their lowercase counterparts for the purpose of the sort. This is the default mode if none of the other case sensitivity options are used.</p>
<p><strong>CL</strong> or <strong>CLocale</strong>: Case-insensitive sort based on the current user's locale. For example, most English and Western European locales treat the letters A-Z and ANSI letters like &Auml; and &Uuml; as identical to their lowercase counterparts. This method also uses a "word sort", which treats hyphens and apostrophes in such a way that words like "coop" and "co-op" stay together. Depending on the content of the items being sorted, the performance will be 1 to 8 times worse than the default method of insensitivity.</p>
<p><strong>CLogical:</strong> Like <em>CLocale</em>, but digits in the strings are considered as numerical content rather than text. For example, "A2" is considered less than "A10". However, if two numbers differ only by the presence of a leading zero, the string with leading zero may be considered <em>less</em> than the other string. The exact behavior may differ between OS versions.</p>
<p><strong>D</strong><em>x</em>: Specifies <em>x</em> as the delimiter character, which determines where each item begins and ends. The delimiter is always case-sensitive. If this option is not present, <em>x</em> defaults to linefeed (`n). In most cases this will work even if lines end with CR+LF (`r`n), but the carriage return (`r) is included in comparisons and therefore affects the sort order. For example, <code>"B`r`nA"</code> will sort as expected, but <code>"A`r`nA`t`r`nB"</code> will place <code>A`t`r</code> before <code>A`r</code>.</p>
<p><strong>N:</strong> Numeric sort. Each item is assumed to be a number rather than a string (for example, if this option is not present, the string 233 is considered to be less than the string 40 due to alphabetical ordering). Both decimal and hexadecimal strings (e.g. 0xF1) are considered to be numeric. Strings that do not start with a number are considered to be zero for the purpose of the sort. Numbers are treated as 64-bit floating point values so that the decimal portion of each number (if any) is taken into account.</p>
<p><strong>P</strong><em>n</em>: Sorts items based on character position <em>n</em> (do not use hexadecimal for <em>n</em>). If this option is not present, <em>n</em> defaults to 1, which is the position of the first character. The sort compares each string to the others starting at its <em>n</em>th character. If <em>n</em> is greater than the length of any string, that string is considered to be blank for the purpose of the sort. When used with option N (numeric sort), the string's character position is used, which is not necessarily the same as the number's digit position.</p>
<p><strong>R:</strong> Sorts in reverse order (alphabetically or numerically depending on the other options).</p>
<p><strong>Random:</strong> Sorts in random order. This option causes all other options except D, Z, and U to be ignored (though N, C, and CL still affect how duplicates are detected). Examples:</p>
<pre>MyVar := Sort(MyVar, "Random")
MyVar := Sort(MyVar, "Random Z D|")</pre>
<p id="unique"><strong>U:</strong> Removes duplicate items from the list so that every item is unique. If the C option is in effect, the case of items must match for them to be considered identical. If the N option is in effect, an item such as 2 would be considered a duplicate of 2.0. If either the P or \ (backslash) option is in effect, the entire item must be a duplicate, not just the substring that is used for sorting. If the Random option or <a href="#callback">custom sorting</a> is in effect, duplicates are removed only if they appear adjacent to each other as a result of the sort. For example, when <code>"A|B|A"</code> is sorted randomly, the result could contain either one or two A's.</p>
<p><strong>Z:</strong> To understand this option, consider a variable that contains <code>"RED`nGREEN`nBLUE`n"</code>. If the Z option is not present, the last linefeed (`n) is considered to be part of the last item, and thus there are only 3 items. But by specifying Z, the last `n (if present) will be considered to delimit a blank item at the end of the list, and thus there are 4 items (the last being blank).</p>
<p><strong>\:</strong> Sorts items based on the substring that follows the last backslash in each. If an item has no backslash, the entire item is used as the substring. This option is useful for sorting bare filenames (i.e. excluding their paths), such as the example below, in which the AAA.txt line is sorted above the BBB.txt line because their directories are ignored for the purpose of the sort:</p>
<pre>C:\BBB\AAA.txt
C:\AAA\BBB.txt</pre>
<p class="note"><strong>Note:</strong> Options N and P are ignored when the \ (backslash) option is present.</p>

<h2 id="Remarks">Remarks</h2>
<p>This function is typically used to sort a variable that contains a list of lines, with each line ending in a linefeed character (`n). One way to get a list of lines into a variable is to load an entire file via <a href="FileRead.htm">FileRead</a>.</p>
<p>If a large variable was sorted and later its contents are no longer needed, you can free its memory by making it blank, e.g. <code>MyVar := ""</code>.</p>

<h2 id="Related">Related</h2>
<p><a href="FileRead.htm">FileRead</a>, <a href="LoopRead.htm">File-reading loop</a>, <a href="LoopParse.htm">Parsing loop</a>, <a href="StrSplit.htm">StrSplit</a>, <a href="CallbackCreate.htm">CallbackCreate</a>, <a href="A_Clipboard.htm">A_Clipboard</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExNumbers">
<p><a class="ex_number" href="#ExNumbers"></a> Sorts a comma-separated list of numbers.</p>
<pre>MyVar := "5,3,7,9,1,13,999,-4"
MyVar := Sort(MyVar, "N D,")  <em>; Sort numerically, use comma as delimiter.</em>
MsgBox MyVar   <em>; The result is -4,1,3,5,7,9,13,999</em></pre>
</div>

<div class="ex" id="ExFileContents">
<p><a class="ex_number" href="#ExFileContents"></a> Sorts the contents of a file.</p>
<pre>Contents := <a href="FileRead.htm">FileRead</a>("C:\Address List.txt")
FileDelete "C:\Address List (alphabetical).txt"
FileAppend Sort(Contents), "C:\Address List (alphabetical).txt"
Contents := ""  <em>; Free the memory.</em></pre>
</div>

<div class="ex" id="ExFilenames">
<p><a class="ex_number" href="#ExFilenames"></a> Makes a hotkey to copy files from an open Explorer window and put their sorted filenames onto the clipboard.</p>
<pre>#c:: <em>; Win+C</em>
{
    A_Clipboard := "" <em>; Must be blank for detection to work.</em>
    Send "^c"
    if !ClipWait(2)
        return
    MsgBox "Ready to be pasted:`n" Sort(A_Clipboard)
}</pre>
</div>

<div class="ex" id="ExCustom">
<p><a class="ex_number" href="#ExCustom"></a> Demonstrates custom sorting via a callback function.</p>
<pre>MyVar := "This`nis`nan`nexample`nstring`nto`nbe`nsorted"
MsgBox Sort(MyVar,, LengthSort)
LengthSort(a1, a2, *)
{
    a1 := StrLen(a1), a2 := StrLen(a2)
    return a1 &gt; a2 ? 1 : a1 &lt; a2 ? -1 : 0  <em>; Sorts according to the lengths determined above.</em>
}

MyVar := "5,3,7,9,1,13,999,-4"
MsgBox Sort(MyVar, "D,", IntegerSort)
IntegerSort(a1, a2, *)
{
    return a1 - a2  <em>; Sorts in ascending numeric order. This method works only if the difference is never so large as to overflow a signed 64-bit integer.</em>
}

MyVar := "1,2,3,4"
MsgBox Sort(MyVar, "D,", ReverseDirection)  <em>; Reverses the list so that it contains 4,3,2,1</em>
ReverseDirection(a1, a2, offset)
{
    return offset  <em>; Offset is positive if a2 came after a1 in the original list; negative otherwise.</em>
}

MyVar := "a bbb cc"
<em>; Sorts in ascending length order; uses a <a href="../Variables.htm#fat-arrow">fat arrow function</a>:</em>
MsgBox Sort(MyVar, "D ", (a,b,*) =&gt; StrLen(a) - StrLen(b))
</pre>
</div>

</body>
</html>
