<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Class Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="A Class object represents a class definition; it contains static methods and properties." />
<meta name="ahk:equiv-v1" content="index.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Class Object</h1>
<pre class="NoIndent">class Class extends Object</pre>

<p>A <strong>Class</strong> object represents a class definition; it contains static methods and properties.</p>
<p>Each class object is <a href="../Objects.htm#Custom_Objects">based on</a> whatever class it extends, or <a href="Object.htm">Object</a> if not specified. The global class object <code>Object</code> is based on <code>Class.Prototype</code>, which is based on <code>Object.Prototype</code>, so classes can inherit methods and properties from any of these base objects.</p>
<p>"Static" methods and properties are any methods and properties which are owned by the class object itself (and therefore do not apply to a specific instance), while methods and properties for instances of the class are owned by the class's <a href="#Prototype">Prototype</a>.</p>
<p>"ClassObj" is used below as a placeholder for any class object, as "Class" is the Class class itself. Ordinarily, one refers to a class object by the name given in its <a href="../Objects.htm#Custom_Classes">class definition</a>.</p>

<h2 id="toc">Table of Contents</h2>
<ul class="indent">
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Call">Call</a>: Constructs a new instance of the class.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#Prototype">Prototype</a>: Retrieves or sets the object on which all instances of the class are based.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">Methods</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>Constructs a new instance of the class.</p>
<pre class="Syntax">Obj := ClassObj(Params*)
Obj := ClassObj.<span class="func">Call</span>(Params*)</pre>
<p>This static method is typically inherited from the <a href="Object.htm">Object</a>, <a href="Array.htm">Array</a> or <a href="Map.htm">Map</a> class. It performs the following functions:</p>
<ul>
  <li>Allocate memory and initialize the binary structure of the object, which depends on the object's native type (e.g. whether it is an Array or Map, or just an Object).</li>
  <li>Set the base of the new object to <a href="#Prototype">ClassObj.Prototype</a>.</li>
  <li>Call the new object's __Init method, if it has one. This method is automatically created by class definitions; it contains all instance variable initializers defined within the class body.</li>
  <li>Call the new object's __New method, if it has one. All parameters passed to Call are forwarded on to __New.</li>
  <li>Return the new object.</li>
</ul>
<p>Call can be overridden within a class definition by defining a static method, such as <code>static Call()</code>. This allows classes to modify or prevent the construction of new instances.</p>
<p>Note that <code>Class()</code> (literally using "Class" in this case) can be used to construct a new Class object based on <code>Class.Prototype</code>. However, this new object initially has no Call method as it is not a subclass of <a href="Object.htm">Object</a>. It can become a subclass of Object by assigning to <a href="Object.htm#Base">Base</a>, or the Call method can be reimplemented or copied from another class. A <a href="#Prototype">Prototype</a> must also be created and assigned to the class before it can be instantiated with the standard Call method.</p>
</div>

<h2 id="Properties">Properties</h2>

<div class="methodShort" id="Prototype"><h3>Prototype</h3>
<p>Retrieves or sets the object on which all instances of the class are based.</p>
<pre class="Syntax">Proto := ClassObj.<span class="func">Prototype</span></pre>
<pre class="Syntax">ClassObj.<span class="func">Prototype</span> := Proto</pre>
<p>By default, the class's Prototype contains all instance methods and dynamic properties defined within the class definition, and can be used to retrieve references to methods or property getters/setters or define new ones. The script can also define new value properties, which act as default property values for all instances.</p>
<p>A class's Prototype is normally based on the Prototype of its base class, so <code>ClassObj.Prototype.base == ClassObj.base.Prototype</code>.</p>
<p>Prototype is automatically defined as an own property of any class object created by a class definition.</p>
</div>

</body>
</html>
