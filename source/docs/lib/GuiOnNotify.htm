<!DOCTYPE HTML>
<html lang="en">
<head>
<title>OnNotify (GUI) - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The OnNotify method of a GuiControl object registers a function or method to be called when a control notification is received via the WM_NOTIFY message." />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnNotify</h1>
<p>Registers a function or method to be called when a control notification is received via the <a href="#WM_NOTIFY">WM_NOTIFY</a> message.</p>
<pre class="Syntax"><a href="GuiControl.htm">GuiCtrl</a>.<span class="func">OnNotify</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>

<h2 id="Parameters">Parameters</h2>
<dl>
  <dt>NotifyCode</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The control-defined notification code to monitor.</p>
  </dd>
  
  <dt>Callback</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../misc/Functor.htm">Function Object</a></p>
    <p>The function, method or object to call when the event is raised.</p>
    <p>If the GUI has an event sink (that is, if <a href="Gui.htm#Call">Gui()</a>'s <em>EventObj</em> parameter was specified), this parameter may be the name of a method belonging to the event sink. Otherwise, this parameter must be a <a href="../misc/Functor.htm">function object</a>.</p>
    <p id="Callback_Parameters">The callback accepts two parameters and can be <a href="../Functions.htm#intro">defined</a> as follows:</p>
    <pre class="NoIndent">MyCallback(GuiCtrl, lParam) { ...</pre>
    <p>Although the names you give the parameters do not matter, the following values are sequentially assigned to them:</p>
    <ol>
      <li>The <a href="GuiControl.htm">GuiControl object</a> of the current GUI control.</li>
      <li>The address of a notification structure derived from <a href="https://learn.microsoft.com/windows/win32/api/richedit/ns-richedit-nmhdr">NMHDR</a>. Its exact type depends on the type of control and notification code. If the structure contains additional information about the notification, the callback can retrieve it with <a href="NumGet.htm">NumGet</a> and/or <a href="StrGet.htm">StrGet</a>.</li>
    </ol>
    <p>You can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. <code>MyCallback(Param1, *)</code>.</p>
    <p>The <a href="GuiOnEvent.htm#Callback_Parameters">notes for OnEvent</a> regarding <code>this</code> and bound functions also apply to OnNotify.</p>
    <p id="Callback_Return_Value">If multiple callbacks have been registered for an event, a callback may return a non-empty value to prevent any remaining callbacks from being called.</p>
    <p>The callback's return value may have additional meaning, depending on the notification. For example, the ListView notification <a href="https://learn.microsoft.com/windows/win32/controls/lvn-beginlabeledit">LVN_BEGINLABELEDIT</a> (-175 or -105) prevents the user from editing the label if the callback returns TRUE (1).</p>
  </dd>
  
  <dt>AddRemove</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to 1. Otherwise, specify one of the following numbers:</p>
    <ul>
      <li>1 = Call the callback after any previously registered callbacks.</li>
      <li>-1 = Call the callback before any previously registered callbacks.</li>
      <li>0 = Do not call the callback.</li>
    </ul>
  </dd>
</dl>

<h2 id="WM_NOTIFY">WM_NOTIFY</h2>
<p>Certain types of controls send a <a href="https://learn.microsoft.com/windows/win32/controls/wm-notify">WM_NOTIFY</a> message whenever an interesting event occurs or the control requires information from the program. The <em>lParam</em> parameter of this message contains a pointer to a structure containing information about the notification. The type of structure depends on the notification code and the type of control which raised the notification, but is always based on <a href="https://learn.microsoft.com/windows/win32/api/richedit/ns-richedit-nmhdr">NMHDR</a>.</p>
<p>To determine which notifications are available (if any), what type of structure they provide and how they interpret the return value, refer to the control's documentation. <a href="https://learn.microsoft.com/windows/win32/controls/individual-control-info">Control Library (Microsoft Docs)</a> contains links to each of the Windows common controls. The notification codes (numbers) can be found in the Windows SDK, or by searching the Internet.</p>
<p>AutoHotkey uses the <em>idFrom</em> and <em>hwndFrom</em> fields to identify which control sent the notification, in order to dispatch it to the appropriate object. The <em>code</em> field contains the notification code. Since these must match up to <em>GuiCtrl</em> and <em>NotifyCode</em> used to register the callback, they are rarely useful to the script.</p>

<h2 id="Related">Related</h2>
<p>These notes for <a href="GuiOnEvent.htm">OnEvent</a> also apply to OnNotify: <a href="GuiOnEvent.htm#Threads">Threads</a>, <a href="GuiOnEvent.htm#Destroying_the_GUI">Destroying the GUI</a>.</p>
<p><a href="GuiOnCommand.htm">OnCommand</a> can be used for notifications which are sent as a WM_COMMAND message.</p>

</body>
</html>
