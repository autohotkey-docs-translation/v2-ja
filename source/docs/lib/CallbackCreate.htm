<!DOCTYPE HTML>
<html lang="en">
<head>
<title>CallbackCreate - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The CallbackCreate function creates a machine-code address that when called, redirects the call to a function in the script." />
<meta name="ahk:equiv-v1" content="lib/RegisterCallback.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>CallbackCreate</h1>

<p>Creates a machine-code address that when called, redirects the call to a <a href="../Functions.htm">function</a> in the script.</p>

<pre class="Syntax">Address := <span class="func">CallbackCreate</span>(Function <span class="optional">, Options, ParamCount</span>)</pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Function</dt>
  <dd>
    <p>Type: <a href="../misc/Functor.htm">Function Object</a></p>
    <p>A function object to call automatically whenever <em>Address</em> is called. The function also receives the parameters that were passed to <em>Address</em>.</p>
    <p>A <a href="../Functions.htm#closures">closure</a> or <a href="../misc/Functor.htm#BoundFunc">bound function</a> can be used to differentiate between multiple callbacks which all call the same script function.</p>
    <p>The callback retains a reference to the function object, and releases it when the script calls <a href="#CallbackFree">CallbackFree</a>.</p>
  </dd>

  <dt>Options</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, a new <a href="../misc/Threads.htm">thread</a> will be started each time <em>Function</em> is called, the standard calling convention will be used, and the parameters will be passed individually to <em>Function</em>. Otherwise, specify one or more of the following options. Separate each option from the next with a space (e.g. <code>"C Fast"</code>).</p>
    <p id="Fast"><strong>Fast</strong> or <strong>F</strong>: Avoids starting a new <a href="../misc/Threads.htm">thread</a> each time <em>Function</em> is called. Although this performs better, it must be avoided whenever the thread from which <em>Address</em> is called varies (e.g. when the callback is triggered by an incoming message). This is because <em>Function</em> will be able to change global settings such as <a href="../Variables.htm#LastError">A_LastError</a> and the <a href="../misc/WinTitle.htm#LastFoundWindow">last-found window</a> for whichever thread happens to be running at the time it is called. For more information, see <a href="#Threads">Remarks</a>.</p>
    <p><strong>CDecl</strong> or <strong>C</strong>: Makes <em>Address</em> conform to the "C" calling convention. This is typically omitted because the standard calling convention is much more common for callbacks. This option is ignored by 64-bit versions of AutoHotkey, which use the x64 calling convention.</p>
    <p><strong>&amp;:</strong> Causes the address of the parameter list (a single integer) to be passed to <em>Function</em> instead of the individual parameters. Parameter values can be retrieved by using <a href="NumGet.htm">NumGet</a>. When using the standard 32-bit calling convention, <em>ParamCount</em> must specify the size of the parameter list in DWORDs (the number of bytes divided by 4).</p>
  </dd>

  <dt>ParamCount</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to <a href="Func.htm#MinParams"><i>Function</i>.MinParams</a>, which is usually the number of mandatory parameters in the <a href="../Functions.htm#define">definition</a> of <em>Function</em>. Otherwise, specify the number of parameters that <em>Address</em>'s caller will pass to it. In either case, ensure that the caller passes exactly this number of parameters.</p>
  </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>CallbackCreate returns a machine-code address. This address is typically passed to an external function via <a href="DllCall.htm">DllCall</a> or placed in a struct using <a href="NumPut.htm">NumPut</a>, but can also be called directly by DllCall. Passing the address to <a href="#CallbackFree">CallbackFree</a> will delete the callback.</p>

<h2 id="Error_Handling">Error Handling</h2>
<p>This function fails and throws an exception under any of the following conditions:</p>
<ul>
  <li><em>Function</em> is not an object, or has neither a <code>MinParams</code> property nor a <code>Call</code> method.</li>
  <li><em>Function</em> has a <code>MinParams</code> property which exceeds the number of parameters that the callback will supply.</li>
  <li><em>ParamCount</em> is negative.</li>
  <li><em>ParamCount</em> is omitted and: 1) <em>Function</em> has no <code>MinParams</code> property; or 2) the <code>&amp;</code> option is used with the standard 32-bit calling convention.</li>
</ul>

<a id="The_Callback_Functions_Parameters"></a>
<h2 id="The_Functions_Parameters">The <em>Function</em>'s Parameters</h2>
<p>A <a href="../Functions.htm">function</a> assigned to a callback address may accept up to 31 parameters. <a href="../Functions.htm#optional">Optional parameters</a> are permitted, which is useful when <em>Function</em> is called by more than one caller.</p>
<p>Interpreting the parameters correctly requires some understanding of how the x86 calling conventions work. Since AutoHotkey does not have typed parameters, the callback's parameter list is assumed to consist of integers, and some reinterpretation may be required.</p>

<p><strong>AutoHotkey 32-bit:</strong> All incoming parameters are unsigned 32-bit integers. Smaller types are padded out to 32 bits, while larger types are split into a series of 32-bit parameters.</p>
<p>If an incoming parameter is intended to be a signed integer, any negative numbers can be revealed by following either of the following methods:</p>
<pre><em>; Method #1</em>
if (wParam &gt; 0x7FFFFFFF)
    wParam := -(~wParam) - 1

<em>; Method #2: Relies on the fact that AutoHotkey natively uses signed 64-bit integers.</em>
wParam := wParam &lt;&lt; 32 &gt;&gt; 32</pre>

<p><strong>AutoHotkey 64-bit:</strong> All incoming parameters are signed 64-bit integers. AutoHotkey does not natively support unsigned 64-bit integers. Smaller types are padded out to 64 bits, while larger types are always passed by address.</p>

<p><strong>AutoHotkey 32-bit/64-bit:</strong> If an incoming parameter is intended to be 8-bit or 16-bit (or 32-bit on x64), the upper bits of the value might contain "garbage" which can be filtered out by using bitwise-and, as in the following examples:</p>
<pre>Callback(UCharParam, UShortParam, UIntParam) {
    UCharParam &amp;= 0xFF
    UShortParam &amp;= 0xFFFF
    UIntParam &amp;= 0xFFFFFFFF
    <em>;...</em>
}</pre>
<p>If an incoming parameter is intended by its caller to be a string, what it actually receives is the address of the string. To retrieve the string itself, use <a href="StrGet.htm">StrGet</a>:</p>
<pre>MyString := StrGet(MyParameter)</pre>
<p>If an incoming parameter is the address of a structure, the individual members may be extracted by following the steps at <a href="DllCall.htm#struct">DllCall structures</a>.</p>

<p id="Indirect"><strong>Receiving parameters by address:</strong> If the <code>&amp;</code> option is used, <em>Function</em> receives the <i>address</i> of the first callback parameter. For example:</p>
<pre>
callback := CallbackCreate(TheFunc, "F&amp;", 3)  <em>; Parameter list size must be specified for 32-bit.</em>
DllCall(callback, "float", 10.5, "int64", 42)
TheFunc(params) {
    MsgBox <a href="NumGet.htm">NumGet</a>(params, 0, "float") ", " NumGet(params, A_PtrSize, "int64")
}</pre>
<p>Most callbacks in 32-bit programs use the <em>stdcall</em> calling convention, which requires a fixed number of parameters. In those cases, <em>ParamCount</em> must be set to the size of the parameter list, where Int64 and Double count as two 32-bit parameters. With <em>Cdecl</em> or the 64-bit calling convention, <em>ParamCount</em> has no effect.</p>

<a id="What_the_Function_Should_Return"></a>
<h2 id="What_Function_Should_Return">What <em>Function</em> Should Return</h2>
<p>If <em>Function</em> uses <a href="Return.htm">Return</a> without any parameters, or it specifies a blank value such as "" (or it never uses Return at all), 0 is returned to the caller of the callback. Otherwise, <em>Function</em> should return an integer, which is then returned to the caller. AutoHotkey 32-bit truncates return values to 32-bit, while AutoHotkey 64-bit supports 64-bit return values. Returning structs larger than this (by value) is not supported.</p>

<h2 id="Threads">Fast vs. Slow</h2>
<p>The default/slow mode causes <em>Function</em> to start off fresh with the default values for settings such as <a href="SendMode.htm">SendMode</a> and <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>. These defaults can be changed during <a href="../Scripts.htm#auto">script startup</a>.</p>
<p>By contrast, the <a href="#Fast">fast mode</a> inherits global settings from whichever <a href="../misc/Threads.htm">thread</a> happens to be running at the time <em>Function</em> is called. Furthermore, any changes <em>Function</em> makes to global settings (including the <a href="../misc/WinTitle.htm#LastFoundWindow">last-found window</a>) will go into effect for the <a href="../misc/Threads.htm">current thread</a>. Consequently, the fast mode should be used only when it is known exactly which thread(s) <em>Function</em> will be called from.</p>
<p>To avoid being interrupted by itself (or any other thread), a callback may use <a href="Critical.htm">Critical</a> as its first line. However, this is not completely effective when <em>Function</em> is called indirectly via the arrival of a message less than 0x0312 (increasing Critical's <a href="Critical.htm#Interval">interval</a> may help). Furthermore, <a href="Critical.htm">Critical</a> does not prevent <em>Function</em> from doing something that might indirectly result in a call to itself, such as calling <a href="SendMessage.htm">SendMessage</a> or <a href="DllCall.htm">DllCall</a>.</p>

<h2 id="CallbackFree">CallbackFree</h2>
<p>Deletes a callback and releases its reference to the function object.</p>
<pre class="Syntax"><span class="func">CallbackFree</span>(Address)</pre>
<p>Each use of CallbackCreate allocates a small amount of memory (32 or 48 bytes plus system overhead). Since the OS frees this memory automatically when the script exits, any script that allocates a small, <em>fixed</em> number of callbacks can get away with not explicitly freeing the memory.</p>
<p>However, if the function object held by the callback is of a dynamic nature (such as a <a href="../Functions.htm#closures">closure</a> or <a href="../misc/Functor.htm#BoundFunc">bound function</a>), it can be especially important to free the callback when it is no longer needed; otherwise, the function object will not be released.</p>

<h2 id="Related">Related</h2>
<p><a href="DllCall.htm">DllCall</a>, <a href="OnMessage.htm">OnMessage</a>, <a href="OnExit.htm">OnExit</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="Sort.htm#callback">Sort's callback</a>, <a href="Critical.htm">Critical</a>, <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="../Functions.htm">Functions</a>, <a href="../misc/SendMessageList.htm">Windows Messages</a>, <a href="../misc/Threads.htm">Threads</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExWinList">
<p><a class="ex_number" href="#ExWinList"></a> Displays a summary of all top-level windows.</p>
<pre>EnumAddress := CallbackCreate(EnumWindowsProc, "Fast")  <em>; Fast-mode is okay because it will be called only from this thread.</em>

DetectHiddenWindows True  <em>; Due to fast-mode, this setting will go into effect for the callback too.</em>

<em>; Pass control to EnumWindows(), which calls the callback repeatedly:</em>
DllCall("EnumWindows", "Ptr", EnumAddress, "Ptr", 0)
MsgBox Output  <em>; Display the information accumulated by the callback.</em>
    
EnumWindowsProc(hwnd, lParam)
{
    global Output
    win_title := WinGetTitle(hwnd)
    win_class := WinGetClass(hwnd)
    if win_title
        Output .= "HWND: " hwnd "`tTitle: " win_title "`tClass: " win_class "`n"
    return true  <em>; Tell EnumWindows() to continue until all windows have been enumerated.</em>
}</pre>
</div>

<div class="ex" id="ExSubclassGUI">
<p><a class="ex_number" href="#ExSubclassGUI"></a> Demonstrates how to subclass a GUI window by redirecting its WindowProc to a new WindowProc in the script. In this case, the background color of a text control is changed to a custom color.</p>
<pre>TextBackgroundColor := 0xFFBBBB  <em>; A custom color in BGR format.</em>
TextBackgroundBrush := DllCall("CreateSolidBrush", "UInt", TextBackgroundColor)

MyGui := Gui()
Text := MyGui.Add("Text",, "Here is some text that is given`na custom background color.")

<em>; 64-bit scripts must call SetWindowLongPtr instead of SetWindowLong:</em>
SetWindowLong := A_PtrSize=8 ? "SetWindowLongPtr" : "SetWindowLong"

WindowProcNew := CallbackCreate(WindowProc)  <em>; Avoid fast-mode for subclassing.</em>
WindowProcOld := DllCall(SetWindowLong, "Ptr", MyGui.Hwnd, "Int", -4  <em>; -4 is GWL_WNDPROC</em>
    , "Ptr", WindowProcNew, "Ptr") <em>; Return value must be set to "Ptr" or "UPtr" vs. "Int".</em>

MyGui.Show

WindowProc(hwnd, uMsg, wParam, lParam)
{
    Critical
    if (uMsg = 0x0138 &amp;&amp; lParam = Text.Hwnd)  <em>; 0x0138 is WM_CTLCOLORSTATIC.</em>
    {
        DllCall("SetBkColor", "Ptr", wParam, "UInt", TextBackgroundColor)
        return TextBackgroundBrush  <em>; Return the HBRUSH to notify the OS that we altered the HDC.</em>
    }
    <em>; Otherwise (since above didn't return), pass all unhandled events to the original WindowProc.</em>
    return DllCall("CallWindowProc", "Ptr", WindowProcOld, "Ptr", hwnd, "UInt", uMsg, "Ptr", wParam, "Ptr", lParam)
}</pre>

</div>
</body>
</html>
