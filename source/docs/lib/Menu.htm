<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Menu/MenuBar Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="The Menu/MenuBar object provides an interface to create and modify a menu or menu bar, add and modify menu items, and retrieve information about the menu or menu bar." />
<meta name="ahk:equiv-v1" content="lib/Menu.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Menu/MenuBar Object</h1>
<p>Provides an interface to create and modify a menu or menu bar, add and modify menu items, and retrieve information about the menu or menu bar.</p>
<pre class="NoIndent">class Menu extends Object</pre>
<p>Menu objects are used to define, modify and display popup menus. <a href="#Call">Menu()</a>, <a href="MenuFromHandle.htm">MenuFromHandle</a> and <a href="../Variables.htm#TrayMenu">A_TrayMenu</a> return an object of this type.</p>
<pre class="NoIndent">class MenuBar extends Menu</pre>
<p>MenuBar objects are used to define and modify menu bars for use with <a href="Gui.htm#MenuBar">Gui.MenuBar</a>. They are created with <a href="#Call">MenuBar()</a>. <a href="MenuFromHandle.htm">MenuFromHandle</a> returns an object of this type if given a menu bar handle.</p>

<p>"MyMenu" is used below as a placeholder for any Menu object, as "Menu" is the class itself.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, Menu objects have the following predefined methods and properties.</p>

<h2 id="toc">Table of Contents</h2>
<ul class="indent">
  <li><a href="#StaticMethods">Static Methods</a>:
    <ul>
      <li><a href="#Call">Call</a>: Creates a new Menu or MenuBar object.</li>
    </ul>
  </li>
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Add">Add</a>: Adds or modifies a menu item.</li>
      <li><a href="#AddStandard">AddStandard</a>: Adds the standard tray menu items.</li>
      <li><a href="#Check">Check</a>: Adds a visible checkmark next to a menu item.</li>
      <li><a href="#Delete">Delete</a>: Deletes one or all menu items.</li>
      <li><a href="#Disable">Disable</a>: Grays out a menu item to indicate that the user cannot select it.</li>
      <li><a href="#Enable">Enable</a>: Allows the user to once again select a menu item if it was previously disabled (grayed out).</li>
      <li><a href="#Insert">Insert</a>: Inserts a new item before the specified item.</li>
      <li><a href="#Rename">Rename</a>: Renames a menu item.</li>
      <li><a href="#SetColor">SetColor</a>: Changes the background color of the menu.</li>
      <li><a href="#SetIcon">SetIcon</a>: Sets the icon to be displayed next to a menu item.</li>
      <li><a href="#Show">Show</a>: Displays the menu.</li>
      <li><a href="#ToggleCheck">ToggleCheck</a>: Toggles the checkmark next to a menu item.</li>
      <li><a href="#ToggleEnable">ToggleEnable</a>: Enables or disables a menu item.</li>
      <li><a href="#Uncheck">Uncheck</a>: Removes the checkmark (if there is one) from a menu item.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#ClickCount">ClickCount</a>: Retrieves or sets how many times the tray icon must be clicked to select its default menu item.</li>
      <li><a href="#Default">Default</a>: Retrieves or sets the default menu item.</li>
      <li><a href="#Handle">Handle</a>: Retrieves the menu's Win32 handle.</li>
    </ul>
  </li>
  <li>General:
    <ul>
      <li><a href="#MenuItemName">MenuItemName</a></li>
      <li><a href="#Win32_Menus">Win32 Menus</a></li>
      <li><a href="#Remarks">Remarks</a></li>
      <li><a href="#Related">Related</a></li>
      <li><a href="#Examples">Examples</a></li>
    </ul>
  </li>
</ul>

<h2 id="StaticMethods">Static Methods</h2>
<div class="methodShort" id="Call">
<h3>Call</h3>
<p>Creates a new Menu or MenuBar object.</p>
<pre class="Syntax">
MyMenu := Menu()
MyMenuBar := MenuBar()
MyMenu := Menu.<span class="func">Call</span>()
MyMenuBar := MenuBar.<span class="func">Call</span>()
</pre>
</div>

<h2 id="Methods">Methods</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Adds or modifies a menu item.</p>
<pre class="Syntax">MyMenu.<span class="func">Add</span>(<span class="optional">MenuItemName, CallbackOrSubmenu, Options</span>)</pre>
<h4 id="Add_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The text to display on the menu item, or the position of an existing item to modify. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
  <dt id="CallbackOrSubmenu">CallbackOrSubmenu</dt>
  <dd>
    <p>Type: <a href="../misc/Functor.htm">Function Object</a> or <strong>Menu</strong></p>
    <p>The function to call as a new <a href="../misc/Threads.htm">thread</a> when the menu item is selected, or a reference to a Menu object to use as a submenu.</p>
    <p>This parameter is required when creating a new item, but optional when updating the options of an existing item.</p>
    <p>The callback accepts three parameters and can be <a href="../Functions.htm#intro">defined</a> as follows:</p>
    <pre class="NoIndent">MyCallback(ItemName, ItemPos, MyMenu) { ...</pre>
    <p>Although the names you give the parameters do not matter, the following values are sequentially assigned to them:</p>
    <ol>
      <li>The name of the menu item.</li>
      <li>The position number of the menu item.</li>
      <li>The Menu object of the menu to which the menu item was added.</li>
    </ol>
    <p>You can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. <code>MyCallback(Param1, *)</code>.</p>
  </dd>
  <dt id="Options">Options</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, it defaults to no options. Otherwise, specify one or more options from the list below (not case-sensitive). Separate each option from the next with a space or tab. To remove an option, precede it with a minus sign. To add an option, a plus sign is permitted but not required.</p>
    <p><strong>P</strong><em>n</em>: Specify for <em>n</em> the menu item's <a href="../misc/Threads.htm">thread priority</a>, e.g. <code>P1</code>. If this option is omitted when adding a menu item, the priority will be 0, which is the standard default. If omitted when updating a menu item, the item's priority will not be changed. Use a decimal (not hexadecimal) number as the priority.</p>
    <p><strong>Radio:</strong> If the item is checked, a bullet point is used instead of a check mark.</p>
    <p><strong>Right:</strong> The item is right-justified within the menu bar. This only applies to <a href="Gui.htm#MenuBar">menu bars</a>, not popup menus or submenus.</p>
    <p><strong>Break:</strong> The item begins a new column in a popup menu.</p>
    <p><strong>BarBreak:</strong> As above, but with a dividing line between columns.</p>
<p>To change an existing item's options without affecting its callback or submenu, simply omit the <em>CallbackOrSubmenu</em> parameter.</p>
  </dd>
</dl>
<h4 id="Add_Remarks">Remarks</h4>
<p>This is a multipurpose method that adds a menu item, updates one with a new submenu or callback, or converts one from a normal item into a submenu (or vice versa). If <em>MenuItemName</em> does not yet exist, it will be added to the menu. Otherwise, <em>MenuItemName</em> is updated with the newly specified <em>CallbackOrSubmenu</em> and/or <em>Options</em>.</p>
<p>To add a menu separator line, omit all three parameters.</p>
<p>This method always adds new menu items at the bottom of the menu, while the <a href="#Insert">Insert</a> method can be used to insert an item before an existing custom menu item.</p>
</div>

<div class="methodShort" id="AddStandard">
<h3>AddStandard</h3>
<p>Adds the standard <a href="../Program.htm#tray-icon">tray menu items</a>.</p>
<pre class="Syntax">MyMenu.<span class="func">AddStandard</span>()</pre>
<p>This method can be used with the tray menu or any other menu.</p>
<p>The standard items are inserted after any existing items. Any standard items already in the menu are not duplicated, but any missing items are added. The table below shows the names and positions of the standard items after calling AddStandard on an empty menu:</p>
<style>
.fake-menu {
  background-color: #f2f2f2;
  border: 1px solid #cccccc;
  color: black;
  line-height: 1.4;
}
.fake-menu td {
  padding: 0 .5em;
}
.fake-menu td {
  text-align: right;
}
.fake-menu td:first-child {
  text-align: left;
}
.fake-sep {
  border: 1px solid #d7d7d7;
  border-width: 1px 0 0;
}
</style>
<table class="fake-menu">
  <tr><td>&amp;Open</td><td>1</td><td>0</td></tr>
  <tr><td>&amp;Help</td><td>2</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>3</td><td></td></tr>
  <tr><td>&amp;Window Spy</td><td>4</td><td></td></tr>
  <tr><td>&amp;Reload Script</td><td>5</td><td></td></tr>
  <tr><td>&amp;Edit Script</td><td>6</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>7</td><td></td></tr>
  <tr><td>&amp;Suspend Hotkeys</td><td>8</td><td>1</td></tr>
  <tr><td>&amp;Pause Script</td><td>9</td><td>2</td></tr>
  <tr><td>E&amp;xit</td><td>10</td><td>3</td></tr>
</table>
<p>Compiled scripts include only the last three by default. <code>&amp;Open</code> is included only if <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> is 1 when AddStandard is called (in that case, add 1 to the positions shown in the third column). If the tray menu contains standard items, <code>&amp;Open</code> is inserted or removed whenever <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> is changed. For other menus, <code>&amp;Open</code> has no effect if <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> is 0.</p>
<p>Each standard item has an internal menu item ID corresponding to the function it performs, but can otherwise be modified or deleted like any other menu item. AddStandard detects existing items by ID, not by name. If the <a href="#Add">Add</a> method is used to change the callback function associated with a standard menu item, it is assigned a new unique ID and is no longer considered to be a standard item.</p>
<p>Adding the <code>&amp;Open</code> item to the tray menu causes it to become the default item if there wasn't one already.</p>
</div>

<div class="methodShort" id="Check">
<h3>Check</h3>
<p>Adds a visible checkmark in the menu next to a menu item (if there isn't one already).</p>
<pre class="Syntax">MyMenu.<span class="func">Check</span>(MenuItemName)</pre>
<h4 id="Check_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>Deletes one or all menu items.</p>
<pre class="Syntax">MyMenu.<span class="func">Delete</span>(<span class="optional">MenuItemName</span>)</pre>
<h4 id="Delete_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If omitted, all menu items are deleted from the menu, leaving the menu empty. Otherwise, specify the name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
<h4 id="Delete_Remarks">Remarks</h4>
<p>An empty menu still exists and thus any other menus that use it as a submenu will retain those submenus.</p>
<p>To delete a separator line, identify it by its position in the menu. For example, use <code>MyMenu.Delete("3&amp;")</code> if there are two items preceding the separator.</p>
<p>If the <em>default</em> menu item is deleted, the effect will be similar to having set <code>MyMenu.Default := ""</code>.</p>
</div>

<div class="methodShort" id="Disable">
<h3>Disable</h3>
<p>Grays out a menu item to indicate that the user cannot select it.</p>
<pre class="Syntax">MyMenu.<span class="func">Disable</span>(MenuItemName)</pre>
<h4 id="Disable_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Enable">
<h3>Enable</h3>
<p>Allows the user to once again select a menu item if it was previously disabled (grayed out).</p>
<pre class="Syntax">MyMenu.<span class="func">Enable</span>(MenuItemName)</pre>
<h4 id="Enable_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Insert">
<h3>Insert</h3>
<p>Inserts a new item before the specified item.</p>
<pre class="Syntax">MyMenu.<span class="func">Insert</span>(<span class="optional">MenuItemName, ItemToInsert, CallbackOrSubmenu, Options</span>)</pre>
<h4 id="Insert_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, <em>ItemToInsert</em> will be added at the bottom of the menu. Otherwise, specify the name or position of an existing custom menu item before which <em>ItemToInsert</em> should be inserted. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
  <dt>ItemToInsert</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name of a new menu item to insert before <em>MenuItemName</em>. Unlike the <a href="#Add">Add</a> method, a new item is always created, even if <em>ItemToInsert</em> matches the name of an existing item.</p>
  </dd>
  <dt>CallbackOrSubmenu</dt>
  <dd>
    <p>See the Add method's <a href="#CallbackOrSubmenu">CallbackOrSubmenu parameter</a>.</p>
  </dd>
  <dt>Options</dt>
  <dd>
    <p>See the Add method's <a href="#Options">Options parameter</a>.</p>
  </dd>
</dl>
<h4 id="Insert_Remarks">Remarks</h4>
<p>To insert a menu separator line before an existing custom menu item, omit all parameters except <em>MenuItemName</em>. To add a menu separator line at the bottom of the menu, omit all parameters.</p>
</div>

<div class="methodShort" id="Rename">
<h3>Rename</h3>
<p>Renames a menu item.</p>
<pre class="Syntax">MyMenu.<span class="func">Rename</span>(MenuItemName <span class="optional">, NewName</span>)</pre>
<h4 id="Rename_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
  <dt>NewName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, <em>MenuItemName</em> will be converted into a separator line. Otherwise, specify the new name.</p>
  </dd>
</dl>
<h4 id="Rename_Remarks">Remarks</h4>
<p>The menu item's current callback or submenu is unchanged.</p>
<p>A separator line can be converted to a normal item by specifying the position of the separator such as <code>"1&"</code> for <em>MenuItemName</em> and a non-blank name for <em>NewName</em>, and then using the <a href="#Add">Add</a> method to give the item a callback or submenu.</p>
</div>

<div class="methodShort" id="SetColor">
<h3>SetColor</h3>
<p>Changes the background color of the menu.</p>
<pre class="Syntax">MyMenu.<span class="func">SetColor</span>(<span class="optional">ColorValue, ApplyToSubmenus</span>)</pre>
<h4 id="SetColor_Parameters">Parameters</h4>

<dl>
  <dt>ColorValue</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If blank or omitted, it defaults to the word Default, which restores the default color of the menu. Otherwise, specify one of the 16 primary <a href="../misc/Colors.htm">HTML color names</a>, a hexadecimal RGB color string (the 0x prefix is optional), or a pure numeric RGB color value. Example values: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p>
  </dd>
  <dt>ApplyToSubmenus</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>If omitted, it defaults to true.</p>
    <p>If <strong>true</strong>, the color will be applied to all of the menu's submenus.</p>
    <p>If <strong>false</strong>, the color will be applied to the menu only.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="SetIcon">
<h3>SetIcon</h3>
<p>Sets the icon to be displayed next to a menu item.</p>
<pre class="Syntax">MyMenu.<span class="func">SetIcon</span>(MenuItemName, FileName <span class="optional">, IconNumber, IconWidth</span>)</pre>
<h4 id="SetIcon_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
  <dt>FileName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The path to an icon or image file, or a <a href="../misc/ImageHandles.htm">bitmap or icon handle</a> such as <code>"HICON:" handle</code>. For a list of supported formats, see <a href="GuiControls.htm#IconSupport">the Picture control</a>.</p>
    <p>Specify an empty string or <code>"*"</code> to remove the item's current icon.</p>
  </dd>
  <dt>IconNumber</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to 1 (the first icon group). Otherwise, specify the number of the icon group to be used in the file. For example, <code>MyMenu.SetIcon(MenuItemName, "Shell32.dll", 2)</code> would use the default icon from the second icon group. If negative, its absolute value is assumed to be the resource ID of an icon within an executable file.</p>
  </dd>
  <dt>IconWidth</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to the width of a small icon recommended by the OS (usually 16 pixels). If 0, the original width is used. Otherwise, specify the desired width of the icon, in pixels. If the icon group indicated by <em>IconNumber</em> contains multiple icon sizes, the closest match is used and the icon is scaled to the specified size.</p>
  </dd>
</dl>
<h4 id="SetIcon_Remarks">Remarks</h4>
<p>Currently it is necessary to specify the "actual size" when setting the icon to preserve transparency, e.g.
<code>MyMenu.SetIcon(MenuItemName, "Filename.png",, 0)</code>.</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>Displays the menu.</p>
<pre class="Syntax">MyMenu.<span class="func">Show</span>(<span class="optional">X, Y</span>)</pre>
<h4 id="Show_Parameters">Parameters</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, the menu will be shown near the mouse cursor. Otherwise, specify the X and Y coordinates at which to display the upper left corner of the menu. The coordinates are relative to the active window's client area unless overridden by using <a href="CoordMode.htm">CoordMode</a> or <a href="../Variables.htm#CoordMode">A_CoordModeMenu</a>.</p>
  </dd>
</dl>
<h4 id="Show_Remarks">Remarks</h4>
<p>Displaying the menu allows the user to select an item with arrow keys, menu shortcuts (underlined letters), or the mouse.</p>
<p>Any popup menu can be shown, including submenus and the tray menu. However, an exception is thrown if <em>MyMenu</em> is a MenuBar object.</p>
</div>

<div class="methodShort" id="ToggleCheck">
<h3>ToggleCheck</h3>
<p>Adds a checkmark if there wasn't one; otherwise, removes it.</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleCheck</span>(MenuItemName)</pre>
<h4 id="ToggleCheck_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="ToggleEnable">
<h3>ToggleEnable</h3>
<p>Disables a menu item if it was previously enabled; otherwise, enables it.</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleEnable</span>(MenuItemName)</pre>
<h4 id="ToggleEnable_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Uncheck">
<h3>Uncheck</h3>
<p>Removes the checkmark (if there is one) from a menu item.</p>
<pre class="Syntax">MyMenu.<span class="func">Uncheck</span>(MenuItemName)</pre>
<h4 id="Uncheck_Parameters">Parameters</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
</dl>
</div>

<h2 id="Properties">Properties</h2>
<div class="methodShort" id="ClickCount">
<h3>ClickCount</h3>
<p>Retrieves or sets how many times the <a href="../Program.htm#tray-icon">tray icon</a> must be clicked to select its default menu item.</p>
<pre class="Syntax">CurrentCount := MyMenu.<span class="func">ClickCount</span></pre>
<pre class="Syntax">MyMenu.<span class="func">ClickCount</span> := NewCount</pre>
<p><em>CurrentCount</em> is <em>NewCount</em> if assigned, otherwise 2 by default.</p>
<p><em>NewCount</em> can be 1 to allow a single-click to select the tray menu's default menu item, or 2 to return to the default behavior (double-click). Any other value is invalid and throws an exception.</p>
</div>

<div class="methodShort" id="Default">
<h3>Default</h3>
<p>Retrieves or sets the default menu item.</p>
<pre class="Syntax">CurrentDefault := MyMenu.<span class="func">Default</span></pre>
<pre class="Syntax">MyMenu.<span class="func">Default</span> := MenuItemName</pre>
<p><em>CurrentDefault</em> is the name of the default menu item, or an empty string if there is no default.</p>
<p><em>MenuItemName</em> is the name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>. If <em>MenuItemName</em> is an empty string, there will be no default.</p>
<p>Setting the default item makes that item's font bold (setting a default item in menus other than the tray menu is currently purely cosmetic). When the user double-clicks the <a href="../Program.htm#tray-icon">tray icon</a>, its default menu item is selected (even if the item is disabled). If there is no default, double-clicking has no effect.</p>
<p>The default item for the tray menu is initially <code>&amp;Open</code>, if present. Adding <code>&amp;Open</code> to the tray menu by calling <a href="#AddStandard">AddStandard</a> or changing <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> also causes it to become the default item if there wasn't one already.</p>
<p>If the default item is deleted, the menu is left without one.</p>
</div>

<div class="methodShort" id="Handle">
<h3>Handle</h3>
<p>Returns a handle to a <a href="#Win32_Menus">Win32 menu</a> (a handle of type <code>HMENU</code>), constructing it if necessary.</p>
<pre class="Syntax">Handle := MyMenu.<span class="func">Handle</span></pre>
<p>The returned handle is valid only until the Win32 menu is destroyed, which typically occurs when the Menu object is freed. Once the menu is destroyed, the operating system may reassign the handle value to any menus subsequently created by the script or any other program.</p>
</div>

<h2 id="MenuItemName">MenuItemName</h2>
<p>The name or position of a menu item. Some common rules apply to this parameter across all methods which use it:</p>
<p>To underline one of the letters in a menu item's name, precede that letter with an ampersand (&amp;). When the menu is displayed, such an item can be selected by pressing the corresponding key on the keyboard. To display a literal ampersand, specify two consecutive ampersands as in this example: <code>"Save &amp;&amp; Exit"</code></p>
<p>When referring to an existing menu item, the name is not case-sensitive but any ampersands must be included. For example: <code>"&amp;Open"</code></p>
<p>The names of menu items can be up to 260 characters long.</p>
<p>To identify an existing item by its position in the menu, write the item's position followed by an ampersand. For example, <code>"1&amp;"</code> indicates the first item.</p>

<h2 id="Win32_Menus">Win32 Menus</h2>
<p>Windows provides a <a href="https://learn.microsoft.com/windows/win32/menurc/menus">set of functions and notifications</a> for creating, modifying and displaying menus with standard appearance and behavior. We refer to a menu created by one of these functions as a <em>Win32 menu</em>.</p>
<p>As items are added to a menu or modified, the name and other properties of each item are stored in the Menu object. A Win32 menu is constructed the first time the menu or its parent menu is attached to a GUI or shown. It is destroyed automatically when the menu object is deleted (which occurs when its reference count reaches zero).</p>
<p><a href="#Handle">Menu.Handle</a> returns a handle to a Win32 menu (a handle of type <code>HMENU</code>), constructing it if necessary.</p>
<p>Any modifications which are made to the menu directly by Win32 functions are not reflected by the script's Menu object, so may be lost if an item is modified by one of the built-in methods.</p>
<p>Each menu item is assigned an ID when it is first added to the menu. Scripts cannot rely on an item receiving a particular ID, but can retrieve the ID of an item by using GetMenuItemID as shown in <a href="#ExDllCall">example #5</a>. This ID cannot be used with the Menu object, but can be used with various <a href="https://learn.microsoft.com/windows/win32/menurc/menus">Win32 functions</a>.</p>

<h2 id="Remarks">Remarks</h2>
<p>A menu usually looks like this:</p>
<img src="../static/ctrl_menu.png" alt="Menu" style="border: 1px solid silver;" />
<p>If a menu ever becomes completely empty -- such as by using <code>MyMenu.Delete()</code> -- it cannot be shown. If the tray menu becomes empty, right-clicking and double-clicking the <a href="../Program.htm#tray-icon">tray icon</a> will have no effect (in such cases it is usually better to use <a href="_NoTrayIcon.htm">#NoTrayIcon</a>).</p>
<p>If a menu item's callback is already running and the user selects the same menu item again, a new <a href="../misc/Threads.htm">thread</a> will be created to run that same callback, interrupting the previous thread. To instead buffer such events until later, use <a href="Critical.htm">Critical</a> as the callback's first line (however, this will also buffer/defer other threads such as the press of a hotkey).</p>
<p>Whenever a function is called via a menu item, it starts off fresh with the default values for settings such as <a href="SendMode.htm">SendMode</a>. These defaults can be changed during <a href="../Scripts.htm#auto">script startup</a>.</p>
<p>When building a menu whose contents are not always the same, one approach is to point all such menu items to the same function and have that function refer to its <a href="#CallbackOrSubmenu">parameters</a> to determine what action to take. Alternatively, a <a href="../misc/Functor.htm">function object</a>, <a href="../Functions.htm#closures">closure</a> or <a href="../Variables.htm#fat-arrow">fat arrow function</a> can be used to bind one or more values or variables to the menu item's callback function.</p>

<h2 id="Related">Related</h2>
<p><a href="Gui.htm">GUI</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="_NoTrayIcon.htm">#NoTrayIcon</a>, <a href="../Functions.htm">Functions</a>, <a href="Return.htm">Return</a>, <a href="SetTimer.htm">SetTimer</a></p>

<h2 id="Examples">Examples</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Adds a new menu item to the bottom of the <a href="../Program.htm#tray-icon">tray icon</a> menu.</p>
<pre>A_TrayMenu.Add()  <em>; Creates a separator line.</em>
A_TrayMenu.Add("Item1", MenuHandler)  <em>; Creates a new menu item.</em>
Persistent

MenuHandler(ItemName, ItemPos, MyMenu) {
    MsgBox "You selected " ItemName " (position " ItemPos ")"
}</pre>
</div>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> Creates a popup menu that is displayed when the user presses a hotkey.</p>
<pre><em>; Create the popup menu by adding some items to it.</em>
MyMenu := Menu()
MyMenu.Add("Item 1", MenuHandler)
MyMenu.Add("Item 2", MenuHandler)
MyMenu.Add()  <em>; Add a separator line.</em>

<em>; Create another menu destined to become a submenu of the above menu.</em>
Submenu1 := Menu()
Submenu1.Add("Item A", MenuHandler)
Submenu1.Add("Item B", MenuHandler)

<em>; Create a submenu in the first menu (a right-arrow indicator). When the user selects it, the second menu is displayed.</em>
MyMenu.Add("My Submenu", Submenu1)

MyMenu.Add()  <em>; Add a separator line below the submenu.</em>
MyMenu.Add("Item 3", MenuHandler)  <em>; Add another menu item beneath the submenu.</em>

MenuHandler(Item, *) {
    MsgBox("You selected " Item)
}

#z::MyMenu.Show()  <em>; i.e. press the Win-Z hotkey to show the menu.</em></pre>
</div>

<div class="ex" id="ExTray">
<p><a class="ex_number" href="#ExTray"></a> Demonstrates some of the various menu object members.</p>
<pre>#SingleInstance
Persistent
Tray := A_TrayMenu <em>; For convenience.</em>
Tray.Delete() <em>; Delete the standard items.</em>
Tray.Add() <em>; separator</em>
Tray.Add("TestToggleCheck", TestToggleCheck)
Tray.Add("TestToggleEnable", TestToggleEnable)
Tray.Add("TestDefault", TestDefault)
Tray.Add("TestAddStandard", TestAddStandard)
Tray.Add("TestDelete", TestDelete)
Tray.Add("TestDeleteAll", TestDeleteAll)
Tray.Add("TestRename", TestRename)
Tray.Add("Test", Test)

<em>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</em>

TestToggleCheck(*)
{
    Tray.ToggleCheck("TestToggleCheck")
    Tray.Enable("TestToggleEnable") <em>; Also enables the next test since it can't undo the disabling of itself.</em>
    Tray.Add("TestDelete", TestDelete) <em>; Similar to above.</em>
}

TestToggleEnable(*)
{
    Tray.ToggleEnable("TestToggleEnable")
}

TestDefault(*)
{
    if Tray.Default = "TestDefault"
        Tray.Default := ""
    else
        Tray.Default := "TestDefault"
}

TestAddStandard(*)
{
    Tray.AddStandard()
}

TestDelete(*)
{
    Tray.Delete("TestDelete")
}

TestDeleteAll(*)
{
    Tray.Delete()
}

TestRename(*)
{
    static OldName := "", NewName := ""
    if NewName != "renamed"
    {
        OldName := "TestRename"
        NewName := "renamed"
    }
    else
    {
        OldName := "renamed"
        NewName := "TestRename"
    }
    Tray.Rename(OldName, NewName)
}

Test(Item, *)
{
    MsgBox("You selected " Item)
}</pre>
</div>

<div class="ex" id="ExIcon">
<p><a class="ex_number" href="#ExIcon"></a> Demonstrates how to add icons to menu items.</p>
<pre>FileMenu := Menu()
FileMenu.Add("Script Icon", MenuHandler)
FileMenu.Add("Suspend Icon", MenuHandler)
FileMenu.Add("Pause Icon", MenuHandler)
FileMenu.SetIcon("Script Icon", A_AhkPath, 2) <em>; 2nd icon group from the file</em>
FileMenu.SetIcon("Suspend Icon", A_AhkPath, -206) <em>; icon with resource ID 206</em>
FileMenu.SetIcon("Pause Icon", A_AhkPath, -207) <em>; icon with resource ID 207</em>
MyMenuBar := MenuBar()
MyMenuBar.Add("&amp;File", FileMenu)
MyGui := Gui()
MyGui.MenuBar := MyMenuBar
MyGui.Add("Button",, "Exit This Example").OnEvent("Click", (*) =&gt; WinClose())
MyGui.Show()

MenuHandler(*) {
    <em>; For this example, the menu items don't do anything.</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> Reports the number of items in a menu and the ID of the last item.</p>
<pre>
MyMenu := Menu()
MyMenu.Add("Item 1", NoAction)
MyMenu.Add("Item 2", NoAction)
MyMenu.Add("Item B", NoAction)

<em>; Retrieve the number of items in a menu.</em>
item_count := DllCall("GetMenuItemCount", "ptr", MyMenu.Handle)

<em>; Retrieve the ID of the last item.</em>
last_id := DllCall("GetMenuItemID", "ptr", MyMenu.Handle, "int", item_count-1)

MsgBox("MyMenu has " item_count " items, and its last item has ID " last_id)

NoAction(*) {
    <em>; Do nothing.</em>
}
</pre>
</div>

</body>
</html>
