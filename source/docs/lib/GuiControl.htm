<!DOCTYPE HTML>
<html lang="en">
<head>
<title>GuiControl Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="The GuiControl object provides an interface for modifying GUI controls and retrieving information about them." />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControl Object</h1>
<pre class="NoIndent">class Gui.Control extends Object</pre>

<p>Provides an interface for modifying GUI controls and retrieving information about them. <a href="Gui.htm#Add">Gui.Add</a>, <a href="Gui.htm#__Item">Gui.__Item</a> and <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a> return an object of this type.</p>

<p>"GuiCtrl" is used below as a placeholder for instances of the <code>Gui.Control</code> class.</p>
<p><code>Gui.Control</code> serves as the base class for all GUI controls, but each type of control has its own class. Some of the following methods are defined by the prototype of the appropriate class, or the <code>Gui.List</code> base class. See <a href="../ObjList.htm">Built-in Classes</a> for a full list.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, GuiControl objects may have the following predefined methods and properties.</p>

<h2 id="toc">Table of Contents</h2>
<ul class="indent">
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Add">Add</a>: Appends items to a multi-item control.</li>
      <li><a href="#Choose">Choose</a>: Selects an item in a multi-item control.</li>
      <li><a href="#Delete">Delete</a>: Deletes one or all items from a multi-item control.</li>
      <li><a href="#Focus">Focus</a>: Sets keyboard focus to the control.</li>
      <li><a href="#GetPos">GetPos</a>: Retrieves the position and size of the control.</li>
      <li><a href="#Move">Move</a>: Moves and/or resizes the control.</li>
      <li><a href="#OnCommand">OnCommand</a>: Registers a function or method to be called on WM_COMMAND.</li>
      <li><a href="#OnEvent">OnEvent</a>: Registers a function or method to be called when the given event is raised.</li>
      <li><a href="#OnNotify">OnNotify</a>: Registers a function or method to be called on WM_NOTIFY.</li>
      <li><a href="#Opt">Opt</a>: Sets various options and styles for the appearance and behavior of the control.</li>
      <li><a href="#Redraw">Redraw</a>: Redraws the region of the GUI window occupied by the control.</li>
      <li><a href="#SetFont">SetFont</a>: Sets the font typeface, size, style, and/or color for the control.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#ClassNN">ClassNN</a>: Retrieves the class name and sequence number (ClassNN) of the control.</li>
      <li><a href="#Enabled">Enabled</a>: Retrieves or sets the interaction state of the control.</li>
      <li><a href="#Focused">Focused</a>: Retrieves the focus state of the control.</li>
      <li><a href="#Gui">Gui</a>: Retrieves the <a href="Gui.htm">Gui object</a> of the control's parent window.</li>
      <li><a href="#Hwnd">Hwnd</a>: Retrieves the window handle (HWND) of the control.</li>
      <li><a href="#Name">Name</a>: Retrieves or sets the explicit name of the control.</li>
      <li><a href="#Text">Text</a>: Retrieves or sets the text/caption of the control.</li>
      <li><a href="#Type">Type</a>: Retrieves the type of the control.</li>
      <li><a href="#Value">Value</a>: Retrieves or sets the contents of a value-capable control.</li>
      <li><a href="#Visible">Visible</a>: Retrieves or sets the visibility state of the control.</li>
    </ul>
  </li>
  <li><a href="#GenRemarks">General Remarks</a>:
    <ul>
      <li><a href="#redraw-remarks">Redraw</a>: Performance-related remarks about redraw behaviour of controls.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">Methods</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Appends items to a multi-item control (ListBox, DropDownList, ComboBox, or Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Add</span>(Items)</pre>
<h4 id="Add_Parameters">Parameters</h4>
<dl>
  <dt>Items</dt><dd>
    <p>Type: <a href="Array.htm">Array</a></p>
    <p>An array of strings to be inserted as items at the end of the control's list, e.g. <code>["Red", "Green", "Blue"]</code>.</p>
  </dd>
</dl>
<h4 id="Add_Remarks">Remarks</h4>
<p>To replace (overwrite) the list instead, use the <a href="#Delete">Delete method</a> beforehand. To select an item, use the <a href="#Choose">Choose method</a>.</p>
<h4 id="Add_Related">Related</h4>
<p><a href="ListView.htm#Add">ListView.Add</a>, <a href="TreeView.htm#Add">TreeView.Add</a></p>
</div>

<div class="methodShort" id="Choose">
<h3>Choose</h3>
<p>Selects an item in a multi-item control (ListBox, DropDownList, ComboBox, or Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Choose</span>(Value)</pre>
<h4 id="Choose_Parameters">Parameters</h4>
<dl>
  <dt>Value</dt><dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a> or <a href="../Concepts.htm#strings">String</a></p>
    <p>Specify 1 for the first item, 2 for the second, etc.</p>
    <p>If <em>Value</em> is a string (even a numeric string), the item whose leading name part matches <em>Value</em> will be selected. The search is not case-sensitive. For example, if the control contains the item "UNIX Text", specifying the word unix (lowercase) would be enough to select it. For a <a href="GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, all matching items are selected.</p>
    <p>If <em>Value</em> is zero or empty, the current selection is removed.</p></dd>
</dl>
<h4 id="Choose_Remarks">Remarks</h4>
<p>To select or deselect <u>all</u> items in a <a href="GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, follow this example:</p>
<pre>PostMessage 0x0185, 1, -1, ListBox  <em>; Select all items. 0x0185 is LB_SETSEL.</em>
PostMessage 0x0185, 0, -1, ListBox  <em>; Deselect all items.</em>
ListBox.Choose(0)  <em>; Deselect all items.</em></pre>
<p>Unlike <a href="ControlChooseIndex.htm">ControlChooseIndex</a>, this method does not raise a <a href="GuiOnEvent.htm#Change">Change</a> or <a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a> event.</p>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>Deletes one or all items from a multi-item control (ListBox, DropDownList, ComboBox, or Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Delete</span>(<span class="optional">Value</span>)</pre>
<h4 id="Delete_Parameters">Parameters</h4>
<dl>
  <dt>Value</dt><dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, all items will be deleted. Otherwise, specify 1 for the first item, 2 for the second, etc.</p>
  </dd>
</dl>
<h4 id="Delete_Remarks">Remarks</h4>
<p>For Tab controls, a tab's sub-controls stay associated with their original tab number; that is, they are never associated with their tab's actual display-name. For this reason, renaming or removing a tab will not change the tab number to which the sub-controls belong. For example, if there are three tabs <code>["Red", "Green", "Blue"]</code> and the second tab is removed by means of <code>MyTab.Delete(2)</code>, the sub-controls originally associated with Green will now be associated with Blue. Because of this behavior, only tabs at the end should generally be removed. Tabs that are removed in this way can be added back later, at which time they will reclaim their original set of controls.</p>
<h4 id="Delete_Related">Related</h4>
<p><a href="ListView.htm#Delete">ListView.Delete</a>, <a href="TreeView.htm#Delete">TreeView.Delete</a></p>
</div>

<div class="methodShort" id="Focus">
<h3>Focus</h3>
<p>Sets keyboard focus to the control.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Focus</span>()</pre>
<p>To be effective, the window generally must not be minimized or hidden.</p>
<p>To retrieve the focus state of the control, use the <a href="#Focused">Focused property</a>.</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>Retrieves the position and size of the control.</p>
<pre class="Syntax">GuiCtrl.<span class="func">GetPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<h4 id="GetPos_Parameters">Parameters</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates (in pixels) of the control's upper left corner. These coordinates are relative to the upper-left corner of the window's client area, which is the area not including title bar, menu bar, and borders.</p>
  </dd>
  <dt>&amp;Width, &amp;Height</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the control's width and height (in pixels).</p>
  </dd>
</dl>
<h4 id="GetPos_Remarks">Remarks</h4>
<p>Unlike <a href="ControlGetPos.htm">ControlGetPos</a>, this method applies <a href="Gui.htm#DPIScale">DPI scaling</a> to the returned coordinates (unless the <code>-DPIScale</code> option was used).</p>
<h4 id="GetPos_Examples">Examples</h4>
<pre>MyEdit.GetPos(&amp;x, &amp;y, &amp;w, &amp;h)
MsgBox "The X coordinate is " x ". The Y coordinate is " y ". The width is " w ". The height is " h "."
</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>Moves and/or resizes the control.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<h4 id="Move_Parameters">Parameters</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If either is omitted, the control's position in that dimension will not be changed. Otherwise, specify the X and Y coordinates (in pixels) of the upper left corner of the control's new location. The coordinates are relative to the upper-left corner of the window's client area, which is the area not including title bar, menu bar, and borders.</p>
  </dd>
  <dt>Width, Height</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If either is omitted, the control's size in that dimension will not be changed. Otherwise, specify the new width and height of the control (in pixels).</p>
  </dd>
</dl>
<h4 id="Move_Remarks">Remarks</h4>
<p>Unlike <a href="ControlMove.htm">ControlMove</a>, this method applies <a href="Gui.htm#DPIScale">DPI scaling</a> to the coordinates (unless the <code>-DPIScale</code> option was used).</p>
<h4 id="Move_Examples">Examples</h4>
<pre>MyEdit.Move(10, 20, 200, 100)
MyEdit.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)</pre>
</div>

<div class="methodShort" id="OnCommand">
<h3>OnCommand</h3>
<p>Registers a function or method to be called when a control notification is received via the <a href="GuiOnCommand.htm#WM_COMMAND">WM_COMMAND</a> message.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnCommand</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>See <a href="GuiOnCommand.htm">OnCommand</a> for details.</p>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>Registers a function or method to be called when the given <a href="GuiOnEvent.htm#Control_Events">event</a> is raised.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>See <a href="GuiOnEvent.htm">OnEvent</a> for details.</p>
</div>

<div class="methodShort" id="OnNotify">
<h3>OnNotify</h3>
<p>Registers a function or method to be called when a control notification is received via the <a href="GuiOnNotify.htm#WM_NOTIFY">WM_NOTIFY</a> message.</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnNotify</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>See <a href="GuiOnNotify.htm">OnNotify</a> for details.</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>Sets various options and styles for the appearance and behavior of the control.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Opt</span>(Options)</pre>
<h4 id="Opt_Parameters">Parameters</h4>
<dl>
  <dt>Options</dt><dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>Specify one or more <a href="GuiControls.htm">control-specific</a> or <a href="Gui.htm#OtherOptions">general</a> options and styles, each separated from the next with one or more spaces or tabs.</p>
  </dd>
</dl>
<h4 id="Opt_Remarks">Remarks</h4>
<p>In the following example, the control is <a href="Gui.htm#Disabled">disabled</a> and its <a href="Gui.htm#Background">background</a> is restored to the system default:</p>
<pre>MyEdit.Opt("+Disabled -Background")</pre>
<p>In the next example, the OK button is made the new default button:</p>
<pre>OKButton.Opt("+Default")</pre>
<p>Although <a href="../misc/Styles.htm">styles</a> and extended styles are also recognized, some of them cannot be applied or removed after a control has been created. Even if a change is successfully applied, the control might choose to ignore it.</p>
</div>

<div class="methodShort" id="Redraw">
<h3>Redraw</h3>
<p>Redraws the region of the GUI window occupied by the control.</p>
<pre class="Syntax">GuiCtrl.<span class="func">Redraw</span>()</pre>
<p>Although this may cause an unwanted flickering effect when called repeatedly and rapidly, it solves display artifacts for certain control types such as <a href="GuiControls.htm#GroupBox">GroupBoxes</a>.</p>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>Sets the font typeface, size, style, and/or color for the control.</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<p>Omit both parameters to set the font to the GUI's current font, as set by <a href="Gui.htm#SetFont">Gui.SetFont</a>. Otherwise, any font attributes which are not specified will be copied from the control's previous font. Text color is changed only if specified in <em>Options</em>.</p>
<p>For details about both parameters, see <a href="Gui.htm#SetFont">Gui.SetFont</a>.</p>
</div>

<h2 id="Properties">Properties</h2>
<div class="methodShort" id="ClassNN">
<h3>ClassNN</h3>
<p>Retrieves the class name and sequence number (ClassNN) of the control.</p>
<pre class="Syntax">ClassNN := GuiCtrl.<span class="func">ClassNN</span></pre>
<p>A control's ClassNN is the name of its window class followed by its sequence number within the top-level window which contains it. For example, "Edit1" is the first Edit control on a window and "Button12" is the twelth button.</p>
<p>Related: <a href="ControlGetClassNN.htm">ControlGetClassNN</a></p>
</div>

<div class="methodShort" id="Enabled">
<h3>Enabled</h3>
<p>Retrieves or sets the interaction state of the control.</p>
<pre class="Syntax">CurrentSetting := GuiCtrl.<span class="func">Enabled</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Enabled</span> := NewSetting</pre>
<p><em>CurrentSetting</em> is <em>NewSetting</em> if assigned, otherwise 1 (true) by default unless overwritten by the <a href="Gui.htm#Disabled">Disabled option</a>.</p>
<p><em>NewSetting</em> is a <a href="../Concepts.htm#boolean">boolean value</a> that enables or disables this setting. If true, the control is enabled. If false, the control is disabled.</p>
<p>For Tab controls, this will also enable or disable all of the tab's sub-controls. However, any sub-control explicitly disabled via <code>GuiCtrl.Enabled := false</code> will remember that setting and thus remain disabled even after its Tab control is re-enabled.</p>
</div>

<div class="methodShort" id="Focused">
<h3>Focused</h3>
<p>Retrieves the focus state of the control.</p>
<pre class="Syntax">IsFocused := GuiCtrl.<span class="func">Focused</span></pre>
<p><em>IsFocused</em> is 1 (true) if the control has the keyboard focus, otherwise 0 (false).</p>
<p>To be effective, the window generally must not be minimized or hidden.</p>
<p>To focus the control, use the <a href="#Focus">Focus method</a>.</p>
</div>

<div class="methodShort" id="Gui">
<h3>Gui</h3>
<p>Retrieves the <a href="Gui.htm">Gui object</a> of the control's parent window.</p>
<pre class="Syntax">GuiObj := GuiCtrl.<span class="func">Gui</span></pre>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>Retrieves the window handle (HWND) of the control.</p>
<pre class="Syntax">Hwnd := GuiCtrl.<span class="func">Hwnd</span></pre>
<p>A control's HWND is often used with <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, and <a href="DllCall.htm">DllCall</a>. It can also be used directly in a <a href="Control.htm#Parameter">Control parameter</a>.</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>Retrieves or sets the explicit name of the control.</p>
<pre class="Syntax">CurrentName := GuiCtrl.<span class="func">Name</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Name</span> := NewName</pre>
<p><em>CurrentName</em> is <em>NewName</em> if assigned, otherwise an empty string by default unless overwritten by the <a href="Gui.htm#var">V option</a>.</p>
<p><em>NewName</em> is the control's new name, which can be used with <a href="Gui.htm#__Item">Gui.__Item</a> to retrieve the GuiControl object. For most input-capable controls, the name is also used by <a href="Gui.htm#Submit">Gui.Submit</a>.</p>
</div>

<div class="methodShort" id="Text">
<h3>Text</h3>
<p>Retrieves or sets the text/caption of the control.</p>
<pre class="Syntax">CurrentText := GuiCtrl.<span class="func">Text</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Text</span> := NewText</pre>
<p>Note: If the control has no visible caption text and no (single) text value, this property corresponds to the control's hidden caption text (like <a href="ControlGetText.htm">ControlGetText</a>/<a href="ControlSetText.htm">ControlSetText</a>).</p>
<p><em>CurrentText</em> and <em>NewText</em> depend on the <a href="GuiControls.htm">control type</a>:</p>

<p><strong>Button / CheckBox / Edit / GroupBox / Link / Radio / Text</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the caption/display text of the <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#CheckBox">CheckBox</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Radio">Radio</a> or <a href="GuiControls.htm#Text">Text</a> control. Since the control will not expand automatically, use <code>GuiCtrl.<a href="#Move">Move</a>(,, 300)</code> or similar if the control needs to be widened.</p>

<p><strong>DateTime</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the formatted text displayed by the <a href="GuiControls.htm#DateTime">DateTime</a> control. Assigning a formatted date/time string to the control is not supported. To change the date/time being displayed, assign the <a href="#Value">Value property</a> a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format.</p>

<p><strong>DropDownList, ComboBox, ListBox, Tab</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the text of the currently selected item/tab of the <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a> or <a href="GuiControls.htm#Tab">Tab</a> control.</p>
<p><em>NewText</em> should be the full text (case-insensitive) of the item/tab to select.</p>
<p>For a ComboBox, if there is no selected item, the text in the control's edit field is retrieved instead. For other controls, <em>CurrentText</em> is empty/blank. Similarly, if <em>NewText</em> is empty/blank, the current item/tab will be deselected.</p>
<p>For a <a href="GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, <em>CurrentText</em> is an array. <em>NewText</em> cannot be an array, but if multiple items match, they are all selected. To select multiple items with different text, call the <a href="#Choose">Choose method</a> repeatedly.</p>
<p>To select an item by its position number instead of its text, use the <a href="#Value">Value property</a>.</p>

<p><strong>Edit</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the text of the <a href="GuiControls.htm#Edit">Edit</a> control. As with other controls, the text is retrieved or set as-is; no end-of-line translation is performed. To retrieve or set the text of a multi-line Edit control while also translating between <code>`r`n</code> and <code>`n</code>, use the <a href="#Value">Value property</a>.</p>

<p><strong>StatusBar</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the text of the <a href="GuiControls.htm#StatusBar">StatusBar</a> control's first part only (use <a href="GuiControls.htm#SB_SetText">SB.SetText</a> for greater flexibility).</p>
</div>

<div class="methodShort" id="Type">
<h3>Type</h3>
<p>Retrieves the type of the control.</p>
<pre class="Syntax">CurrentType := GuiCtrl.<span class="func">Type</span></pre>
<p>Depending on the <a href="GuiControls.htm">control type</a>, <var>CurrentType</var> is one of the following strings: ActiveX, Button, CheckBox, ComboBox, Custom, DateTime, DDL, Edit, GroupBox, Hotkey, Link, ListBox, ListView, MonthCal, Pic, Progress, Radio, Slider, StatusBar, Tab, Tab2, Tab3, Text, TreeView, UpDown.</p>
</div>

<div class="methodShort" id="Value">
<h3>Value</h3>
<p>Retrieves or sets the contents of a value-capable control.</p>
<pre class="Syntax">CurrentValue := GuiCtrl.<span class="func">Value</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Value</span> := NewValue</pre>
<p>Note: If the control is not value-capable, <em>CurrentValue</em> will be blank and assigning <em>NewValue</em> will raise an error. Invalid values throw an exception.</p>
<p><em>CurrentValue</em> and <em>NewValue</em> depend on the <a href="GuiControls.htm">control type</a>:</p>

<p><strong>ActiveX</strong></p>
<p><em>CurrentValue</em> is the ActiveX object of the <a href="GuiControls.htm#ActiveX">ActiveX</a> control. For example, if the control was created with the text <em>Shell.Explorer</em>, this is a <a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752043(v=vs.85)">WebBrowser</a> object. The same <a href="ComValue.htm">wrapper object</a> is returned each time.</p>
<p><em>NewValue</em> is invalid and throws an exception.</p>

<p><strong>CheckBox / Radio</strong></p>
<p><em>CurrentValue</em> is 1 if the <a href="GuiControls.htm#CheckBox">CheckBox</a> or <a href="GuiControls.htm#Radio">Radio</a> control is checked, 0 if it is unchecked, or -1 if it has a gray checkmark.</p>
<p><em>NewValue</em> can be 0 to uncheck the button, 1 to check it, or -1 to give it a gray checkmark. For Radio buttons,  if one is being checked (turned on) and it is a member of a multi-radio group, the other radio buttons in its group will be automatically unchecked.</p>
<p>To get or set control's text/caption instead, use the <a href="#Text">Text property</a>.</p>

<p><strong>ComboBox / DropDownList / ListBox / Tab</strong></p>
<p><em>CurrentValue</em> is the position number of the currently selected item/tab in the <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ListBox">ListBox</a> or <a href="GuiControls.htm#Tab">Tab</a> control. If none is selected, zero is returned. If text is entered into a ComboBox, the first item with matching text is used. If there is no matching item, the result is zero even if there is text in the control. For a <a href="GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, the result is an array of numbers (which is empty if no items are selected).</p>
<p><em>NewValue</em> is the position number of a single item/tab to select, or zero to clear the current selection (this is valid even for Tab controls). To select multiple items, call the <a href="#Choose">Choose method</a> repeatedly.</p>
<p>To get or set the selected item given its text instead of its position, use the <a href="#Text">Text property</a>.</p>

<p><strong>DateTime / MonthCal</strong></p>
<p><em>CurrentValue</em> is a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format currently selected in the <a href="GuiControls.htm#DateTime">DateTime</a> or <a href="GuiControls.htm#MonthCal">MonthCal</a> control.</p>
<p><em>NewValue</em> is a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format. Specify <code>A_Now</code> to use the current date and time (today). For DateTime controls, <em>NewValue</em> may be an empty string to cause the control to have no date/time selected (if it was created with <a href="GuiControls.htm#ChooseNone">that ability</a>). For MonthCal controls, a range may be specified if the control is <a href="GuiControls.htm#MonthCalMulti">multi-select</a>.</p>

<p><strong>Edit</strong></p>
<p><em>CurrentValue</em> is the current content of the <a href="GuiControls.htm#Edit">Edit</a> control. For multi-line controls, any line breaks in the text will be represented as plain linefeeds (`n) rather than the traditional CR+LF (`r`n) used by non-GUI functions such as <a href="ControlGetText.htm">ControlGetText</a> and <a href="ControlSetText.htm">ControlSetText</a>.</p>
<p><em>NewValue</em> is the new content. For multi-line controls, Any linefeeds (`n) in <em>NewValue</em> that lack a preceding carriage return (`r) are automatically translated to CR+LF (`r`n) to make them display properly. However, this is usually not a concern because when using <a href="Gui.htm#Submit">Gui.Submit</a> or when retrieving this value this translation will be reversed automatically by replacing CR+LF with LF (`n).</p>
<p>To retrieve or set the text without translating `n to or from `r`n, use the <a href="#Text">Text property</a>.</p>

<p><strong>Hotkey</strong></p>
<p><em>CurrentValue</em> is the modifiers and key name if there is a hotkey in the <a href="GuiControls.htm#Hotkey">Hotkey</a> control; otherwise blank. Examples: <code>^!C</code>, <code>^Home</code>, <code>+^NumpadHome</code>.</p>
<p><em>NewValue</em> can be a set of modifiers with a key name, or blank to clear the control. Examples: <code>^!c</code>, <code>^Numpad1</code>, <code>+Home</code>. The only modifiers supported are ^ (Control), ! (Alt), and + (Shift). See the <a href="../KeyList.htm">key list</a> for available key names.</p>

<p><strong>Picture</strong></p>
<p><em>CurrentValue</em> is the picture's file name as it was originally specified when the <a href="GuiControls.htm#Picture">Picture</a> control was created. This name does not change even if a new picture file name is specified.</p>
<p><em>NewValue</em> is the filename (or <a href="../misc/ImageHandles.htm">handle</a>) of the new image to load (see <a href="GuiControls.htm#Picture">Picture</a> for supported file types). Zero or more of the following options may be specified immediately in front of the filename: <code>*wN</code> (width N), <code>*hN</code> (height N), and <code>*IconN</code> (icon group number N in a DLL or EXE file).  In the following example, the default icon from the second icon group is loaded with a width of 100 and an automatic height via "keep aspect ratio": <code>MyPic.Value := "*icon2 *w100 *h-1 C:\My Application.exe"</code>. Specify <code>*w0 *h0</code> to use the image's actual width and height. If <code>*w</code> and <code>*h</code> are omitted, the image will be scaled to fit the current size of the control. When loading from a multi-icon .ICO file, specifying a width and height also determines which icon to load. Note: Use only one space or tab between the final option and the filename itself; any other spaces and tabs are treated as part of the filename.</p>

<p><strong>Progress / Slider / UpDown</strong></p>
<p><em>CurrentValue</em> is the current position of the <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Slider">Slider</a> or <a href="GuiControls.htm#UpDown">UpDown</a> control.</p>
<p><em>NewValue</em> is the new position of the control, for example <code>MySlider.Value := 10</code>. To adjust the value by a relative amount, use the operators <code>+=</code>, <code>-=</code>, <code>++</code> or <code>--</code> instead of <code>:=</code>. If the new position would be outside the range of the control, the control is generally set to the nearest valid value.</p>

<p><strong>Text</strong></p>
<p><em>CurrentValue</em> is the text/caption of the <a href="GuiControls.htm#Text">Text</a> control.</p>
<p><em>NewValue</em> is the control's new text. Since the control will not expand automatically, use <code>GuiCtrl.<a href="#Move">Move</a>(,, 300)</code> if the control needs to be widened.</p>
</div>

<div class="methodShort" id="Visible">
<h3>Visible</h3>
<p>Retrieves or sets the visibility state of the control.</p>
<pre class="Syntax">CurrentSetting := GuiCtrl.<span class="func">Visible</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Visible</span> := NewSetting</pre>
<p><em>CurrentSetting</em> is <em>NewSetting</em> if assigned, otherwise 1 (true) by default unless overwritten by the <a href="Gui.htm#Hidden">Hidden option</a>.</p>
<p><em>NewSetting</em> is a <a href="../Concepts.htm#boolean">boolean value</a> that enables or disables this setting. If true, the control is visible. If false, the control is hidden.</p>
<p>For Tab controls, this will also show or hide all of the tab's sub-controls. If you additionally want to prevent a control's shortcut key (underlined letter) from working, disable the control via <code>GuiCtrl.Enabled := false</code>.</p>
</div>

<h2 id="GenRemarks">General Remarks</h2>

<h3 id="redraw-remarks">Redraw</h3>
<p>When adding a large number of items to a control (such as a <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a> or <a href="GuiControls.htm#ListBox">ListBox</a>), performance can be improved by preventing the control from being redrawn while the changes are being made. This is done by using <code>GuiCtrl.Opt("-Redraw")</code> before adding the items and <code>GuiCtrl.Opt("+Redraw")</code> afterward. Changes to the control which have not yet become visible prior to disabling redraw will generally not become visible until after redraw is re-enabled.</p>
<p>For performance reasons, changes to a control's content generally do not cause the control to be immediately redrawn even if redraw is enabled. Instead, a portion of the control is "invalidated" and is usually repainted after a brief delay, when the program checks its internal message queue. The script can force this to take place immediately by calling <code>Sleep -1</code>.</p>

</body>
</html>
