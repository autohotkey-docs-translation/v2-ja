<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Error Object | AutoHotkey v2</title>
<meta name="description" content="Error objects thrown by built-in code when an error occurs." />
<meta name="ahk:equiv-v1" content="index.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Error Object</h1>
<pre class="NoIndent">class Error extends Object</pre>

<p>Error objects are <a href="Throw.htm">thrown</a> by built-in code when a runtime error occurs, and may also be thrown explicitly by the script.</p>

<h2 id="toc">Table of Contents</h2>
<ul>
  <li><a href="#Standard_Properties">Standard Properties</a></li>
  <li><a href="#new">Error()</a></li>
  <li><a href="#error-types">Error Types</a></li>
  <li><a href="#Related">Related</a></li>
</ul>

<h2 id="Standard_Properties">Standard Properties</h2>
<p id="Message"><strong>Message:</strong> An error message.</p>
<p id="What"><strong>What:</strong> What threw the exception. This is usually the name of a function, but is blank for exceptions thrown due to an error in an expression (such as using a math operator on a non-numeric value).</p>
<p id="Extra"><strong>Extra:</strong> A string value relating to the error, if available. If this value can be converted to a non-empty string, the standard error dialog displays a line with "Specifically:" followed by this string.</p>
<p id="File"><strong>File:</strong> The full path of the script file which contains the line at which the error occurred, or at which the Error object was constructed.</p>
<p id="Line"><strong>Line:</strong> The line number at which the error occurred, or at which the Error object was constructed.</p>
<p id="Stack"><strong>Stack:</strong> A string representing the call stack at the time the Error object was constructed. Each line may be formatted as follows:</p>
<dl>
  <dt><code><i>File</i> (<i>Line</i>) : [<i>What</i>] <i>SourceCode</i>`r`n</code></dt>
  <dd>Represents a call to the function <em>What</em>. <em>File</em> and <em>Line</em> indicate the current script line at this stack depth. <em>SourceCode</em> is an approximation of the source code at that line, as it would be shown in <a href="ListLines.htm">ListLines</a>.</dd>
  <dt><code>&gt; <i>What</i>`r`n</code></dt>
  <dd>Represents the launching of a thread, typically the direct cause of the function call above it.</dd>
  <dt><code>... <i>N</i> more</code></dt>
  <dd>Indicates that the stack trace was truncated, and there are <em>N</em> more stack entries not shown. Currently the <code>Stack</code> property cannot exceed 2047 characters.</dd>
</dl>

<p class="warning"><strong>Note:</strong> The standard error dialog requires <em>Message</em>, <em>Extra</em>, <em>File</em> and <em>Line</em> to be <a href="Object.htm">own value properties</a>.</p>

<h2 id="new">Error()</h2>
<p>Creates an Error object.</p>
<pre class="Syntax">NewError := <span class="func"><i>Error</i></span>(Message <span class="optional">, What, Extra</span>)</pre>
<p><em><strong>Error</strong></em> may be replaced with one of the subclasses listed under <a href="#error-types">Error Types</a>, although some subclasses may take different parameters.</p>
<p>The parameters directly correspond to properties described above, but may differ for Error subclasses which override the __New method.</p>
<p><em>Message</em> and <em>Extra</em> are converted to strings. These are displayed by an error dialog if the exception is thrown and not caught.</p>
<p><em>What</em> indicates the source of the error. It can be an arbitrary string, but should be a negative integer or the name of a running function. Specifying -1 indicates the current function, -2 indicates the function which called it, and so on. If the script is <a href="../Scripts.htm#ahk2exe">compiled</a> or the value does not identify a valid stack frame, the value is merely converted to a string and assigned to <code>NewError.What</code>. Otherwise, the identified stack frame is used as follows to determine the other properties:</p>
<ul>
  <li><code>NewError.What</code> contains the name of the function.</li>
  <li><code>NewError.Line</code> and <code>NewError.File</code> indicate the line which <em>called</em> the function.</li>
  <li><code>NewError.Stack</code> contains a partial stack trace, with the indicated stack frame at the top.</li>
</ul>
<p>Use of the <em>What</em> parameter can allow a complex function to use helper functions to perform its work or parameter validation, while omitting those internal details from any reported error information. For example:</p>
<pre>MyFunction(a, b) {
    CheckArg "a", a
    CheckArg "b", b
    <em>;...</em>
    CheckArg(name, value) {
        if value &lt; 0
            throw ValueError(name " is negative", "myfunction", value)
    }
}

try
    MyFunction(1, -1)  <em>; err.Line indicates this line.</em>
catch ValueError as err
    MsgBox Format("{1}: {2}.`n`nFile:`t{3}`nLine:`t{4}`nWhat:`t{5}`nStack:`n{6}"
        , type(err), err.Message, err.File, err.Line, err.What, err.Stack)</pre>
<pre>try
    SomeFunction()
catch as e
    MsgBox(type(e) " in " e.What ", which was called at line " e.Line)

SomeFunction() {
    throw Error("Fail", -1)
}</pre>

<h2 id="error-types">Error Types</h2>

<p>The following subclasses of <strong>Error</strong> are predefined:</p>
<ul>
  <li id="MemoryError"><strong>MemoryError:</strong> A memory allocation failed.</li>
  <li id="OSError"><strong>OSError:</strong> An internal function call to a Win32 function failed. <strong>Message</strong> includes an error code and description generated by the operating system. OSErrors have an additional <strong>Number</strong> property which contains the error code. Calling <code>OSError(Code)</code> where <em>Code</em> is numeric sets <em>Number</em> and <em>Message</em> based on the given OS-defined error code. If <em>Code</em> is omitted, it defaults to <a href="../Variables.htm#LastError">A_LastError</a>. For example, <code>OSError(5).Message</code> returns "(5) Access is denied."</li>
  <li id="TargetError"><strong>TargetError:</strong> A function failed because its target could not be found. <strong>Message</strong> indicates what kind of target, such as a window, control, menu or status bar.</li>
  <li id="TimeoutError"><strong>TimeoutError:</strong> <a href="SendMessage.htm">SendMessage</a> timed out.</li>
  <li id="TypeError"><strong>TypeError:</strong> An unexpected type of value was used as input for a function, property assignment, or some other operation. Usually <strong>Message</strong> indicates the expected and actual type, and <strong>Extra</strong> contains a string representing the errant value.</li>
  <li id="UnsetError"><strong>UnsetError:</strong> An attempt was made to read the value of a variable, property or item, but there was no value.<ul>
    <li id="MemberError"><strong>MemberError</strong><ul>
      <li id="PropertyError"><strong>PropertyError</strong></li>
      <li id="MethodError"><strong>MethodError</strong></li>
    </ul></li>
    <li id="UnsetItemError"><strong>UnsetItemError</strong></li>
  </ul></li>
  <li id="ValueError"><strong>ValueError:</strong> An unexpected value was used as input for a function, property assignment, or some other operation. Usually <strong>Message</strong> indicates which expectation was broken, and <strong>Extra</strong> contains a string representing the errant value.<ul>
    <li id="IndexError"><strong>IndexError:</strong> The index parameter of an object's <a href="../Objects.htm#__Item">__Item property</a> was invalid or out of range.</li>
  </ul></li>
  <li id="ZeroDivisionError"><strong>ZeroDivisionError:</strong> Division by zero was attempted in an expression or with the Mod function.</li>
</ul>
<p>Errors are also thrown using the base Error class.</p>

<h2 id="Related">Related</h2>
<p><a href="Throw.htm">Throw</a>, <a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Finally.htm">Finally</a>, <a href="OnError.htm">OnError</a></p>

</body>
</html>