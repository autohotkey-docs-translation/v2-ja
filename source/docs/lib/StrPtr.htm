<!DOCTYPE HTML>
<html lang="en">
<head>
<title>StrPtr - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The StrPtr function returns the current memory address of a string." />
<meta name="ahk:equiv-v1" content="Variables.htm#amp" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StrPtr</h1>
<p>Returns the current memory address of a string.</p>
<pre class="Syntax">Address := <span class="func">StrPtr</span>(Value)</pre>

<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Value</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
	</dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>This function returns the current memory address of <em>Value</em>.</p>

<h2 id="Remarks">Remarks</h2>
<p>The lifetime of an address and which operations are valid to perform on it depend on how <em>Value</em> was passed to this function. There are three distinct cases, shown as example code below. In all cases, if the string will <u>not</u> be modified, the return value can be passed <em>directly</em> to a <a href="DllCall.htm">DllCall</a> function or <a href="SendMessage.htm">SendMessage</a>.</p>
<pre>Ptr := StrPtr(MyVar)</pre>
<p>If <em>Value</em> is a variable reference such as <code>MyVar</code> (and not a built-in variable), the return value is the memory address of the variable's internal string buffer. <code><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>(&amp;MyVar)</code> returns the size of the buffer <strong>in characters</strong>, excluding the terminating null character.</p>
<p>The address should be considered valid <em>only</em> until the variable is freed or has been reassigned by means of any of the <a href="../Variables.htm#AssignOp">assignment operators</a> or by passing it to a built-in function. The address of the contents of a function's <a href="../Functions.htm#Local">local</a> variable is not valid after the function returns, as local variables are freed automatically.</p>
<p>The address can be stored in a <a href="DllCall.htm#struct">structure</a> or another variable, and passed indirectly to <a href="DllCall.htm">DllCall</a> or <a href="SendMessage.htm">SendMessage</a> or used in other ways, for as long as it remains valid as described above.</p>
<p>The script may change the value of the string indirectly by passing the address to <a href="NumPut.htm">NumPut</a>, <a href="DllCall.htm">DllCall</a> or <a href="SendMessage.htm">SendMessage</a>. If the length of the string is changed this way, the variable's internal length property must be updated by calling <code><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>(&amp;MyVar, -1)</code>.</p>
<pre>Ptr := StrPtr("literal string")</pre>
<p>The address of a literal string is valid until the program exits. The script should not attempt to modify the string. The address can be stored in a <a href="DllCall.htm#struct">structure</a> or another variable, and passed indirectly to <a href="DllCall.htm">DllCall</a> or <a href="SendMessage.htm">SendMessage</a> or used in other ways.</p>
<pre>SendMessage 0x000C, 0, StrPtr(A_ScriptName " changed this title"),, "A"</pre>
<p>The address of a temporary string is valid only until evaluation of the overall expression or function call statement is completed, after which time it must not be used. For the example above, the address is valid until SendMessage returns. All of the following yield temporary strings:</p>
<ul>
  <li>Concatenation.</li>
  <li>Built-in variables such as <a href="../Variables.htm#ScriptName">A_ScriptName</a>.</li>
  <li>Functions which return strings.</li>
  <li>Accessing properties of an object, array elements or map elements.</li>
</ul>
<p>If not explicitly covered above, it is safe to assume the string is temporary.</p>

<h2 id="Related">Related</h2>
<p><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>, <a href="DllCall.htm">DllCall</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="Buffer.htm">Buffer object</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>


</body>
</html>
