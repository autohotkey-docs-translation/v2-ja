<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Throw - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Throw statement signals the occurrence of an error. This signal can be caught by a Try-Catch statement." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Throw</h1>

<p>Signals the occurrence of an error. This signal can be caught by a <a href="Try.htm">Try</a>-<a href="Catch.htm">Catch</a> statement.</p>

<pre class="Syntax"><span class="func">Throw</span> <span class="optional">Value</span></pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Value</dt>
  <dd>
    <p>A value to throw; typically an <a href="Error.htm">Error</a> object. For example:</p>
      <pre>throw ValueError("Parameter #1 invalid", -1, theBadParam)</pre>
      <p>Values of all kinds can be thrown, but if <a href="Catch.htm">Catch</a> is used without specifying a class (or <a href="Try.htm">Try</a> is used without <a href="Catch.htm">Catch</a> or <a href="Finally.htm">Finally</a>), it will only catch instances of the <a href="Error.htm">Error</a> class.</p>
      <p>While execution is within a <a href="Catch.htm">Catch</a>, <em>Value</em> can be omitted to re-throw the caught value (avoiding the need to specify an output variable just for that purpose). This is supported even within a nested <em>Try-Finally</em>, but not within a nested <em>Try-Catch</em>. The line with <code>throw</code> does not need to be physically contained by the <em>Catch</em> statement's body; it can be used by a called function.</p>
  </dd>

</dl>

<h2 id="Remarks">Remarks</h2>
<p>The space or tab after <code>throw</code> is optional if the expression is enclosed in parentheses, as in <code>throw(Error())</code>.</p>
<p>A thrown value or runtime error can be <em>caught</em> by <a href="Try.htm">Try</a>-<a href="Catch.htm">Catch</a>. In such cases, execution is transferred into the <em>catch</em> statement or to the next statement after the <em>try</em>. If a thrown value is not caught, the following occurs:</p>
<ul>
  <li>Any active <a href="OnError.htm">OnError</a> callbacks are called. Each callback may inspect <em>Value</em> and either suppress or allow further callbacks and default handling.</li>
  <li>By default, an error message is displayed based on what was thrown. If <em>Value</em> is an <a href="Object.htm">Object</a> and owns a value property named <em>Message</em>, its value is used as the message. If <em>Value</em> is a non-numeric string, it is used as the message. In any other case, a default message is used. If <em>Value</em> is numeric, it is shown below the default message.</li>
  <li>The thread exits. Note that this does not necessarily occur for continuable errors, but <em>throw</em> is never continuable.</li>
</ul>

<h2 id="Related">Related</h2>
<p><a href="Error.htm">Error Object</a>, <a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Finally.htm">Finally</a>, <a href="OnError.htm">OnError</a></p>

<h2 id="Examples">Examples</h2>
<p>See <a href="Try.htm#Examples">Try</a>.</p>

</body>
</html>
