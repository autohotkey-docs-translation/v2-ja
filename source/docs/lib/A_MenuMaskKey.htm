<!DOCTYPE HTML>
<html lang="en">
<head>
<title>A_MenuMaskKey - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="A_MenuMaskKey is a built-in variable that controls which key is used to mask Win or Alt keyup events." />
<meta name="ahk:equiv-v1" content="lib/_MenuMaskKey.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>A_MenuMaskKey</h1>

<p><em>A_MenuMaskKey</em> is a <a href="../Concepts.htm#built-in-variables">built-in variable</a> that controls which key is used to mask Win or Alt keyup events.</p>
<p><em>A_MenuMaskKey</em> can be used to get or set a <a href="../Concepts.htm#strings">string</a> representing a vkNNscNNN sequence identifying the virtual key code (NN) and scan code (NNN), in hexadecimal. If blank, masking is disabled.</p>
<p>The script can also assign a <a href="../KeyList.htm">key name</a>, <a href="../KeyList.htm#vk">vkNN</a> sequence or <a href="../KeyList.htm#sc">scNNN</a> sequence, in which case generally either the VK or SC code is left as zero until the key is sent, then determined automatically. Assigning <code>"vk00sc000"</code> disables masking and is equivalent to assigning <code>""</code>.</p>
<p>The returned string is always a vkNNscNNN sequence if enabled or blank if disabled, regardless of how it was assigned. All vkNNscNNN sequences and all non-zero vkNN or scNNN sequences are permitted, but some combinations may fail to suppress the menu. Any other invalid keys cause a <a href="Error.htm#ValueError">ValueError</a> to be thrown.</p>
<p>The default setting is vk11sc01D (the left Ctrl key).</p>

<h2 id="Remarks">Remarks</h2>
<p>The mask key is sent automatically to prevent the Start menu or the active window's menu bar from activating at unexpected times.</p>
<p>This variable can be used to change the mask key to a key with fewer side effects. Good candidates are virtual key codes which generally have no effect, such as vkE8, which Microsoft documents as "unassigned", or vkFF, which is reserved to mean "no mapping" (a key which has no function). Some values, such as zero VK with non-zero SC, may fail to suppress the Start menu. Key codes are not required to match an existing key.</p>
<p class="note"><strong>Note:</strong> Microsoft can assign an effect to an unassigned key code at any time. For example, vk07 was once undefined and safe to use, but since Windows 10 1909 it is reserved for opening the game bar.</p>
<p>This setting is global, meaning that it needs to be specified only once to affect the behavior of the entire script.</p>
<p><strong>Hotkeys:</strong> If a hotkey is implemented using the keyboard hook or mouse hook, the final keypress may be invisible to the active window and the system. If the system was to detect <em>only</em> a Win or Alt keydown and keyup with no intervening keypress, it would usually activate a menu. To prevent this, the keyboard or mouse hook may automatically send the mask key.</p>
<p>Pressing a hook hotkey causes the next Alt or Win keyup to be masked if all of the following conditions are met:</p>
<ul>
  <li>The hotkey is suppressed (it lacks the <a href="../Hotkeys.htm#Tilde">tilde modifier</a>).</li>
  <li><kbd>Alt</kbd> or <kbd>Win</kbd> is logically down when the hotkey is pressed.</li>
  <li>The modifier is physically down or the hotkey requires the modifier to activate. For example, <code>$#a::</code> in combination with <code>AppsKey::RWin</code> causes masking when <kbd>Menu</kbd>+<kbd>A</kbd> is pressed, but <kbd>Menu</kbd> on its own is able to open the Start Menu.</li>
  <li><kbd>Alt</kbd> is not masked if <kbd>Ctrl</kbd> was down when the hotkey was pressed, since <kbd>Ctrl</kbd>+<kbd>Alt</kbd> does not activate the menu bar.</li>
  <li><kbd>Win</kbd> is not masked if the most recent Win keydown was modified with <kbd>Ctrl</kbd>, <kbd>Shift</kbd> or <kbd>Alt</kbd>, since the Start Menu does not normally activate in those cases. However, key-repeat occurs even for <kbd>Win</kbd> if it was the last key physically pressed, so it can be hard to predict <em>when</em> the most recent Win keydown was.</li>
  <li>Either the keyboard hook is not installed (i.e. for a mouse hotkey), or there have been no other (unsuppressed) keydown or keyup events since the last Alt or Win keydown. Note that key-repeat occurs even for modifier keys and even after sending other keys, but only for the last physically pressed key.</li>
</ul>
<p>Mouse hotkeys may send the mask key immediately if the keyboard hook is not installed.</p>
<p>Hotkeys with the <a href="../Hotkeys.htm#Tilde">tilde modifier</a> are not intended to block the native function of the key, so they do not cause masking. Hotkeys like <code>~#a::</code> still suppress the menu, since the system detects that <kbd>Win</kbd> has been used in combination with another key. However, mouse hotkeys and both <kbd>Win</kbd> themselves (<code>~LWin::</code> and <code>~RWin::</code>) do not suppress the Start Menu.</p>
<p>The Start Menu (or the active window's menu bar) can be suppressed by sending any keystroke. The following example disables the ability for the left <kbd>Win</kbd> to activate the Start Menu, while still allowing its use as a modifier:</p>
<pre>~LWin::Send "{Blind}{vkE8}"</pre>
<p><strong>Send:</strong> <a href="Send.htm">Send</a>, <a href="ControlSend.htm">ControlSend</a> and related often release modifier keys as part of their normal operation. For example, the hotkey <code>&lt;#a::SendText Address</code> usually must release the left <kbd>Win</kbd> prior to sending the contents of <em>Address</em>, and press the left <kbd>Win</kbd> back down afterward (so that other Win key combinations continue working). The mask key may be sent in such cases to prevent a Win or Alt keyup from activating a menu.</p>

<h2 id="Related">Related</h2>
<p>See <a href="https://www.autohotkey.com/board/topic/20619-extraneous-control-key-presses-generated-by-or-hotkeys/">this thread</a> for background information.</p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Basic usage.</p>
<pre>A_MenuMaskKey := "vkE8"  <em>; Change the masking key to something unassigned such as vkE8.</em>
#Space::Run A_ScriptDir  <em>; An additional Ctrl keystroke is not triggered.</em></pre>
</div>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Shows in detail how this variable causes vkFF to be sent instead of LControl.</p>
<pre>A_MenuMaskKey := "vkFF"  <em>; vkFF is no mapping.</em>
#UseHook
#Space::
!Space::
{
    KeyWait "LWin"
    KeyWait "RWin"
    KeyWait "Alt"
    KeyHistory
}</pre>
</div>

</body>
</html>
