<!DOCTYPE HTML>
<html lang="en">
<head>
<title>NumPut - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The NumPut function stores one or more numbers in binary format at the specified address+offset." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut</h1>
<p>Stores one or more numbers in binary format at the specified address+offset.</p>
<pre class="Syntax"><span class="func">NumPut</span> Type, Number, <span class="optional">Type2, Number2, ...</span> Target <span class="optional">, Offset</span></pre>

<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Type</dt>
  <dd>
      <p>Type: <a href="../Concepts.htm#strings">String</a></p>
      <p>One of the following strings: UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr</p>
      <p>For all integer types, or when passing pure integers, signed vs. unsigned does not affect the result due to the use of two's complement to represent signed integers.</p>
      <p>For details see <a href="DllCall.htm#types">DllCall Types</a>.</p>
    </dd>

  <dt>Number</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The number to store.</p>
  </dd>

  <dt>Target</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#objects">Object</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
		<p>A <a href="Buffer.htm">Buffer</a>-like object or memory address.</p>
    <p>Any object which implements <a href="Buffer.htm#Ptr">Ptr</a> and <a href="Buffer.htm#Size">Size</a> properties may be used, but this function is optimized for the native <a href="Buffer.htm">Buffer</a> object. Passing an object with these properties ensures that the function does not write to an invalid memory location; doing so could cause crashes or other unpredictable behaviour.</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to 0. Otherwise, specify an offset in bytes which is added to <em>Target</em> to determine the target address.</p>
  </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>This function returns the address to the right of the last item written. This can be used when writing a non-contiguous sequence of numbers, such as in a structure for use with <a href="DllCall.htm">DllCall</a>, where some fields are not being set. However, in many cases it is simpler and more efficient to specify multiple <em>Type</em>, <em>Number</em> pairs instead. Passing the address back to NumPut is less safe than passing a Buffer-like object with an updated <em>Offset</em>.</p>

<h2 id="General_Remarks">General Remarks</h2>
<p>A sequence of numbers can be written by repeating <em>Type</em> and <em>Number</em> any number of times after the first <em>Number</em>. Each number is written at the next byte after the previous number, with no padding. When creating a structure for use with <a href="DllCall.htm">DllCall</a>, be aware that some fields may need explicit padding added due to data alignment requirements.</p>
<p>If an integer is too large to fit in the specified <em>Type</em>, its most significant bytes are ignored; e.g. <code>NumPut("Char", 257, buf)</code> would store the number 1.</p>
<p>An exception may be thrown if the target address is invalid. However, some invalid addresses cannot be detected as such and may cause unpredictable behaviour. Passing a <a href="Buffer.htm">Buffer</a> object instead of an address ensures that the target address can always be validated.</p>

<h2 id="Related">Related</h2>
<p><a href="NumGet.htm">NumGet</a>, <a href="DllCall.htm">DllCall</a>, <a href="Buffer.htm">Buffer object</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>


</body>
</html>
