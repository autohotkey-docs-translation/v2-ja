<!DOCTYPE HTML>
<html lang="en">
<head>
<title>#HotIf - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The #HotIf directive creates context-sensitive hotkeys and hotstrings. Such hotkeys perform a different action (or none at all) depending on any condition (an expression)." />
<meta name="ahk:equiv-v1" content="lib/_If.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>


<h1>#HotIf</h1>

<p>Creates context-sensitive <a href="../Hotkeys.htm">hotkeys</a> and <a href="../Hotstrings.htm">hotstrings</a>. Such hotkeys perform a different action (or none at all) depending on any condition (an <a href="../Language.htm#expressions">expression</a>).</p>

<pre class="Syntax"><span class="func">#HotIf</span> <span class="optional">Expression</span></pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Expression</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>If omitted, subsequently-created hotkeys and hotstrings are not context-sensitive. Otherwise, specify any valid <a href="../Variables.htm#Expressions">expression</a>. This becomes the return value of an implicit function which has one parameter (<a href="../Hotkeys.htm#ThisHotkey">ThisHotkey</a>). The function cannot modify global variables directly (as it is <a href="../Functions.htm#AssumeLocal">assume-local</a> as usual, and cannot contain declarations), but can call other functions which do.</p>
  </dd>

</dl>

<h2 id="howto">Basic Operation</h2>
<p>The #HotIf directive sets the expression which will be used by subsequently created hotkeys to determine whether they should activate. This expression is evaluated when the key, mouse button or combination is pressed, or at other times when the program needs to know whether the hotkey is active.</p>
<p>To make context-sensitive <a href="../Hotkeys.htm">hotkeys</a> and <a href="../Hotstrings.htm">hotstrings</a>, simply precede them with the #HotIf directive. For example:</p>
<pre>#HotIf WinActive("ahk_class Notepad") or WinActive(MyWindowTitle)
#Space::MsgBox "You pressed Win+Spacebar in Notepad or " MyWindowTitle</pre>
<p>The #HotIf directive is positional: it affects all hotkeys and hotstrings physically beneath it in the script, until the next #HotIf directive.</p>
<p class="warning"><strong>Note:</strong> Unlike <a href="If.htm">if statements</a>, braces have no effect with the #HotIf directive.</p>
<p>To turn off context sensitivity, specify #HotIf without any expression. For example:</p>
<pre>#HotIf</pre>
<p>Like other directives, #HotIf cannot be executed conditionally.</p>
<p>When a mouse or keyboard hotkey is disabled via #HotIf, it performs its native function; that is, it passes through to the active window as though there is no such hotkey. There is one exception: Controller hotkeys: although #HotIf works, it never prevents other programs from seeing the press of a button.</p>
<p>#HotIf can also be used to alter the behavior of an ordinary key like <kbd>Enter</kbd> or <kbd>Space</kbd>. This is useful when a particular window ignores that key or performs some action you find undesirable. For example:</p>
<pre>#HotIf WinActive("Reminders ahk_class #32770")  <em>; The "reminders" window in Outlook.</em>
Enter::Send "!o"  <em>; Have an "Enter" keystroke open the selected reminder rather than snoozing it.</em>
#HotIf</pre>

<h2 id="variant">Variant (Duplicate) Hotkeys</h2>
<p>A particular <a href="../Hotkeys.htm">hotkey</a> or <a href="../Hotstrings.htm">hotstring</a> can be defined more than once in the script if each definition has different HotIf criteria. These are known as <em>hotkey variants</em>. For example:</p>
<pre>#HotIf <a href="WinActive.htm">WinActive</a>("ahk_class Notepad")
^!c::MsgBox "You pressed Control+Alt+C in Notepad."
#HotIf WinActive("ahk_class WordPadClass")
^!c::MsgBox "You pressed Control+Alt+C in WordPad."
#HotIf
^!c::MsgBox "You pressed Control+Alt+C in a window other than Notepad/WordPad."</pre>
<p>If more than one variant is eligible to fire, only the one closest to the top of the script will fire. The exception to this is the global variant (the one with no HotIf criteria): It always has the lowest precedence; therefore, it will fire only if no other variant is eligible (this exception does not apply to <a href="../Hotstrings.htm">hotstrings</a>).</p>
<p>When creating duplicate hotkeys, the order of <a href="../Hotkeys.htm#Symbols">modifier symbols</a> such as <code>^!+#</code> does not matter. For example, <code>^!c</code> is the same as <code>!^c</code>. However, keys must be spelled consistently. For example, <em>Esc</em> is not the same as <em>Escape</em> for this purpose (though the case does not matter). Also, any hotkey with a <a href="../Hotkeys.htm#wildcard">wildcard prefix (*)</a> is entirely separate from a non-wildcard one; for example, <code>*F1</code> and <code>F1</code> would each have their own set of variants.</p>

<p>A <a href="GroupAdd.htm">window group</a> can be used to make a hotkey execute for a group of windows. For example:
<pre>
GroupAdd "MyGroup", "ahk_class Notepad"
GroupAdd "MyGroup", "ahk_class WordPadClass"

#HotIf WinActive("ahk_group MyGroup")
#z::MsgBox "You pressed Win+Z in either Notepad or WordPad."
</pre>
</p>
<p>To create hotkey variants dynamically (while the script is running), see <a href="HotIf.htm">HotIf</a>.</p>

<h2 id="expression-evaluation">Expression Evaluation</h2>
<p>When the key, mouse or controller button combination which forms a hotkey is pressed, the #HotIf expression is evaluated to determine if the hotkey should activate.</p>
<p class="warning"><strong>Note:</strong> Scripts should not assume that the expression is only evaluated when the key is pressed (see below).</p>
<p>The expression may also be evaluated whenever the program needs to know whether the hotkey is active. For example, the #HotIf expression for a custom combination like <code>a &amp; b::</code> might be evaluated when the prefix key (<code>a</code> in this example) is pressed, to determine whether it should act as a custom modifier key.</p>
<p class="warning" id="lag"><strong>Note:</strong> Use of #HotIf in an unresponsive script may cause input lag or break hotkeys (see below).</p>
<p>There are several more caveats to the #HotIf directive:</p>
<ul>
  <li>Keyboard or mouse input is typically buffered (delayed) until expression evaluation completes or <a href="_HotIfTimeout.htm">times out</a>.</li>
  <li>Expression evaluation can only be performed by the script's main thread (at the OS level, not a <a href="../misc/Threads.htm">quasi-thread</a>), not directly by the keyboard/mouse hook. If the script is busy or unresponsive, such as if a FileCopy is in progress, expression evaluation is delayed and may time out.</li>
  <li>If the <a href="_HotIfTimeout.htm#LowLevelHooksTimeout">system-defined timeout</a> is reached, the system may stop notifying the script of keyboard or mouse input (see #HotIfTimeout for details).</li>
  <li>Sending keystrokes or mouse clicks while the expression is being evaluated (such as from a function which it calls) may cause complications and should be avoided.</li>
</ul>
<p><a href="../Hotkeys.htm#ThisHotkey">ThisHotkey</a>, <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> and <a href="../Variables.htm#TimeSinceThisHotkey">A_TimeSinceThisHotkey</a> are set based on the hotkey for which the current #HotIf expression is being evaluated.</p>
<p><a href="../Variables.htm#PriorHotkey">A_PriorHotkey</a> and <a href="../Variables.htm#TimeSincePriorHotkey">A_TimeSincePriorHotkey</a> temporarily contain the previous values of the corresponding "This" variables.</p>

<h2 id="optimization">Optimization</h2>
<p>#HotIf is optimized to avoid expression evaluation for simple calls to <a href="WinActive.htm">WinActive</a> or <a href="WinExist.htm">WinExist</a>, thereby reducing the <a href="#lag">risk of lag</a> or other issues in such cases. Specifically:</p>
<ul>
  <li>The expression must contain exactly one call to <a href="WinExist.htm">WinExist</a> or <a href="WinActive.htm">WinActive</a>.</li>
  <li>Each parameter must be a single quoted string, and no more than two parameters may be used.</li>
  <li>The result may be inverted with <code>not</code> or <code>!</code>, but no other operators may be used.</li>
  <li>Whitespace and parentheses are fully handled when the expression is pre-compiled and therefore do not affect this optimization.</li>
</ul>
<p>If the expression meets these criteria, it is evaluated directly by the program and does not appear in <a href="ListLines.htm">ListLines</a>.</p>
<p>Before the <a href="Hotkey.htm">Hotkey</a> function is used to modify an existing hotkey variant, typically the <a href="HotIf.htm">HotIf</a> function must be used with the original expression text. However, the first unique expression with a given combination of criteria can also be referenced by that criteria. For example:</p>
<pre>
HotIfWinExist "ahk_class Notepad"
Hotkey "#n", "Off"  <em>; Turn the hotkey off.</em>
HotIf 'WinExist("ahk_class Notepad")'
Hotkey "#n", "On"   <em>; Turn the same hotkey back on.</em>

#HotIf WinExist("ahk_class Notepad")
#n::WinActivate
</pre>
<p>Note that any use of variables will disqualify the expression. If the variable's value never changes after the hotkey is created, there are two strategies for minimizing the risk of lag or other issues inherent to #HotIf:</p>
<ul>
  <li>Use <code class="no-highlight"><a href="HotIf.htm#IfWin">HotIfWin...</a> MyTitleVar</code> to set the criteria and <code><a href="Hotkey.htm">Hotkey</a> KeyName, Label</code> to create the hotkey variant.</li>
  <li>Use a constant expression such as <code>#HotIf WinActive("ahk_group MyGroup")</code> and define the window group with <code><a href="GroupAdd.htm">GroupAdd</a> "MyGroup", MyTitleVar</code> elsewhere in the script.</li>
</ul>

<h2 id="general-remarks">General Remarks</h2>
<p>#HotIf also restores prefix keys to their native function when appropriate (a <a href="../Hotkeys.htm#prefix">prefix key</a> is <kbd>A</kbd> in a hotkey such as <code>a &amp; b</code>). This occurs whenever there are no enabled hotkeys for a given prefix.</p>
<p>When a hotkey is currently disabled via #HotIf, its key or mouse button will appear with a "#" character in <a href="KeyHistory.htm">KeyHistory's</a> "Type" column. This can help <a href="../Scripts.htm#debug">debug a script</a>.</p>
<p><a href="../Hotkeys.htm#alttab">Alt-tab hotkeys</a> are not affected by #HotIf: they are in effect for all windows.</p>
<p>The <a href="../misc/WinTitle.htm#LastFoundWindow">Last Found Window</a> can be set by #HotIf. For example:</p>
<pre>#HotIf <a href="WinExist.htm">WinExist</a>("ahk_class Notepad")
#n::<a href="WinActivate.htm">WinActivate</a>  <em>; Activates the window found by WinExist().</em></pre>

<h2 id="Related">Related</h2>
<p><a href="_HotIfTimeout.htm">#HotIfTimeout</a> may be used to override the default timeout value.</p>
<p><a href="Hotkey.htm">Hotkey function</a>, <a href="../Hotkeys.htm">Hotkeys</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="Suspend.htm">Suspend</a>, <a href="WinActive.htm">WinActive</a>, <a href="WinExist.htm">WinExist</a>, <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Creates two hotkeys and one hotstring which only work when Notepad is active, and one hotkey which works for any window except Notepad.</p>
<pre>#HotIf WinActive("ahk_class Notepad")
^!a::MsgBox "You pressed Ctrl-Alt-A while Notepad is active."
#c::MsgBox "You pressed Win-C while Notepad is active."
::btw::This replacement text for "btw" will occur only in Notepad.
#HotIf
#c::MsgBox "You pressed Win-C in a window other than Notepad."</pre>
</div>

<div class="ex" id="ExVolume">
<p><a class="ex_number" href="#ExVolume"></a> Allows the volume to be adjusted by scrolling the mouse wheel over the taskbar.</p>
<pre>
#HotIf MouseIsOver("ahk_class Shell_TrayWnd")
WheelUp::Send "{Volume_Up}"
WheelDown::Send "{Volume_Down}"

MouseIsOver(WinTitle) {
    MouseGetPos ,, &amp;Win
    return WinExist(WinTitle " ahk_id " Win)
}
</pre>
</div>

<div class="ex" id="ExWordDelete">
<p><a class="ex_number" href="#ExWordDelete"></a> Simple word-delete shortcuts for all Edit controls.</p>
<pre>
#HotIf ActiveControlIsOfClass("Edit")
^BS::Send "^+{Left}{Del}"
^Del::Send "^+{Right}{Del}"

ActiveControlIsOfClass(Cls) {
    FocusedControl := 0
    try FocusedControl := ControlGetFocus("A")
    FocusedControlClass := ""
    try FocusedControlClass := WinGetClass(FocusedControl)
    return (FocusedControlClass=Cls)
}
</pre>
</div>

<div class="ex" id="ExContextInsens">
<p><a class="ex_number" href="#ExContextInsens"></a> Context-insensitive Hotkey.</p>
<pre>
#HotIf
Esc::ExitApp
</pre>
</div>

<div class="ex" id="ExDynamic">
<p><a class="ex_number" href="#ExDynamic"></a> Dynamic Hotkeys. This example should be combined with <a href="#ExVolume">example #2</a> before running it.</p>
<pre>
NumpadAdd::
{
    static toggle := false
    HotIf 'MouseIsOver("ahk_class Shell_TrayWnd")'
    if (toggle := !toggle)
        Hotkey "WheelUp", DoubleUp
    else
        Hotkey "WheelUp", "WheelUp"
    return
    ; Nested function:	
    DoubleUp(ThisHotkey) =&gt; Send("{Volume_Up 2}")
}
</pre>
</div>

</body>
</html>
