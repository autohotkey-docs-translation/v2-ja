<!DOCTYPE HTML>
<html lang="en">
<head>
<title>#UseHook - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The #UseHook directive forces the use of the hook to implement all or some keyboard hotkeys." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#UseHook</h1>

<p>Forces the use of the  hook to implement all or some keyboard <a href="../Hotkeys.htm">hotkeys</a>.</p>

<pre class="Syntax"><span class="func">#UseHook</span> <span class="optional">Setting</span></pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Setting</dt>
  <dd>
    <p>If omitted, it defaults to <em>True</em>. Otherwise, specify one of the following literal values:</p>
    <p><strong>True</strong> or <strong>1</strong>: The <a href="InstallKeybdHook.htm">keyboard hook</a> will be used to implement all keyboard hotkeys between here and the next <code>#UseHook False</code> (if any).</p>
    <p><strong>False</strong> or <strong>0</strong>: Hotkeys will be implemented using the default method (RegisterHotkey() if possible; otherwise, the keyboard hook).</p>
  </dd>

</dl>

<h2 id="Remarks">Remarks</h2>
<p>If this directive is unspecified in the script, it will behave as though set to <em>False</em>, meaning the windows API function RegisterHotkey() is used to implement a keyboard hotkey whenever possible. However, the responsiveness of hotkeys might be better under some conditions if the <a href="InstallKeybdHook.htm">keyboard hook</a> is used instead.</p>
<p>Turning this directive ON is equivalent to using the <a href="../Hotkeys.htm#prefixdollar">$ prefix</a> in the definition of each affected hotkey.</p>
<p>As with all # directives -- which are processed only once when the script is launched --  <code>#UseHook</code> should not be positioned in the script as though it were a function (that is, it is not necessary to have it contained within a subroutine). Instead, position it immediately before the first hotkey you wish to have affected by it.</p>
<p>By default, hotkeys that use the <a href="InstallKeybdHook.htm">keyboard hook</a> cannot be triggered by means of the <a href="Send.htm">Send</a> function. Similarly, mouse hotkeys cannot be triggered by built-in functions such as <a href="Click.htm">Click</a> because all mouse hotkeys use the <a href="InstallMouseHook.htm">mouse hook</a>. One workaround is to <a href="../Hotkeys.htm#Function">name the hotkey's function</a> and call it directly.</p>
<p><a href="_InputLevel.htm">#InputLevel</a> and <a href="SendLevel.htm">SendLevel</a> provide additional control over which hotkeys and hotstrings are triggered by the Send function.</p>
<p>Like other directives, #UseHook cannot be executed conditionally.</p>

<h2 id="Related">Related</h2>
<p><a href="InstallKeybdHook.htm">InstallKeybdHook</a>, <a href="InstallMouseHook.htm">InstallMouseHook</a>, <a href="ListHotkeys.htm">ListHotkeys</a>, <a href="_InputLevel.htm">#InputLevel</a></p>
<h2 id="Examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Causes the first two hotkeys to use the keyboard hook.</p>
<pre>#UseHook  <em>; Force the use of the hook for hotkeys after this point.</em>
#x::MsgBox "This hotkey will be implemented with the hook."
#y::MsgBox "And this one too."
#UseHook False
#z::MsgBox "But not this one."</pre>
</div>

</body>
</html>
