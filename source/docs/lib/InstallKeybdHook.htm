<!DOCTYPE HTML>
<html lang="en">
<head>
<title>InstallKeybdHook - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The InstallKeybdHook function installs or uninstalls the keyboard hook." />
<meta name="ahk:equiv-v1" content="lib/_InstallKeybdHook.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>InstallKeybdHook</h1>

<p>Installs or uninstalls the keyboard hook.</p>
<pre class="Syntax"><span class="func">InstallKeybdHook</span> <span class="optional">Install, Force</span></pre>

<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Install</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>If omitted, it defaults to true.</p>
    <p>If <strong>true</strong>, the hook is required to be installed.</p>
    <p>If <strong>false</strong>, any requirement previously set by this function is removed, potentially uninstalling the hook.</p>
  </dd>

  <dt>Force</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>If omitted, it defaults to false.</p>
    <p>If <strong>false</strong>, an internal variable is updated to indicate whether the hook is required by the script, but there might be no immediate change if the hook is required for some other purpose.</p>
    <p>If <strong>true</strong> and <em>Install</em> is true, the hook is uninstalled and reinstalled. This has the effect of giving it precedence over any hooks previously installed by other processes. If the system has stopped calling the hook due to an unresponsive program, reinstalling the hook might get it working again.</p>
    <p>If <strong>true</strong> and <em>Install</em> is false, the hook is uninstalled even if needed for some other purpose. If a <a href="../Hotkeys.htm">hotkey</a>, <a href="../Hotstrings.htm">hotstring</a> or <a href="InputHook.htm">InputHook</a> requires the hook, it will stop working until the hook is reinstalled. The hook may be reinstalled explicitly by calling this function, or automatically as a side-effect of enabling or disabling a hotkey or calling some other function which requires the hook.</p>
  </dd>

</dl>

<h2 id="Remarks">Remarks</h2>
<p>The keyboard hook monitors keystrokes for the purpose of activating <a href="../Hotstrings.htm">hotstrings</a> and any keyboard <a href="../Hotkeys.htm">hotkeys</a> not supported by RegisterHotkey (which is a function built into the operating system). It also supports a few other features such as the <a href="InputHook.htm">InputHook</a> function.</p>
<p>AutoHotkey does not install the keyboard and mouse hooks unconditionally because together they consume at least 500 KB of memory. Therefore, the keyboard hook is normally installed only when the script contains one of the following: 1) <a href="../Hotstrings.htm">hotstrings</a>; 2) one or more <a href="../Hotkeys.htm">hotkeys</a> that require the keyboard hook (most do not); 3) <a href="SetNumScrollCapsLockState.htm">SetCaps/Scroll/NumLock AlwaysOn/AlwaysOff</a>; 4) active <a href="InputHook.htm">Input hooks</a>.</p>
<p>By contrast, the InstallKeybdHook function can be used to unconditionally install the keyboard hook, which has benefits including:</p>
<ul>
  <li><a href="KeyHistory.htm">KeyHistory</a> can be used to display the last 20 keystrokes (for debugging purposes).</li>
  <li>The physical state of the modifier keys can be tracked reliably, which removes the need for <a href="A_HotkeyModifierTimeout.htm">A_HotkeyModifierTimeout</a> and may improve the reliability with which <a href="Send.htm">Send</a> restores the modifier keys to their proper states after temporarily releasing them.</li>
  <li><a href="GetKeyState.htm">GetKeyState</a> can retrieve the physical state of a key.</li>
  <li><a href="../Variables.htm#TimeIdleKeyboard">A_TimeIdleKeyboard</a> and <a href="../Variables.htm#TimeIdlePhysical">A_TimeIdlePhysical</a> can work correctly (ignoring mouse input or artificial input, respectively).</li>
  <li>Mouse hotkeys which use the Alt modifier (such as <code>!LButton::</code>) can suppress the window menu more efficiently, by sending only one <a href="A_MenuMaskKey.htm">menu mask key</a> when the Alt key is released, instead of sending one each time the button is clicked.</li>
</ul>
<p>Keyboard hotkeys which do not require the hook will use the <em>reg</em> method even if the InstallKeybdHook function is used. By contrast, applying the <a href="_UseHook.htm">#UseHook</a> directive or the <a href="../Hotkeys.htm#prefixdollar">$ prefix</a> to a keyboard hotkey forces it to require the hook, which causes the hook to be installed if the hotkey is enabled.</p>
<p>You can determine whether a script is using the hook via the <a href="KeyHistory.htm">KeyHistory</a> function or menu item. You can determine which hotkeys are using the hook via the <a href="ListHotkeys.htm">ListHotkeys</a> function or menu item.</p>

<h2 id="Related">Related</h2>
<p><a href="InstallMouseHook.htm">InstallMouseHook</a>, <a href="_UseHook.htm">#UseHook</a>, <a href="Hotkey.htm">Hotkey</a>, <a href="InputHook.htm">InputHook</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="GetKeyState.htm">GetKeyState</a>, <a href="KeyWait.htm">KeyWait</a></p>
<h2 id="Examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Installs the keyboard hook unconditionally.</p>
<pre>InstallKeybdHook</pre>
</div>

</body>
</html>
