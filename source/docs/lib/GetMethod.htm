<!DOCTYPE HTML>
<html lang="en">
<head>
<title>GetMethod - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The GetMethod function retrieves the implementation function of a method." />
<meta name="ahk:equiv-v1" content="index.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetMethod</h1>

<p>Retrieves the implementation function of a method.</p>

<pre class="Syntax">Method := <span class="func">GetMethod</span>(Value <span class="optional">, Name, ParamCount</span>)</pre>
<h2 id="Parameters">Parameters</h2>
<dl>
  <dt>Value</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>Any value, of any type except ComObject.</p>
  </dd>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If omitted, validation is performed on <em>Value</em> itself and <em>Value</em> is returned if successful. Otherwise, specify the name of the method to retrieve.</p>
    <p></p>
  </dd>
  <dt>ParamCount</dt>
  <dd>
    <tp>Type: <a href="../Concepts.htm#numbers">Integer</a></tp>
    <p>If omitted (or if the parameter count was not verified), a basic check is performed for a Call method to verify that the object is most likely callable.</p>
    <p>Otherwise, specify the number of parameters that would be passed to the method or function. If specified, the method's MinParams, MaxParams and IsVariadic properties may be queried to verify that it can accept this number of parameters. If those properties are not present, the parameter count is not verified.</p>
    <p>This count should not include the implicit <code>this</code> parameter.</p>
  </dd>
</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../misc/Functor.htm">Function Object</a></p>
<p>This function returns the function object which contains the implementation of the method, or <em>Value</em> itself if <em>Name</em> was omitted.</p>

<h2 id="Errors">Errors</h2>
<p>If the method is not found or cannot be retrieved without invoking a property getter, a <a href="Error.htm#MethodError">MethodError</a> is thrown.</p>
<p>If validation is attempted, exceptions may be thrown as a result of querying the method's properties. A <a href="Error.htm#ValueError">ValueError</a> or <a href="Error.htm#MethodError">MethodError</a> is thrown if validation fails.</p>

<h2 id="Remarks">Remarks</h2>
<p>Methods may be defined through one of the following:</p>
<ul>
  <li>A dynamic property with a <em>call</em> accessor function. This includes:
    <ul>
      <li>Any property created by a <a href="../Objects.htm#Custom_Classes_method">method definition</a> within a class.</li>
      <li>Any property created by passing a descriptor like <code>{Call: fn}</code> to <a href="Object.htm#DefineProp">DefineProp</a>, where <em>fn</em> implements the method.</li>
      <li>Any predefined/built-in method.</li>
    </ul>
  </li>
  <li>An own value property of the object or one of its base objects, where the value is a <a href="../misc/Functor.htm">function object</a>.</li>
  <li>A dynamic property with a getter which returns a function object. This case is not supported by GetMethod.</li>
  <li>Handling within a __Call <a href="../Objects.htm#Meta_Functions">meta-function</a>. Methods implemented this way cannot be detected and may not even have a corresponding function object, so are not supported by GetMethod.</li>
</ul>
<p>When calling the function object, it is necessary to supply a value for the normally-hidden <em>this</em> parameter. For example, <code>Method(Value, Parameters*)</code>.</p>
<p>Although the standard implementation of GetMethod has limitations as described above, if <code>Value.GetMethod(Name)</code> is used instead of <code>GetMethod(Value, Name)</code>, the object <em>Value</em> can define its own implementation of GetMethod.</p>
<p><code>GetMethod(Value, "Call", N)</code> is not the same as <code>GetMethod(Value,, N)</code>, as the Call method takes the function object itself as a parameter, and its usage may otherwise differ from that of <em>Value</em>. For instance, <code>Func.Prototype.Call</code> is a single method which applies to all built-in and user-defined functions, and as such must accept any number of parameters.</p>

<h2 id="Related">Related</h2>
<p><a href="../Objects.htm">Objects</a>, <a href="HasMethod.htm">HasMethod</a>, <a href="HasBase.htm">HasBase</a>, <a href="HasProp.htm">HasProp</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Retrieves and reports information about the <a href="Any.htm#GetMethod">GetMethod method</a>.</p>
<pre>
method := GetMethod({}, "GetMethod")  <em>; It's also a method.</em>
MsgBox method.MaxParams  <em>; Takes 2 parameters, including 'this'.</em>
MsgBox method = GetMethod  <em>; Actually the same object in this case.</em>
</pre>
</div>

</body>
</html>
