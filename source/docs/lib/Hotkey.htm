<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Hotkey - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Hotkey function creates, modifies, enables, or disables a hotkey while the script is running." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotkey</h1>

<p>Creates, modifies, enables, or disables a hotkey while the script is running.</p>
<pre class="Syntax">
<span class="func">Hotkey</span> KeyName <span class="optional">, Action, Options</span>
</pre>

<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>Name of the hotkey's activation key, including any <a href="../Hotkeys.htm#Symbols">modifier symbols</a>. For example, specify <code>#c</code> for the <kbd>Win</kbd>+<kbd>C</kbd> hotkey.</p>
    <p>If <em>KeyName</em> already exists as a hotkey -- either by the Hotkey function or a <a href="../Hotkeys.htm">double-colon label</a> in the script -- that hotkey will be updated with the values of the function's other parameters.</p>
    <p>When specifying an <em>existing</em> hotkey, <em>KeyName</em> is not case-sensitive. However, the names of keys must be spelled the same as in the existing hotkey (e.g. Esc is not the same as Escape for this purpose). Also, the order of <a href="../Hotkeys.htm#Symbols">modifier symbols</a> such as <code>^!+#</code> does not matter. <a href="GetKeyName.htm">GetKeyName</a> can be used to retrieve the standard spelling of a key name.</p>
    <p>When a hotkey is first created -- either by the Hotkey function or the <a href="../Hotkeys.htm">double-colon syntax</a> in the script -- its key name and the ordering of its modifier symbols becomes the permanent name of that hotkey as reflected by <a href="../Hotkeys.htm#ThisHotkey">ThisHotkey</a>. This name is shared by all <a href="_HotIf.htm#variant">variants</a> of the hotkey, and does not change even if the Hotkey function later accesses the hotkey with a different symbol ordering.</p>
    <p>If the hotkey variant already exists, its behavior is updated according to whether <em>KeyName</em> includes or excludes the <a href="../Hotkeys.htm#Tilde">tilde (~) prefix</a>.</p>
    <p>The <a href="../Hotkeys.htm#prefixdollar">use hook ($) prefix</a> can be added to existing hotkeys. This prefix affects all variants of the hotkey and cannot be removed.</p>
  </dd>

  <dt>Action</dt>
  <dd>
      <p>Type: <a href="../misc/Functor.htm">Function Object</a> or <a href="../Concepts.htm#strings">String</a></p>
      <p>If omitted and <em>KeyName</em> already exists as a hotkey, its action will not be changed. This is useful to change only the hotkey's <em>Options</em>. Otherwise, specify a callback, a <a href="../Hotkeys.htm">hotkey</a> name without trailing colons, or one of the special values listed below.</p>
      <hr>
      <p>Specify the function to call (as a new <a href="../misc/Threads.htm">thread</a>) when the hotkey is pressed.</p>
      <p>The callback accepts one parameter and can be <a href="../Functions.htm#intro">defined</a> as follows:</p>
      <pre class="NoIndent">MyCallback(HotkeyName) { ...</pre>
      <p>Although the name you give the parameter does not matter, it is assigned the <a href="../Hotkeys.htm#ThisHotkey">hotkey name</a>.</p>
      <p>You can omit the callback's parameter if the corresponding information is not needed, but in this case an asterisk must be specified, e.g. <code>MyCallback(*)</code>.</p>
      <p>Hotkeys defined with the <a href="../Hotkeys.htm">double-colon syntax</a> automatically use the parameter name <code>ThisHotkey</code>. Hotkeys can also be <a href="../Hotkeys.htm#Function">assigned a function name</a> without the Hotkey function.</p>
      <p class="note"><strong>Note:</strong> If a callback is specified but the hotkey is disabled from a previous use of the Hotkey function, the hotkey will remain disabled. To prevent this, include the word ON in <em>Options</em>.</p>
      <hr>
      <p>Specify a hotkey name to use its original function; specifically, the original function of the hotkey variant corresponding to the current <a href="HotIf.htm">HotIf</a> criteria. This is usually used to restore a hotkey's original function after having changed it, but can be used to assign the function of a different hotkey, provided that both hotkeys use the same HotIf criteria.</p>
      <hr>
      <p>Specify one of the following special values:</p>
      <p><strong>On:</strong> The hotkey becomes enabled. No action is taken if the hotkey is already On.</p>
      <p><strong>Off:</strong> The hotkey becomes disabled. No action is taken if the hotkey is already Off.</p>
      <p><strong>Toggle:</strong> The hotkey is set to the opposite state (enabled or disabled).</p>
      <p><strong>AltTab</strong> (and others): These are special Alt-Tab hotkey actions that are described <a href="../Hotkeys.htm#alttab">here</a>.</p>
      </dd>

  <dt id="Options">Options</dt>
  <dd>
      <p>Type: <a href="../Concepts.htm#strings">String</a></p>
      <p>A string of zero or more of the following options with optional spaces in between. For example: <code>"On B0"</code>.</p>
      <p><strong>On:</strong> Enables the hotkey if it is currently disabled.</p>
      <p><strong>Off:</strong> Disables the hotkey if it is currently enabled. This is typically used to create a hotkey in an initially-disabled state.</p>
      <p><strong>B</strong> or <strong>B0</strong>: Specify the letter B to buffer the hotkey as described in <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>. Specify <code>B0</code> (B with the number 0) to disable this type of buffering.</p>
      <p><strong>P</strong><em>n</em>: Specify the letter P followed by the hotkey's <a href="../misc/Threads.htm">thread priority</a>. If the P option is omitted when creating a hotkey, 0 will be used.</p>
      <p id="SuspendExempt"><strong>S</strong> or <strong>S0</strong>: Specify the letter S to make the hotkey <a href="_SuspendExempt.htm">exempt</a> from <a href="Suspend.htm">Suspend</a>, which allows the hotkey to be used to turn Suspend off. Specify S0 (S with the number 0) to remove the exemption, allowing the hotkey to be suspended.</p>
      <p><strong>T</strong><em>n</em>: Specify the letter T followed by a the number of threads to allow for this hotkey as described in <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>. For example: <code>T5</code>.</p>
      <p><strong>I</strong><em>n</em> (InputLevel): Specify the letter I (or i) followed by the hotkey's <a href="_InputLevel.htm">input level</a>. For example: <code>I1</code>.</p>
      <p>If any of the option letters are omitted and the hotkey already exists, those options will not be changed. But if the hotkey does not yet exist -- that is, it is about to be created by this function -- the options will default to those most recently in effect. For example, the instance of <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> that occurs closest to the bottom of the script will be used. If <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> does not appear in the script, its default setting (OFF in this case) will be used.</p>
      </dd>

</dl>

<h2 id="Error_Handling">Error Handling</h2>
<p>An exception is thrown if a parameter is invalid or memory allocation fails.</p>
<p>One of the following exceptions may be thrown if the hotkey is invalid or could not be created:</p>
<table class="info">
  <tr>
    <th abbr="Class">Error Class</th>
    <th>.Message</th>
    <th style="width: 50%;" abbr="Descr">Description</th>
  </tr>
  <tr>
    <td rowspan="4"><a href="Error.htm#ValueError">ValueError</a></td>
    <td>Invalid key name.</td>
    <td>The <em>KeyName</em> parameter specifies one or more keys that are either not recognized or not supported by the current keyboard layout/language. <a href="Error.htm#Extra">Exception.Extra</a> contains the key name; e.g. "Entre" from <code>!Entre</code>.</td>
  </tr>
  <tr>
    <td>Unsupported prefix key.</td>
    <td>For example, using the mouse wheel as a prefix in a hotkey such as <code>WheelDown &amp; Enter</code> is not supported. <a href="Error.htm#Extra">Exception.Extra</a> contains the prefix key.</td>
  </tr>
  <tr>
    <td>This AltTab hotkey must have exactly one modifier/prefix.</td>
    <td rowspan="2">The <em>KeyName</em> parameter is not suitable for use with the <a href="../Hotkeys.htm#alttab">AltTab or ShiftAltTab</a> actions. A combination of (at most) two keys is required. For example: <code>RControl &amp; RShift::AltTab</code>. <a href="Error.htm#Extra">Exception.Extra</a> contains <em>KeyName</em>.</td>
  </tr>
  <tr>
    <td>This AltTab hotkey must specify which key (L or R).</td>
  </tr>
  <tr>
    <td rowspan="2"><a href="Error.htm#TargetError">TargetError</a></td>
    <td>Nonexistent hotkey.</td>
    <td>The function attempted to modify a nonexistent hotkey. <a href="Error.htm#Extra">Exception.Extra</a> contains <em>KeyName</em>.</td>
  </tr>
  <tr>
    <td>Nonexistent hotkey variant (IfWin).</td>
    <td>The function attempted to modify a nonexistent <a href="#variant">variant</a> of an existing hotkey. To solve this, use <a href="HotIf.htm">HotIf</a> to set the criteria to match those of the hotkey to be modified. <a href="Error.htm#Extra">Exception.Extra</a> contains <em>KeyName</em>.</td>
  </tr>
  <tr>
    <td><a href="Error.htm">Error</a></td>
    <td>Max hotkeys.</td>
    <td>Creating this hotkey would exceed the limit of 32762 hotkeys per script (however, each hotkey can have an unlimited number of <a href="#variant">variants</a>, and there is no limit to the number of <a href="../Hotstrings.htm">hotstrings</a>).</td>
  </tr>
</table>
<p>Tip: <a href="Try.htm">Try</a>-<a href="Catch.htm">Catch</a> can be used to test for the existence of a hotkey variant. For example:</p>
<pre>
try
    Hotkey "^!p"
catch TargetError
    MsgBox "The hotkey does not exist or it has no variant for the current HotIf criteria."
</pre>

<h2 id="Remarks">Remarks</h2>
<p>The <a href="HotIf.htm">current HotIf setting</a> determines the <a href="#variant">variant</a> of a hotkey upon which the Hotkey function will operate.</p>
<p>If the goal is to disable selected hotkeys or hotstrings automatically based on the type of window that is active, <code>Hotkey "^!c", "Off"</code> is usually less convenient than using <a href="_HotIf.htm">#HotIf</a> with <a href="WinActive.htm">WinActive</a>/<a href="WinExist.htm">WinExist</a> (or their dynamic counterparts <a href="HotIf.htm#IfWin">HotIfWinActive/Exist</a>).</p>
<p>Creating hotkeys via the <a href="../Hotkeys.htm">double-colon syntax</a> performs better than using the Hotkey function because the hotkeys can all be enabled as a batch when the script starts (rather than one by one). Therefore, it is best to use this function to create only those hotkeys whose key names are not known until after the script has started running. One such case is when a script's hotkeys for various actions are configurable via an <a href="IniRead.htm">INI file</a>.</p>
<p>If the script is <a href="Suspend.htm">suspended</a>, newly added/enabled hotkeys will also be suspended until the suspension is turned off (unless they are exempt as described in the <a href="Suspend.htm">Suspend</a> section).</p>
<p>The <a href="InstallKeybdHook.htm">keyboard</a> and/or <a href="InstallMouseHook.htm">mouse</a> hooks will be installed or removed if justified by the changes made by this function.</p>
<p>Although the Hotkey function cannot directly enable or disable hotkeys in scripts other than its own, in most cases it can <a href="../misc/Override.htm">override</a> them by creating or enabling the same hotkeys. Whether this works depends on a combination of factors: 1) Whether the hotkey to be overridden is a <a href="ListHotkeys.htm">hook hotkey</a> in the other script (non-hook hotkeys can always be overridden); 2) The fact that the most recently started script's hotkeys generally take precedence over those in other scripts (therefore, if the script intending to override was started most recently, its override should always succeed);  3) Whether the enabling or creating of this hotkey will newly activate the <a href="InstallKeybdHook.htm">keyboard</a> or <a href="InstallMouseHook.htm">mouse</a> hook (if so, the override will always succeed).</p>
<p>Once a script has at least one hotkey, it becomes <a href="../Scripts.htm#persistent">persistent</a>, meaning that <a href="ExitApp.htm">ExitApp</a> rather than <a href="Exit.htm">Exit</a> should be used to terminate it.</p>

<h2 id="variant">Variant (Duplicate) Hotkeys</h2>
<p>A particular hotkey can be created more than once if each definition has different <a href="HotIf.htm">HotIf</a> criteria. These are known as <em>hotkey variants</em>. For example:</p>
<pre>HotIfWinActive "ahk_class Notepad"
Hotkey "^!c", MyFuncForNotepad
HotIfWinActive "ahk_class WordPadClass"
Hotkey "^!c", MyFuncForWordPad
HotIfWinActive
Hotkey "^!c", MyFuncForAllOtherWindows</pre>
<p>If more than one variant of a hotkey is eligible to fire, only the one created earliest will fire. The exception to this is the global variant (the one with no HotIf criteria): It always has the lowest precedence, and thus will fire only if no other variant is eligible.</p>
<p>When creating duplicate hotkeys, the order of <a href="../Hotkeys.htm#Symbols">modifier symbols</a> such as <code>^!+#</code> does not matter. For example, <code>"^!c"</code> is the same as <code>"!^c"</code>. However, keys must be spelled consistently. For example, <em>Esc</em> is not the same as <em>Escape</em> for this purpose (though the case does not matter). Finally, any hotkey with a <a href="../Hotkeys.htm#wildcard">wildcard prefix (*)</a> is entirely separate from a non-wildcard one; for example, <code>"*F1"</code> and <code>"F1"</code> would each have their own set of variants.</p>
<p>For more information, see <a href="HotIf.htm">HotIf</a> and <a href="_HotIf.htm#general-remarks">#HotIf's General Remarks</a>.</p>

<h2 id="Related">Related</h2>
<p><a href="../Hotkeys.htm#Symbols">Hotkey Symbols</a>, <a href="HotIf.htm">HotIf</a>, <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a>, <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Suspend.htm">Suspend</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="Return.htm">Return</a>, <a href="Menu.htm">Menu object</a>, <a href="SetTimer.htm">SetTimer</a></p>

<h2 id="examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Creates a Ctrl-Alt-Z hotkey.</p>
<pre>Hotkey "^!z", MyFunc

MyFunc(ThisHotkey)
{
    MsgBox "You pressed " ThisHotkey
}</pre>
</div>

<div class="ex" id="ExAltTab">
<p><a class="ex_number" href="#ExAltTab"></a> Makes RCtrl &amp; RShift operate like Alt-Tab.</p>
<pre>Hotkey "RCtrl &amp; RShift", "AltTab"</pre>
</div>


<div class="ex" id="ExOff">
<p><a class="ex_number" href="#ExOff"></a> Disables the Shift-Win-C hotkey.</p>
<pre>Hotkey "$+#c", "Off"</pre>
</div>

<div class="ex" id="ExT">
<p><a class="ex_number" href="#ExT"></a> Changes a hotkey to allow 5 threads.</p>
<pre>Hotkey "^!a",, "T5"</pre>
</div>

<div class="ex" id="ExIfWin">
<p><a class="ex_number" href="#ExIfWin"></a> Creates <kbd>Alt</kbd>+<kbd>W</kbd> as a hotkey that works only in Notepad.</p>
<pre>HotIfWinActive "ahk_class Notepad"
Hotkey "!w", ToggleWordWrap  <em>; !w = Alt+W</em>

ToggleWordWrap(ThisHotkey)
{
    MenuSelect "A",, "Format", "Word Wrap"
}
</pre>
</div>

<div class="ex" id="ExampleIfFn">
<p><a class="ex_number" href="#ExampleIfFn"></a> Creates a GUI that allows to register primitive three-key combination hotkeys.</p>
<pre>
HkGui := Gui()
HkGui.Add("Text", "xm", "Prefix key:")
HkGui.Add("Edit", "yp x100 w100 vPrefix", "Space")
HkGui.Add("Text", "xm", "Suffix hotkey:")
HkGui.Add("Edit", "yp x100 w100 vSuffix", "f &amp; j")
HkGui.Add("Button", "Default", "Register").OnEvent("Click", RegisterHotkey)
HkGui.OnEvent("Close", (*) =&gt; ExitApp())
HkGui.OnEvent("Escape", (*) =&gt; ExitApp())
HkGui.Show()

RegisterHotkey(*)
{
    Saved := HkGui.Submit(false)
    HotIf (*) =&gt; GetKeyState(Saved.Prefix)
    Hotkey Saved.Suffix, (ThisHotkey) =&gt; MsgBox(ThisHotkey)
}</pre>
</div>

</body>
</html>
