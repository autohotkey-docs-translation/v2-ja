<!DOCTYPE HTML>
<html lang="en">
<head>
<title>NumGet - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The NumGet function returns the binary number stored at the specified address+offset." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumGet</h1>
<p>Returns the binary number stored at the specified address+offset.</p>
<pre class="Syntax">Number := <span class="func">NumGet</span>(Source, Offset, Type)
Number := <span class="func">NumGet</span>(Source, Type)</pre>

<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Source</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#objects">Object</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
		<p>A <a href="Buffer.htm">Buffer</a>-like object or memory address.</p>
    <p>Any object which implements <a href="Buffer.htm#Ptr">Ptr</a> and <a href="Buffer.htm#Size">Size</a> properties may be used, but this function is optimized for the native <a href="Buffer.htm">Buffer</a> object. Passing an object with these properties ensures that the function does not read memory from an invalid location; doing so could cause crashes or other unpredictable behaviour.</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If blank or omitted (or when using 2-parameter mode), it defaults to 0. Otherwise, specify an offset in bytes which is added to <em>Source</em> to determine the source address.</p>
  </dd>

  <dt>Type</dt>
  <dd>
      <p>Type: <a href="../Concepts.htm#strings">String</a></p>
      <p>One of the following strings: UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr</p>
    <p><em>Unsigned</em> 64-bit integers are not supported, as AutoHotkey's native integer type is Int64. Therefore, to work with numbers greater than or equal to 0x8000000000000000, omit the U prefix and interpret any negative values as large integers. For example, a value of -1 as an Int64 is really 0xFFFFFFFFFFFFFFFF if it is intended to be a UInt64. On 64-bit builds, UPtr is equivalent to Int64.</p>
      <p>For details see <a href="DllCall.htm#types">DllCall Types</a>.</p>
    </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a> or <a href="../Concepts.htm#numbers">Float</a></p>
<p>This function returns the binary number at the specified address+offset.</p>

<h2 id="General_Remarks">General Remarks</h2>
<p>If only two parameters are present, the second parameter must be <em>Type</em>. For example, <code>NumGet(var, "int")</code> is valid.</p>
<p>An exception may be thrown if the source address is invalid. However, some invalid addresses cannot be detected as such and may cause unpredictable behaviour. Passing a <a href="Buffer.htm">Buffer</a> object instead of an address ensures that the source address can always be validated.</p>

<h2 id="Related">Related</h2>
<p><a href="NumPut.htm">NumPut</a>, <a href="DllCall.htm">DllCall</a>, <a href="Buffer.htm">Buffer object</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>


</body>
</html>
