<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Scripting Language | AutoHotkey v2</title>
<meta name="description" content="Learn details about the language such as comments, expressions, control flow statements, structure of a script, etc." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>Scripting Language</h1>
<p>An AutoHotkey script is basically a set of instructions for the program to follow, written in a custom language exclusive to AutoHotkey. This language bears some similarities to several other scripting languages, but also has its own unique strengths and pitfalls. This document describes the language and also tries to point out common pitfalls.</p>
<p class="note">See <a href="Concepts.htm">Concepts and Conventions</a> for more general explanation of various concepts utilised by AutoHotkey.</p>

<h2 id="toc">Table of Contents</h2>
<ul>
  <li><a href="#general-conventions">General Conventions</a></li>
  <li><a href="#comments">Comments</a></li>
  <li><a href="#expressions">Expressions</a>
  <ul>
    <li><a href="#strings">Strings / Text</a></li>
    <li><a href="#variables">Variables</a></li>
    <li><a href="#constants">Constants</a></li>
    <li><a href="#operators">Operators</a></li>
    <li><a href="#function-calls">Function Calls</a>
    <ul>
      <li><a href="#function-call-statements">Function Call Statements</a></li>
      <li><a href="#optional-parameters">Optional Parameters</a></li>
    </ul></li>
    <li><a href="#operators-for-objects">Operators for Objects</a></li>
    <li><a href="#expression-statements">Expression Statements</a></li>
  </ul></li>
  <li><a href="#control-flow">Control Flow Statements</a>
  <ul>
    <li><a href="#control-flow-vs">Control Flow vs. Other Statements</a></li>
    <li><a href="#loop-statement">Loop Statement</a></li>
    <li><a href="#not-control-flow">Not Control Flow</a></li>
  </ul></li>
  <li><a href="#structure-of-a-script">Structure of a Script</a>
  <ul>
    <li><a href="#global-code">Global Code</a></li>
    <li><a href="#functions">Functions</a></li>
    <li><a href="#-include">#Include</a></li>
  </ul></li>
  <li><a href="#misc">Miscellaneous</a>
  <ul>
    <li><a href="#dynamic-variables">Dynamic Variables</a>
    <ul>
      <li><a href="#pseudo-arrays">Pseudo-arrays</a></li>
    </ul></li>
    <li><a href="#labels">Labels</a></li>
  </ul></li>
</ul>
<!-- TODO:
Directives
Declarations
Class definitions
Methods?
-->

<h2 id="general-conventions">General Conventions</h2>
<p><strong>Names:</strong> Variable and function names are not case-sensitive (for example, <code>CurrentDate</code> is the same as <code>currentdate</code>). For details such as maximum length and usable characters, see <a href="Concepts.htm#names">Names</a>.</p>
<p><strong>No typed variables:</strong> Variables have no explicitly defined type; instead, a value of any type can be stored in any variable (excluding constants and built-in variables). Numbers may be automatically converted to strings (text) and vice versa, depending on the situation.</p>
<p><strong>Declarations are optional:</strong> Except where noted on the <a href="Functions.htm">functions page</a>, variables do not need to be declared. However, attempting to read a variable before it is given a value is considered an error.</p>
<p><strong>Spaces are mostly ignored:</strong> Indentation (leading space) is important for writing readable code, but is not required by the program and is generally ignored. Spaces and tabs are <em>generally</em> ignored at the end of a line and within an expression (except between quotes). However, spaces are significant in some cases, including:</p>
<ul>
  <li><a href="#function-calls">Function</a> and method calls require there to be no space between the function/method name and <code>(</code>.</li>
  <li>Spaces are required when performing concatenation.</li>
  <li>Spaces may be required between two operators, to remove ambiguity.</li>
  <li>Single-line <a href="#comments">comments</a> require a leading space if they are not at the start of the line.</li>
</ul>
<p><strong>Line breaks are meaningful:</strong> Line breaks generally act as a statement separator, terminating the previous function call or other statement. (A <em>statement</em> is simply the smallest standalone element of the language that expresses some action to be carried out.) The exception to this is line continuation (see below).</p>
<p><strong>Line continuation:</strong> Long lines can be divided up into a collection of smaller ones to improve readability and maintainability. This is achieved by preprocessing, so is not part of the language as such. There are three methods:</p>
<ul>
  <li><a href="Scripts.htm#continuation-line">Continuation prefix</a>: Lines that begin with an <a href="Variables.htm#operators">expression operator</a> (except ++ and --) are merged with the previous line. Lines are merged regardless of whether the line actually contains an expression.</li>
  <li><a href="Scripts.htm#continuation-expr">Continuation by enclosure</a>: A sub-expression enclosed in (), [] or {} can automatically span multiple lines in most cases.</li>
  <li><a href="Scripts.htm#continuation-section">Continuation section</a>: Multiple lines are merged with the line above the section, which starts with <code>(</code> and ends with <code>)</code> (both symbols must appear at the beginning of a line, excluding whitespace).</li>
</ul>
 

<h2 id="comments">Comments</h2>
<p><em>Comments</em> are portions of text within the script which are ignored by the program. They are typically used to add explanation or disable parts of the code.</p>
<p>Scripts can be commented by using a semicolon at the beginning of a line. For example:</p>
<pre><em>; This entire line is a comment.</em></pre>
<p>Comments may also be added at the end of a line, in which case the semicolon must have at least one space or tab to its left. For example:</p>
<pre>Run "Notepad"  <em>; This is a comment on the same line as a function call.</em></pre>
<p>In addition, the <code><em>/*</em></code> and <code><em>*/</em></code> symbols can be used to comment out an entire section, as in this example:</p>
<pre><em>/*
MsgBox "This line is commented out (disabled)."
MsgBox "Common mistake:" */ " this does not end the comment."
MsgBox "This line is commented out."
*/</em>
MsgBox "This line is not commented out."
<em>/* This is also valid, but no other code can share the line. */</em>
MsgBox "This line is not commented out."
</pre>
<p>Excluding tabs and spaces, <code><em>/*</em></code> must appear at the start of the line, while <code><em>*/</em></code> can appear only at the start or end of a line. It is also valid to omit <code><em>*/</em></code>, in which case the remainder of the file is commented out.</p>
<p>Since comments are filtered out when the script is read from file, they do not impact performance or memory utilization.</p>

<h2 id="expressions">Expressions</h2>
<p><em>Expressions</em> are combinations of one or more <a href="Concepts.htm#values">values</a>, <a href="Concepts.htm#variables">variables</a>, <a href="#operators">operators</a> and <a href="#function-calls">function calls</a>. For example, <code>10</code>, <code>1+1</code> and <code>MyVar</code> are valid expressions. Usually, an expression takes one or more values as input, performs one or more operations, and produces a value as the result. The process of finding out the value of an expression is called <em>evaluation</em>. For example, the expression <code>1+1</code> <em>evaluates</em> to the number 2.</p>
<p>Simple expressions can be pieced together to form increasingly more complex expressions. For example, if <code>Discount/100</code> converts a discount percentage to a fraction, <code>1 - Discount/100</code> calculates a fraction representing the remaining amount, and <code>Price * (1 - Discount/100)</code> applies it to produce the net price.</p>
<p><em>Values</em> are <a href="Concepts.htm#numbers">numbers</a>, <a href="Concepts.htm#objects">objects</a> or <a href="Concepts.htm#strings">strings</a>. A <em>literal</em> value is one written physically in the script; one that you can see when you look at the code.</p>

<h3 id="strings">Strings / Text</h3>
<p class="note">For a more general explanation of strings, see <a href="Concepts.htm#strings">Strings</a>.</p>
<p>A <em>string</em>, or <em>string of characters</em>, is just a text value. In an expression, literal text must be enclosed in single or double quotation marks to differentiate it from a variable name or some other expression. This is often referred to as a <em>quoted literal string</em>, or just <em>quoted string</em>. For example, <code>"this is a quoted string"</code> and <code>'so is this'</code>.</p>
<p>To include an <em>actual</em> quote character inside a quoted string, use the <code>`"</code> or <code>`'</code> <a href="misc/EscapeChar.htm#quote">escape sequence</a> or enclose the character in the opposite type of quote mark. For example: <code>'She said, "An apple a day."'</code>.</p>
<p>Quoted strings can contain other <a href="misc/EscapeChar.htm">escape sequences</a> such as <code>`t</code> (tab), <code>`n</code> (linefeed), and <code>`r</code> (carriage return).</p>

<h3 id="variables">Variables</h3>
<p class="note">For a basic explanation and general details about variables, see <a href="Concepts.htm#variables">Variables</a>.</p>
<p><em>Variables</em> can be used in an expression simply by writing the variable's name. For example, <code>A_ScreenWidth/2</code>. However, variables cannot be used inside a quoted string. Instead, variables and other values can be combined with text through a process called <a href="Variables.htm#concat"><em>concatenation</em></a>. There are two ways to <em>concatenate</em> values in an expression:</p>
<ul>
  <li>Implicit concatenation: <code>"The value is " MyVar</code></li>
  <li>Explicit concatenation: <code>"The value is " . MyVar</code></li>
</ul>
<p>Implicit concatenation is also known as <em>auto-concat</em>. In both cases, the spaces preceding the variable and dot are mandatory.</p>
<p>The <a href="lib/Format.htm">Format</a> function can also be used for this purpose. For example:</p>
<pre>MsgBox Format("You are using AutoHotkey v{1} {2}-bit.", A_AhkVersion, A_PtrSize*8)</pre>
<p>To assign a value to a variable, use the <code>:=</code> <a href="Variables.htm#AssignOp">assignment operator</a>, as in <code>MyVar := "Some text"</code>.</p>
<p><em>Percent signs</em> within an expression are used to create <a href="#dynamic-variables">dynamic variable references</a>, but these are rarely needed.</p>

<h3 id="constants">Keyword Constants</h3>
<p>A constant is simply an unchangeable value, given a symbolic name. AutoHotkey currently has the following constants:</p>
<table class="info">
  <tr><th>Name</th><th>Value</th><th>Type</th><th abbr="Descr">Description</th></tr>
  <tr><td>False</td><td>0</td><td><a href="Concepts.htm#numbers">Integer</a></td><td><a href="Variables.htm#Boolean">Boolean</a> false, sometimes meaning "off", "no", etc.</td></tr>
  <tr><td>True</td><td>1</td><td><a href="Concepts.htm#numbers">Integer</a></td><td><a href="Variables.htm#Boolean">Boolean</a> true, sometimes meaning "on", "yes", etc.</td></tr>
</table>
<p>Unlike the read-only <a href="Variables.htm#BuiltIn">built-in variables</a>, these cannot be returned by a <a href="#dynamic-variables">dynamic reference</a>.</p>

<h3 id="operators">Operators</h3>
<p><em>Operators</em> take the form of a symbol or group of symbols such as <code>+</code> or <code>:=</code>, or one of the words <code>and</code>, <code>or</code>, <code>not</code>, <code>is</code>, <code>in</code> or <code>contains</code>. They take one, two or three values as input and return a value as the result. A value or sub-expression used as input for an operator is called an <em>operand</em>.</p>
<ul>
  <li><em>Unary</em> operators are written either before or after a single operand, depending on the operator. For example, <code>-x</code> or <code>not keyIsDown</code>.</li>
  <li><em>Binary</em> operators are written in between their two operands. For example, <code>1+1</code> or <code>2 * 5</code>.</li>
  <li>AutoHotkey has only one <em>ternary</em> operator, which takes the form <a href="Variables.htm#ternary"><code>condition ? valueIfTrue : valueIfFalse</code></a>.</li>
</ul>
<p>Some unary and binary operators share the same symbols, in which case the meaning of the operator depends on whether it is written before, after or in between two values. For example, <code>x-y</code> performs subtraction while <code>-x</code> inverts the sign of <code>x</code> (producing a positive value from a negative value and vice versa).</p>
<p>Operators of equal precedence such as multiply (<code>*</code>) and divide (<code>/</code>) are evaluated in left-to-right order unless otherwise specified in the <a href="Variables.htm#operators">operator table</a>. By contrast, an operator of lower precedence such as add (<code>+</code>) is evaluated after a higher one such as multiply (<code>*</code>). For example, <code>3 + 2 * 2</code> is evaluated as <code>3 + (2 * 2)</code>. Parentheses may be used to override precedence as in this example: <code>(3 + 2) * 2</code></p>

<h3 id="function-calls">Function Calls</h3>
<p class="note">For a general explanation of functions and related terminology, see <a href="Concepts.htm#functions">Functions</a>.</p>
<p><em>Functions</em> take a varying number of inputs, perform some action or calculation, and then <a href="Concepts.htm#return-a-value"><em>return</em></a> a result. The inputs of a function are called <a href="Concepts.htm#parameters"><em>parameters</em></a> or <em>arguments</em>. A function is <a href="Concepts.htm#call"><em>called</em></a> simply by writing the target function followed by parameters enclosed in parentheses. For example, <code>GetKeyState("Shift")</code> returns (evaluates to) 1 if <kbd>Shift</kbd> is being held down or 0 otherwise.</p>
<p class="warning"><strong>Note:</strong> There must not be any space between the function and open parenthesis.</p>
<p>For those new to programming, the requirement for parentheses may seem cryptic or verbose at first, but they are what allows a function call to be combined with other operations. For example, the expression <code>GetKeyState("Shift", "P") and GetKeyState("Ctrl", "P")</code> returns 1 only if both keys are being physically held down.</p>
<p>Although a function call expression usually begins with a literal function name, the target of the call can be any expression which produces a <a href="misc/Functor.htm">function object</a>. In the expression <code>GetKeyState("Shift")</code>, <em>GetKeyState</em> is actually a variable reference, although it usually refers to a read-only variable containing a built-in function.</p>

<h4 id="function-call-statements">Function Call Statements</h4>
<p>If the return value of the function is not needed and the function name is written at the start of the line (or in other contexts which allow a <a href="Concepts.htm#statement">statement</a>, such as following <code>else</code> or a <a href="Hotkeys.htm">hotkey</a>), the parentheses can be omitted. In this case, the remainder of the line is taken as the function's parameter list. For example:</p>
<pre>result := MsgBox("This one requires parentheses.",, "OKCancel")
MsgBox "This one doesn't. The result was " result "."</pre>
<p>Parentheses can also be omitted when calling a <a href="Concepts.htm#methods">method</a> in this same context, but only when the target object is either a variable or a directly named property, such as <code>myVar.myMethod</code> or <code>myVar.myProp.myMethod</code>.</p>
<p>As with function call expressions, the target of a function call statement does not have to be a predefined function; it can instead be a variable containing a <a href="misc/Functor.htm">function object</a>.</p>
<p>A function call statement can <a href="Scripts.htm#continuation">span multiple lines</a>.</p>
<p>Function call statements have the following limitations:</p>
<ul>
  <li>If there is a return value, it is always discarded.</li>
  <li>Like <a href="#control-flow">control flow statements</a>, they cannot be used inside an expression.</li>
  <li>When optional parameters are omitted, any commas at the <em>end</em> of the parameter list must also be omitted to prevent <a href="Scripts.htm#continuation-line">line continuation</a>.</li>
  <li>Function call statements cannot be <a href="Functions.htm#VariadicCall">variadic</a>, although they can pass a fixed number of parameters to a variadic function.</li>
</ul>

<h4 id="optional-parameters">Optional Parameters</h4>
<p>Optional parameters can simply be left blank, but the delimiting comma is still required unless all subsequent parameters are also omitted. For example, the <a href="lib/Run.htm">Run</a> function can accept between one and four parameters. All of the following are valid:</p>
<pre>
Run "notepad.exe", "C:\"
Run "notepad.exe",, "Min"
Run("notepad.exe", , , &amp;notepadPID)
</pre>
<p id="unset">Within a <a href="#function-calls">function call</a>, <a href="Variables.htm#square-brackets">array literal</a> or <a href="Variables.htm#curly-braces">object literal</a>, the keyword <code>unset</code> can be used to explicitly omit the parameter or value. An unset expression has one of the following effects:</p>
<ul>
  <li>For a user-defined function, the parameter's <a href="Functions.htm#optional">default value</a> is used.</li>
  <li>For a built-in function, the parameter is considered to have been omitted.</li>
  <li>For an <a href="Variables.htm#square-brackets">array literal</a> such as <code>[var?]</code>, the element is included in the array's length but is given no value.</li>
  <li>For an <a href="Variables.htm#curly-braces">object literal</a> such as <code>{x: y?}</code>, the property is not assigned.</li>
</ul>
<p>The <code>unset</code> keyword can also be <a href="Functions.htm#unset">used in a function definition</a> to indicate that a parameter is optional but has no default value. When the function executes, the local variable corresponding to that parameter will have <a href="Concepts.htm#nothing">no value</a> if the parameter was omitted.</p>
<p>The <a href="Variables.htm#maybe">maybe operator (<em>var</em><strong>?</strong>)</a> can be used to pass or omit a variable depending on whether it has a value. For example, <code>Array(MyVar?)</code> is equivalent to <code>Array(IsSet(MyVar) ? MyVar : unset)</code>.</p>

<h3 id="operators-for-objects">Operators for Objects</h3>
<p>There are other symbols used in expressions which don't quite fit into any of the categories defined above, or that affect the meaning of other parts of the expression, as described below. These all relate to <em>objects</em> in some way. Providing a full explanation of what each construct does would require introducing more concepts which are outside the scope of this section.</p>
<p><code>Alpha.Beta</code> is often called <em>member access</em>. <em>Alpha</em> is an ordinary variable, and could be replaced with a function call or some other sub-expression which returns an object. When evaluated, the object is sent a request "give me the value of property <em>Beta</em>", "store this value in property <em>Beta</em>" or "call the method named <em>Beta</em>". In other words, <em>Beta</em> is a name which has meaning to the object; it is not a local or global variable.</p>
<p><code>Alpha.Beta()</code> is a <em>method call</em>, as described above. The parentheses can be omitted in specific cases; see <a href="#function-call-statements">Function Call Statements</a>.</p>
<p><code>Alpha.Beta[Param]</code> is a specialised form of member access which includes additional parameters in the request. While <em>Beta</em> is a simple name, <em>Param</em> is an ordinary variable or sub-expression, or a list of sub-expressions separated by commas (the same as in a function's parameter list). <a href="Functions.htm#VariadicCall">Variadic calls</a> are permitted.</p>
<p><code>Alpha.%vBeta%</code>, <code>Alpha.%vBeta%[Param]</code> and <code>Alpha.%vBeta%()</code> are also member access, but <em>vBeta</em> is a variable or sub-expression. This allows the name of the property or method to be determined while the script is running. Parentheses are required when calling a method this way.</p>
<p><code>Alpha[Index]</code> accesses the <em>default property</em> of <code>Alpha</code>, giving <code>Index</code> as a parameter. Both <em>Alpha</em> and <em>Index</em> are variables in this case, and could be replaced with virtually any sub-expression. This syntax is usually used to retrieve an element of an <a href="lib/Array.htm">Array</a> or <a href="lib/Map.htm">Map</a>.</p>
<p id="array-literal"><code>[A, B, C]</code> creates an <a href="lib/Array.htm">Array</a> with the initial contents A, B and C (all variables in this case), where A is element 1.</p>
<p id="object-literal"><code>{Prop1: Value1, Prop2: Value2}</code> creates an <a href="lib/Object.htm">Object</a> with properties literally named <em>Prop1</em> and <em>Prop2</em>. A value can later be retrieved by using the <em>member access</em> syntax described above. To evaluate a property name as an expression, enclose it in percent signs. For example: <code>{%NameVar%: ValueVar}</code>.</p>
<p><code>MyFunc(Params*)</code> is a <a href="Functions.htm#VariadicCall">variadic function call</a>. The asterisk must immediately precede the closing parenthesis at the end of the function's parameter list. <em>Params</em> must be a variable or sub-expression which returns an <a href="lib/Array.htm">Array</a> or other enumerable object. Although it isn't valid to use <code>Params*</code> just anywhere, it can be used in an array literal (<code>[A, B, C, ArrayToAppend*]</code>) or property parameter list (<code>Alpha.Beta[Params*]</code> or <code>Alpha[Params*]</code>).</p>

<h3 id="expression-statements">Expression Statements</h3>
<p>Not all expressions can be used alone on a line. For example, a line consisting of just <code>21*2</code> or <code>"Some text"</code> wouldn't make any sense. An expression <em>statement</em> is an expression used on its own, typically for its side-effects. Most expressions with side-effects can be used this way, so it is generally not necessary to memorise the details of this section.</p>
<p>The following types of expressions can be used as statements:</p>
<p>Assignments, as in <code>x := y</code>, compound assignments such as <code>x += y</code>, and increment/decrement operators such as <code>++x</code> and <code>x--</code>.</p>
<p class="warning"><strong>Known limitation:</strong> For <code>x++</code> and <code>x--</code>, there currently cannot be a space between the variable name and operator.</p>
<p>Function calls such as <code>MyFunc(Params)</code>. However, a standalone function call cannot be followed by an open brace <code>{</code> (at the end of the line or on the next line), because it would be confused with a function declaration.</p>
<p>Method calls such as <code>MyObj.MyMethod()</code>.</p>
<p>Member access using square brackets, such as <code>MyObj[Index]</code>, which can have side-effects like a function call.</p>
<p>Ternary expressions such as <code>x ? CallIfTrue() : CallIfFalse()</code>. However, it is safer to utilize the rule below; that is, always enclose the expression (or just the condition) in parentheses.</p>
<p class="warning"><strong>Known limitation:</strong> Due to ambiguity with <a href="#function-call-statements">function call statements</a>, conditions beginning with a variable name and space (but also containing other operators) should be enclosed in parentheses. For example, <code>(x + 1) ? y : z</code> and <code>x+1 ? y : z </code> are expression statements but <code>x + 1 ? y : z</code> is a function call statement.</p>
<p class="warning"><strong>Note:</strong> The condition cannot begin with <code>!</code> or any other expression operator, as it would be interpreted as a <a href="Scripts.htm#continuation-line">continuation line</a>.</p>
<p>Expressions starting with <code>(</code>. However, there usually must be a matching <code>)</code> on the same line, otherwise the line would be interpreted as the start of a <a href="Scripts.htm#continuation">continuation section</a>.</p>
<p>Expressions starting with a double-deref, such as <code>%varname% := 1</code>. This is primarily due to implementation complexity.</p>
<p>Expressions that start with any of those described above (but not those described below) are also allowed, for simplicity. For example, <code>MyFunc()+1</code> is currently allowed, although the <code>+1</code> has no effect and its result is discarded. Such expressions might become invalid in the future due to enhanced error-checking.</p>
<p><a href="#function-call-statements">Function call statements</a> are similar to expression statements, but are technically not pure expressions. For example, <code>MsgBox "Hello, world!"</code>, <code>myGui.Show</code> or <code>x.y.z "my parameter"</code>.</p>

<h2 id="control-flow">Control Flow Statements</h2>
<p class="note">For a general explanation of control flow, see <a href="Concepts.htm#control-flow">Control Flow</a>.</p>
<p><a href="Concepts.htm#statement">Statements</a> are grouped together into a <a href="lib/Block.htm"><em>block</em></a> by enclosing them in braces <code>{}</code>, as in C, JavaScript and similar languages, but usually the braces must appear at the start of a line. Control flow statements can be applied to an entire block or just a single statement.</p>
<p>The <a href="Concepts.htm#cf-body">body</a> of a control flow statement is always a single <em>group</em> of statements. A block counts as a single group of statements, as does a control flow statement and its body. The following related statements are also grouped with each other, along with their bodies: <code>If</code> with <code>Else</code>; <code>Loop</code>/<code>For</code> with <code>Until</code> or <code>Else</code>; <code>Try</code> with <code>Catch</code> and/or <code>Else</code> and/or <code>Finally</code>. In other words, when a group of these statements is used as a whole, it does not always need to be enclosed in braces (however, some coding styles always include the braces, for clarity).</p>
<p>Control flow statements which have a body and therefore must always be followed by a related statement or group of statements: <code>If</code>, <code>Else</code>, <code>Loop</code>, <code>While</code>, <code>For</code>, <code>Try</code>, <code>Catch</code> and <code>Finally</code>.</p>
<p id="control-flow-list">The following control flow statements exist:</p>
<ul>
  <li>A <a href="lib/Block.htm">block</a> (denoted by a pair of braces) groups zero or more statements to act as a single statement.</li>
  <li>An <a href="lib/If.htm">If statement</a> causes its body to be executed or not depending on a condition. It can be followed by an <a href="lib/Else.htm">Else</a> statement, which executes only if the condition was not met.</li>
  <li><a href="lib/Goto.htm">Goto</a> jumps to the specified label and continues execution.</li>
  <li><a href="lib/Return.htm">Return</a> returns from a function.</li>
  <li>A <a href="#loop-statement">Loop statement</a> (<a href="lib/Loop.htm">Loop</a>, <a href="lib/While.htm">While</a> or <a href="lib/For.htm">For</a>) executes its body repeatedly.
  <ul>
    <li><a href="lib/Break.htm">Break</a> exits (terminates) a loop.</li>
    <li><a href="lib/Continue.htm">Continue</a> skips the rest of the current loop iteration and begins a new one.</li>
    <li><a href="lib/Until.htm">Until</a> causes a loop to terminate when an expression evaluates to true. The expression is evaluated after each iteration.</li>
  </ul></li>
  <li><a href="lib/Switch.htm">Switch</a> compares a value with multiple cases and executes the statements of the first match.</li>
  <li>Exception handling:
  <ul>
    <li><a href="lib/Try.htm">Try</a> guards its body against runtime errors and values thrown by the throw statement.</li>
    <li><a href="lib/Catch.htm">Catch</a> executes if an exception of a given type is thrown within a try statement.</li>
    <li><a href="lib/Else.htm">Else</a>, when used after a catch statement, executes only if no exception is thrown within a try statement.</li>
    <li><a href="lib/Finally.htm">Finally</a> executes its body when control is being transferred out of a try or catch statement's body.</li>
    <li><a href="lib/Throw.htm">Throw</a> throws an exception to be handled by try/catch or <a href="lib/OnError.htm">OnError</a>, or to display an error dialog.</li>
  </ul></li>
</ul>

<h3 id="control-flow-vs">Control Flow vs. Other Statements</h3>
<p>Control flow statements differ from <a href="#function-call-statements">function call statements</a> in several ways:</p>
<ul>
  <li>The opening brace of a <a href="lib/Block.htm">block</a> can be written at the end of the same line as an <a href="lib/If.htm">If</a>, <a href="lib/Else.htm">Else</a>, <a href="#loop-statement">Loop</a>, <a href="lib/While.htm">While</a>, <a href="lib/For.htm">For</a>, <a href="lib/Try.htm">Try</a>, <a href="lib/Catch.htm">Catch</a> or <a href="lib/Finally.htm">Finally</a> statement (basically any control flow statement which has a <a href="Concepts.htm#cf-body">body</a>). This is referred to as the One True Brace (OTB) style.</li>
  <li><a href="lib/Else.htm">Else</a>, <a href="lib/Try.htm">Try</a> and <a href="lib/Finally.htm">Finally</a> allow any valid statement to their right, as they require a <a href="Concepts.htm#cf-body">body</a> but have no parameters.</li>
  <li><a href="lib/If.htm">If</a>, <a href="lib/While.htm">While</a>, <a href="lib/Return.htm">Return</a>, <a href="lib/Until.htm">Until</a>, <a href="lib/Loop.htm">Loop <em>Count</em></a> and <a href="lib/Goto.htm">Goto</a> allow an open parenthesis to be used immediately after the name, to enclose the entire parameter list. Although these look like function calls, they are not, and cannot be used mid-expression. For example, <code>if(expression)</code>.</li>
  <li>Control flow statements cannot be overridden by defining a function with the same name.</li>
</ul>

<h3 id="loop-statement">Loop Statement</h3>
<p>There are several types of loop statements:</p>
<ul>
  <li><a href="lib/Loop.htm">Loop <em>Count</em></a> executes a statement repeatedly: either the specified number of times or until Break is encountered.</li>
  <li><a href="lib/LoopReg.htm">Loop Reg</a> retrieves the contents of the specified registry subkey, one item at a time.</li>
  <li><a href="lib/LoopFiles.htm">Loop Files</a> retrieves the specified files or folders, one at a time.</li>
  <li><a href="lib/LoopParse.htm">Loop Parse</a> retrieves substrings (fields) from a string, one at a time.</li>
  <li><a href="lib/LoopRead.htm">Loop Read</a> retrieves the lines in a text file, one at a time.</li>
  <li><a href="lib/While.htm">While</a> executes a statement repeatedly until the specified expression evaluates to false. The expression is evaluated before each iteration.</li>
  <li><a href="lib/For.htm">For</a> executes a statement once for each value or pair of values returned by an enumerator, such as each key-value pair in an object.</li>
</ul>
<p><a href="lib/Break.htm">Break</a> exits (terminates) a loop, effectively jumping to the next line after the loop's body.</p>
<p><a href="lib/Continue.htm">Continue</a> skips the rest of the current loop iteration and begins a new one.</p>
<p><a href="lib/Until.htm">Until</a> causes a loop to terminate when an expression evaluates to true. The expression is evaluated after each iteration.</p>
<p id="named-loops">A <a href="#labels">label</a> can be used to "name" a loop for <a href="lib/Continue.htm">Continue</a> and <a href="lib/Break.htm">Break</a>. This allows the script to easily continue or break out of any number of nested loops without using <a href="lib/Goto.htm">Goto</a>.</p>
<p>The built-in variable <strong>A_Index</strong> contains the number of the current loop iteration. It contains 1 the first time the loop's body is executed. For the second time, it contains 2; and so on. If an inner loop is enclosed by an outer loop, the inner loop takes precedence. A_Index works inside all types of loops, but contains 0 outside of a loop.</p>
<p>For some loop types, other built-in variables return information about the current loop item (registry key/value, file, substring or line of text). These variables have names beginning with <strong>A_Loop</strong>, such as A_LoopFileName and A_LoopReadLine. Their values always correspond to the most recently started (but not yet stopped) loop of the appropriate type. For example, A_LoopField returns the current substring in the innermost parsing loop, even if it is used inside a file or registry loop.</p>
<pre>t := "column 1`tcolumn 2`nvalue 1`tvalue 2"
Loop Parse t, "`n"
{
    rowtext := A_LoopField
    rownum := A_Index  <em>; Save this for use in the second loop, below.</em>
    Loop Parse rowtext, "`t"
    {
        MsgBox rownum ":" A_Index " = " A_LoopField
    }
}
</pre>
<p>Loop variables can also be used outside the body of a loop, such as in a function which is called from within a loop.</p>

<h3 id="not-control-flow">Not Control Flow</h3>
<p>As directives, labels, double-colon hotkey and hotstring tags, and declarations without assignments are processed when the script is loaded from file, they are not subject to control flow. In other words, they take effect unconditionally, before the script ever executes any control flow statements. Similarly, the <a href="lib/_HotIf.htm">#HotIf</a> directive cannot affect control flow; it merely sets the criteria for any hotkeys and hotstrings specified in the code. A hotkey's criteria is evaluated each time it is pressed, not when the #HotIf directive is encountered in the code.</p>

<h2 id="structure-of-a-script">Structure of a Script</h2>

<h3 id="global-code">Global Code</h3>
<p>After the script has been loaded, the <em>auto-execute thread</em> begins executing at the script's top line, and continues until instructed to stop, such as by <a href="lib/Return.htm">Return</a>, <a href="lib/ExitApp.htm">ExitApp</a> or <a href="lib/Exit.htm">Exit</a>. The physical end of the script also acts as <a href="lib/Exit.htm">Exit</a>.</p>
<p>Global code, or code in the global <a href="Concepts.htm#scope">scope</a>, is any executable code that is not inside a function or class definition. Any variable references there are said to be <a href="Functions.htm#Global">global</a>, since they can be accessed by any function (with the proper declaration). Such code is often used to configure settings which apply to every newly launched <a href="misc/Threads.htm">thread</a>, or to <a href="Concepts.htm#uninitialized-variables">initialize</a> global variables used by hotkeys and other functions.</p>
<p>Code to be executed at startup (immediately when the script starts) is often placed at the top of the file. However, such code can be placed throughout the file, in between (but not inside) function and class definitions. This is because the body of each function or class definition is skipped whenever it is encountered during execution. In some cases, the entire purpose of the script may be carried out with global code.</p>
<p><strong>Related:</strong> <a href="Scripts.htm#auto">Script Startup (the Auto-execute Thread)</a></p>

<h3 id="subroutines">Subroutines</h3>
<p>A <em>subroutine</em> (also <em>sub</em> or <em>procedure</em>) is a reusable block of code which can be executed on demand. A subroutine is created by defining a <em>function</em> (see below). These terms are generally interchangeable for AutoHotkey v2, where functions are the only type of subroutine.</p>

<h3 id="functions">Functions</h3>
<p><strong>Related:</strong> <a href="Functions.htm">Functions</a> (all about defining functions)</p>
<p>Aside from calling the many useful <a href="lib/index.htm">predefined functions</a>, a script can define its own functions. These functions can generally be used two ways:</p>
<ol>
  <li>A function can be called by the script itself. This kind of function might be used to avoid repetition, to make the code more manageable, or perhaps for other purposes.</li>
  <li>A function can be called by the program in response to some event, such as the user pressing a hotkey. For instance, each hotkey is associated with a function to execute whenever the hotkey is pressed.</li>
</ol>
<p>There are multiple ways to define a function:</p>
<ul>
  <li>A <a href="Functions.htm">function definition</a> combining a name, parentheses and a <a href="lib/Block.htm">block</a> of code. This defines a function which can be executed by name with a <a href="#function-calls">function call</a> or <a href="#function-call-statements">function call statement</a>. For example:
<pre>SayHello()  <em>; Define the SayHello function.</em>
{
    MsgBox "Hello!"
}

SayHello  <em>; Call the SayHello function.</em></pre>
  </li>
  <li>A <a href="Hotkeys.htm">hotkey</a> or <a href="Hotstrings.htm">hotstring</a> definition, combining a hotkey or hotstring with a single <a href="Concepts.htm#statement">statement</a> or a <a href="lib/Block.htm">block</a> of code. This type of function cannot be called directly, but is executed whenever the hotkey or hotstring is activated. For example:
<pre>#w::Run "wordpad"  <em>; Press Win-W to run Wordpad.</em>
#n::  <em>; Press Win-N to run Notepad.</em>
{
    Run "notepad"
}</pre>
  </li>
  <li>A <a href="Variables.htm#fat-arrow">fat arrow expression</a> defines a function which evaluates an <a href="#expressions">expression</a> and <a href="Concepts.htm#return-a-value">returns</a> its result, instead of executing a block of code. Such functions usually have no name as they are passed directly to another function. For example:
    <pre>SetTimer () =&gt; MsgBox("Hello!"), -1000  <em>; Says hello after 1 second.</em></pre>
  </li>
  <li>The fat arrow syntax can also be used outside of expressions as shorthand for a normal function or method definition. For example, the following is equivalent to the SayHello definition above, except that this one returns "OK":
    <pre>SayHello() =&gt; MsgBox("Hello!")</pre>
  </li>
</ul>
<p>Variables in functions are <a href="Functions.htm#Local">local</a> to that function by default, except in the following cases:</p>
<ul>
  <li>When the function is <a href="Functions.htm#AssumeGlobal">assume-global</a>.</li>
  <li>When a variable is referenced but not used as the target of an <a href="Variables.htm#AssignOp">assignment</a> or the reference operator (<code>&amp;var</code>).</li>
  <li>When referring to a local variable of an outer function inside a <a href="Functions.htm#nested">nested function</a>.</li>
</ul>
<p>A function can optionally <a href="Concepts.htm#parameters">accept parameters</a>. Parameters are defined by listing them inside the parentheses. For example:</p>
<pre>MyFunction(FirstParameter, Second, &amp;Third, Fourth:="")
{
    <em>;...</em>
    return "a value"
}
</pre>
<p>As with function calls, there must be no space between the function name and open-parenthesis.</p>
<p>The line break between the close-parenthesis and open-brace is optional. There can be any amount of whitespace or comments between the two.</p>
<p>The <a href="Functions.htm#ByRef">ByRef marker (&amp;)</a> indicates that the caller must pass a variable reference. Inside the function, any reference to the parameter will actually access the caller's variable. This is similar to omitting <code>&amp;</code> and explicitly <a href="Variables.htm#deref">dereferencing</a> the parameter inside the function (e.g. <code>%Third%</code>), but in this case the percent signs are omitted. If the parameter is optional and the caller omits it, the parameter acts as a normal local variable.</p>
<p><a href="Functions.htm#optional">Optional</a> parameters are specified by following the parameter name with <code>:=</code> and a default value, which must be a literal quoted string, a number, <code>true</code>, <code>false</code> or <code>unset</code>.</p>
<p>The function can <a href="Functions.htm#return">return a value</a>. If it does not, the default return value is an empty string.</p>
<p>A function definition does not need to precede calls to that function.</p>
<p class="note">See <a href="Functions.htm">Functions</a> for much more detail.</p>

<h3 id="-include">#Include</h3>
<p>The <a href="lib/_Include.htm">#Include</a> directive causes the script to behave as though the specified file's contents are present at this exact position. This is often used to organise code into separate files, or to make use of script libraries written by other users.</p>
<p>An #Include file can contain <a href="#global-code">global code</a> to be executed during <a href="Scripts.htm#auto">script startup</a>, but as with code in the main script file, such code will be executed only if the auto-execute thread is not terminated (such as with an unconditional <code>Return</code>) prior to the #Include directive. A <a href="lib/_Warn.htm#Unreachable">warning</a> is displayed by default if any code cannot be executed due to a prior <code>Return</code>.</p>
<p>Unlike in C/C++, #Include does nothing if the file has already been included by a previous directive. To include the contents of the same file multiple times, use <a href="lib/_Include.htm">#IncludeAgain</a>.</p>
<p>To facilitate sharing scripts, #Include can search a few standard locations for a library script. For details, see <a href="Scripts.htm#lib">Script Library Folders</a>.</p>

<h2 id="misc">Miscellaneous</h2>

<h3 id="dynamic-variables">Dynamic Variables</h3>
<p>A <em>dynamic variable reference</em> takes a text value and interprets it as the name of a variable.</p>
<p class="note"><strong>Note:</strong> A variable cannot be <em>created</em> by a dynamic reference, but existing variables can be assigned. This includes all variables which the script contains non-dynamic references to, even if they have not been assigned values.</p>
<p>The most common form of dynamic variable reference is called a <em>double reference</em> or <em>double-deref</em>. Before performing a double reference, the name of the target variable is stored in a second variable. This second variable can then be used to assign a value to the target variable indirectly, using a double reference. For example:</p>
<pre>target := 42
second := "target"
MsgBox  second   <em>; Normal (single) variable reference =&gt; target</em>
MsgBox %second%  <em>; Double-deref =&gt; 42</em>
</pre>
<p>Currently, <code>second</code> must always contain a variable name in the second case; arbitrary expressions are not supported.</p>
<p>A dynamic variable reference can also take one or more pieces of literal text and the content of one or more variables, and join them together to form a single variable name. This is done simply by writing the pieces of the name and percent-enclosed variables in sequence, without any spaces. For example, <code>MyArray%A_Index%</code> or <code>MyGrid%X%_%Y%</code>. This is used to access <em>pseudo-arrays</em>, described below.</p>
<p>These techniques can also be applied to properties and methods of objects. For example:</p>
<pre>clr := {}
for n, component in ["red", "green", "blue"]
    clr.%component% := Random(0, 255)
MsgBox clr.red "," clr.green "," clr.blue</pre>

<h4 id="pseudo-arrays">Pseudo-arrays</h4>
<p>A <em>pseudo-array</em> is actually just a bunch of discrete variables, but with a naming pattern which allows them to be used like elements of an array. For example:</p>
<pre>
MyArray1 := "A"
MyArray2 := "B"
MyArray3 := "C"
Loop 3
    MsgBox MyArray%A_Index%  <em>; Shows A, then B, then C.</em>
</pre>
<p>The "index" used to form the final variable name does not have to be numeric; it could instead be a letter or keyword.</p>
<p>For these reasons, it is generally recommended to use an <a href="Objects.htm#Usage_Simple_Arrays">Array</a> or <a href="Objects.htm#Usage_Associative_Arrays">Map</a> instead of a pseudo-array:</p>
<ul>
  <li>As the individual elements are just normal variables, one can assign or retrieve a value, but cannot <em>remove</em> or <em>insert</em> elements.</li>
  <li>Because the pseudo-array is only conceptual and not a single value, it can't be passed to or returned from a function, or copied as a whole.</li>
  <li>A pseudo-array cannot be declared as a whole, so some "elements" may resolve to <a href="Functions.htm#Global">global</a> (or <a href="Functions.htm#capture-var">captured</a>) variables while others do not.</li>
  <li>If a variable is referenced non-dynamically but only assigned dynamically, a <a href="lib/_Warn.htm#VarUnset">load-time warning</a> may be displayed. Such warnings are a very effective way to detect errors, so disabling them is not recommended.</li>
  <li>Current versions of the language do not permit creating new variables dynamically. This is partly to encourage best practices, and partly to avoid inconsistency between dynamic and non-dynamic variable references in functions.</li>
</ul>

<h3 id="labels">Labels</h3>
<p>A label identifies a line of code, and can be used as a <a href="lib/Goto.htm">Goto</a> target or to <a href="#named-loops">specify a loop</a> to break out of or continue. A label consist of a <a href="Concepts.htm#names">name</a> followed by a colon:</p>
<pre>this_is_a_label:</pre>
<p>Aside from whitespace and comments, no other code can be written on the same line as a label. For more details, see <a href="misc/Labels.htm">Labels</a>.</p>
</body>
</html>
