<!DOCTYPE html>
<html lang="ja">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="author" content="tidbit" />
<meta name="description" content="AutoHotkeyのダウンロードとインストール方法、スクリプトの作成方法、ホットキーとホットストリングの使用方法、キー入力の送信方法、プログラムの実行方法などをご紹介します。" />
<meta name="keywords" content="ahk, オートホットキー, チュートリアル, 初心者ガイド" />
<title>初心者チュートリアル｜AutoHotkey v2</title>
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>AutoHotkey初心者チュートリアル<span style="opacity: 0.4">by tidbit</span></h1>
<h2 id="s0">目次</h2>
<ol>
    <li><a href="#s1">基本</a>
    <ol type="a">
        <li><a href="#s11">AutoHotkeyのダウンロードとインストール</a></li>
        <li><a href="#s12">スクリプトの作成方法</a></li>
        <li><a href="#s14">ヘルプファイルの探し方</a></li>
    </ol>
    </li>
    <li><a href="#s2">ホットキーとホットストリング</a>
    <ol type="a">
        <li><a href="#s21">キーとその不思議なシンボル</a></li>
        <li><a href="#s22">ウィンドウ固有のホットキー/ホットストリング</a></li>
        <li><a href="#s23">ファイルごとに複数のホットキー/ホットストリング</a></li>
        <li><a href="#s24">例</a></li>
    </ol>
    </li>
    <li><a href="#s3">キー入力の送信</a>
    <ol type="a">
        <li><a href="#s31">ゲーム</a></li>
    </ol>
    </li>
    <li><a href="#s4">プログラムとウェブサイトの運営</a></li>
    <li><a href="#s5">括弧の有無による関数呼び出し</a>
    <ol type="a">
        <li><a href="#s51">コードブロック</a></li>
    </ol>
    </li>
    <li><a href="#s6">変数</a>
    <ol type="a">
        <li><a href="#s62">ユーザーの入力を得る</a></li>
        <li><a href="#s63">他の例は？</a></li>
    </ol>
    </li>
    <li><a href="#s7">オブジェクト</a>
    <ol type="a">
        <li><a href="#s71">オブジェクトの作成</a></li>
        <li><a href="#s72">オブジェクトの使用</a></li>
    </ol>
    </li>
    <li><a href="#s8">その他の役立つグッズ</a>
    <ol type="a">
        <li><a href="#s81">謎の角括弧</a></li>
        <li><a href="#s82">AHKバージョンの検索</a></li>
        <li><a href="#s83">試行錯誤</a></li>
        <li><a href="#s84">インデント</a></li>
        <li><a href="#s85">助けを求める</a></li>
        <li><a href="#s86">その他のリンク</a></li>
    </ol>
    </li>
</ol>

<h2 id="s1">1 - 基本</h2>
<p class="note">旅を始める前に、いくつかアドバイスをさせてほしい。このチュートリアルでは、たくさんのテキストとたくさんのコードを見ることになるでしょう。学習の効果を高めるためには、テキストを読み、コードを&lt;b0&gt;試す&lt;/b0&gt;ことをお勧めします。それから、コードを研究するのです。このページのほとんどの例をコピー＆ペーストできます。もし混乱したら、もう一度そのセクションを読んでみてください。</p>

<h3 id="s11">a. AutoHotkeyのダウンロードとインストール</h3>
<p id="local_note" class="note" style="display: none">このドキュメントはローカルでご覧になっているのであれば、おそらくAutoHotkeyはすでにインストールされているでしょうから、セクションbまでは読み飛ばすことができます。</p>
<script type="text/javascript">
  if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
    document.getElementById("local_note").removeAttribute("style");
</script>
<p>AutoHotkey（AHK）の使い方を学ぶ前に、ダウンロードする必要があります。ダウンロードしたら、インストールしましょう。しかし、それはあなたが必要とするバージョンによります。このガイドでは、セットアップが最も簡単なインストーラーを使用します。</p>

<p>テキストの指示：</p>
<ol>
    <li>AutoHotkeyホームページへ：<a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></li>
    <li>ダウンロードをクリックしてください。AutoHotkeyの各メジャーバージョンのオプションが表示されるはずです。このドキュメントはv2用なので、そのオプションを選択するか、v1のドキュメントに切り替えてください。</li>
    <li>ダウンロードしたファイルの名前はAutoHotkey_*_setup.exeか、それに近いものでなければなりません。実行してインストールをクリックします。</li>
    <li>インスールが終われば最高だ！セクションbに進む。</li>
</ol>

<h3 id="s12">b. スクリプトの作成方法</h3>
<p>AutoHotkeyをインストールしたら、おそらくいろいろなことをさせたくなるでしょう。AutoHotkeyは魔法ではありません。みんなががそうであってほしいと思っていますが、そうではありません。だから、何をすべきかを指示する必要があります。このプロセスは「スクリプティング」と呼ばれています。</p>

<p>テキストの指示：</p>
<ol>
    <li>デスクトップ上で右クリックします。</li>
    <li>メニューから "新規作成" を見つけてください。</li>
    <li>"新規作成"メニューから"AutoHotkey Script"をクリックします。</li>
    <li>スクリプトに名前をつけてください。拡張子は.ahkで終わる必要があります。事例：MyScript.ahk</li>
    <li>デスクトップ上に新しく作成されたファイルを見つけて右クリックします。</li>
    <li>"Edit Script" をクリックする。</li>
    <li>おそらくメモ帳が開いたはずです。もしそうなら、成功です！
    <p>さて、スクリプトを作成したところで、そのファイルにコードを記述する必要があります。すべての組み込み関数と変数のリストについては、<a href="#s5">セクション5</a>を参照してください。</p>
    <p>ここでは、ホットキーが押されたときに<a href="lib/Send.htm">Send</a>関数を使用してテキストを入力するホットキーを含む、非常に基本的なスクリプトを紹介します：</p>
    <pre>
^j::
{
    Send "My First Script"
}</pre>
    <p>後でもっと詳しく説明します。それまでは、上のコードの説明をどうぞ：</p>
    <ul>
        <li><code>^j::</code> は、ホットキーです。<code>^</code> は <kbd>Ctrl</kbd>（コントロール）キーのことで、 <code>j</code> は文字の <kbd>J</kbd>です。. <code>::</code>の&lt;b5&gt;左&lt;/b5&gt;にあるものが、押すべきキーです。</li>
        <li><code>Send "My First Script"</code> は、キーを&lt;s1&gt;send&lt;/s1&gt;（入力）する方法です。<code>Send</code>は関数で、引用符の中のスペース以降はすべて入力されます。</li>
        <li>
<code>{</code> および <code>}</code> は、<a href="Hotkeys.htm">hotkey</a>の開始と終了を示しています。</li>
    </ul>
    </li>
    <li>ファイルを保存する。</li>
    <li>デスクトップにあるファイル／アイコンをダブルクリックして実行します。メモ帳か（入力できるものなら何でも）開いて、<kbd>Ctrl</kbd>と <kbd>J</kbd>を押します。</li>
    <li>ヒップ・ヒップ・万歳！最初のスクリプトは完成しました。ご褒美のお菓子を買って、このチュートリアルの続きを読みに戻りましょう。</li>
</ol><p class="note">動画による説明は、YouTubeの<a href="https://youtu.be/HcgQlGeaPHw">Install and Hello World</a>をご覧ください。</p>

<h3 id="s14">c. ヘルプファイルの探し方</h3>
<p>v2.0-a076以降のダウンロードには、メイン・プログラムと同じzipファイルにオフライン・ヘルプ・ファイルが含まれています。手動でファイルを解凍した場合、ヘルプファイルはどこに置いても差し支えありません。</p>
<p>v2.0-beta.4以降にはインストールスクリプトが含まれています。これを使ってAutoHotkeyをインストールした場合、各バージョンのヘルプファイルは、AutoHotkeyをインストールした場所のサブディレクトリ、例えば "C:\Program FilesAutoHotkey\v2.0-beta.7"の中にあるはずです。また、最後にインストールされたバージョンのサブディレクトリを指す "v2"というシンボリックリンクがあるかもしれません。v1.xがインストールされている場合、そのバージョンのヘルプファイルもルートディレクトリにあるでしょう。</p>
<p><b>AutoHotkey.chm</b>またはAutoHotkeyと書かれ、黄色いクエスチョンマークが付いたファイルを探してください。</p>
<p>ファイルそのものを探す必要がなければ、それを起動する方法もいくつかあります：</p>
<ul>
    <li>実行中のスクリプトの<a href="Program.htm#tray-icon">トレイメニュー</a>にある「ヘルプ」メニューオプションから。</li>
    <li>実行中のスクリプトの<a href="Program.htm#main-window">メインウィンドウ</a>にある "Help "メニューから、またはメインウィンドウがアクティブな状態でF1を押す。</li>
    <li><a href="Program.htm#dash">ダッシュ</a>の「Help files (F1)」オプションで、マウスを使うか、ダッシュがアクティブな状態でF1を押すことで起動できます。Dashはスタートメニューの「AutoHotkey」ショートカットから開くことができます。</li>
</ul>

<h2 id="s2">2 - ホットキーとホットストリング</h2>

<p>ホットキーとは何ですか？ホットキーとは、触れると熱くなるキーのこと。……冗談だよ。これは、キーボードの人が何らかのアクションを起こすために押すキー、またはキーの組み合わせである。事例：</p>
<pre>^j::
{
    Send "My First Script"
}</pre>
<p>ホットストリングとは？ホットストリングは主に、入力した略語を展開する（自動置換）ために使用されますが、スクリプト化されたアクションを起動するためにも使用できます。事例：</p>
<pre>::ftw::Free the whales</pre>
<p>この2つの例の違いは、ホットキーは<kbd>Ctrl</kbd>+<kbd>J</kbd>を押したときに発動するのに対し、ホットストリングは入力された「ftw」を「Free the whales」に変換するという点です。</p>
<p><i>「では、私のような素人がホットキーを作るにはどうすればいいのでしょうか？」</i>いい質問です。ホットキーはコロンのペア一組で作成できます。キーまたはキーコンボは<code>::</code>の&lt;b1&gt;左側&lt;/b1&gt;に置く必要があります。そして、その内容は中カッコで囲んで下に書く必要があります。</p>
<p class="note"><strong>注：</strong>例外もありますが、それは多くの場合混乱を招きがちです。だからチュートリアルでは扱わないことにしています。</p>
<pre>Esc::
{
    MsgBox "Escape!!!!"
}</pre>
<p>ホットストリングは、テキスト置換のトリガーとなるテキストの両側にコロンのペアが1つずつあります。入力したテキストを置き換えるテキストは、2つ目のコロンのペアの&lt;b0&gt;右側&lt;/b0&gt;に置きます。</p>
<p>前述のように、ホットストリングはスクリプト化されたアクションを起動することもできます。これは<i>「何でもできる」</i>という意味の洒落た言葉だ。ホットキーも同じです。</p>
<pre>::btw::
{
    MsgBox "You typed btw."
}</pre>
<p>ホットキー、ホットストリング、ラベル、その他まだお話ししていない様々なものに対して、何行ものコードを書くことができます。</p>
<pre>^j::
{
    MsgBox "Wow!"
    MsgBox "There are"
    Run "notepad.exe"
    WinActivate "Untitled - Notepad"
    WinWaitActive "Untitled - Notepad"
    Send "7 lines{!}{Enter}"
    SendInput "inside the CTRL{+}J hotkey."
}</pre>

<h3 id="s21">a. キーとその不思議なシンボル</h3>
<p><i>「どうやって^が<kbd>Ctrl</kbd>を意味することを知るんだ！」</i>と思うかもしれません。いい質問だね。^や他の記号の意味を知るために、この表をご覧ください：</p>
<table class="info">
    <tr>
        <th class="center">Symbol</th>
        <th abbr="説明">説明</th>
    </tr>
    <tr>
        <td class="center bold">#</td>
        <td><kbd>Win</kbd> (Windowsロゴキー)</td>
    </tr>
    <tr>
        <td class="center bold">!</td>
        <td><kbd>Alt</kbd></td>
    </tr>
    <tr>
        <td class="center bold">^</td>
        <td><kbd>Ctrl</kbd></td>
    </tr>
    <tr>
        <td class="center bold">+</td>
        <td><kbd>Shift</kbd></td>
    </tr>
    <tr>
        <td class="center bold">&amp;</td>
        <td>アンパサンドは、任意の2つのキーまたはマウスボタンの間に使用し、カスタムホットキーに結合することができます。</td>
    </tr>
</table>
<p><strong>(記号の全リストは<a href="Hotkeys.htm">ホットキー</a>のページを参照）</strong></p>
<p>また、ホットキーのダブルコロンの&lt;b0&gt;左側&lt;/b0&gt;で使用できるホットキー名の一覧については、「<a href="KeyList.htm">キー、マウスボタン、コントローラーコントロールの一覧</a>」を参照してください。</p>
<p>キーとキーの間に<code>&amp;</code>を使用することで、2つのキー（コントローラーボタンは除く）のカスタムコンビネーションを定義することができます。以下の例では、Numpad0を押しながらNumpad1またはNumpad2を押して、ホットキーのいずれかをトリガーします：</p>

<pre>Numpad0 &amp; Numpad1::
{
    MsgBox "You pressed Numpad1 while holding down Numpad0."
}

Numpad0 &amp; Numpad2::
{
    Run "notepad.exe"
}</pre>

<p>しかし、ホットキーがそうである以上、ホットストリングにクールなモディファイアがあるのかどうか、あなたは今、疑問に思っているはずだ。そうだ！ホットストリング修飾子は、最初のコロンのペアの間に置く。事例：</p>
<pre>:*:ftw::Free the whales</pre>

<p class="note">その他のホットキーとホットストリングの修飾子、情報、例については、<a href="Hotkeys.htm">ホットキー</a>と<a href="Hotstrings.htm">ホットストリング</a>をご覧ください。</p>
<h3 id="s22">b. ウィンドウ固有のホットキー/ホットストリング</h3>

<p>ホットキーやホットストリングを特定のウィンドウでのみ使用したい（または無効にしたい）場合があります。これを行うには、#が前に付いた洒落た指令、<a href="lib/_HotIf.htm">#HotIf</a>を、組み込み関数<a href="lib/WinActive.htm">WinActive</a>または<a href="lib/WinExist.htm">WinExist</a>と組み合わせて使う必要がある：</p>
<pre>#HotIf WinActive(WinTitle)
#HotIf WinExist(WinTitle)</pre>
<p>この特別な指令（専門的には "ディレクティブ"と呼ばれる）は、文脈依存のホットキーとホットストリングを作成します。<var>WinTitle</var>にウィンドウのタイトルを指定するだけです。しかし場合によっては、HWND、グループ、クラスなどの条件を指定したいこともあるかもしれません。これらは少し高度なので、こちらで詳しく説明します：<a href="misc/WinTitle.htm">WinTitleパラメータと最後に見つかったウィンドウ</a>。</p>
<pre>#HotIf WinActive("Untitled - Notepad")
#Space::
{
    MsgBox "You pressed WIN+SPACE in Notepad."
}</pre>
<p>それ以降のホットキーまたはホットストリングのコンテキスト感度をオフにするには、パラメータなしで#HotIfを指定します。事例：</p><pre><em>; Untitled - Notepad</em>
#HotIf WinActive("Untitled - Notepad")
!q::
{
    MsgBox "You pressed ALT+Q in Notepad."
}

<em>; Any window that isn't Untitled - Notepad</em>
#HotIf
!q::
{
    MsgBox "You pressed ALT+Q in any window."
}
</pre>
<p>スクリプト内で#HotIfディレクティブが使用されていない場合、すべてのウィンドウですべてのホットキーとホットストリングが有効になります。</p>
<p>#HotIf指令は位置指定：#HotIfは、次の#HotIfディレクティブまで、スクリプト内で物理的にその下にあるすべてのホットキーとホットストリングに影響を及ぼします。</p>
<pre><em>; Notepad</em>
#HotIf WinActive("ahk_class Notepad")
#Space::
{
    MsgBox "You pressed WIN+SPACE in Notepad."
}
::msg::You typed msg in Notepad

<em>; MSPaint</em>
#HotIf WinActive("Untitled - Paint")
#Space::
{
    MsgBox "You pressed WIN+SPACE in MSPaint!"
}
::msg::You typed msg in MSPaint!</pre>
<p class="note">より詳細な情報については、<a href="lib/_HotIf.htm">#HotIf</a>のページをご覧ください。</p>
<h3 id="s23">c. ファイルごとに複数のホットキー/ホットストリング</h3>
<p>このことは、なぜか一部の人々の心を横切っている。だから、はっきりさせておこう：AutoHotkey has the ability to have <u>as many</u> hotkeys and hotstrings in one file as you want. それが1人であろうと、3253人（あるいはそれ以上）であろうと。</p>
<pre>#i::
{
    Run "https://www.google.com/"
}

^p::
{
    Run "notepad.exe"
}

~j::
{
    Send "ack"
}

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America</pre>
<p>上記のコードはまったく問題ない。複数のホットキー、複数のホットストリング。すべて1つの大きな幸せなスクリプトファイルだ。</p>

<h3 id="s24">d. 例</h3>
<pre class="NoIndent">::btw::by the way  <em>; Replaces "btw" with "by the way" as soon as you press a <a href="Hotstrings.htm#EndChars">default ending character</a>.</em></pre>
<pre class="NoIndent">:*:btw::by the way  <em>; Replaces "btw" with "by the way" without needing an ending character.</em></pre>
<pre class="NoIndent">^n::  <em>; CTRL+N hotkey</em>
{
    Run "notepad.exe"  <em>; Run Notepad when you press CTRL+N.</em>
}  <em>; This ends the hotkey. The code below this will not be executed when pressing the hotkey.</em></pre>
<pre class="NoIndent">^b::  <em>; CTRL+B hotkey</em>
{
    Send "{Ctrl down}c{Ctrl up}"  <em>; Copies the selected text. ^c could be used as well, but this method is more secure.</em>
    SendInput "[b]{Ctrl down}v{Ctrl up}[/b]" <em>; Wraps the selected text in BBCode tags to make it bold in a forum.</em>
}  <em>; This ends the hotkey. The code below this will not be executed when pressing the hotkey.</em></pre>

<h2 id="s3">3 - キー入力の送信</h2>
<p>さて、あなたは今、プログラムにキーを送信（タイプ）したいと決めた。それはできる。<a href="lib/Send.htm">送信</a>機能を使う。この関数は文字通りキー入力を送信し、タイピングやキー押下をシミュレートする。</p>
<p>しかし、本題に入る前に、人々が抱える一般的な問題について話しておこう。</p>
<p>Just like hotkeys, the Send function has special keys too. <a href="lib/Send.htm">たくさん、たくさん</a>だ。以下は、最も一般的な4つのシンボルである：</p>
<table class="info">
    <tr>
        <th class="center">Symbol</th>
        <th abbr="説明">説明</th>
    </tr>
    <tr>
        <td class="center bold">!</td>
        <td><kbd>Alt</kbd>を送る。例えば、<code>Send "This is text!a"</code>は、"This is text "とキーを送り、<kbd>Alt</kbd>+<kbd>A</kbd>を押す。<strong>注：</strong>プログラムによっては、<code>!A</code>は <code>!a</code>とは異なる効果をもたらす。これは<code>!A</code>が<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd>を押し、<code>!a</code>が<kbd>Alt</kbd>+<kbd>A</kbd>を押すからである。. 迷ったときは小文字を使います。</td>
    </tr>
    <tr>
        <td class="center bold">+</td>
        <td><kbd>Shift</kbd>を送る。例えば、<code>"+abC"</code>を送ると "AbC "というテキストが送られ、<code>"!+a"</code>を送ると<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd>を押す。.</td>
    </tr>
    <tr>
        <td class="center bold">^</td>
        <td><kbd>Ctrl</kbd>を送る。例えば、<code>"^!a"</code>を送信する場合は<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd>を、<code>"^{Home}"</code>を送信する場合は<kbd>Ctrl</kbd>+<kbd>Home</kbd>を送信する。<strong>注:</strong> <code>^A</code> はプログラムによっては <code>^a</code> とは異なる効果をもたらす。これは<code>^A</code>が<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd>を、<code>^a</code>が<kbd>Ctrl</kbd>+<kbd>A</kbd>を押すからである。迷ったときは小文字を使います。</td>
    </tr>
    <tr>
        <td class="center bold">#</td>
        <td><kbd>Win</kbd> (Windows ロゴのあるキー) を送信するので、<code>"#e"</code>を送信するには、<kbd>Win</kbd>を押しながら<kbd>E</kbd>を押します。</td>
    </tr>
</table>
<p><a href="lib/Send.htm">センドページの巨大な表</a>には、AHKに内蔵されている特殊キーのほとんどが示されている。事例：<code>{Enter}</code>と <code>{Space}</code>。</p>
<p class="warning"><strong>Caution:</strong> This table <u>does not</u> apply to <a href="Hotkeys.htm">hotkeys</a>. つまり、ホットキーを作成するときに、<kbd>Ctrl</kbd>や <kbd>Enter</kbd>（またはその他のキー）を中カッコで囲まないということです。</p>
<p>ホットキーにやってはいけないことを示す例：</p>
<pre><em>; When making a hotkey...
; WRONG</em>
{LCtrl}::
{
    Send "AutoHotkey"
}

<em>; CORRECT</em>
LCtrl::
{
    Send "AutoHotkey"
}
</pre>
<p>多くの人が持っている一般的な問題は、中カッコは単に面白半分でドキュメントのページに付けられたものだと思い込んでいることだ。But in fact <u>they are needed</u>. <code>{!}</code>が「感嘆符」を意味し、「<kbd>Alt</kbd>を押してください」を意味しないことをAHKが知っているのはそのためだ。ですから、<a href="lib/Send.htm">送信</a>ページの表をチェックし、括弧が正しい位置にあることを確認するのを忘れないでください。事例：</p>
<pre>Send "This text has been typed{!}" <em>; Notice the ! between the curly brackets? That's because if it wasn't, AHK would press the ALT key.</em>
</pre>
<pre><em>; Same as above, but with the ENTER key. AHK would type out "Enter" if
; it wasn't wrapped in curly brackets.</em>
Send "Multiple Enter lines have Enter been sent." <em>; WRONG</em>
Send "Multiple{Enter}lines have{Enter}been sent." <em>; CORRECT</em>
</pre>
<p>Another common issue is that people think that <u>everything</u> needs to be wrapped in brackets with the Send function. それは誤りだ。チャートになければ、括弧は必要ない。You do <u>not</u> need to wrap common letters, numbers or even some symbols such as <code>.</code> (period) in curly brackets. また、送信機能を使えば、一度に複数の文字、数字、記号を送信することができます。だから、1文字ずつのSend関数の束は必要ない。事例：</p>
<pre>Send "{a}"       <em>; WRONG</em>
Send "{b}"       <em>; WRONG</em>
Send "{c}"       <em>; WRONG</em>
Send "{a}{b}{c}" <em>; WRONG</em>
Send "{abc}"     <em>; WRONG</em>
Send "abc"       <em>; CORRECT</em></pre>

<p>キーを押したままにしたり離したりするには、キー名を波括弧で囲み、その後に「UP」または「DOWN」を使用する。事例：</p>
<pre><em>; This is how you hold one key down and press another key (or keys).
; If one method doesn't work in your program, please try the other.</em>
Send "^s"                     <em>; Both of these send CTRL+S</em>
Send "{Ctrl down}s{Ctrl up}"  <em>; Both of these send CTRL+S</em>
Send "{Ctrl down}c{Ctrl up}"
Send "{b down}{b up}"
Send "{Tab down}{Tab up}"
Send "{Up down}"  <em>; Press down the up-arrow key.</em>
Sleep 1000        <em>; Keep it down for one second.</em>
Send "{Up up}"    <em>; Release the up-arrow key.</em></pre>

<p>しかし今、あなたは<i>「どうすれば本当に長いSend関数を読みやすくできるのか？」</i>簡単だ。継続セクションと呼ばれるものを使用する。新しい行で開始括弧を指定し、次に内容を指定し、最後にその行で終了括弧を指定するだけだ。詳しくは、<a href="Scripts.htm#continuation">継続セクションについてを</a>お読みください。</p>
<pre>Send "
(
Line 1
Line 2
Apples are a fruit.
)"</pre>
<p class="note"><strong>注：</strong>センドにはいくつかの種類がある。それぞれに特徴がある。センドがニーズに合わない場合は、別のセンドを試してみてください。関数名 "Send"を以下のいずれかに置き換えるだけでよい：SendText, SendInput, SendPlay, SendEvent. それぞれの役割については、<a href="lib/Send.htm">こちら</a>をご覧いただきたい。</p>

<h3 id="s31">a. ゲーム </h3>
<p class="warning"><strong>This is important:</strong> Some games, especially multiplayer games, use anti-cheat programs. GameGuard、Hackshield、PunkBusterなどだ。これらのシステムを迂回することは、ゲームポリシーに違反し、あなたが追放される可能性があるだけでなく、回避するのが複雑です。</p>
<p>ゲームにチート防止システムがあり、ホットキー、ホットストリング、送信機能が動作しない場合は、運が悪かったと言えます。しかし、ゲームによっては動作する可能性を高める方法はありますが、魔法のような<i>「今すぐ私のゲームで動作させる！」</i>ボタンはありません。。So try <u>all</u> of these before giving up.</p>

<p>また、DirectXにも既知の問題がある。問題があり、ゲームがDirectXを使用していることが分かっている場合は、<a href="FAQ.htm#games">FAQ</a>ページに記載されていることを試してみてください。<a href="lib/PixelSearch.htm">PixelSearch</a>、<a href="lib/PixelGetColor.htm">PixelGetColor</a>、<a href="lib/ImageSearch.htm">ImageSearch</a>を使用すると、さらにDirectXの問題が発生する可能性があります。どんな色を出そうとしても黒（0x000000）になるかもしれない。また、可能であれば、ウィンドウモードでゲームを実行してみてください。これにより、DirectXのいくつかの問題が修正された。</p>
<p>AutoHotkeyをすべてのプログラムで使えるようにする唯一の解決策はありません。何を試してもうまくいかない場合は、AutoHotkeyを使うことができないかもしれません。</p>

<h2 id="s4">4 - プログラムとウェブサイトの運営</h2>
<p><i>mspaint.exe、calc.exe、script.ahk</i>、あるいはフォルダなどのプログラムを実行するには、「<a href="lib/Run.htm">ファイル名を指定して実行</a>」機能を使用します。It can even be used to open URLs such as <a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a>. If your computer is setup to run the type of program you want to run, it's very simple:</p>
<pre><em>; Run a program. Note that most programs will require a FULL file path:</em>
Run A_ProgramFiles "\Some_Program\Program.exe"

<em>; Run a website:</em>
Run "https://www.autohotkey.com"</pre>
<p>コマンドラインパラメーターやCLSIDなど、他にも高度な機能がある。そのようなことについてもっと知りたければ、<a href="lib/Run.htm">Run</a>のページをご覧ください。 </p>
<p>以下はそのサンプルである：</p>
<pre><em>; Several programs do not need a full path, such as Windows-standard programs:</em>
Run "notepad.exe"
Run "mspaint.exe"

<em>; Run the "My Documents" folder using a <a href="Variables.htm#BuiltIn">built-in variable</a>:</em>
Run A_MyDocuments

<em>; Run some websites:</em>
Run "https://www.autohotkey.com"
Run "https://www.google.com"</pre>
<p class="note">より詳細な情報や例については、<a href="lib/Run.htm">Run</a>のページをご覧ください。</p>

<h2 id="s5">5 - 括弧の有無による関数呼び出し</h2>
<p>AutoHotkeyでは、関数呼び出しは括弧付きでも括弧なしでも指定できます。括弧が必要なのは、関数の戻り値が必要な場合か、関数名が行頭に書かれていない場合だけである。</p>
<p class="note">内蔵関数の一覧は<a href="lib/index.htm">こちら</a>。</p>
<p>典型的な関数呼び出しは次のようなものだ：</p>
<pre>Function(Parameter1, Parameter2, Parameter3) <em>; with parentheses</em>
Function Parameter1, Parameter2, Parameter3  <em>; without parentheses</em></pre>
<p>パラメータはあらゆる種類の表現に対応している：</p>
<ol>
    <li>その中で数学ができる：
        <pre>SubStr(37 * 12, 1, 2)
SubStr(A_Hour - 12, 2)</pre>
    </li>
    <li>その中で別の関数を呼び出すことができる（これらの関数呼び出しは行頭ではないので、括弧で指定しなければならないことに注意）：
        <pre>SubStr(A_AhkPath, InStr(A_AhkPath, "AutoHotkey"))</pre>
    </li>
    <li>テキストは引用符で囲む必要がある：
        <pre>SubStr("I'm scripting, awesome!", 16)</pre>
    </li>
</ol>

<p>関数の戻り値を変数に代入する最も一般的な方法は次のようなものだ：</p>
<pre><span style="color:#ff4400"><b>MyVar</b></span> := SubStr("I'm scripting, awesome!", 16)</pre>
<p class="note">これだけが唯一の方法ではないが、最も一般的な方法だ。<code>MyVar</code>は、<code>:=</code>演算子の右側にある関数の戻り値を格納するために使用しています。詳細は<a href="Functions.htm">ファンクション</a>を参照。</p>
<p>要するにだ：</p>
<pre><em>; These are function calls without parentheses:</em>
MsgBox "This is some text."
StrReplace Input, "AutoHotKey", "AutoHotkey"
SendInput "This is awesome{!}{!}{!}"

<em>; These are function calls with parentheses:</em>
SubStr("I'm scripting, awesome!", 16)
FileExist(VariableContainingPath)
Output := SubStr("I'm scripting, awesome!", 16)</pre>

<h3 id="s51">a. コードブロック</h3>
<p><a href="lib/Block.htm">コードブロック</a>とは、小さな中括弧（<code>{</code>と <code>}</code>）で囲まれたコード行のことである。AutoHotkeyが1つの大きなファミリーであることを認識し、一緒にいる必要があるように、コードのセクションをグループ化します。関数や、<a href="lib/If.htm">If</a>や <a href="lib/Loop.htm">Loop</a>のような制御フロー文と一緒に使われることが多い。これがないと、ブロックの最初の行だけが呼び出される。</p>
<p>以下のコードでは、<em>MyVar</em>が5に等しい場合にのみ、両方の行が実行される：</p>
<pre>if (MyVar = 5)
{
    MsgBox "MyVar equals " MyVar "!!"
    ExitApp
}</pre>
<p>以下のコードでは、<em>MyVar</em>が5に等しい場合にのみメッセージボックスが表示される。The script will always exit, even if <em>MyVar</em> <u>is not</u> 5:</p>
<pre>if (MyVar = 5)
    MsgBox "MyVar equals " MyVar "!!"
    ExitApp</pre>
<p>ifステートメントに関連するコードは1行だけなので、これはまったく問題ない。上とまったく同じだが、2行目をアウトデントにして、if文と分離していることがわかるようにした：</p>
<pre>if (MyVar = 5)
    MsgBox "MyVar equals " MyVar "!!"
MsgBox "We are now 'outside' of the if-statement. "の下に1行しかないので、中カッコは必要なかった。"</pre>

<h2 id="s6">6 - 変数</h2>
<p><a href="Variables.htm">変数</a>は、ある情報を保持する小さな付箋のようなものだ。テキスト、数値、関数からのデータ、あるいは数式を保存するのに使うことができる。それがなければ、プログラミングやスクリプトはもっと退屈なものになるだろう。</p>
<p>変数はいくつかの方法で割り当てることができる。ここでは、最も一般的な形式を取り上げる。Please pay attention to the colon-equal operator (<code>:=</code>).</p>
<dl>
    <dt>テキスト課題</dt>
    <dd>
        <pre class="NoIndent">MyVar := "Text"</pre>
        <p>これは変数の最も単純な形である。テキストを入力するだけで完了。テキストは引用符で囲む必要がある。</p>
    </dd>
    <dt>変数の割り当て</dt>
    <dd>
        <pre class="NoIndent">MyVar := MyVar2</pre>
        <p>上記と同じだが、変数の値を別の変数に代入している。</p>
    </dd>
    <dt>番号割り当て</dt>
    <dd>
        <pre class="NoIndent">MyVar := 6 + 8 / 3 * 2 - Sqrt(9)</pre>
        <p>式のおかげで数学ができる！</p>
    </dd>
    <dt>混合課題</dt>
    <dd>
        <pre class="NoIndent">MyVar := "The value of 5 + " MyVar2 " is: " 5 + MyVar2</pre>
        <p>上記3つの課題の組み合わせ。</p>
    </dd>
</dl>
<p class="note">Equal signs (<b>=</b>) with a symbol in front of it such as <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> etc. are called <b>assignment operators</b>.</p>

<h3 id="s62">a. ユーザーの入力を得る</h3>
<p>時には、ユーザーが物の価値を選べるようにしたい。これにはいくつかの方法があるが、最も単純な方法は<a href="lib/InputBox.htm">InputBox</a>である。ここでは、ユーザーにいくつかの質問をし、入力された内容でいくつかのことを行う簡単な例を示します：</p>
<pre>IB1 := InputBox("What is your first name?", "Question 1")
if IB1.Value = "Bill"
    MsgBox "That's an awesome name, " IB1.Value "."

IB2 := InputBox("Do you like AutoHotkey?", "Question 2")
if IB2.Value = "yes"
    MsgBox "Thank you for answering " IB2.Value ", " IB1.Value "!私たちは素晴らしい友人になるだろう。
else
    MsgBox IB1.Value ", That makes me sad."</pre>

<h3 id="s63">b. 他の例は？</h3>
<pre class="NoIndent">Result := <a href="lib/MsgBox.htm">MsgBox</a>("Would you like to continue?",, 4)
if <a href="lib/MsgBox.htm#Result">Result</a> = "No"
    return  <em>; If No, stop the code from going further.</em>
MsgBox "You pressed YES."  <em>; Otherwise, the user picked yes.</em></pre>
<pre class="NoIndent">Var := "text"  <em>; Assign some text to a variable.</em>
Num := 6  <em>; Assign a number to a variable.</em>
Var2 := Var  <em>; Assign a variable to another.</em>
Var3 .= Var  <em>; Append a variable to the end of another.</em>
Var4 += Num  <em>; Add the value of a variable to another.</em>
Var4 -= Num  <em>; Subtract the value of a variable from another.</em>
Var5 := SubStr(Var, 2, 2)  <em>; Variable inside a function.</em>
Var6 := Var "Text"  <em>; Assigns a variable to another with some extra text.</em>
MsgBox(Var)  <em>; Variable inside a function.</em>
MsgBox Var  <em>; 上と同じです。</em>
Var := StrSplit(Var, "x")  <em>; Variable inside a function that uses InputVar and OutputVar.</em>
if (Num = 6)  <em>; Check if a variable is equal to a number.</em>
if Num = 6  <em>; Same as above.</em>
if (Var != Num)  <em>; Check if a variable is not equal to another.</em>
if Var1 &lt; Var2  <em>; Check if a variable is lesser than another.</em></pre>
<h2 id="s7">7 - オブジェクト</h2>
<p><a href="Objects.htm">オブジェクト</a>は、データをより効率的に使用するための整理方法です。オブジェクトは基本的に変数の集まりである。オブジェクトに属する変数は「プロパティ」と呼ばれる。オブジェクトには、配列要素などのアイテムが含まれることもある。</p>
<p>オブジェクトを何かに使いたい理由はいくつもあるだろう。いくつかの例を挙げよう：</p>
<ul>
    <li>食料品リストのような、番号付けされたリストを持ちたい場合 (これは添字付き配列と呼ばれます)</li>
    <li>おそらくボードゲーム用のグリッドを表現したい（これはネストされたオブジェクトで行われるだろう）。</li>
    <li>果物の特徴のように、それぞれのものに名前がついているもののリストがある（これは連想配列と呼ばれる）。</li>
</ul>

<h3 id="s71">a. オブジェクトの作成</h3>
<p>オブジェクトを作成する方法はいくつかあるが、最も一般的なものを以下に挙げる：</p>
<dl>
    <dt>ブラケット構文（配列）</dt>
    <dd>
        <pre class="NoIndent">MyArray := ["one", "two", "three", 17]</pre>
        <p>これは<a href="lib/Array.htm">Array（配列）</a>を作成するもので、1番から上の項目のリストを表す。この例では、値<code>"one"</code>がインデックス1に、値<code>17</code>がインデックス4に格納されている。</p>
    </dd>
    <dt>ブレース構文</dt>
    <dd>
        <pre class="NoIndent">Banana := {Color: "Yellow", Taste: "Delicious", Price: 3}</pre>
        <p>これにより、<i>アドホック</i>・<a href="lib/Object.htm">オブジェクト</a>が作成される。これは、既知のプロパティの短いセットを持つオブジェクトを素早く作成する方法です。In this example, the value <code>"Yellow"</code> is stored in the <em>Color</em> property and the value <code>3</code> is stored in the <em>Price</em> property.</p>
    </dd>
    <dt>配列コンストラクタ</dt>
    <dd>
        <pre class="NoIndent">MyArray := Array("one", "two", "three", 17)</pre>
        <p>これはブラケット構文と同じである。これは実際には関数ではなくArrayクラスを呼び出している。</p>
    </dd>
    <dt>マップコンストラクタ</dt>
    <dd>
        <pre class="NoIndent">MyMap := Map("^", "Ctrl", "!", "Alt")</pre>
        <p>これは<a href="lib/Map.htm">Map</a>または<em>連想配列</em>を作成する。この例では、値<code>"Ctrl"</code>がキー<code>"^"</code>に関連付けられ、値<code>"Alt"</code>がキー<code>!</code>に関連付けられる。マップは多くの場合、<code>Map()</code>で空の状態で作成され、後でアイテムで埋められる。</p>
    </dd>
    <dt>その他のコンストラクタ</dt>
    <dd>
        <pre class="NoIndent">Banana := Fruit()</pre>
        <p>指定されたクラス（この場合は Fruit）のオブジェクトを作成します。</p>
    </dd>
</dl>

<h3 id="s72">b. オブジェクトの使用</h3>
<p>値の取得、値の設定、値の追加など、オブジェクトを使う方法はたくさんある。</p>

<h4 id="To_set_values">To set values</h4>
<dl>
    <dt>ブラケット表記</dt>
    <dd>
        <pre class="NoIndent">MyArray[2] := "TWO"
MyMap["#"] := "Win"</pre>
        <p>マップやコレクションに配列要素や項目を設定するのは、変数に値を代入するのと似ている。オブジェクト（配列、マップ、その他何でも）を含む変数にブラケット表記を追加するだけだ。括弧の間のインデックスまたはキーは式なので、数値以外のリテラル値には引用符を使用しなければならない。</p>
    </dd>
    <dt>ドット表記</dt>
    <dd>
        <pre class="NoIndent">Banana.Consistency := "Mushy"</pre>
        <p>この例では、<em>バナナ</em>に含まれるオブジェクトのプロパティに新しい値を割り当てている。そのプロパティがまだ存在しない場合は、作成される。</p>
    </dd>
</dl>

<h4 id="To_retrieve_values">To retrieve values</h4>
<dl>
    <dt>ブラケット表記</dt>
    <dd>
        <pre class="NoIndent">Value := MyMap["^"]</pre>
        <p>この例では、以前にキー<code>"^"</code>に関連付けられた（マップされた）値を取得する。多くの場合、キーは<code>MyMap[modifierChar]</code>のような変数に含まれる。</p>
    </dd>
    <dt>ドット表記</dt>
    <dd>
        <pre class="NoIndent">Value := Banana.Color</pre>
        <p>This example retrieves the <em>Color</em> property of the <em>Banana</em> object.</p>
    </dd>
</dl>

<h4 id="To_add_new_keys_and_values">To add new keys and values</h4>
<dl>
    <dt>ブラケット表記</dt>
    <dd>
        <pre class="NoIndent">MyMap["NewerKey"] := 3.1415</pre>
        <p>キーと値を直接追加するには、まだ存在しないキーを設定すればよい。ただし、<a href="lib/Array.htm">配列</a>に代入する場合は、インデックスが1から配列の現在の長さの範囲内になければならないことに注意。対象が異なれば、要求も異なるだろう。</p>
    </dd>
    <dt>ドット表記</dt>
    <dd>
        <pre class="NoIndent">MyObject.NewProperty := "Shiny"</pre>
        <p>前述のように、まだ定義されていないプロパティに代入すると、新しいプロパティが作成されます。</p>
    </dd>
    <dt>InsertAtメソッド</dt>
    <dd>
        <pre class="NoIndent">MyArray.InsertAt(Index, Value1, Value2, Value3...)</pre>
        <p><a href="lib/Array.htm#InsertAt">InsertAt</a>は、<a href="lib/Array.htm">配列</a>内の特定の位置に新しい値を挿入するために使われるメソッドだが、他の種類のオブジェクトでもこの名前のメソッドを定義することができる。</p>
    </dd>
    <dt>Pushメソッド</dt>
    <dd>
        <pre class="NoIndent">MyArray.Push(Value1, Value2, Value3...)</pre>
        <p><a href="lib/Array.htm#Push">Push</a>は、<a href="lib/Array.htm">Array</a> <i>MyArray</i>の末尾に値を「追加」する。ブラケット記法は、現在の値の範囲外を代入するために使用することができないので、配列に新しい要素を追加するための好ましい方法です。</p>
    </dd>
</dl>

<h4 id="To_remove_keys_and_values">To remove properties and items</h4>
<dl>
    <dt>Deleteメソッド</dt>
    <dd>
        <pre class="NoIndent">RemovedValue := MyObject.Delete(AnyKey)</pre>
        <p><a href="lib/Array.htm">Array</a>と <a href="lib/Map.htm">Map</a>にはDeleteメソッドがあり、配列やマップから値を削除する。<code>MyObject[AnyKey]</code>の前の値が<i>RemovedValue</i>に格納されます。配列の場合、これは配列要素に値を残さず、配列の他の要素には影響を与えない。</p>
    </dd>
    <dt>Popメソッド</dt>
    <dd>
        <pre class="NoIndent">MyArray.Pop()</pre>
        <p>この<a href="lib/Array.htm">Array</a>メソッドは、配列から最後の要素を取り除き、その値を返します。配列の長さが1短くなる。</p>
    </dd>
    <dt>RemoveAtメソッド</dt>
    <dd>
        <pre class="NoIndent">RemovedValue := MyArray.RemoveAt(Index)</pre>
        <pre class="NoIndent">MyArray.RemoveAt(Index, Length)</pre>
        <p><a href="lib/Array.htm">配列</a>には <a href="lib/Array.htm#RemoveAt">RemoveAt</a>メソッドがあり、配列要素や配列要素の範囲を削除します。取り除かれた要素の右側に要素があれば、その要素は左にシフトされ、空いたスペースを埋める。</p>
    </dd>
</dl>

<h2 id="s8">8 - その他の役立つグッズ</h2>
<p>我々は旅の終わりに到達したのだ。何か学んでいただけただろうか。しかし、その前に知っておくべきことがある。楽しもう！</p>

<h3 id="s81">a. 謎の角括弧</h3>
<p>この2つの記号（<code>[</code>と<code>]</code>）は、ほとんどのページの上部にある黄色い構文ボックスでコードを囲んでいます。Anything inside of these brackets are <u>optional</u>. つまり、中に入っているものは、必要なければ出しておくことができるのだ。When writing your code, it is very important to <u>not</u> type the square brackets in your code.</p>
<p><a href="lib/ControlGetText.htm">ControlGetText</a>ページでは、このように表示されます：</p>
<pre class="Syntax">Text := <span class="func">ControlGetText</span>(Control <span class="optional">, WinTitle, WinText, ExcludeTitle, ExcludeText</span>)</pre>
<p>だから、やろうと思えば簡単にできる：</p>
<pre>Text := ControlGetText(Control)</pre>
<p>あるいは、さらに詳細を加える：</p>
<pre>Text := ControlGetText(Control, WinTitle)</pre>
<p><em>WinText</em>や <em>WinTitle</em>を記入せず、<em>ExcludeTitle</em>を使いたい場合は？シンプルだ！</p>
<pre>Text := ControlGetText(Control,,, ExcludeTitle)</pre>
<p>パラメータを無視することはできませんが、空白にすることはできます。<code>WinTitle、WinText</code>を無視すると、このようになり、問題が発生する：</p>
<pre>Text := ControlGetText(Control, ExcludeTitle)</pre>

<h3 id="s82">b. AHKバージョンの検索</h3>
<p>このコードを実行すると、AHKのバージョンが表示されます：</p>
<pre>MsgBox A_AhkVersion</pre>
<p>または、スタートメニューまたはインストールディレクトリで "AutoHotkey Help File"または "AutoHotkey.chm"を探してください。</p>

<h3 id="s83">c. 試行錯誤</h3>
<p>試行錯誤は非常に一般的で効果的な学習方法である。些細なことでいちいち助けを求めるのではなく、時には一人で時間をかけて（時には数時間、数日かけて）何かを動かそうとすることが、より早く学ぶことにつながる。</p>
<p>何かを試してエラーが出たら、そのエラーを研究すること。それからコードを修正してみてください。その後、もう一度実行してみてください。それでもエラーが出る場合は、コードをもう少し修正してください。あなたのコードが失敗しなくなるまで、試行錯誤を続けてください。ドキュメントを読み、エラーを読み、何が機能し、何が機能しないかを学ぶことで、この方法で多くを学ぶことができる。トライ、失敗、トライ、失敗、トライ、トライ、失敗、<b>成功！</b></p>
<p>こうして多くの "プロ "が学んできた。でも、助けを求めることを恐れないでください。私たちは（強く）噛みついたりはしません。学習には時間がかかる。あなたが出会う "プロ "たちは、ほんの数時間や数日でマスターになったわけではない。</p>
<p class="note">"最初はうまくいかなくても、トライ、トライ、またトライ" - ヒクソン ウィリアム・E</p>
<h3 id="s84">d. インデント</h3>
<p>このこと（インデント）はとても重要だ！あなたのコードはこれなしでもまったく問題なく動くが、あなたにとっても他の人にとっても、あなたのコードを読むのは大きな頭痛の種になるだろう。小さなコード（25行以下）は、インデントなしで読む分には問題ないだろうが、すぐにだらしなくなってしまう。早急にインデントを学んだ方がいい。インデントに決まったスタイルはありませんが、すべてを統一するのがベストです。</p>
<p>「<b>インデントとは何か？</b>」と貴方は問う?これは単に、コードを分割するための間隔であり、何が何に属しているかがわかるようにするためのものである。通常、「レベル」ごとに3つか4つのスペースか1つのタブを使う。</p>
<p>インデントされていない：</p>
<pre>if (car = "old")
{
MsgBox "The car is really old."
if (wheels = "flat")
{
MsgBox "This car is not safe to drive."
return
}
else
{
MsgBox "Be careful!This old car will be dangerous to drive."
}
}
else
{
MsgBox "My, what a shiny new vehicle you have there."
}</pre>
<p>インデントされている：</p>

<pre>if (car = "old")
{
    MsgBox "The car is really old."
    if (wheels = "flat")
    {
        MsgBox "This car is not safe to drive."
        return
    }
    else
    {
        MsgBox "Be careful!This old car will be dangerous to drive."
    }
}
else
{
    MsgBox "My, what a shiny new vehicle you have there."
}</pre>
<p>さまざまなスタイルと例については、ウィキペディアの<a href="https://en.wikipedia.org/wiki/Indentation_style">インデントのスタイル</a>のページを参照のこと。自分の好きなものを選ぶか、自分が一番読みやすいと思うインデントの付け方を学んでください。</p>

<h3 id="s85">e. 助けを求める</h3>
<p>質問する前に、自分で調べてみるか、自分でコーディングしてみるといい。それでも満足のいく結果が得られなかった場合は、以下をお読みいただきたい。</p>
<ul>
    <li>助けを求めることを恐れてはいけない。どんなに賢い人でも、他人に助けを求めるものだ。</li>
    <li>たとえバカバカしいと思っても、トライしたことを見せることを恐れてはいけない。</li>
    <li>試したことがあれば何でも投稿してください。</li>
    <li>Pretend <u>everyone but you</u> is a doorknob and knows nothing. あなたが何をしようとしているのか、私たちドアノブを教育するために、できるだけ多くの情報を提供してください。ご協力ください。</li>
    <li>忍耐強くあれ。</li>
    <li>礼儀正しくあれ。</li>
    <li>オープンであれ。</li>
    <li>親切にしなさい。</li>
    <li>楽しもう！</li>
</ul>
<p>すぐに回答が得られない場合は、少なくとも1日（24時間）待ってから問い合わせること。私たちは手助けをするのが好きだが、自分の時間を使って無料でやっている。仕事中かもしれないし、寝ているかもしれないし、ゲームをしているかもしれないし、家族と一緒にいるかもしれないし、ただ忙しくて手伝う暇がないかもしれない。</p>
<p>そして助けを待つ間、自分で学んでやってみることもできる。人の手を借りずに自分で何かを作るというのはいい気分だ。</p>

<h3 id="s86">f. その他のリンク</h3>
<p><a href="FAQ.htm">よくある質問（FAQ）</a></p>
</body>
</html>
