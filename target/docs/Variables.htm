<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>変数と式 - 定義と使用法｜AutoHotkey v2</title>
<meta name="description" content="変数、式、演算子、組み込み変数、変数の容量とメモリについて詳しく説明します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>変数と式</h1>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#Intro">変数</a></li>
  <li><a href="#Expressions">式</a></li>
  <li><a href="#Operators">式の中での演算子</a></li>
  <li><a href="#BuiltIn">組込変数</a></li>
  <li><a href="#cap">可変容量とメモリー</a></li>
</ul>
<span id="Variables"></span><h2 id="Intro">変数</h2>
<p>変数がどのように機能するかについての一般的な説明と詳細については、<a href="Concepts.htm#variables">変数</a>をご覧ください。</p>
<p id="assigning"><strong>変数への値の格納：</strong>文字列や数値を変数に格納するには、<a href="#AssignOp">コロンと等号の演算子（:=）</a>の後に数値や引用符で囲まれた文字列、その他の型の<a href="Language.htm#expressions">式</a>を続けます。事例：</p>
<pre>MyNumber := 123
MyString := "This is a literal string."
CopyOfVar := Var</pre>
<p>変数を明示的に削除することはできませんが、空文字列などの新しい値を代入することで、以前の値を解放することができます：</p>
<pre>MyVar := ""</pre>
<p>変数に対して<a href="#ref">その参照を取得</a>して<a href="#deref">double-deref</a>を使用するか関数に渡すことで、間接的に値を割り当てることもできます。事例：</p>
<pre><a href="lib/MouseGetPos.htm">MouseGetPos</a> &amp;x, &amp;y</pre>
<p>値を割り当てられていない変数の値を読み込もうとするとエラーになります。<a href="lib/IsSet.htm">IsSet</a>はこの状態を検出するために使われます。</p>
<p id="retrieving"><strong>変数の内容の取得：</strong>変数の内容を文字列に含めるには、<a href="#concat">連結</a>か<a href="lib/Format.htm">Format</a>関数を使います。事例：</p>
<pre><a href="lib/MsgBox.htm">MsgBox</a> "The value of Var is " . Var . "."
MsgBox "The value in the variable named Var is " Var "."
MsgBox Format("Var has the value {1}.", Var)
</pre>
<p>部分式も同じように文字列と組み合わせることができます。事例：</p>
<pre>MsgBox("The sum of X and Y is " . (X + Y))
</pre>
<p><strong>変数の比較：</strong>さまざまな種類の比較に関する重要な注意事項については、以下の式のセクションをお読みください。</p>
<h2 id="Expressions">式</h2>
<p class="note">構造化された概要と詳細な説明については、<a href="Language.htm#expressions">式</a>をご覧ください。</p>
<p>式は、一連の変数、リテラル文字列、リテラル数値に対して、演算を実行するために使用されます。</p>
<p>式中のプレーンワードは変数名として解釈されます。したがって、リテラル文字列は変数と区別するために二重引用符で囲む必要があります。事例：</p>
<pre>if (CurrentSetting &gt; 100 or FoundColor != "Blue")
    MsgBox "The setting is too high or the wrong color is present."</pre>
<p>上の例では、「Blue」はリテラル文字列なので引用符で囲まれています。シングルクオートマーク（'）とダブルクオートマーク（"）は、シングルクオートマークで囲まれた文字列がリテラルダブルクオートマークを含むことができ、その逆も可能であることを除いて、同じように機能します。従って、リテラル文字列の中に<em>実際</em>の引用符を含めるには、引用符を<a href="misc/EscapeChar.htm">エスケープ</a>するか、文字列を反対のタイプの引用符で囲みます。事例：</p>
<pre>MsgBox "She said, `"An apple a day.`""
MsgBox 'She said, "An apple a day."'</pre>
<p><strong>空文字列：</strong>式の中で空文字列を指定するには、空の引用符のペアを使用します。例えば、<code>if (MyVar != "")</code>というステートメントは、<em>MyVar</em>が空白でなければ真となります。</p>
<p><strong>式の結果の格納：</strong>結果を変数に代入するには、<a href="#AssignOp">コロンと等号の演算子（:=）</a>を使います。事例：</p>
<pre>NetPrice := Price * (1 - Discount/100)</pre>
<p id="Boolean"><strong>ブール値：</strong>IF文など式が真偽で評価される必要があるときは、空白またはゼロは偽とみなされ、それ以外の結果は真とみなされます。例えば、ItemCountが空白か0の場合のみ<code>if ItemCount</code>式は偽になります。同様に、<code>if not ItemCount</code>式は逆に真になります。</p>
<p>NOT/&gt;/=/&lt;などの演算子は、自動的に真か偽の値を生成します：真なら1、偽なら0となります。ただし、AND/OR演算子は常に入力値のいずれかを生成します。例えば、以下の式ではA_Indexが5より大きいときは変数<em>Done</em>に1が代入され、それ以外のときは<em>FoundIt</em>の値が代入されます：</p>
<pre>Done := A_Index &gt; 5 or FoundIt</pre>
<p>上で示唆したように、変数に空白にするか0を代入するだけで、偽とすることができます。。これを利用するために、<code>if Done</code>という省略記法を使えば、変数Doneが真か偽かをチェックすることができます。</p>
<p><span id="True"></span><span id="False"></span>式では、キーワード<em>true</em>と <em>false</em>は1と0に解決される。これらの例は、スクリプトをより読みやすくするために使われます。</p>
<pre>CaseSensitive := false
ContinueSearch := true</pre>
<p id="numbers"><strong>整数と浮動小数点：</strong>式の中で、小数点または科学的記数法を含む数値は浮動小数点とみなされ、そうでないときは整数となります。加算や乗算などのほとんどの演算子では、入力のどちらかが浮動小数点数であれば結果も浮動小数点数になります。</p>
<p>式の中でもそうでなくても、整数は16進数と10進数のどちらの形式でも書くことができます。16進数はすべて接頭辞0xで始まります。例えば、<code>Sleep 0xFF</code>は <code>Sleep 255</code>に相当します。浮動小数点数は、小数点の有無にかかわらず科学的記数法で書くことができます。（例：<code>1e4</code>や <code>-2.1E-4</code>）。</p>
<p>式の中では<code>128</code>、<code>0x7F</code>、<code>1.0</code>などの引用符で囲まれていないリテラル数値はスクリプトの実行を開始する前に純粋な数値に変換されるため、数値を文字列に変換すると元のリテラル値とは異なる値が生成される可能性があります。事例：</p>
<pre>MsgBox(0x7F)  <em>; 128と表示します。</em>
MsgBox(1.00)  <em>; 1.0と表示します。</em></pre>

<h2 id="Operators">式の中での演算子</h2>
<p class="note">演算子に関する一般的な情報については、「<a href="Language.htm#operators">演算子</a>」を参照してください。</p>
<p>以下に記す場合を除き、空白の値（空文字列）または数値以外の値が算術演算に含まれる場合、ゼロとはみなされ<strong>ません</strong>。代わりに<a href="lib/Error.htm#TypeError">TypeError</a>がスローされます。<a href="lib/Try.htm">Try</a>を使用しない場合、処理されなかった例外はデフォルトでエラーダイアログを表示します。</p>

<h3 id="operators">式演算子（優先順位の降順）</h3>
<table class="info">
  <tr>
    <th class="center">オペレーター</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="deref">
    <td class="center bold">%Expr%</td>
    <td>
      <p><strong>デリファレンス</strong>または<strong>名前の置換</strong>。</p>
      <p><em>Expr</em>が <a href="Concepts.htm#variable-references">VarRef</a>に評価されると、<code>%Expr%</code>は対応する変数にアクセスする。例えば、<code>x := &amp;y</code>は <em>y</em>への参照を取り、それを<em>x</em>に代入する。次に、<code>%x% := 1</code>は変数<em>y</em>に代入し、<code>%x%</code>はその値を読み取る。</p>
      <p>そうでない場合は、<em>Expr</em>部分式の値が変数やプロパティの名前または部分名として使われる。これによってスクリプトは、<em>Expr</em>を評価することで名前が決まる変数やプロパティ（通常は別の変数）を参照できるようになる。変数は動的に作成できないが、スクリプトのどこかで非動的に宣言または参照されていれば、動的に代入できる。</p>
      <p class="note"><strong>注：</strong>部分式<em>Expr</em>の <u>結果</u>は、アクセスする変数またはプロパティの名前または部分名でなければならない。</p>
      <p>パーセント記号は、曖昧さのために<em>Expr</em>内で直接使用することはできないが、括弧内に入れ子にすることはできる。そうでなければ、<em>Expr</em>はどんな式でもよい。</p>
      <p><em>%Expr%</em>シーケンスと部分<a href="Concepts.htm#names">名</a>（間にスペースや他の文字を含まない）が隣接している場合、それらは結合されて1つの名前になります。</p>
      <p><a href="lib/Error.htm">エラー</a>がスローされるのは、その変数がまだ存在していない場合、あるいは初期化されておらず、その値を読み込もうとしている場合である。<a href="#or-maybe">or-maybe演算子（??）</a>は、デフォルト値を提供することで、そのようなケースを避けるために使うことができる。事例：<code>%'novar'% ?? 42</code>。</p>
      <p>これは歴史的に「double-deref」として知られているが、<em>Expr</em>が変数を含まない場合（1番目のderef）、また、結果の変数が代入のターゲットであり、参照解除されない場合（2番目のderef）、この用語は不正確である。</p>
    </td>
  </tr>
  <tr id="objdot">
    <td class="center bold">x.y<br>x.%z%</td>
    <td><strong>会員アクセス</strong>。オブジェクト<i>x</i>の値の取得、設定、メソッドの呼び出し。<i>y</i>はリテラル名、<em>z</em>は名前として評価される式。<a href="Objects.htm#Usage_Objects">オブジェクト構文</a>を参照のこと。</td>
  </tr>
  <tr id="maybe">
    <td class="center"><em>var</em><strong>?</strong></td>
    <td>
      <p><strong>Maybe</strong>。変数のアンセットを許可する。これは、変数をオプショナル・パラメーター、配列要素、オブジェクト・リテラルに渡す場合、または直接代入の右辺に渡す場合にのみ有効である。クエスチョンマークの後には、以下の記号のいずれかを続けなければならない（空白は無視する）：<code class="no-highlight">)]},:</code>。変数は、<a href="#ternary">三項演算子</a>や <a href="#and">AND</a>/<a href="#or">OR</a>の右辺で条件付きで渡すことができる。</p>
      <p>変数は通常オプションのパラメータだが、どんな変数でも構わない。関数のパラメータではない変数の場合、変数への参照はあるが代入がない場合、ロード時に<a href="lib/_Warn.htm#VarUnset">VarUnset 警告</a>が表示されることがあります。</p>
      <p>この演算子は現在、変数に対してのみサポートされている。より一般的なケースで明示的または条件付きでパラメータを省略するには、<code>unset</code>キーワードを使用します。</p>
      <p>こちらも参照のこと：<a href="Language.htm#unset">unset（オプション・パラメータ）</a></p>
    </td>
  </tr>
  <tr id="IncDec">
    <td class="center bold">++<br>
    --</td>
    <td>
      <p><strong>増減の前後</strong>。変数に 1 を加算または減算する。演算子は変数名の前でも後でもよい。名前の<em>前</em>に現れた場合、その操作は実行され、その結果は次の操作で使用される（この場合、結果は変数参照）。例えば、<code>Var := ++X</code>はXをインクリメントし、その値を<em>Var</em>に代入する。逆に、演算子が変数名の<em>後</em>にある場合、結果は演算を実行する前のXの値になる。例えば、<code>Var := X++</code>はXをインクリメントするが、<em>Var</em>はXがインクリメントされる前の値を受け取る。</p>
      <p>これらの演算子は、<code>myArray.Length++</code>や <code>--myArray[i]</code>のように、オブジェクトのプロパティと組み合わせて使うこともできる。このような場合、部分式の結果は常に数値であり、変数参照ではない。</p>
    </td>
  </tr>
  <tr id="pow">
    <td class="center bold">**</td>
    <td>
      <p><strong>冪</strong>。使用例：<code>基数**指数</code>。<em>基数</em>も<em>指数</em>も小数点を含むことができる。<em>指数</em>が負の場合、<em>基数</em>と <em>指数</em>がともに整数であっても、結果は浮動小数点数としてフォーマットされる。**は単項マイナスより優先順位が高いので、<code>-2**2</code>は<code>-(2**2)</code>のように評価され、-4となる。したがって、リテラルで負の数を累乗するには、<code>(-2)**2</code>のように括弧で囲む。</p>
      <p>冪演算子は右結合である。例えば、<code>x ** y ** z</code>は<code>x ** (y ** z)</code>と評価される。</p>
      <p class="note"><strong>注意：</strong><code>(-2)**0.5</code>のような負の<em>基数</em>と小数の<em>指数</em>を組み合わせたものはサポートされていません。しかし、<code>(-2)**2</code>と<code>(-2)**2.0</code>の両方がサポートされている。<em>基数</em>と<em>指数</em>の両方が0の場合、結果は未定義となり例外がスローされる。</p>
    </td>
  </tr>
  <tr id="unary">
    <td class="center bold">-<br>
    !<br>
    ~<br>
    &amp;</td>
    <td>
      <p><strong>単項マイナス（-）：</strong>オペランドの符号を反転します。</p>
      <p><strong>単項プラス（+）：</strong> <code>+N</code>は <code>-(-N)</code>と等価。これは純粋な数値に適用しても何の効果もないが、数値文字列を純粋な数値に変換するために使うことができる。</p>
      <p><strong>論理否定（!）：</strong>オペランドが空白または0の場合、論理否定を適用した結果は1、つまり「真」を意味する。そうでなければ、結果は0（偽）である。事例：<code>!x or !(y and z)</code>。注：「NOT」は<strong>!</strong>と同義だが、<strong>!</strong>の方が優先順位が高い。<code><strong>!!</strong>Var</code>のような連続する単項演算子は、右から左の順番で評価されるため許される。</p>
      <p><strong>Bitwise-not（~）：</strong>オペランドの各ビットを反転する。64ビットの符号付き整数を使用するため、正の入力値は常に負の結果を与え、その逆も同様である。例えば、<code>~0xf0f</code>は-0xf10 (-3856)と評価され、これは2進数で0xfffffffffffff0f0と等価である。符号なし32ビット値が意図されている場合、<code><i>result</i> &amp; 0xffffffff</code>で結果を切り捨てることができる。オペランドが浮動小数点値の場合、<a href="lib/Error.htm#TypeError">TypeError</a>がスローされます。</p>
      <p id="ref"><strong>参照（&amp;）：</strong>変数への参照を表す値である VarRef を作成します。VarRefを使えば、ターゲット変数に間接的にアクセスできる。例えば、<code>ref := &amp;target</code>の後に<code>%ref% := 1</code>を続けると、<em>target</em>に値1が割り当てられる。VarRefは通常関数に渡されるが、配列やプロパティに格納することもできる。こちらも参照のこと：<a href="#deref">デリファレンス</a>、<a href="Functions.htm#ByRef">ByRef</a>。</p>
      <p><a href="lib/A_Clipboard.htm">A_Clipboard</a>のような組み込み変数への参照は、組み込み関数の<em>OutputVar</em>パラメータに直接渡される場合を除き、現在サポートされていません。</p>
    </td>
  </tr>
  <tr id="MulDiv">
    <td class="center bold">*<br>
    /<br>
    //
    </td>
    <td><p><strong>乗算（*）：</strong>それ以外の場合は浮動小数点数。</p>
      <p><strong>その他の使用法：</strong>アスタリスク(*)記号は<a href="Functions.htm#VariadicCall">変種関数呼び出し</a>にも使われる。</p>
      <p id="divide"><strong>真の除算（/）：</strong>真の除算は、両方の入力が整数の場合でも浮動小数点数の結果を返す。例えば、<code>3/2</code>は1ではなく1.5、<code>4/2</code>は2ではなく2.0となる。</p>
      <p id="IntegerDivide"><strong>整数除算（//）：</strong>ダブルスラッシュ演算子は、高性能な整数除算を行う。例えば、<code>5//3</code>は1であり、<code>5//-3</code>は-1である。入力のどちらかが浮動小数点形式の場合、<a href="lib/Error.htm#TypeError">TypeError</a>が投げられる。モジュロについては<a href="lib/Math.htm#Mod">Mod</a>を参照。</p>
    <p><a href="#AssignOp">演算子 *= と /=</a>は、変数の値を別の値で乗算または除算する省略記法である。例えば、<code>Var*=2</code>は<code>Var:=Var*2</code>と同じ結果になる（ただし、前者の方が性能は良い）。</p>
    <p>ゼロによる除算は<a href="lib/Error.htm#ZeroDivisionError">ZeroDivisionError</a>をスローする。</p></td>
  </tr>
  <tr id="AddSub">
    <td class="center bold">+<br>
    -</td>
    <td><p><strong>足し算（+）</strong>と<strong>引き算 (-)</strong>。これに関連して、<a href="#AssignOp">+=演算子や-=演算子</a>は、変数をインクリメントしたりデクリメントしたりする省略記法である。例えば、<code>Var+=2</code>は<code>Var:=Var+2</code>と同じ結果になる（ただし、前者の方が性能は良い）。同様に、<a href="#IncDec">Var++、Var--、++Var、--Var</a>を使えば、変数を1つ増やしたり減らしたりできる。</p>
      <p><strong>その他の使用法：</strong>記号の前に値（または値を返す部分式）がない場合、代わりに<a href="#unary">単項演算子</a>として解釈されます。</p>
    </td>
  </tr>
  <tr id="bitshift">
    <td class="center bold">&lt;&lt;<br>
    &gt;&gt;<br>
    &gt;&gt;&gt;</td>
    <td>
      <p><strong>ビットシフト・レフト（&lt;&lt;）</strong>。使用例：<code>Value1 &lt;&lt; Value2</code>。これは、<em>Value1</em>に「2の<em>Value2</em>乗」を掛けることと同じである。</p>
      <p><strong>算術ビットの右シフト（&gt;&gt;）</strong>。使用例：<code>Value1 &gt;&gt; Value2</code>。これは、<em>Value1</em>を「2の<em>Value2</em>乗」で除算し、その結果を数直線上で左方向に最も近い整数に四捨五入することと同じである。例えば、<code>-3&gt;&gt;1</code>は-2である。</p>
      <p><strong>論理ビットの右シフト（&gt;&gt;）</strong>。使用例：<code>Value1 &gt;&gt;&gt; Value2</code>。算術ビットシフト右とは異なり、これは数値の符号を保持しない。例えば、-1は符号なし64ビット整数0xffffffffffffと同じビット表現を持つので、<code>-1 &gt;&gt;&gt; 1</code>は0x7fffffffffffffとなる。</p>
      <p>以下は、3つの演算子すべてに適用されます：</p>
      <ul>
        <li>入力のどちらかが浮動小数点数のときは、<a href="lib/Error.htm#TypeError">TypeError</a>がスローされます。</li>
        <li>64 ビット演算が実行され、結果は64ビット符号付き整数になります。</li>
        <li><em>Value2</em>が0より小さいか63より大きい場合、例外がスローされる。</li>
      </ul>
    </td>
  </tr>
  <tr id="bitwise">
    <td class="center bold">&amp;<br>
    ^<br>
    |
    </td>
    <td>
      <p><strong>ビットワイズ・アンド（&amp;）</strong>、<strong>ビットワイズ・エクスクルーシブ・オア（^）</strong>、<strong>ビットワイズ・オア（|）</strong>。この3つのうち、<strong>&amp;</strong>が最も優先順位が高く、<strong>|</strong>が最も低い。</p>
      <p>以下は、3つの演算子すべてに適用されます：</p>
      <ul>
        <li>入力のどちらかが浮動小数点数のときは、<a href="lib/Error.htm#TypeError">TypeError</a>がスローされます。</li>
        <li>64 ビット演算が実行され、結果は64ビット符号付き整数になります。</li>
      </ul>
      <p>関連：<a href="#unary">ビットワイズ・ノット（~）</a></p>
    </td>
  </tr>
  <tr id="concat">
    <td class="center bold">.</td>
    <td>
      <p><strong>連結</strong>。ピリオド(ドット)の両側に少なくとも1つのスペースまたはタブを入れ、2つの項目を1つの文字列にまとめる。ピリオドを省略しても同じ結果が得られる <code>x <strong>-</strong>y</code>のように曖昧な場合や、右側の項目の先頭に ++ や -- がある場合を除く）。ドットが省略された場合、マージされる項目の間には少なくとも1つのスペースまたはタブが必要です。</p>
      <pre>Var := "The color is " <strong>.</strong> FoundColor  <em>; Explicit concat</em>
Var := "The color is " FoundColor    <em>; Auto-concat</em>
</pre>
      <p>部分式は連結することもできる。For example: <code>Var := "The net price is " <strong>.</strong> Price * (1 - Discount/100)</code>.</p>
      <p>ピリオド（またはその他の演算子）で始まる行は、自動的にその上の行<a href="Scripts.htm#continuation">に追加</a>される。</p>
      <p>各入力の<a href="lib/StrLen.htm">全長</a>は、たとえ2進数のゼロが含まれていても使用される。例えば、<code>Chr(0x2010) Chr(0x0000) Chr(0x4030)</code>は以下のバイト列を生成する（UTF-16-LEエンコーディングによる）：0x10、0x20、0、0、0x30、0x40。結果には、長さに含まれないヌル・ターミネーター（2進数のゼロ）が追加される。</p>
      <p><strong>その他の使い方：</strong>ピリオド（ドット）の右にスペースまたはタブがない場合、リテラル<a href="#numbers">浮動小数点数</a>または<a href="#objdot">メンバアクセス</a>として解釈される。例えば、<code>1.1</code>と<code>(.5)</code>は数値、<code>A_Args.Has(3)</code>はメソッド呼び出し、<code>A_Args.Length</code>はプロパティアクセスである。</p>
    </td>
  </tr>
  <tr id="regex">
    <td class="center bold">~=</td>
    <td><a href="lib/RegExMatch.htm">RegExMatch</a>の省略形。例えば、<code>"abc123" ~= "\d"</code>の結果は4（最初の数字の位置）です。</td>
  </tr>
  <tr id="compare">
    <td class="center bold">&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    &gt;= &lt;=</td>
    <td>
      <p><strong>大きい（&gt;）</strong>、<strong>小さい（&lt;）</strong>、<strong>大小（&gt;=）</strong>、<strong>より小さい（&lt;=）</strong>。入力は数値で比較される。入力のどちらかが数値または数値文字列でない場合、<a href="lib/Error.htm#TypeError">TypeError</a>がスローされる。</p>
    </td>
  </tr>
  <tr id="equal">
    <td class="center bold">=<br>
      ==<br>
      !=<br>
      !==</td>
    <td>
      <p><strong>大文字小文字を区別しないイコール（=）/ノットイコール（=）、</strong> <strong>大文字小文字を区別するイコール（==）/ノットイコール（!==）</strong>。<strong>==</strong>演算子は、<strong>=</strong>演算子と同じ動作をするが、入力のどちらかが数値でない（あるいは両方が文字列である）場合は、<strong>==</strong>は常に大文字と小文字を区別し、<strong>=</strong>は常に大文字と小文字を区別しない。<strong>!=</strong>と<strong>!==</strong>は、結果が反転することを除けば、<strong>!</strong>を使わない場合と同じ動作をする。</p>
      <p><strong>==</strong>と<strong>!==</strong>演算子は、2進数の0を含む文字列を比較するのに使うことができる。<strong>~=</strong>以外の比較演算子は、最初の2進数の0までしか比較しない。</p>
      <p>大文字と小文字を区別しない比較では、ASCII文字のA-Zのみが小文字と同等とみなされる。代わりに、現在のユーザーのロケールのルールに従って比較するには、<a href="lib/StrCompare.htm">StrCompare</a>を使用し、<em>CaseSense</em>パラメータに「Locale」を指定する。</p>
    </td>
  </tr>
  <tr>
    <td class="center bold">IS<br>IN<br>CONTAINS</td>
    <td id="is">
      <p><code><i>Value</i> <strong>is</strong> <i>Class</i></code> yields 1 (true) if <em>Value</em> is an instance of <em>Class</em>, otherwise 0 (false). <em>Class</em> must be an <a href="lib/Object.htm">Object</a> with an own <a href="lib/Class.htm#Prototype">Prototype</a> property, but typically the property is defined implicitly by a class definition. この操作は一般的に<code>HasBase(<i>Value</i>, <i>Class</i>.Prototype)</code>と等価です。</p>
      <p><code id="in"><strong>in</strong></code>と<code id="contains"><strong>contains</strong></code>は将来の使用のために予約されている。</p>
    </td>
  </tr>
  <tr id="not">
    <td class="center bold">NOT</td>
    <td><strong>論理否定</strong>。優先順位が低いことを除けば、これは<strong>!</strong>演算子と同様である。例えば、<code>not (x = 3 or y = 3)</code>は<code><strong>!</strong>(x = 3 or y = 3)</code>と同じである。</td>
  </tr>
    <tr id="and">
      <td class="center bold">AND<br>
      &amp;&amp;</td>
      <td><p>どちらも<strong>論理積</strong>だ。事例：<code>x &gt; 3 and x &lt; 10</code>。</p>
        <p>In an expression where all operands are true, the <u>last</u> operand is returned. Otherwise, the <u>first</u> operand that is false is returned. In other words, the result is true only if all operands are true. Boolean expressions are subject to <a href="Functions.htm#ShortCircuit">short-circuit evaluation</a> (from left to right) to improve performance.</p>
        <p>In the following example, all operands are true and will be evaluated:</p>
        <pre>A := 1, B := {}, C := 20, D := true, E := "str"
MsgBox(A &amp;&amp; B &amp;&amp; C &amp;&amp; D &amp;&amp; E) <em>; "str" (E)と表示します。</em></pre>
        <p>In the following example, only the first two operands will be evaluated because B is false. The rest is ignored, i.e. C is not incremented either:</p>
        <pre>A := 1, B := "", C := 0, D := false, E := "str"
MsgBox(A &amp;&amp; B &amp;&amp; ++C &amp;&amp; D &amp;&amp; E) <em>; "" (B)と表示します。</em></pre>
        <p><code>AND</code>または<code>&amp;&amp;</code>（あるいはその他の演算子）で始まる行は、自動的にその上の行に<a href="Scripts.htm#continuation">追加</a>される。</p></td>
    </tr>
    <tr id="or">
      <td class="center bold">OR<br>
      ||</td>
      <td><p>どちらも<strong>論理和</strong>である。事例：<code>x &lt;= 3 or x &gt;= 10</code>。</p>
        <p>In an expression where at least one operand is true, the <u>first</u> operand that is true is returned. Otherwise, the <u>last</u> operand that is false is returned. In other words, if at least one operand is true, the result is true. Boolean expressions are subject to <a href="Functions.htm#ShortCircuit">short-circuit evaluation</a> (from left to right) to improve performance.</p>
        <p>In the following example, at least one operand is true. All operands up to D will be evaluated. E is ignored and will never be incremented:</p>
        <pre>A := "", B := false, C := 0, D := "str", E := 20
MsgBox(A || B || C || D || ++E) <em>; Shows "str" (D).</em></pre>
        <p>In the following example, all operands are false and will be evaluated:</p>
        <pre>A := "", B := false, C := 0
MsgBox(A || B || C) <em>; Shows "0" (C).</em></pre>
        <p><code>OR</code>または<code>||</code>（あるいはその他の演算子）で始まる行は、自動的にその上の行に<a href="Scripts.htm#continuation">追加</a>される。</p></td>
    </tr>
  <tr id="or-maybe">
    <td class="center bold">??</td>
    <td>
      <p><strong>あるいは</strong>、合体演算子と呼ばれるものかもしれない。左オペランド（変数でなければならない）に値があれば、それが結果となり、右分岐はスキップされる。そうでない場合は、右オペランドが結果になる。言い換えれば、<code>A ?? B</code>は、条件が<code>IsSet(A)</code>であることを除けば、<code>A || B</code>（<a href="#or">論理和</a>）のように振る舞う。</p>
      <p>これは通常、変数やオプショナル・パラメータにまだ値がないことが分かっている場合に、デフォルト値を提供するために使われる。事例：</p>
      <pre>MsgBox MyVar ?? "Default value"</pre>
      <p>変数が<a href="Concepts.htm#uninitialized-variables">初期化されていない</a>ことも想定されるので、そのような場合でもエラーは発生しない。<code>IsSet(A) ? A : B</code>と異なり、変数への他の参照があるが代入がない場合、ロード時に<a href="lib/_Warn.htm#VarUnset">VarUnset 警告</a>が表示されることがあります。</p>
    </td>
  </tr>
  <tr id="ternary">
    <td class="center bold">?:</td>
    <td>
      <p><strong>三項演算子</strong>。この演算子は、<a href="lib/If.htm">if-else文</a>に代わる省略記法である。左辺の条件を評価し、2つの分岐のどちらが最終的な結果になるかを決定する。たとえば、<code>var := x&gt;y ? 2 : 3</code>は、xがyより大きければ<em>Var</em>に2を格納し、そうでなければ3を格納する。パフォーマンスを向上させるため、勝利した分岐のみが評価される（<a href="Functions.htm#ShortCircuit">短絡評価</a>を参照）。</p>
      <p>こちらも参照のこと：<a href="#maybe">maybe（<em>var</em>?）</a>、<a href="#or-maybe">or-maybe （??）</a></p>
      <p class="warning"><strong>注：</strong>行頭で使用する場合、他の文との曖昧さを避けるため、3項条件は通常括弧で囲む。詳しくは<a href="Language.htm#expression-statements">表現ステートメント</a>を参照。</p>
    </td>
  </tr>
  <tr id="AssignOp">
    <td class="center bold">:=<br>
        +=<br>
        -=<br>
        *=<br>
        /=<br>
        //=<br>
        .=<br>
        |=<br>
        &amp;=<br>
        ^=<br>
        &gt;&gt;=<br>
        &lt;&lt;=<br>
        &gt;&gt;&gt;=
    </td>
    <td><p><strong>アサイン</strong>。変数の内容に演算を行い、結果を同じ変数に戻す。最も単純な代入演算子はコロン等号（:=）で、式の結果を変数に格納する。他の演算子の動作については、この表の関連項目を参照のこと。例えば、<code>Var //= 2</code>は、<em>Var</em>を2で割る<a href="#IntegerDivide">整数除算</a>を実行し、結果を<em>Var</em>に戻す。同様に、<code>Var <strong>.=</strong> "abc"</code>は、<code>Var := Var <strong>.</strong> "abc"</code>である。</p>
      <p>他のほとんどの演算子とは異なり、代入は右から左に評価される。その結果、<code>Var1 := Var2 := 0</code>のような行は、まず<em>Var2</em>に0を代入し、次に<em>Var2</em>を<em>Var1</em>に代入する。</p>
    <p>代入が他の演算子の入力として使われる場合、その値は変数そのものとなる。例えば、<code>(Var+=2) &gt; 50</code>という式は、<em>Var</em>の新しく増加した値が50より大きい場合に真となる。また、<code>&amp;(Var := "初期値")</code>のように、代入と<a href="#ref">参照演算子</a>を組み合わせることも有効である。</p>
    <p>代入演算子の優先順位は、構文エラーを回避したり、より直感的な動作を提供したりする場合に、自動的に引き上げられる。事例：<code>not x:=y</code>は<code>not (x:=y)</code>と評価される。また、<code class="no-highlight">x==y &amp;&amp; z:=1</code>1は、<code class="no-highlight">x==y &amp;&amp; (z:=1)</code>と評価され、xがyと等しくない場合に<a href="Functions.htm#ShortCircuit">短絡する</a>。同様に、<code>++Var := X</code>は <code>++(Var := X)</code>と評価され、<code>Z&gt;0 ? X:=2 : Y:=2</code>は<code>Z&gt;0 ? (X:=2) : (Y:=2)</code>と評価される。</p>
    <p>直接代入（<code>:=</code>）と<code>unset</code>キーワード、または<a href="#maybe">maybe（<em>var</em>?）</a> 演算子を組み合わせることで、ターゲット変数を<em>設定解除</em>することができる。事例：<code>Var := unset</code>、<code>Var1 := (Var2?)</code>。</p>
    <p>代入は、<code>myArray.Length += n</code>や <code>myArray[i] .= t</code>のように、オブジェクトのプロパティを対象とすることもできる。プロパティに代入する場合、部分式の結果は代入される値であり、変数参照ではありません。</p>
    </td>
  </tr>
  <tr id="fat-arrow">
    <td class="center"><strong>() =&gt;</strong> <em>expr</em></td>
    <td>
      <p><strong>ファットアロー機能</strong>。単純な<a href="Functions.htm">関数</a>を定義し、<a href="lib/Func.htm">Func</a>または<a href="Functions.htm#closures">Closure</a>オブジェクトを返します。関数の<a href="Functions.htm#param">パラメータ・リスト</a>（オプションで関数名を前に付ける）を演算子の左に書く。関数が（返された参照を通じて）呼び出されると、その関数は部分式<em>expr</em>を評価し、結果を返します。</p>
      <p>次の2つの例は同等である：</p>
      <pre>sumfn := Sum(a, b) =&gt; a + b</pre>
      <pre>Sum(a, b) {
    return a + b
}
sumfn := Sum</pre>
      <p>どちらの場合も、関数はスクリプトが起動した時点で<strong>無条件</strong>に定義されるが、関数参照が<em>sumfn</em>に格納されるのは、代入が評価されたときだけである。</p>
      <p>関数名が省略され、パラメータリストが単一のパラメータ名のみで構成されている場合は、括弧を省略することができます。以下の例では、パラメータ<code>a</code>を1つ持つ無名関数を定義し、その参照を変数<code>double</code>に格納している：</p>
      <pre>double := a =&gt; a * 2</pre>
      <p><em>expr</em>の変数参照は、同等の完全な関数定義と同じ方法で解決される。例えば、<em>expr</em>は（<a href="Functions.htm#nested">入れ子になった関数</a>のように）外側の関数のローカル変数を参照することがあり、その場合、ファット・アロー式が評価されるたびに新しい<a href="Functions.htm#closures">クロージャ</a>が作成され、返されます。宣言は使えないので、この関数は常に<a href="Functions.htm#AssumeLocal">assume-local</a>である。</p>
      <p>関数の名前を指定することで、<a href="Functions.htm#closures">クロージャ</a>への参照を自分自身の中に保存することなく（それによって問題のある<a href="Objects.htm#Circular_References">循環参照</a>を作成する）、再帰的または他のネストされた関数から呼び出すことができます。It can also be helpful for debugging, such as with <a href="lib/Func.htm#Name">Func.Name</a> or when displayed on the debugger's call stack.</p>
      <p>ファット・アロー構文は、省略記法の<a href="Objects.htm#Custom_Classes_property_short">プロパティ</a>や <a href="Objects.htm#Custom_Classes_method">メソッド</a>を定義するためにも使用できます。</p>
    </td>

  </tr>
  <tr id="comma">
    <td class="center bold">,</td>
    <td><p><strong>コンマ（複数ステートメント）</strong>。カンマは、1行に複数の部分式を記述するために使用することができる。これは、複数の割り当てや関数コールをグループ化するためによく使われる。事例：<code>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, MyFunc()</code>。このようなステートメントは、左から右の順に実行される。</p>
      <p class="note"><strong>注：</strong>カンマ（またはその他の演算子）で始まる行は、自動的にその上の行に<a href="Scripts.htm#continuation">追加</a>される。</p>
      <p>カンマは、関数呼び出しや制御フロー文のパラメータを区切るためにも使われる。複数ステートメント式をパラメータ・リストに含めるには、括弧で囲む。例えば、<code>MyFn((x, y))</code>はxとyの両方を評価するが、MyFnの最初の唯一のパラメーターとしてyを渡す。</p>
    </td>
  </tr>
</table>
<p>以下のタイプの部分式は、優先順位や評価の順序を上書きする：</p>
<table class="info">
  <tr>
    <th class="center">式</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td class="center"><strong>(</strong><em>表現</em><strong>)</strong></td>
    <td>
      <p>括弧で囲まれた任意の部分式。例えば、<code>(3 + 2) * 2</code>とすると、<code>3 + 2</code>が最初に評価される。</p>
      <p>複数ステートメント式の場合は、<u>最後</u>のステートメントの結果が返される。例えば、<code>(a := 1, b := 2, c := 3)</code>は3を返す。</p>
    </td>
  </tr>
  <tr>
    <td class="center"><p>Mod<strong>()</strong><br>
        Round<strong>()</strong><br>
    Abs<strong>()</strong></p></td>
    <td rowspan="2"><p><strong>関数呼び出し</strong>。関数名または式と、パラメータ・リストを始める開括弧の間にはスペースを入れてはならない。詳細については、<a href="Language.htm#function-calls">関数呼び出し</a>を参照のこと。</p>
    <p><em>(式)</em>は必ずしも括弧で囲む必要はないが、そうすることで曖昧さをなくすことができる。例えば、<code>(x.y)()</code>はプロパティから関数を取得し、パラメータなしで呼び出すが、<code>x.y()</code>は最初のパラメータとして暗黙的に<code>x</code>を渡す。</p>
    </td>
  </tr>
  <tr>
    <td class="center" style="white-space: nowrap;"><p><em>(式)</em><strong>()</strong></p></td>
  </tr>
  <tr>
    <td class="center">Fn(<strong><em>Params</em>*</strong>)</td>
    <td><p><a href="Functions.htm#VariadicCall">変数関数呼び出し</a>。<em>Params</em>は、パラメータ値を含む<a href="lib/Array.htm">Array</a>のような列挙可能なオブジェクト（<a href="Objects.htm#__Enum">__Enum</a>メソッドを持つオブジェクト）です。</p></td>
  </tr>
  <tr id="square-brackets">
    <td class="center"><strong>x[y]<br>[a, b, c]</strong></td>
    <td>
      <p><strong>アイテムのアクセス</strong>。オブジェクト<em>x</em>の<a href="Objects.htm#__Item">__Item</a>プロパティ（またはデフォルトのプロパティ）を、パラメータ<em>y</em>（または<em>y</em>の代わりに複数のパラメータ）で取得または設定します。これは通常、コレクション内の配列要素またはアイテムに対応し、<em>y</em>はアイテムのインデックスまたはキーである。閉じ括弧の直後に任意の<a href="#AssignOp">代入演算子</a>を使えば、その項目に値を代入することができる。例えば、<code>x[y] := z</code>。</p>
      <p><strong>配列リテラル</strong>。オープンブラケットに値（または値を返す部分式）が先行しない場合、配列リテラルの開始として解釈される。例えば、<code>[a, b, c]</code>は<code>Array(a, b, c)</code>と等価である（a, b, cは変数）。</p>
      <p>一般的な使用法については、<a href="Objects.htm#Usage_Simple_Arrays">配列</a>と <a href="Objects.htm#Usage_Associative_Arrays">マップ</a>を参照のこと。</p>
    </td>
  </tr>
  <tr id="curly-braces">
    <td class="center"><strong>{a: b, c: d}</strong></td>
    <td>
      <p><strong>オブジェクト・リテラル</strong>。<a href="lib/Object.htm">オブジェクトを</a>作成する。各ペアは、リテラル・プロパティ名<code>a</code>とプロパティ値式<code>b</code>で構成される。例えば、<code>x := {a: b}</code> は<code>x := Object(), x.a := b</code>と等価である。<a href="lib/Object.htm#Base">ベース</a>はオブジェクト・リテラル内で設定することができるが、他のすべてのプロパティは<em>独自の値プロパティ</em>として設定され、ベース・オブジェクトから継承されたプロパティをオーバーライドする可能性がある。</p>
      <p>ダイナミック・プロパティ名を使うには、部分式をパーセント記号で囲む。事例：<code>{%nameVar%: valueVar}</code>。</p>
    </td>
  </tr>
</table>

<h2 id="BuiltIn">組込変数</h2>
<p>以下の変数はプログラムに組み込まれており、どのスクリプトからも参照できる。</p>
<p class="note">一般的な情報については、<a href="Concepts.htm#built-in-variables">組み込み変数</a>を参照してください。</p>
<h3 id="BuiltIn_TOC">目次</h3>
<ul>
  <li>特殊文字：<a href="#Space">A_Space</a>、<a href="#Tab">A_Tab</a></li>
  <li>スクリプトのプロパティ：<a href="#Args">コマンドラインパラメータ</a>、<a href="#WorkingDir">A_WorkingDir</a>、<a href="#ScriptDir">A_ScriptDir</a>、<a href="#ScriptName">A_ScriptName</a>、<a href="#prop">(...もっと...)</a></li>
  <li>日時：<a href="#YYYY">A_YYYY</a>、<a href="#MM">A_MM</a>、<a href="#DD">A_DD</a>、<a href="#Hour">A_Hour</a>、<a href="#Min">A_Min</a>、<a href="#Sec">A_Sec</a>、<a href="#date">(...もっと...)</a></li>
  <li>スクリプトの設定：<a href="#IsSuspended">A_IsSuspended</a>、<a href="#ListLines">A_ListLines</a>、<a href="#TitleMatchMode">A_TitleMatchMode</a>、<a href="#settings">(...もっと...)</a></li>
  <li>ユーザーアイドル時間：<a href="#TimeIdle">A_TimeIdle</a>、<a href="#TimeIdlePhysical">A_TimeIdlePhysical</a>、<a href="#TimeIdleKeyboard">A_TimeIdleKeyboard</a>、<a href="#TimeIdleMouse">A_TimeIdleMouse</a></li>
  <li>ホットキー、ホットストリング、カスタムメニュー項目：<a href="#ThisHotkey">A_ThisHotkey</a>、<a href="#EndChar">A_EndChar</a>、<a href="#h">(...もっと...)</a></li>
  <li>オペレーティングシステムとユーザー情報：<a href="#OSVersion">A_OSVersion</a>、<a href="#Screen">A_ScreenWidth</a>、<a href="#Screen">A_ScreenHeight</a>、<a href="#os">(...もっと...)</a></li>
  <li>その他：<a href="#Clipboard">A_Clipboard</a>、<a href="#Cursor">A_Cursor</a>、<a href="#EventInfo">A_EventInfo</a>、<a href="#misc">(...もっと...)</a></li>
  <li>ループ：<a href="#Index">A_Index</a>、<a href="#loop">(...もっと...)</a></li>
</ul>
<h3 id="Special_Characters">特殊文字</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="Space">
    <td>A_Space</td>
    <td>スペース1文字を含む。</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>タブ文字を1文字含む。</td>
  </tr>
</table>
<h3 id="prop">スクリプト・プロパティ</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="Args">
    <td>A_Args</td>
    <td>コマンドラインパラメータの<a href="Objects.htm#Usage_Simple_Arrays">配列</a>を含む。詳細については、<a href="Scripts.htm#cmd">スクリプトにコマンドラインパラメータを渡す</a>を参照してください。</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td><p>スクリプトのカレント作業ディレクトリを取得または設定するために使用する。ルート・ディレクトリでない限り、最後のバックスラッシュは含まれない。Two examples: C:\ and C:\My Documents.</p>
    <p><a href="lib/SetWorkingDir.htm">SetWorkingDir</a> can also be used to change the working directory.</p>
    <p>スクリプトの起動方法に関係なく、スクリプトの作業ディレクトリの初期値は<a href="#ScriptDir">A_ScriptDir</a>です。</p></td>
  </tr>
  <tr id="InitialWorkingDir">
    <td>A_InitialWorkingDir</td>
    <td>スクリプトの初期作業ディレクトリで、スクリプトの起動方法によって決まる。例えば、スタートメニューのようなショートカットから実行した場合、最初の作業ディレクトリはショートカットのプロパティにある「Start in」フィールドによって決定されます。</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>
      <p>現在のスクリプトが置かれているディレクトリのフルパス。最後のバックスラッシュは（ルート・ディレクトリでも）省略される。</p>
      <p>スクリプトテキストがファイルからではなく<a href="Scripts.htm#stdin">標準入力から読み込まれる</a>場合、この変数には<a href="#InitialWorkingDir">初期作業ディレクトリ</a>が格納される。</p></td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>
      <p><a href="lib/MsgBox.htm">MsgBox</a>、<a href="lib/InputBox.htm">InputBox</a>、<a href="lib/FileSelect.htm">FileSelect</a>、<a href="lib/DirSelect.htm">DirSelect</a>、<a href="lib/Gui.htm">Gui</a>のデフォルトタイトルを取得または設定するために使用できます。スクリプトによって設定されていない場合、デフォルトは現在のスクリプトのファイル名で、パスは省略される。</p>
      <p>If the script text is <a href="Scripts.htm#stdin">read from stdin</a> rather than from file, this variable contains an asterisk (*).</p>
      <p>スクリプトが<a href="Scripts.htm#ahk2exe">コンパイル</a>または<a href="Program.htm#embedded-scripts">埋め込まれている</a>場合、これは現在の実行可能ファイルの名前です。</p>
    </td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>
      <p>現在のスクリプトのフルパス、例：C:\Scripts\My Script.ahk</p>
      <p>If the script text is <a href="Scripts.htm#stdin">read from stdin</a> rather than from file, this variable contains an asterisk (*).</p>
      <p>スクリプトが<a href="Scripts.htm#ahk2exe">コンパイル</a>または<a href="Program.htm#embedded-scripts">埋め込まれている</a>場合、これは現在の実行可能ファイルのフルパスです。</p>
    </td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd</td>
    <td>スクリプトの隠された<a href="Program.htm#main-window">メイン・ウィンドウ</a>の固有ID（HWND/ハンドル）。</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>スクリプト(またはその<a href="lib/_Include.htm">#Include files</a>)内で現在実行中の行の番号。この行番号は、<a href="lib/ListLines.htm">ListLines</a>が表示する行番号と一致する。この例のようなエラー報告に役立つ：<code>MsgBox "Could not write to log file (line number " A_LineNumber ")"</code>。</p>
    <p><a href="Scripts.htm#ahk2exe">コンパイルされたスクリプト</a>は、すべての<a href="lib/_Include.htm">#Include files</a>が1つの大きなスクリプトにマージされるため、行番号が非コンパイルモードで実行したときと異なる場合があります。</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>
      <p><a href="#LineNumber">A_LineNumber</a>が属するファイルのフルパスとファイル名。スクリプトが外部ファイルからロードされた場合、その行がスクリプトの<a href="lib/_Include.htm">#Includeファイル</a>のいずれかに属していなければ、これは<a href="#ScriptFullPath">A_ScriptFullPath</a>と同じです。</p>
      <p>スクリプトが<a href="Scripts.htm#ahk2exe-base">.binファイル</a>に基づいて<a href="Scripts.htm#ahk2exe">コンパイルされた</a>場合、<a href="#ScriptFullPath">A_ScriptFullPath</a>と同じ、現在の実行可能ファイルのフルパスと名前です。</p>
      <p>スクリプトが<a href="Program.htm#embedded-scripts">埋め込まれている</a>場合、A_LineFileにはアスタリスク（*）の後にリソース名が続く、例：*#1</p>
    </td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc</td>
    <td>現在実行中の<a href="Functions.htm">ユーザー定義関数</a>の名前（ない場合は空白）、事例：MyFunction。こちらも参照のこと：<a href="lib/Func.htm#Name">Nameプロパティ（Func）</a></td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>1.0.22のように、スクリプトを実行しているAutoHotkeyのバージョンが含まれています。<a href="Scripts.htm#ahk2exe">コンパイルされたスクリプト</a>の場合、そのスクリプトをコンパイルするために最初に使用されたバージョンが報告される。バージョン番号の書式設定により、スクリプトはA_AhkVersionがこの例のように&gt;または&gt;=で指定された最小バージョン番号より大きいかどうかをチェックすることができる：<code>if (A_AhkVersion &gt;= "1.0.25.07")</code>。こちらも参照のこと：<a href="lib/_Requires.htm">#Requires</a>、<a href="lib/VerCompare.htm">VerCompare</a></td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td>
      <p>非コンパイルまたは<a href="Program.htm#embedded-scripts">埋め込み</a>スクリプトの場合：現在のスクリプトを実際に実行しているEXEファイルのフルパスと名前。事例：C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
      <p><a href="Scripts.htm#ahk2exe-base">.binファイル</a>に基づいて<a href="Scripts.htm#ahk2exe">コンパイルされたスクリプト</a>の場合は、レジストリからインストールディレクトリを読み取り、「\AutoHotkey.exe」を追加して値を決定します。AutoHotkeyがインストールされていない場合、値は空白になります。以下の例はこれに相当する：</p>
      <pre>InstallDir := RegRead("HKLM\SOFTWARE\AutoHotkey", "InstallDir", "")
AhkPath := InstallDir ? InstallDir "\AutoHotkey.exe" : ""</pre>
      <p>.exeファイルに基づいてコンパイルされたスクリプトの場合、A_AhkPathにはコンパイルされたスクリプトのフルパスが含まれます。これは、外部スクリプトを実行するために<a href="Scripts.htm#SlashScript">/script</a>と組み合わせて使うことができる。代わりにインストールされたAutoHotkeyのコピーを見つけるには、上記のようにレジストリを読み取ります。</p>
    </td>
  </tr>
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Contains 1 if the script is running as a <a href="Scripts.htm#ahk2exe">compiled EXE</a> and 0 (which is considered <a href="#Boolean">false</a>) if it is not.</td>
  </tr>
</table>
<h3 id="date">Date and Time</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>
      <p>現在の4桁の年（例：2004年）。A_Yearと同義。</p>
      <p class="note"><strong>注：</strong>ロケールや言語に適した書式の時刻や日付を取得するには、<code><a href="lib/FormatTime.htm">FormatTime</a>()</code>（時刻と長い日付）あるいは<code><a href="lib/FormatTime.htm">FormatTime</a>(, "LongDate")</code>（長い書式の日付を取得）を使用します。</p>
    </td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>現在の2桁の月（01-12）。A_Monと同義。</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>現在の月の2桁の曜日（01-31）。A_MDayと同義。</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>現在のユーザーの言語での現在の月のフルネーム　例：7月</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>現在のユーザーの言語での現在の月の略称　例：Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>現在のユーザーの言語での曜日フルネーム　例：日曜日</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>現在のユーザーの言語での曜日略号　例：Sun</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>現在の1桁の曜日（1～7）。1はどの地域でも日曜日。</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>現在の曜日（1～366）。例えば、009ではなく9が取り出される。ゼロパディングされた値を取り出すには、以下のようにする：<code><a href="lib/FormatTime.htm">FormatTime</a>(, "YDay0")</code>。</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>ISO 8601に従った現在の年号と週番号（例：200453）。年と週を分けるには、<code>Year := <a href="lib/SubStr.htm">SubStr</a>(A_YWeek, 1, 4)</code>、<code>Week := <a href="lib/SubStr.htm">SubStr</a>(A_YWeek, -2)</code>を使う。A_YWeekの正確な定義：新年1月1日を含む週が4日以上ある場合は、第1週とします。それ以外は前年の最終週となり、次週は第1週となります。</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>24時間制の現在の2桁の時（00～23）（例：17は午後5時）。12時間表示とAM/PM表示を同時に取得するには、次のようにします：<code><a href="lib/FormatTime.htm">FormatTime</a>(, "h:mm:ss tt")</code></td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>現在の2桁の分（00-59）。</p></td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>現在の2桁の秒（00-59）。</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>現在の3桁のミリ秒（000-999）。先頭のゼロを取り除くには、次の例に従ってください：<code>Milliseconds := A_MSec + 0</code>。</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>
      <p><a href="lib/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>形式の現在の現地時間。</p>
      <p class="note"><strong>注：</strong>日付と時刻の計算は<a href="lib/DateAdd.htm">DateAdd</a>と <a href="lib/DateDiff.htm">DateDiff</a>で実行できる。また、<a href="lib/FormatTime.htm">FormatTime</a>はあなたのロケールや好みに合わせて日付や時刻をフォーマットすることができます。</p>
    </td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td><a href="lib/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>形式の現在の協定世界時（UTC）。UTCは基本的にグリニッジ標準時（GMT）と同じである。</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>システムが起動してから経過したミリ秒数（最大49.7日）。A_TickCountを変数に格納することで、最新のA_TickCountの値からその変数を引くことで、後で経過時間を計測することができる。事例：</p>
        <pre>StartTime := A_TickCount
Sleep 1000
ElapsedTime := A_TickCount - StartTime
MsgBox ElapsedTime " milliseconds have elapsed."</pre>
<p>A_TickCountの10ミリ秒よりも高い精度が必要な場合は、<a href="lib/DllCall.htm#ExQPC">QueryPerformanceCounter()</a>を使用する。</p>
</td>
  </tr>
</table>
<h3 id="settings">スクリプト設定</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Contains 1 if the script is <a href="lib/Suspend.htm">suspended</a>, otherwise 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused</td>
    <td>Contains 1 if the <a href="misc/Threads.htm">thread</a> immediately underneath the current thread is <a href="lib/Pause.htm">paused</a>, otherwise 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical</td>
    <td><a href="misc/Threads.htm">現在のスレッド</a>で<a href="lib/Critical.htm">Critical</a>がオフの場合は0が格納される。Otherwise it contains an integer greater than zero, namely the <a href="lib/Critical.htm#Interval">message-check interval</a> being used by Critical. 現在のクリティカル状態は、<code>Old_IsCritical := A_IsCritical</code>の後に<code>Critical Old_IsCritical</code>で保存・復元できる。</td>
  </tr>
  <tr id="ListLines">
    <td>A_ListLines</td>
    <td>行をログに記録するかどうかを取得または設定する。設定可能な値は0（無効）または1（有効）。詳細は<a href="lib/ListLines.htm">ListLines</a>を参照。</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td>タイトルマッチモードの取得または設定に使用できる。設定可能な値は1、2、3、RegEx。詳細は<a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a>を参照。</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td>タイトルマッチのスピードを取得または設定するために使用できる。設定可能な値はFastとSlow。詳細は<a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a>を参照。</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td>隠しウィンドウを検出するかどうかを取得または設定する。設定可能な値は0（無効）または1（有効）。詳細は<a href="lib/DetectHiddenWindows.htm">DetectHiddenWindows</a>を参照。</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td>ウィンドウ内の隠しテキストを検出するかどうかを取得または設定するために使用できる。設定可能な値は0（無効）または1（有効）。詳細は<a href="lib/DetectHiddenText.htm">DetectHiddenText</a>を参照。</td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td>様々な組み込み関数のデフォルト・エンコーディングを取得または設定するために使用できます。詳細は<a href="lib/FileEncoding.htm">FileEncoding</a>を参照。</td>
  </tr>
  <tr id="SendMode">
    <td>A_SendMode</td>
    <td>送信モードの取得または設定に使用できる。取り得る値は、Event、Input、Play、InputThenPlay。詳細は<a href="lib/SendMode.htm">SendMode</a>を参照。</td>
  </tr>
  <tr id="SendLevel">
    <td>A_SendLevel</td>
    <td>送信レベル（0～100の整数）を取得または設定する。詳細は<a href="lib/SendLevel.htm">SendLevel</a>を参照。</td>
  </tr>
  <tr id="StoreCapsLockMode">
    <td>A_StoreCapsLockMode</td>
    <td><a href="lib/Send.htm">Send</a>後に<kbd>CapsLock</kbd>の状態を復元するかどうかを取得または設定するために使用できます。設定可能な値は0（無効）または1（有効）。詳細は<a href="lib/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>を参照。</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay<br>
    A_KeyDuration</td>
    <td>キー入力の遅延時間または継続時間をミリ秒単位で取得または設定する。詳細は<a href="lib/SetKeyDelay.htm">SetKeyDelay</a>を参照。</td>
  </tr>
  <tr id="KeyDelayPlay">
    <td>A_KeyDelayPlay<br>
    A_KeyDurationPlay</td>
    <td><a href="lib/Send.htm#SendPlayDetail">SendPlay</a>モードで送信されるキー入力の遅延時間または持続時間をミリ秒単位で取得または設定するために使用できます。詳細は<a href="lib/SetKeyDelay.htm">SetKeyDelay</a>を参照。</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td>ウィンドウ関数の遅延をミリ秒単位で取得または設定する。詳細は<a href="lib/SetWinDelay.htm">SetWinDelay</a>を参照。</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td>制御変更関数の遅延をミリ秒単位で取得または設定する。詳細は<a href="lib/SetControlDelay.htm">SetControlDelay</a>を参照。</td>
  </tr>
  <tr id="MenuMaskKey">
    <td>A_MenuMaskKey</td>
    <td>WinまたはAltキーアップイベントのマスクに使用されるキーを制御します。詳細は<a href="lib/A_MenuMaskKey.htm">A_MenuMaskKey</a>を参照。</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay<br>
    A_MouseDelayPlay</td>
    <td>マウスディレイをミリ秒単位で取得または設定する。A_MouseDelayは従来のSendEventモード用で、A_MouseDelayPlayは<a href="lib/Send.htm#SendPlayDetail">SendPlay</a>用です。詳細は<a href="lib/SetMouseDelay.htm">SetMouseDelay</a>を参照。</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td>デフォルトのマウス速度を取得または設定するために使用します。0（最も速い）から 100（最も遅い）までの整数です。詳細は<a href="lib/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>を参照。</td>
  </tr>
  <tr id="CoordMode">
    <td>A_CoordModeToolTip<br>
    A_CoordModePixel<br>
    A_CoordModeMouse<br>
    A_CoordModeCaret<br>
    A_CoordModeMenu</td>
    <td>座標の相対的な領域を取得または設定するために使用できます。設定可能な値は Screen、Window、Client です。詳細は<a href="lib/CoordMode.htm">CoordMode</a>を参照。</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td>レジストリのビューを取得または設定する。設定可能な値は32、64、Default。詳細は<a href="lib/SetRegView.htm">SetRegView</a>を参照。</td>
  </tr>
  <tr id="TrayMenu">
    <td>A_TrayMenu</td>
    <td><p>トレイメニューを変更または表示するために使用できる<a href="lib/Menu.htm">Menu オブジェクト</a>を返します。</p></td>
  </tr>
  <tr id="AllowMainWindow">
    <td>A_AllowMainWindow</td>
    <td><p>スクリプトの<a href="Program.htm#main-window">メインウィンドウ</a>を <a href="Program.htm#tray-icon">トレイアイコン</a>から開くことを許可するかどうかを取得または設定するために使用できます。設定可能な値は0（禁止）と1（許可）。</p>
    <p>スクリプトが<a href="Scripts.htm#ahk2exe">コンパイル</a>も <a href="Program.htm#embedded-scripts">埋め込み</a>もされていない場合、この変数のデフォルトは1です。そうでない場合、この変数のデフォルトは0ですが、値を代入することでオーバーライドできます。1に設定すると、トレイメニューに「開く」メニュー項目が復活し、メインウィンドウの「表示」メニューにある「最近実行した行」などの項目が有効になり、スクリプトのソースコードやその他の情報を見ることができるようになる。</p>
    <p>以下の関数は、スクリプトの実行時にメインウィンドウを表示し、対応するビューオプションを選択することができます：<a href="lib/ListLines.htm">ListLines</a>、<a href="lib/ListVars.htm">ListVars</a>、<a href="lib/ListHotkeys.htm">ListHotkeys</a>、<a href="lib/KeyHistory.htm">KeyHistory</a>。</p>
    <p>1に設定しても、<a href="lib/WinShow.htm">WinShow</a>でメイン・ウィンドウが表示されたり、<a href="lib/ControlGetText.htm">ControlGetText</a>や同様のメソッドで検査されたりするのを防ぐことはできませんが、スクリプトのソース・コードやその他の情報がメイン・ウィンドウ経由で公開されるのを防ぐことができます。</p></td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td><a href="Program.htm#tray-icon">トレイアイコン</a>を隠すかどうかを取得または設定する。設定可能な値は0（可視）または1（非表示）。詳細は<a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a>を参照。</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td><p><a href="Program.htm#tray-icon">トレイアイコン</a>のツールチップテキストを取得または設定するために使用することができます。空白の場合は、スクリプト名が代わりに使用される。</p>
    <p>複数行のツールチップを作成するには、各行の間に改行文字(`n)を使用します（例：<code>"Line1`nLine2"</code>）。最初の127文字だけが表示され、テキストは最初のタブ文字で切り捨てられる。</p>
    <p>Windows 10以前では、アンパサンド（&amp;）を含むツールチップテキストを表示するには、各アンパサンドをさらに2つのアンパサンドでエスケープします。例えば、<code>"A &amp;&amp;&amp; B"</code>と割り当てると、ツールチップに「A &amp; B」と表示される。</p></td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td><a href="lib/TraySetIcon.htm">TraySetIcon</a>によって <a href="Program.htm#tray-icon">カスタムトレイアイコン</a>が指定されていない場合は空白で、その場合はアイコンのファイルのフルパスとファイル名になります。</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>A_IconFile が空白の場合は空白。そうでない場合は、A_IconFileのアイコンの番号（通常は1）。</td>
  </tr>
</table>
<h3 id="User_Idle_Time">User Idle Time</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>
      <p>システムが最後にキーボードやマウスなどの入力を受け取ってから経過したミリ秒数。これは、ユーザーが不在かどうかを判断するのに便利である。ユーザーからの物理的な入力や、<strong>何等か</strong>のプログラムやスクリプト（<a href="lib/Send.htm">Send</a>関数や<a href="lib/MouseMove.htm">MouseMove</a>関数など）によって生成された人工的な入力は、この値をゼロに戻す。この値は10刻みで増加する傾向があるため、他の値と等しいかどうかはチェックしない。その代わりに、別の値より大きいか小さいかをチェックする。事例：</p>
      <pre>if A_TimeIdle &gt; 600000
    MsgBox "Last activity was 10 minutes ago"</pre>
    </td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td>上記と似ているが、対応するフック（<a href="lib/InstallKeybdHook.htm">キーボード</a>または<a href="lib/InstallMouseHook.htm">マウス</a>）がインストールされているときはいつでも、人工的なキーストロークやマウスクリックを無視する。（これにより、シミュレートされたキーストロークやマウスクリックが、 ユーザーが存在することを誤って示すのを防ぐことができる。）　どちらのフックもインストールされていない場合、この変数はA_TimeIdleと等価である。フックが1つしかインストールされていない場合、そのフックの物理入力のタイプのみがA_TimeIdlePhysicalに影響する（他の/インストールされていないフックの入力は、物理的、人工的の両方に影響しない）。</td>
  </tr>
  <tr id="TimeIdleKeyboard">
    <td>A_TimeIdleKeyboard</td>
    <td><a href="lib/InstallKeybdHook.htm">キーボードフック</a>がインストールされている場合、システムが最後に物理的なキーボード入力を受け取ってから経過したミリ秒数。そうでなければ、この変数はA_TimeIdleと等価である。</td>
  </tr>
  <tr id="TimeIdleMouse">
    <td>A_TimeIdleMouse</td>
    <td><a href="lib/InstallMouseHook.htm">マウスフック</a>がインストールされている場合、システムが最後に物理的なマウス入力を受け取ってから経過したミリ秒数。そうでなければ、この変数はA_TimeIdleと等価である。</td>
  </tr>
</table>
<h3 id="h">ホットキー、ホットストリング、カスタムメニュー項目</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>最近実行した<a href="Hotkeys.htm">ホットキー</a>または<a href="Hotstrings.htm">自動置換でないホットストリング</a>（ない場合は空白）。#zなど。この値は、<a href="misc/Threads.htm">現在のスレッド</a>が別のホットキーやホットストリングによって中断された場合に変更されるため、一般的には、使用可能な場合は<a href="Hotkeys.htm#ThisHotkey">ThisHotkey</a>パラメータを使用する方がよいでしょう。</p>
      <p>ホットキーが最初に作成されたとき（<a href="lib/Hotkey.htm">Hotkey関数</a>またはスクリプトの<a href="Hotkeys.htm">ダブルコロン構文</a>）、そのキー名と修飾記号の順序がそのホットキーの永続的な名前になり、そのホットキーのすべての<a href="lib/_HotIf.htm#variant">バリエーション</a>で共有されます。</p>
      <p><a href="lib/Hotstring.htm">Hotstring関数</a>またはスクリプト内の<a href="Hotstrings.htm">ダブルコロンラベル</a>によってホットストリングが最初に作成されると、そのトリガー文字列とオプション文字のシーケンスが、そのホットストリングの永続的な名前になる。</p>
      </td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>前のホットキーを除き、上記と同じ。ない場合は空白になる。</td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td>キー履歴に該当するキーがない場合は空白。AutoHotkeyスクリプトによって生成されたすべての入力は除外されます。この変数を使用するには、<a href="lib/InstallKeybdHook.htm">キーボード</a>または<a href="lib/InstallMouseHook.htm">マウスフック</a>がインストールされ、<a href="lib/KeyHistory.htm">キーヒストリー</a>が有効になっていなければならない。</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>A_ThisHotkeyが押されてから経過したミリ秒数。A_ThisHotkeyが空白のときは常に空白になります。</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>A_PriorHotkeyが押されてから経過したミリ秒数。A_PriorHotkeyが空白のときは常に空白になる。</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>直近の<a href="Hotstrings.htm">非自動置換ホットストリング</a>をトリガーするためにユーザーが押した<a href="Hotstrings.htm#EndChars">終了文字</a>。If no ending character was required (due to the <a href="Hotstrings.htm#Asterisk">* option</a>), this variable will be blank.</td>
  </tr>
  <tr id="MaxHotkeysPerInterval">
    <td>A_MaxHotkeysPerInterval</td>
    <td>Can be used to get or set the maximum number of hotkeys that can be pressed within the interval defined by A_HotkeyInterval without triggering a warning dialog. 詳細は<a href="lib/A_MaxHotkeysPerInterval.htm">A_MaxHotkeysPerInterval</a>を参照。</td>
  </tr>
  <tr id="HotkeyInterval">
    <td>A_HotkeyInterval</td>
    <td>Can be used to get or set the length of the interval used by <a href="lib/A_MaxHotkeysPerInterval.htm">A_MaxHotkeysPerInterval</a>, in milliseconds.</td>
  </tr>
  <tr id="HotkeyModifierTimeout">
    <td>A_HotkeyModifierTimeout</td>
    <td>Can be used to get or set the timeout affecting the behavior of <a href="lib/Send.htm">Send</a> with <a href="Hotkeys.htm">hotkey</a> modifiers <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, <kbd>Win</kbd>, and <kbd>Shift</kbd>. 詳細は<a href="lib/A_HotkeyModifierTimeout.htm">A_HotkeyModifierTimeout</a>を参照。</td>
  </tr>
</table>
<h3 id="os">オペレーティング・システムとユーザー情報</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="ComSpec">
    <td>A_ComSpec</td>
    <td><p>Contains the same string as the ComSpec environment variable, which is usually the full path to the command prompt executable (cmd.exe). <a href="lib/Run.htm">Run/RunWait</a>と一緒に使われることが多い。事例：</p>
      <pre class="NoIndent no-highlight">C:\Windows\system32\cmd.exe</pre>
    </td>
  </tr>
  <tr id="Temp">
    <td>A_Temp</td>
    <td><p>一時ファイルを保存するフォルダのフルパスと名前。これは、以下のいずれかの場所から取得される（順番に）：1) <a href="Concepts.htm#environment-variables">環境変数</a>TMP、TEMP、またはUSERPROFILE、2) Windowsディレクトリ。事例：</p>
    <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\AppData\Local\Temp</pre>
  </td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td>
    <p>オペレーティングシステムのバージョン番号。「<em>major</em>.<em>minor</em>.<em>build</em>」の形式。例えば、Windows 7 SP1は6.1.7601です。</p>
    <p>AutoHotkey実行ファイルまたはコンパイル済みスクリプトのプロパティで互換性設定を適用すると、OSが異なるバージョン番号を報告するようになり、A_OSVersionに反映されます。</p>
    </td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td>OSが64ビットの場合は1 (true)、32ビットの場合は0 (false)を含む。</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td>ポインタのサイズをバイト数で表す。これは、スクリプトを実行する実行可能ファイル（EXE）のタイプに応じて、4（32ビット）または8（64ビット）のいずれかになります。</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>システムのデフォルト言語であり、<a href="misc/Languages.htm">4桁のコード</a>のいずれかである。</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>ネットワーク上で見られるコンピュータの名前。</td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>このスクリプトを起動したユーザーのログオン名。</td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Windowsのディレクトリ。事例：<code>C:\Windows</code></td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles</td>
    <td>
      <p>Program Filesディレクトリ（例：<code>C:\Program Files</code>または<code>C:\Program Files (x86)</code>）。これは通常、<em>ProgramFiles</em> <a href="Concepts.htm#environment-variables">環境変数</a>と同じである。</p>
      <p><a href="#Is64bitOS">64ビット・システム</a>では（32ビット・システムではなく）、以下が適用される：</p>
      <ul>
        <li>スクリプトを実行している実行ファイル（EXE）が 32 ビットの場合、A_ProgramFiles は「Program Files (x86)」ディレクトリのパスを返します。</li>
        <li>32ビットプロセスでは、<em>ProgramW6432</em>環境変数に64ビットProgram Filesディレクトリのパスが格納される。Windows 7以降では、64ビットプロセスにも設定されている。</li>
        <li><em>ProgramFiles(x86)</em>環境変数には、32ビットProgram Filesディレクトリのパスが含まれる。</li>
      </ul>
    </td>
  </tr>
  <tr id="AppData">
    <td>A_AppData</td>
    <td>
      <p>現在のユーザーのアプリケーション固有データを含むフォルダーのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\AppData\Roaming</pre>
    </td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon</td>
    <td>
      <p>全ユーザーのアプリケーション固有データを含むフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\ProgramData</pre>
    </td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>
      <p>現在のユーザーのデスクトップファイルを含むフォルダーのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\Desktop</pre>
    </td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>
      <p>全ユーザーのデスクトップファイルを含むフォルダーのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\Public\Desktop</pre>
    </td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>
      <p>現在のユーザーのスタートメニューフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\AppData\Roaming\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>
      <p>全ユーザーのスタートメニューフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu</pre>
    </td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>
      <p>現在のユーザーのスタートメニューにあるProgramsフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs</pre>
    </td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>
      <p>全ユーザーのスタートメニューにあるProgramsフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs</pre>
  </td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>
      <p>現在のユーザーのスタートメニューにあるスタートアップフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>
      <p>全ユーザーのスタートメニューのスタートアップフォルダのフルパスと名前。事例：</p>
      <pre class="NoIndent no-highlight">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</pre>
  </td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>
      <p>現在のユーザーの「My Documents」フォルダのフルパスと名前。類似の変数の多くとは異なり、フォルダがドライブのルートである場合、最後のバックスラッシュは含まれない（例えば、<code>M:\</code>ではなく<code>M:</code>が含まれる）。事例：</p>
      <pre class="NoIndent no-highlight">C:\Users\&lt;UserName&gt;\Documents</pre>
  </td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Contains 1 if the current user has admin rights, otherwise 0.</p>
    <p id="RequireAdmin">スクリプト自身を管理者として再起動させるには（または管理者を要求するユーザーにプロンプトを表示するには）、<a href="lib/Run.htm#RunAs">Run *RunAs</a>を使用します。ただし、スクリプトを管理者として実行すると、スクリプトによって起動されるすべてのプログラムも管理者として実行されることに注意してください。代替案については<a href="FAQ.htm#uac">FAQ</a>を参照。</p>
    </td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    A_ScreenHeight</p></td>
    <td><p>プライマリ・モニターの幅と高さをピクセル単位で指定する（例：1024と768）。</p>
      <p>マルチモニターシステムの他のモニターの寸法を調べるには、<a href="lib/SysGet.htm">SysGet</a>を使用する。</p>
      <p>デスクトップ全体の幅と高さを知るには（複数のモニターにまたがっていても）、次の例を使う：</p>
<pre>
VirtualWidth := <a href="lib/SysGet.htm">SysGet</a>(78)
VirtualHeight := <a href="lib/SysGet.htm">SysGet</a>(79)
</pre>
    <p>さらに、<a href="lib/SysGet.htm">SysGet</a> を使用して、タスク バーやその他の登録されたデスクトップ ツールバーが除外されるため、モニタの総面積よりも小さくなる可能性のあるモニタの作業領域を検出します。。</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI</td>
    <td>画面幅に沿った1論理インチあたりのピクセル数。複数のディスプレイモニターがあるシステムでは、この値はすべてのモニターで同じになります。ほとんどのシステムでは96です。システムのテキストサイズ（DPI）の設定によります。GUIの<a href="lib/Gui.htm#DPIScale">-DPIScale</a>オプションも参照してください。</td>
  </tr>
</table>
<h3 id="misc">その他</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="Clipboard">
    <td>A_Clipboard</td>
    <td>OSのクリップボードの内容を取得または設定するために使用できる。詳細は<a href="lib/A_Clipboard.htm">A_Clipboard</a>を参照。</td>
  </tr>
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>現在表示されているマウスカーソルの種類。それは以下の言葉のいずれかとなる：AppStarting、Arrow、Cross、Help、IBeam、Icon、No、Size、SizeAll、SizeNESW、SizeNS、SizeNWSE、SizeWE、UpArrow、Wait、Unknown。サイズタイプのカーソルで使われる頭字語はコンパスの方向である。例えば、NESW = NorthEast+SouthWestである。手の形をしたカーソル（ポインティングとグラブ）はアンノウンに分類される。</p></td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>以下のイベントに関する追加情報が含まれています：</p>
      <ul>
        <li><a href="Hotkeys.htm#Wheel">マウスホイールホットキー</a>（WheelDown/Up/Left/Right）</li>
        <li><a href="lib/OnMessage.htm">OnMessage</a></li>
        <li><a href="misc/RegExCallout.htm">正規表現の吹き出し</a></li>
      </ul>
      <p>注：A_ThisHotkeyなどの変数とは異なり、各<a href="misc/Threads.htm">スレッド</a>は、A_EventInfoの値を保持します。したがって、スレッドが他のスレッドによって中断されても、再開されたときには、これらの変数に元の値や正しい値が表示される。</p>
      <p>A_EventInfoもスクリプトで設定できますが、ポインタで使用可能な範囲（AutoHotkeyのバージョンによって32ビットまたは64ビット）の符号なし整数しか使えません。</p></td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td><p>これは通常、スクリプトが<a href="lib/DllCall.htm">DllCall</a>、<a href="lib/Run.htm">Run/RunWait</a>、File/Ini/Reg関数（文書化されている場合）、その他の特定の関数を呼び出した後にOSのGetLastError()関数から生じる結果です。A_LastErrorは0から4294967295までの数値で、16進数ではなく常に10進数です。ゼロ（0）は成功を、それ以外の数値は呼び出しが失敗したことを意味します。各々の数値は、特定のエラー条件に対応しています。ローカライズされたエラーの説明を取得する方法については<a href="lib/Error.htm#OSError">OSError</a>ご覧ください。または、<a href="http://www.microsoft.com">www.microsoft.com</a> で「system error codes」を検索してリストを取得してください。A_LastErrorはスレッドごとの設定です。つまり、他の<a href="misc/Threads.htm">スレッド</a>による割り込みでは変更できません。</p>
    <p>A_LastErrorに値を代入すると、OSのSetLastError()関数も呼び出されます。</p></td>
  </tr>
  <tr id="TrueFalse">
    <td>True<br />False</td>
    <td><p>0と1です。これらは、スクリプトをより読みやすくするために使用することができます。詳細は<a href="Concepts.htm#boolean">ブール値</a>をご覧ください。</p>
      <p>これらは実際には<a href="Language.htm#constants">キーワード</a>であり、変数ではありません。</p>
    </td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr>
    <th abbr="変数">変数</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr id="Index">
    <td>A_Index</td>
    <td>現在のループの繰り返し回数（64ビット整数）を取得または設定するために使用できる。ループ本体が最初に実行されるときに1を含む。2回目には2が入り、以下同様です。内側ループが外側ループで囲まれている場合、内側ループが優先されます。A_Indexは<a href="Language.htm#loop-statement">すべてのループ</a>の内部で機能するが、ループの外部では0を含む。<a href="lib/Loop.htm">Loop</a>のようなカウントループの場合、A_Indexを変更すると、実行される反復回数に影響する。</td>
  </tr>
  <tr>
    <td>A_LoopFileName、他</td>
    <td>この変数とその他の関連変数は、<a href="lib/LoopFiles.htm">ファイル・ループ</a>内でのみ有効である。</td>
  </tr>
  <tr>
    <td>A_LoopRegName、他</td>
    <td>この変数とその他の関連変数は、<a href="lib/LoopReg.htm">レジストリのループ</a>内でのみ有効である。</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td><a href="lib/LoopRead.htm">ファイル読み込みループ</a>参照。</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td><a href="lib/LoopParse.htm">解析ループ</a>を参照。</td>
  </tr>
</table>

<h2 id="cap">可変容量とメモリー</h2>
<ul>
  <li>変数に現在の内容より長い新しい文字列が与えられると、追加のシステム・メモリが自動的に割り当てられる。</li>
  <li>大きな変数が占有するメモリは、例えば<code>var := ""</code>のように、何も設定しないことで解放できる。</li>
  <li>スクリプトが作成できる変数の数に制限はない。このプログラムは、パフォーマンスを大きく落とすことなく、少なくとも数百万の変数をサポートするように設計されている。</li>
  <li>数値入力を受け付ける関数や式は、通常、浮動小数点値に対して15桁の精度をサポートしている。整数の場合、64ビット符号付き値がサポートされ、その範囲は-9223372036854775808（-0x8000000000000000）から 9223372036854775807（0x7FFFFFFFFFFFFF）までである。この範囲外の整数定数はラップアラウンドする。同様に、整数の算術演算はオーバーフロー時に折り返される（例：0x7FFFFFFFFFFFF + 1 = -0x800000000000000000）。</li>
</ul>
</body>
</html>
