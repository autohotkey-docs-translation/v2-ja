<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>正規表現の吹き出し｜AutoHotkey v2</title>
<meta name="description" content="RegExコールアウトは、正規表現パターンマッチングの途中でスクリプトに一時的に制御を渡す手段を提供する。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>正規表現の吹き出し</h1>

<p>RegExコールアウトは、正規表現パターンマッチングの途中でスクリプトに一時的に制御を渡す手段を提供する。PCRE標準のコールアウト機能の詳細については、<a href="http://www.pcre.org/pcre.txt">pcre.txt</a>をご覧ください。</p>

<p>RegExコールアウトは現在、<a href="../lib/RegExMatch.htm">RegExMatch</a>と <a href="../lib/RegExReplace.htm">RegExReplace</a>でのみサポートされている。</p>

<h2 id="toc">目次</h2>
<ul>
    <li><a href="#syntax">Syntax</a></li>
    <li><a href="#callout-functions">RegEx コールアウト関数</a></li>
    <li><a href="#EventInfo">EventInfo</a></li>
    <li><a href="#auto">Auto-Callout</a></li>
    <li><a href="#remarks">備考</a></li>
</ul>

<h2 id="syntax">Syntax</h2>

<p>AutoHotkeyのRegExコールアウトの構文は、<span class="regex">(?C<em>数値</em>:<em>関数</em>)</span>で、<em>数値</em>と<em>関数</em>の両方はオプションです。コロン':'は、<em>Function</em>が指定されている場合のみ許可され、<em>Number</em>が省略されている場合はオプションである。<em>Function</em>が指定されているが<a href="Functor.htm">関数オブジェクト</a>の名前でない場合、コンパイル・エラーが発生し、パターンマッチングは開始されない。</p>

<p><em>Function</em>が省略された場合、<b>pcre_callout</b>というデフォルトのRegExコールアウト関数が定義されなければなりません。<em>pcre_callout</em>が定義されていない場合、<em>Function</em>を省略したRegExコールアウトは無視される。</p>

<h2 id="callout-functions">RegEx コールアウト関数</h2>

<pre class="Syntax"><i>MyFunction</i>(Match, CalloutNumber, FoundPos, Haystack, NeedleRegEx)
{
    ...
}</pre>
<p>RegExコールアウト関数は、最大5つのパラメータを定義することができる：</p>
<ul>
  <li><b>マッチ：</b>これまでのマッチに関する情報を含む<a href="../lib/RegExMatch.htm#MatchObject">RegExMatchInfo</a>オブジェクトを受け取る。</li>
  <li><b>コールアウト番号：</b>RegEx コールアウトの<em>番号</em>を受け取ります。</li>
  <li><b>FoundPos：</b>現在のマッチ候補の位置を受け取る。</li>
  <li><b>ヘイスタック：</b>RegExMatch または RegExReplace に渡された<em>Haystack</em>を受け取ります。</li>
  <li><b>NeedleRegEx：</b>RegExMatchまたはRegExReplaceに渡された<em>NeedleRegEx</em>を受け取る。</li>
</ul>
<p>これらの名称はあくまでも示唆的なものである。実際の名称は異なる場合がある。</p>

<p class="warning"><strong>警告</strong>呼び出し中に<a href="../lib/RegExReplace.htm">RegExReplace</a>または<a href="../lib/RegExMatch.htm">RegExMatch</a>の入力パラメータを変更することはサポートされておらず、予測不可能な動作を引き起こす可能性があります。</p>

<p>パターンマッチングは、RegExコールアウト関数の返り値によって進行したり失敗したりする：</p>
<ul>
  <li>関数が<b>0</b>を返すか、数値を返さない場合、マッチングは通常通り行われる。</li>
  <li>関数が<b>1</b>以上を返した場合、マッチングは現在の時点で失敗するが、他のマッチングの可能性のテストは続行される。</li>
  <li>この関数が<b>-1を</b>返した場合、マッチングは放棄される。</li>
  <li>関数が-1未満の値を返した場合、PCREのエラーコードとして扱われ、マッチングは放棄されます。これにより、RegExMatchとRegExReplaceは例外をスローします。例外オブジェクトの<em>Extra</em>プロパティにはエラー・コードが含まれます。</li>
</ul>

<p>事例：</p>
<pre>Haystack := "The quick brown fox jumps over the lazy dog."
RegExMatch(Haystack, "i)(The) (\w+)\b(?CCallout)")
Callout(m, *) {
    MsgBox "m[0]=" m[0] "`nm[1]=" m[1] "`nm[2]=" m[2]
    return 1
}</pre>
<p>上記の例では、<em>コールアウト</em>は、RegExコールアウトの前にあるパターン部分にマッチする部分文字列ごとに1回ずつ呼び出される。<span class="regex">\b</span>は、<em>The quic</em>、<em>The qui</em>、<em>The qu</em>などのマッチで、不完全な単語を除外するために使用されます。</p>
<p><em>RegEx</em>関数への入力パラメータのいずれかがコールアウト中に変更された場合、動作は未定義となる。</p>
    
<h2 id="EventInfo">EventInfo</h2>

<p>追加情報は、<b>A_EventInfo</b>を介してpcre_callout_block構造体にアクセスすることで得られる。</p>
<pre>version           := NumGet(A_EventInfo,  0, "Int")
callout_number    := NumGet(A_EventInfo,  4, "Int")
offset_vector     := NumGet(A_EventInfo,  8, "Ptr")
subject           := NumGet(A_EventInfo,  8 + A_PtrSize, "Ptr")
subject_length    := NumGet(A_EventInfo,  8 + A_PtrSize*2, "Int")
start_match       := NumGet(A_EventInfo, 12 + A_PtrSize*2, "Int")
current_position  := NumGet(A_EventInfo, 16 + A_PtrSize*2, "Int")
capture_top       := NumGet(A_EventInfo, 20 + A_PtrSize*2, "Int")
capture_last      := NumGet(A_EventInfo, 24 + A_PtrSize*2, "Int")
pad := A_PtrSize=8 ? 4 : 0  <em>; Compensate for 64-bit data alignment.</em>
callout_data      := NumGet(A_EventInfo, 28 + pad + A_PtrSize*2, "Ptr")
pattern_position  := NumGet(A_EventInfo, 28 + pad + A_PtrSize*3, "Int")
next_item_length  := NumGet(A_EventInfo, 32 + pad + A_PtrSize*3, "Int")
if (version &gt;= 2)
    mark   := StrGet(NumGet(A_EventInfo, 36 + pad + A_PtrSize*3, "Int"), "UTF-8")
</pre>
<p>For more information, see <a href="http://www.pcre.org/pcre.txt">pcre.txt</a>, <a href="../lib/NumGet.htm">NumGet</a> and <a href="../Variables.htm#PtrSize">A_PtrSize</a>.</p>

<h2 id="auto">Auto-Callout</h2>

<p>Including <strong>C</strong> in the options of the pattern enables the auto-callout mode. このモードでは、<span class="regex">(? C255)</span>は、パターン内の各項目の前に挿入される。たとえば、次のテンプレートを使用して正規表現をデバッグできます。</p>
<pre><em>; Call RegExMatch with auto-callout option C.</em>
RegExMatch("xxxabc123xyz", "C)abc.*xyz")

<em>; Define the default RegEx callout function.</em>
pcre_callout(Match, CalloutNumber, FoundPos, Haystack, NeedleRegEx)
{
    <em>; See pcre.txt for descriptions of these fields.</em>
    start_match       := NumGet(A_EventInfo, 12 + A_PtrSize*2, "Int")
    current_position  := NumGet(A_EventInfo, 16 + A_PtrSize*2, "Int")
    pad := A_PtrSize=8 ?4 : 0
    pattern_position  := NumGet(A_EventInfo, 28 + pad + A_PtrSize*3, "Int")
    next_item_length  := NumGet(A_EventInfo, 32 + pad + A_PtrSize*3, "Int")

    <em>; Point out &gt;&gt;current match&lt;&lt;.</em>
    _HAYSTACK:=SubStr(Haystack, 1, start_match)
        . "&gt;&gt;" SubStr(Haystack, start_match + 1, current_position - start_match)
        . "&lt;&lt;" SubStr(Haystack, current_position + 1)
    
    <em>; Point out &gt;&gt;next item to be evaluated&lt;&lt;.</em>
    _NEEDLE:=  SubStr(NeedleRegEx, 1, pattern_position)
        . "&gt;&gt;" SubStr(NeedleRegEx, pattern_position + 1, next_item_length)
        . "&lt;&lt;" SubStr(NeedleRegEx, pattern_position + 1 + next_item_length)
    
    ListVars
    <em>; Press Pause to continue.</em>
    Pause
}</pre>

<h2 id="remarks">備考</h2>

<p>RegExコールアウトは現在の準スレッド上で実行されるが、RegExコールアウト関数が戻った後、A_EventInfoの以前の値が復元される。</p>
<p>PCREは、マッチが不可能と判断された場合、早期に中断するように最適化されている。このような場合にすべてのRegExコールアウトを呼び出すには、パターンの最初に<span class="regex">(*NO_START_OPT)</span>を指定して、これらの最適化を無効にする必要があるかもしれない。</p>

</body>
</html>
