<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>スクリプトコンパイラディレクティブ｜AutoHotkey v2</title>
<meta name="description" content="スクリプトコンパイラディレクティブにより、Ahk2Exeでどのようにスクリプトをコンパイルするかの詳細を指定することができます。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>スクリプト・コンパイラ・ディレクティブ</h1>
<h2 id="toc">目次</h2>
<ul>
  <li><a href="#Intro1">はじめに</a></li>
  <li><a href="#IgnoreKeep">スクリプトの動作を制御するディレクティブ</a>：</li>
  <ul>
    <li><a href="#IgnoreKeep">IgnoreBegin</a></li>
    <li><a href="#IgnoreKeep">IgnoreEnd</a></li>
    <li><a href="#IgnoreKeep">IgnoreKeep</a></li>
  </ul>
  <li><a href="#Directives">実行メタデータを制御するディレクティブ</a>：</li>
  <ul>
    <li><a href="#Intro2">はじめに</a></li>
    <li><a href="#AddResource">AddResource</a>：.exe にリソースを追加する。</li>
    <li><a href="#Bin">Bin / Base</a>：使用するAutoHotkeyの基本バージョンを指定します。</li>
    <li><a href="#ConsoleApp">ConsoleApp</a>：コンソールモードを設定する。</li>
    <li><a href="#Cont">Cont</a>：指示継続行を指定する。</li>
    <li><a href="#Debug">Debug</a>：ディレクティブのデバッグテキストを表示する。</li>
    <li><a href="#ExeName">ExeName</a>：.exeの場所と名前を指定します。</li>
    <li><a href="#Let">Let</a>：ユーザー変数を設定する。</li>
    <li><a href="#Nop">Nop</a>：何もしない。</li>
    <li><a href="#Obey">Obey</a>：命令や表現に従う。</li>
    <li><a href="#PostExec">PostExec</a>：コンパイル後にプログラムを実行する。</li>
    <li><a href="#ResourceID">ResourceID</a>：非標準のリソースIDをメインスクリプトに割り当てる。</li>
    <li><a href="#SetMainIcon">SetMainIcon</a>：メインアイコンを設定する。</li>
    <li><a href="#SetProp">Set<i>Prop</i></a>：.exe プロパティを設定します。</li>
    <li><a href="#Set">Set</a>：雑多なプロパティを設定する。</li>
    <li><a href="#UpdateManifest">UpdateManifest</a>：.exe のマニフェストを変更します。</li>
    <li><a href="#UseResourceLang">UseResourceLang</a>：リソースの言語を変更する。</li>
  </ul>
</ul>
<h2 id="Intro1">はじめに</h2>
<p>スクリプトコンパイラディレクティブにより、<a href="../Scripts.htm#ahk2exe">Ahk2Exe</a>で、どのようにスクリプトをコンパイルするかの詳細を指定することができます。いくつかの特徴を挙げよう：</p>
<ul>
  <li>バージョン情報（名前、説明、バージョン...など）を変更する機能。</li>
  <li>コンパイルされたスクリプトにリソースを追加する機能。</li>
  <li>コンパイルのいくつかの雑多な面を微調整する能力。</li>
  <li>コンパイルされたスクリプトからコードセクションを削除する機能。</li>
</ul>
<p>スクリプトコンパイラは、ソーススクリプト内の特別なコメントを探し、コンパイラディレクティブとして認識します。すべてのコンパイラディレクティブは<code>@Ahk2Exe-</code>という文字列で始まり、その前にコメントフラグ (通常は<code>;</code>) が付きます。</p>

<h2 id="IgnoreKeep">スクリプトの動作を制御するディレクティブ</h2>
<p>ディレクティブで囲むことによって、コンパイルされたスクリプトからコードセクションを削除することができる：</p>
<pre class="NoIndent">MsgBox "This message appears in both the compiled and uncompiled script"
<em>;@Ahk2Exe-IgnoreBegin</em>
MsgBox "This message does NOT appear in the compiled script"
<em>;@Ahk2Exe-IgnoreEnd</em>
MsgBox "This message appears in both the compiled and uncompiled script"
</pre>
<p>その逆も可能である。つまり、コンパイルされたスクリプトでのみ実行されるコードセクションをマークするのである：</p>
<pre class="NoIndent"><em>/*@Ahk2Exe-Keep
MsgBox "This message appears only in the compiled script"
*/</em>
MsgBox "This message appears in both the compiled and uncompiled script"
</pre>
<p>これは<a href="../Variables.htm#IsCompiled">A_IsCompiled</a>よりも利点がある。なぜなら、前処理中にコンパイルされたスクリプトからコードが完全に取り除かれるため、コンパイルされたスクリプトが小さくなるからだ。逆もまた然りである：このコードは、コンパイルされていないスクリプトのコメント・ブロック内にあるので、<a href="../Variables.htm#IsCompiled">A_IsCompiled</a>をチェックする必要はない。</p>

<h2 id="Directives">実行メタデータを制御するディレクティブ</h2>
<h3 id="Intro2">はじめに</h3>
<p>これらのディレクティブのパラメータでは、以下のエスケープシーケンスがサポートされています：<code>``</code>、<code>`,</code>、<code>`n</code>、<code>`r</code>、<code>`t</code>。カンマは、パラメータの位置に関係なく、<em>常</em>にエスケープする必要がある。「整数」とは、符号なし16ビット整数（0～0xFFFF）を指す。</p>

<p>必要であれば、ディレクティブパラメータは、変数名を<code>%</code>記号で囲むことによって、以下の標準組み込み変数のリストを参照することができます：</p>
<p id="group1"><strong>グループ1：</strong><a href="../Variables.htm#AhkPath">A_AhkPath</a>、<a href="../Variables.htm#AppData">A_AppData</a>、<a href="../Variables.htm#AppDataCommon">A_AppDataCommon</a>、<a href="../Variables.htm#ComputerName">A_ComputerName</a>、<a href="../Variables.htm#ComSpec">A_ComSpec</a>、<a href="../Variables.htm#Desktop">A_Desktop</a>、<a href="../Variables.htm#DesktopCommon">A_DesktopCommon</a>、<a href="../Variables.htm#MyDocuments">A_MyDocuments</a>、<a href="../Variables.htm#ProgramFiles">A_ProgramFiles</a>、<a href="../Variables.htm#Programs">A_Programs</a>、<a href="../Variables.htm#ProgramsCommon">A_ProgramsCommon</a>、<a href="../Variables.htm#ScriptDir">A_ScriptDir</a>、<a href="../Variables.htm#ScriptFullPath">A_ScriptFullPath</a>、<a href="../Variables.htm#ScriptName">A_ScriptName</a>、<a href="../Variables.htm#Space">A_Space</a>、<a href="../Variables.htm#StartMenu">A_StartMenu</a>、<a href="../Variables.htm#StartMenuCommon">A_StartMenuCommon</a>、<a href="../Variables.htm#Startup">A_Startup</a>、<a href="../Variables.htm#StartupCommon">A_StartupCommon</a>、<a href="../Variables.htm#Tab">A_Tab</a>、<a href="../Variables.htm#Temp">A_Temp</a>、<a href="../Variables.htm#UserName">A_UserName</a>、<a href="../Variables.htm#WinDir">A_WinDir</a>。</p>

<p><strong>グループ2：</strong><a href="../Variables.htm#AhkVersion">A_AhkVersion</a>、<a href="../Variables.htm#IsCompiled">A_IsCompiled</a>、<a href="../Variables.htm#PtrSize">A_PtrSize</a>。</p>

<p id="WorkFileName">これらの変数名に加えて、特殊変数<strong>A_WorkFileName</strong>は、処理された.exeファイルの一時的な名前を保持する。これは、生成された .exe にアクセスする必要のある<a href="#PostExec">PostExec</a>ディレクティブのパラメータとしてファイル名を渡すために使われます。</p>

<p id="BasePath">さらに、特別な変数<strong>A_BasePath</strong>は、選択されたベースファイルのフルパスと名前を含んでいる。</p>

<p id="PriorLine">また、特殊変数<strong>A_PriorLine</strong>には、現在のコンパイラ指令の直前のソース行が格納される。空白やコメントだけの行は無視され、コンパイラ指令の行も無視される。この変数は、スクリプトのソースから定数情報を「抜き取り」、後のコンパイラのディレクティブで使用するために使うことができる。例えば、頻繁に変更される可能性のあるスクリプトのバージョン番号にアクセスするような場合である。この方法でバージョン番号にアクセスするということは、バージョン番号をソースコードの中で一度だけ変更すればよく、その変更は必要なディレクティブにコピーされるということです。（詳細は以下のRegExの例を参照。）</p>

<p>また、以下に説明する<a href="#Let">Let</a>ディレクティブと<a href="#Obey">Obey</a>ディレクティブを使用して、特別なユーザー変数を<code>U_<i>Name</i></code>形式で作成することもできます。</p>

<p>すべての変数は、<a href="#AddResource">AddResource</a>ディレクティブのパラメータとして利用できるだけでなく、以下の<a href="#AddResource">AddResource</a>ディレクティブに与えられたRT_MENU、RT_DIALOG、RT_STRING、RT_ACCELERATORS、RT_HTML、RT_MANIFESTファイルからアクセスすることができます。</p>

<p>必要であれば、上記の変数から返される値は、組み込み変数名の末尾の<code>%</code>より前に、チルダ<code>~</code>で区切られた2つまでのパラメータ（p2とp3と呼ばれる）を含めることで操作できる。p2 と p3 パラメータは、<a href="../lib/RegExReplace.htm">RegExReplace</a>関数の 2 番目と 3 番目のパラメータでリテラルとして使用され、返される値を操作します。（<a href="RegEx-QuickRef.htm">RegExクイックリファレンス</a>参照。）　p3はオプションであることに注意。</p>

<p>p2またはp3にチルダをデータとして含めるには、チルダの前にバックチック、すなわち<code>`~</code>を付ける。バックティック文字をp2またはp3のデータとして含めるには、それをダブルにする<code>``</code>。</p>

<strong>RegEx の例：</strong>
<ul>
  <li>
    <pre class="NoIndent">%A_ScriptName~\.[^\.]+$~.exe%</pre>
    <p>これは、実際のスクリプト名では、拡張子とその前の完全停止を<code>.exe</code>に置き換えます。<br>（<code>\.[^\.]+$~.exe</code>は、<code>.</code>の後に<code>.</code>以外の文字が1文字以上続くか、文字列の末尾が<code>.exe</code>であるかをスキャンし、<code>.exe</code>に置き換えることを意味する）</p>
  </li>
  <li>
    <p>ソース行に続いて、次のような2つのコンパイラ指令があるとする：</p>
    <pre>CodeVersion := "1.2.3.4", company := "My Company"</pre>
    <pre><em>;@Ahk2Exe-Let U_version = %A_PriorLine~U)^(.+"){1}(.+)".*$~$2%</em></pre>
    <pre><em>;@Ahk2Exe-Let U_company = %A_PriorLine~U)^(.+"){3}(.+)".*$~$2%</em></pre>
    <p>これらのディレクティブはバージョン番号<code class="no-highlight">1.2.3.4</code>を特殊変数<code>U_version</code>にコピーし、会社名<code>My Company</code>を特殊変数<code>U_company</code>にコピーして、後で他のディレクティブで使えるようにします。<br>
    （最初の正規表現の<code class="no-highlight">{1}</code>は2番目の正規表現の<code class="no-highlight">{3}</code>に変更され、会社名を抽出するために3番目の<code>"</code>の後を選択する。）</p>
  </li>
</ul>
<p><strong>その他の例：</strong>ダウンロードして調べることができる他の実例は、<a href="https://github.com/AutoHotkey/Ahk2Exe/releases/tag/DemoCode_1">ここ</a>から入手できる。</p>

<h3 id="AddResource">AddResource</h3>
<p>コンパイル済みの実行ファイルにリソースを追加する。（以下の<a href="#UseResourceLang">UseResourceLang</a>も参照）</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-AddResource</span> FileName <span class="optional">, ResourceName</span></pre>
<dl>
  <dt>FileName</dt>
  <dd>追加するリソースのファイル名。絶対パスが指定されていない場合、ファイルはスクリプト自身のディレクトリにある（または相対的な）ものとみなされます。リソースのタイプ（整数または文字列）を明示的に指定するには、その前にアスタリスクを付ける：<code class="no-highlight">*type Filename</code>。省略された場合、Ahk2Exeはファイルの拡張子によって自動的にタイプを検出します。</dd>
  <dt>ResourceName</dt>
  <dd><i>(オプション)</i>リソースの名前（文字列または整数）。省略された場合、デフォルトは大文字のファイル名（パスなし）である。</dd>
</dl>
<p>以下は、一般的な標準リソースタイプと、それをデフォルトでトリガーするエクステンションのリストです。</p>
<ul>
  <li>2（RT_BITMAP）：<code>.bmp</code>、<code>.dib</code></li>
  <li>4（RT_MENU）</li>
  <li>5（RT_DIALOG）</li>
  <li>6（RT_STRING）</li>
  <li>9（RT_ACCELERATORS）</li>
  <li>10（RT_RCDATA）：他のすべてのエクステンション。</li>
  <li>11（RT_MESSAGETABLE）</li>
  <li>12（RT_GROUP_CURSOR）：<code>.cur</code>（未対応）</li>
  <li>14（RT_GROUP_ICON）：<code>.ico</code></li>
  <li>23（RT_HTML）：<code>.htm</code>、<code>.html</code>、<code>.mht</code></li>
  <li>24（RT_MANIFEST）：<code>.manifest</code>。リソース名が指定されていない場合、デフォルトは<code>1</code>です</li>
</ul>
<p><strong>例1：</strong>（<a href="#SetMainIcon">メインアイコン</a>以外の）標準アイコンを置き換える場合：</p>
<pre><em>;@Ahk2Exe-AddResource Icon1.ico, 160  ; Replaces 'H on blue'
;@Ahk2Exe-AddResource Icon2.ico, 206  ; Replaces 'S on green'
;@Ahk2Exe-AddResource Icon3.ico, 207  ; Replaces 'H on red'
;@Ahk2Exe-AddResource Icon4.ico, 208  ; Replaces 'S on red'</em></pre>

<p><strong>例2：</strong>別のスクリプトを別のRCDATAリソースとして含める場合（「<a href="../Program.htm#embedded-scripts">埋め込みスクリプト</a>」を参照）：</p>
<pre><em>;@Ahk2Exe-AddResource MyScript1.ahk, #2
;@Ahk2Exe-AddResource MyScript2.ahk, MYRESOURCE</em></pre>
<p>このディレクティブで追加された各スクリプトは、コンパイラによって完全かつ個別に処理され、さらにディレクティブを含めることができることに注意してください。全体として競合するディレクティブがあれば、コンパイラが最後に見つけたものが使われる。</p>

<h3 id="Bin">Bin / Base</h3>
<p>.exeファイルの生成に使用するAutoHotkeyのベースバージョンを指定します。このディレクティブは、GUIまたはCLIで指定されたベースファイルのパラメータによって上書きされる可能性があります。このディレクティブは、必要であれば何度でも指定できるが、トップレベルのスクリプトファイルでのみ指定する（つまり、<a href="../lib/_Include.htm">#Include</a>ファイルでは指定しない）。コンパイラは、Bin/Baseディレクティブが見つかるたびに少なくとも1回は実行されます。（このディレクティブに実際のコメントを付加する場合は、<code>;</code>フラグを使用しなければならない。このディレクティブを本当にコメントアウトするには、最初のコメントフラグの後にスペースを挿入する。）</p>

<pre class="Syntax"><span class="func">;@Ahk2Exe-Bin </span> [Path\]Name <span class="optional">, [Exe_path\][Name], Codepage</span> <em>; Deprecated</em>
<span class="func">;@Ahk2Exe-Base</span> [Path\]Name <span class="optional">, [Exe_path\][Name], Codepage</span></pre>
<dl>
  <dt>[Path\]Name</dt>
  <dd>使用する*.binまたは*.exeファイル。拡張子が与えられない場合は、<code>.bin</code>とみなされる。絶対パスが指定されていない場合、ファイルはコンパイラー自身のディレクトリにある（または相対的な）ものとみなされる。DOSマスクは<em>Name</em>に指定することができる。例えば、3 つすべてについては <code>ANSI*</code>、<code class="no-highlight">Unicode 32*</code>、<code class="no-highlight">Unicode 64*</code>、または<code>*bit</code>です。コンパイラーは、マッチした*.binまたは*.exeファイルごとに実行される。ビルトイン変数の置換は、上記<a href="#group1">グループ1</a>のものでなければならない。</dd>
  <dt>[Exe_path\][Name]</dt>
  <dd><i>(オプション)</i>.exeに付けるファイル名。提供された拡張子はすべて<code>.exe</code>に置き換えられます。パスが指定されていない場合、.exeはスクリプト・フォルダーに作成されます。名前を指定しない場合、.exeはデフォルトの名前になる。ビルトイン変数の置換は、上記<a href="#group1">グループ1</a>のものでなければならない。（このパラメータは<a href="#ExeName">ExeName</a>ディレクティブで上書きすることができます。）</dd>
  <dt>Codepage</dt>
  <dd><i>(オプション)</i> スクリプトファイルの処理に使われるデフォルトの<a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">コードページ</a>を上書きする。（スクリプトはユニコードのバイトオーダーマーク（BOM）で始まるはずなので、このパラメータの使用は不要です。）</dd>
</dl>

<h3 id="ConsoleApp">ConsoleApp</h3>
<p>実行サブシステムをコンソールモードに変更する。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-ConsoleApp</span></pre>

<h3 id="Cont">Cont</h3>
<p>直前のディレクティブの継続行を指定する。これにより、長い行のディレクティブをソースコード上で読みやすいように書式設定することができます。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Cont</span> Text</pre>
<dl>
  <dt>Text</dt>
  <dd>その行が処理される前に、前の指示行に追加されるテキスト。テキストは<code>Cont</code>キーワードに続く半角スペースの後に始まる。</dd>
</dl>

<h3 id="Debug">Debug</h3>
<p>デバッグ用に、指定したテキストでメッセージボックスを表示する。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Debug</span> Text</pre>
<dl>
  <dt>Text</dt>
  <dd>表示するテキスト。操作された）内容を見るには、<code>%</code>記号の間に特別な変数を含める。</dd>
</dl>

<h3 id="ExeName">ExeName</h3>
<p>生成される .exe ファイルの場所と名前を指定します。（<a href="#Bin">Base</a>ディレクティブも参照してください。）　このディレクティブは、GUIやCLIで指定された出力ファイルによって上書きされることがあります。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-ExeName</span> [Path\][Name]</pre>
<dl>
  <dt>[Path\][Name]</dt>
  <dd>The .exe file name. 提供された拡張子はすべて<code>.exe</code>に置き換えられます。パスが指定されていない場合、.exeはスクリプト・フォルダーに作成されます。名前を指定しない場合、.exeはデフォルトの名前になる。</dd>
</dl>
<strong>例：</strong>
<pre><em>;@Ahk2Exe-Obey U_bits, = %A_PtrSize% * 8
;@Ahk2Exe-Obey U_type, = "%A_IsUnicode%" ? "Unicode" : "ANSI"
;@Ahk2Exe-ExeName %A_ScriptName~\.[^\.]+$%_%U_type%_%U_bits%</em></pre>

<h3 id="Let">Let</h3>
<p>組み込み変数（上記参照）と同様に、<code>%<i>U</i>_Name%</code>でアクセスできる 1 つ以上のユーザー変数を作成（または変更）します。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Let</span> Name = Value <span class="optional">, Name = Value, ...</span></pre>
<dl>
  <dt>Name</dt>
  <dd>変数名（先頭の<code>U_</code>はあってもなくてもよい）。</dd>
  <dt>Value</dt>
  <dd>使用する値。</dd>
</dl>

<h3 id="Nop">Nop</h3>
<p>何もしない。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Nop</span> <span class="optional">Text</span></pre>
<dl>
  <dt>Text</dt>
  <dd><i>(オプショナル）</i>任意のテキスト 。</dd>
</dl>
<strong>例：</strong>
<pre>Ver := A_AhkVersion "" <em>; If quoted literal not empty, do 'SetVersion'
;@Ahk2Exe-Obey U_V, = "%A_PriorLine~U)^(.+")(.*)".*$~$2%" ? "SetVersion" : "Nop"
;@Ahk2Exe-%U_V%        %A_AhkVersion%%A_PriorLine~U)^(.+")(.*)".*$~$2%</em></pre>

<h3 id="Obey">Obey</h3>
<p><code>U_<i>Name</i></code> の結果を持つ、孤立した AutoHotkey コマンドまたは式に従います。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Obey</span> Name, CmdOrExp <span class="optional">, Extra</span></pre>
<dl>
  <dt>Name</dt>
  <dd>結果を受け取る変数名（先頭の<code>U_</code>はあってもなくてもよい）。</dd>
  <dt>CmdOrExp</dt>
  <dd>
    <p>従えという命令や表現。</p>
    <p><strong>コマンド・</strong>フォーマットでは、出力変数（多くの場合、最初のパラメーター）として<em>Name</em>を使用しなければならない。</p>
    <pre><em>;@Ahk2Exe-Obey U_date, FormatTime U_date`, R D2 T2</em></pre>
    <p><strong>式</strong>の書式は<code>=</code>で始まる必要があります。</p>
    <pre><em>;@Ahk2Exe-Obey U_type, = "%A_IsUnicode%" ? "Unicode" : "ANSI"</em></pre>
    <p>式はコマンド形式で書くことができる。</p>
    <pre><em>;@Ahk2Exe-Obey U_bits, U_bits := %A_PtrSize% * 8</em></pre>
    <p>必要であれば、複数のコマンドや式を<code>`n</code>で区切ってください。</p>
  </dd>
  <dt>Extra</dt>
  <dd><i>(オプション）</i>返す追加結果の数を指定する数値（1～9）。例えば、extra = 2の場合、結果は<code>U_<i>name</i></code>、<code class="no-highlight">U_<i>name</i>1</code>、<code class="no-highlight">U_<i>name</i>2</code>で返される。<code><i>name</i></code>の値は、まず式やコマンドによって設定されなければならない。</dd>
</dl>

<h3 id="PostExec">PostExec</h3>
<p>コンパイルに成功した後、.exeに<a href="../Scripts.htm#mpress">圧縮</a>が適用される前（または後）に実行されるプログラムを指定します。このディレクティブは何度も指定することができ、<em>When</em>パラメータで指定された適切なキューで、コンパイラが見つけた順番に実行される。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-PostExec</span> Program [parameters] <span class="optional">, When, WorkingDir, Hidden, IgnoreErrors</span></pre>
<dl>
  <dt>Program [parameters]</dt>
  <dd>実行するプログラムとパラメータ。処理された.exeファイルへのアクセスを許可するには、<code>"%A_WorkFileName%"</code>のように、引用符で囲まれたパラメータとして特殊変数<a href="#WorkFileName">A_WorkFileName</a>を指定する。プログラムが.exeを変更した場合、変更された.exeは、プログラムによって<code>%A_WorkFileName%</code>で指定された入力ファイルに戻される必要があります。（。exeにはバイナリデータが含まれることに注意。）</dd>
  <dt>When</dt>
  <dd>
    <p><i>(オプション)</i> <a href="../Scripts.htm#mpress">圧縮が</a>実行される前に実行する場合は空白のままにします。そうでない場合は、以下のように圧縮後に実行する数値を設定する：</p>
    <ul>
      <li>0 - 圧縮が指定されていない場合にのみ実行される。</li>
      <li>1 - MPRESS 圧縮が指定されているときのみ実行される。</li>
      <li>2 - UPX圧縮が指定されている場合にのみ実行される。</li>
    </ul>
  </dd>
  <dt>WorkingDir</dt>
  <dd><i>(オプション）</i>プログラムの作業ディレクトリ。空白を含む場合でも、ダブルクォーテーションで囲まないでください。省略された場合は、コンパイラ(Ahk2Exe)のディレクトリが使用されます。</dd>
  <dt>Hidden</dt>
  <dd><i>(オプション)</i>1に設定すると、プログラムは隠れて起動する。</dd>
  <dt>IgnoreErrors</dt>
  <dd><i>(オプション）</i>1に設定すると、プログラムの起動中または実行中に発生したエラーは、ユーザーに報告されない。</dd>
</dl>
<p><strong>例1：</strong>(最初の2つの例を使うには、まず<a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/BinMod.ahk">BinMod.ahk</a>をダウンロードし、ダウンロードしたスクリプトの指示に従ってコンパイルする)</p>
<p>この例は、生成された.exeから「AutoHotkey」への参照を削除し、コンパイルされたAutoHotkeyスクリプトであることを偽装するために使用できます：</p>
<pre><em>;@Ahk2Exe-Obey U_au, = "%A_IsUnicode%" ? 2 : 1    ; Script ANSI or Unicode?
;@Ahk2Exe-PostExec "BinMod.exe" "%A_WorkFileName%"
;@Ahk2Exe-Cont  "%U_au%2.&gt;AUTOHOTKEY SCRIPT&lt;. DATA              "</em></pre>
<p><strong>例 2：</strong>UPX で圧縮された .exe を<code>UPX -d</code>で解凍できないようにする例です：</p>
<pre><em>;@Ahk2Exe-PostExec "BinMod.exe" "%A_WorkFileName%"
;@Ahk2Exe-Cont  "11.UPX." "1.UPX!.", 2</em></pre>
<p>（<a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/BinMod.ahk">BinMod.ahk</a>スクリプトには他にも例がある。）</p>
<p><strong>例3：</strong>この例では、CLIまたはGUIで何も指定されていない場合に、コンパイルされたスクリプトで使用する<a href="../Scripts.htm#mpress">圧縮</a>を指定します。コンパイラが通常使用するデフォルト・パラメータを示す。</p><p>For MPRESS:</p>
<pre><em>;@Ahk2Exe-PostExec "MPRESS.exe" "%A_WorkFileName%" -q -x, 0,, 1</em></pre>
<p>For UPX:</p>
<pre><em>;@Ahk2Exe-PostExec "UPX.exe" "%A_WorkFileName%"
;@Ahk2Exe-Cont  -q --all-methods --compress-icons=0, 0,, 1</em></pre>

<h3 id="ResourceID">ResourceID</h3>
<p><a href="#Bin">.exe ベースファイル</a>を使用するコンパイルのメインスクリプトに使用する非標準のリソース ID を割り当てます（「<a href="../Program.htm#embedded-scripts">埋め込みスクリプト</a>」を参照）。このディレクティブは、GUIまたはCLIで指定されたリソースIDによって上書きされる。このディレクティブは、<a href="#AddResource">AddResource</a>ディレクティブによって挿入されたスクリプトの中に現れると無視されます。</p>
<pre class="Syntax"><span class="func">リソースID</span>名前</pre>
<dl>
  <dt>Name</dt>
  <dd>使用するリソースID。数値リソースIDは、ハッシュ記号（#）に続く10進数で構成されなければならない。</dd>
</dl>

<h3 id="SetMainIcon">メインアイコンの設定</h3>
<p>コンパイルに使用されるカスタム EXE アイコンを上書きします。（他のアイコンを変更するには、<a href="#AddResource">AddResource</a>の例を参照のこと。）　このディレクティブは、GUIまたはCLIで指定されたアイコンファイルによって上書きされることがある。The new icon might not be immediately visible in Windows Explorer if the compiled file existed before with a different icon, however the new icon can be shown by selecting <code>Refresh Windows Icons</code> from the Ahk2Exe <code>File</code> menu.</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-SetMainIcon</span> <span class="optional">IcoFile</span></pre>
<dl>
  <dt>IcoFile</dt>
  <dd><i>(オプション）</i>使用するアイコンファイル。省略された場合、デフォルトのAutoHotkeyアイコンが使用されます。</dd>
</dl>

<h3 id="SetProp">Set<em>Prop</em></h3>
<p>コンパイルされた実行ファイルのバージョン情報のプロパティを変更します。すべてのプロパティは、指定された順番に関係なく、アルファベット順に処理されることに注意してください。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Set<i>Prop</i></span> Value</pre>
<dl>
  <dt><em>Prop</em></dt>
  <dd>
    <p>変更するプロパティの名前。以下のいずれかに該当すること。</p>
    <table class="info">
      <tr>
        <th abbr="プロパティ">プロパティ</th>
        <th abbr="説明">説明</th>
      </tr>
      <tr>
        <td>CompanyName</td>
        <td>社名を変更する。</td>
      </tr>
      <tr>
        <td>Copyright</td>
        <td>法的な著作権情報を変更します。</td>
      </tr>
      <tr>
        <td>Description</td>
        <td>ファイルの説明を変更します。Windows 8以上では、タスクマネージャの「プロセス」でスクリプトの名前も変更されます。</td>
      </tr>
      <tr>
        <td>FileVersion</td>
        <td>ファイルのバージョンを、テキスト形式と生のバイナリ形式の両方で変更します。（詳細は下記<em>バージョン</em>を参照。）</td>
      </tr>
      <tr>
        <td>InternalName</td>
        <td>内部名称を変更する。</td>
      </tr>
      <tr>
        <td>Language</td>
        <td><a href="Languages.htm">言語コード</a>を変更する。16進数には<code>0x</code>のプレフィックスが必要です。</td>
      </tr>
      <tr>
        <td>LegalTrademarks</td>
        <td>法定商標情報を変更する。</td>
      </tr>
      <tr>
        <td>Name</td>
        <td>製品名と内部名称を変更します。</td>
      </tr>
      <tr>
        <td>OrigFilename</td>
        <td>元のファイル名情報を変更する。</td>
      </tr>
      <tr>
        <td>ProductName</td>
        <td>商品名を変更します。</td>
      </tr>
      <tr>
        <td>ProductVersion</td>
        <td>製品バージョンを、テキスト形式と生のバイナリ形式の両方で変更します。（詳細は下記<em>バージョン</em>を参照。）</td>
      </tr>
      <tr>
        <td>Version</td>
        <td>
          <p>ファイルのバージョンと製品のバージョンを、テキスト形式と生のバイナリ形式の両方で変更します。</p>
          <p>Ahk2Exe はバイナリのバージョンフィールドに、バージョンテキストの先頭に表示されるピリオドで区切られた数字（最大4つ）を入力します。未記入のフィールドはゼロに設定される。たとえば、<code class="no-highlight">1.3-alpha</code>なら、バイナリのバージョン番号は<code class="no-highlight">1.3.0.0</code>となる。このプロパティが変更されない場合、スクリプトのコンパイルに使用されたAutoHotkeyのバージョンがデフォルトになります。</p>
        </td>
      </tr>
    </table>
  </dd>
  <dt>Value</dt>
  <dd>プロパティを設定する値。</dd>
</dl>

<h3 id="Set">Set</h3>
<p><a href="#SetProp">SetProp</a>ディレクティブでカバーされていない、 コンパイルされた実行ファイルのバージョン情報の その他の雑多なプロパティを変更する。すべてのプロパティは、指定された順番に関係なく、アルファベット順に処理されることに注意してください。本指令は特殊用途にのみ適用される。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-Set</span> Prop, Value</pre>
<dl>
  <dt>Prop</dt>
  <dd>変更するプロパティの名前。</dd>
  <dt>Value</dt>
  <dd>プロパティを設定する値。</dd>
</dl>

<h3 id="UpdateManifest">UpdateManifest</h3>
<p>.exe のマニフェストの詳細を変更します。本指令は特殊用途にのみ適用される。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-UpdateManifest</span> RequireAdmin <span class="optional">, Name, Version, UIAccess</span></pre>
<dl>
  <dt>RequireAdmin</dt>
  <dd>実行時に管理者権限を必要とする実行ファイルに変更するには1を設定する。実行時に利用可能な最高権限を要求するように実行ファイルを変更するには2を設定する。変更しない場合は0を設定する。</dd>
  <dt>Name</dt>
  <dd><i>(オプション)</i>マニフェストに設定する名前。</dd>
  <dt>Version</dt>
  <dd><i>(オプション)</i>マニフェストに設定するバージョン。</dd>
  <dt>UIAccess</dt>
  <dd><i>(オプション)</i> マニフェストでUIAccessをtrueにするには1を設定します。</dd>
</dl>

<h3 id="UseResourceLang">UseResourceLang</h3>
<p><a href="#AddResource">AddResource</a>が使用するリソース言語を変更します。このディレクティブは位置指定であり、それに続くすべての<a href="#AddResource">AddResource</a>ディレクティブに影響します。</p>
<pre class="Syntax"><span class="func">;@Ahk2Exe-UseResourceLang</span> LangCode</pre>
<dl>
  <dt>LangCode</dt>
  <dd><a href="Languages.htm">言語コード</a>。16進数には<code>0x</code>のプレフィックスが必要です。デフォルトのリソース言語はUS English (0x0409)です。</dd>
</dl>

</body>

</html>