<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>ロングパス｜AutoHotkey v2</title>
<meta name="description" content="AutoHotkeyで長いパスがどのように扱われるのか、また、パスの長さの制限を回避するにはどのようなテクニックがあるのかをご紹介します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>ロングパス</h1>

<p>一般的に、プログラムは2種類のパス長制限の影響を受ける：</p>
<ol>
  <li>オペレーティング・システムが提供する関数は、いくつかの例外を除き、通常パスを259文字に制限している。</li>
  <li>プログラム内でパスを扱うコードは、コードを単純化するために最初の制限に依存する可能性があり、事実上、別の259文字の制限を置くことになる。</li>
</ol>
<p>これらの制限は、値260を持つ定数<code>MAX_PATH</code>にちなんで、しばしば「MAX_PATH制限」と呼ばれる。一般的に1文字はヌルターミネーターとして予約され、259文字が実際のパスに残される。</p>
<p>AutoHotkeyはほとんどの場合、2番目の種類を削除し、スクリプトが1番目の種類を回避できるようにします。これには2つの方法がある：</p>
<ul>
  <li>Windows 10のAutoHotkeyやその他すべてのロングパス対応プログラムでロングパスを有効にできます。詳細については、<a href="https://learn.microsoft.com/windows/win32/fileio/naming-a-file#enable-long-paths-in-windows-10-version-1607-and-later">マイクロソフトのドキュメントを</a>参照してください。要するに、これによりほとんどの機能が透過的に長いパスを扱うことができるようになりますが、Windows 10のバージョン1607以降が必要です。</li>
  <li>多くの場合、パスの前に<code>\\?\</code>を付けると、通常の制限を超えることができる。しかし、システム機能によっては（あるいは一般的に長いパスを）サポートしていないものもある。詳細は「<a href="#limitations">既知の制限事項</a>」を参照。</li>
</ul>

<h2 id="prefix">ロング・パスのプレフィックス</h2>
<p>基礎となるシステム機能でサポートされている場合、例えば<code>\\?\C:\My Folder</code>"のように、<code>\\?\</code>という接頭辞を付けると、32,767文字に制限されます。しかし、これは<a href="https://learn.microsoft.com/archive/blogs/jeremykuhne/path-normalization">パスの正規化</a>をスキップすることによって行われる。通常、正規化によって削除または変更されるパスの一部の要素は、代わりにファイルの実際のパスの一部になります。これにより、「通常の」プログラムがアクセスできないパスが作成される可能性があるため、注意が必要である。</p>
<p>特に正規化だ：</p>
<ul>
  <li><code class="no-highlight">dir\file.ext</code>, <code class="no-highlight">\file.ext</code>, <code class="no-highlight">C:file.ext</code> のような相対パスを解決する（スラッシュがないことに注意）。</li>
  <li><code>\..</code> や <code>\.</code> のような相対コンポーネントを解決する。</li>
  <li>コンポーネント/ディレクトリのセパレータを正規化し、<code>/</code>を <code>\</code>に置き換え、冗長なセパレータを削除します。</li>
  <li>コンポーネント（<code class="no-highlight">dir.\file</code>）の末尾のピリオド1個や、末尾のスペースやピリオド（<code>dir\filename . .</code>）など、特定の文字をトリムする。</li>
</ul>
<p>パスは、プレフィックスを適用する前に、以下に定義する関数で<a href="https://learn.microsoft.com/windows/win32/api/fileapi/nf-fileapi-getfullpathnamew">GetFullPathName</a>に渡すことで、明示的に正規化することができます。事例：</p>
<pre>MsgBox "\\?\" NormalizePath("..\file.ext")</pre>
<pre filename="foo.ahk">NormalizePath(path) {
    cc := DllCall("GetFullPathName", "str", path, "uint", 0, "ptr", 0, "ptr", 0, "uint")
    buf := Buffer(cc*2)
    DllCall("GetFullPathName", "str", path, "uint", cc, "ptr", buf, "ptr", 0)
    return StrGet(buf)
}</pre>
<p><code>\\?\</code>接頭辞を持つパスも、この関数で正規化できる。しかし、その場合、作業ディレクトリは決して使用されず、ルートは<code>\\?\</code>（例えは、<code>\\?\C:\..</code>は、<code>\\?\</code>に解決され、<code>C:\..</code>は、<code>C:\</code>に解決される）。</p>

<h2 id="limitations">既知の制限事項</h2>
<p>パス自体が259文字に制限されていない場合でも、各コンポーネント（ファイル名またはディレクトリ名）は、ファイルシステムによって課されるハードリミット（通常は255文字）を超えることはできません。</p>
<p>これらは、基礎となるシステム機能の制限により、長いパスをサポートしていない：</p>
<ul>
  <li><a href="../lib/DllCall.htm">DllCall</a>（<em>DllFile</em>および<em>Function</em>用）</li>
  <li><a href="../lib/DirCopy.htm">DirCopy</a></li>
  <li><em>Recurse</em>が false でない限り、<a href="../lib/DirDelete.htm">DirDelete</a></li>
  <li><a href="../lib/DirMove.htm">DirMove</a>、Rオプションが使われていない場合</li>
  <li><a href="../lib/FileCreateShortcut.htm">FileCreateShortcut</a></li>
  <li><a href="../lib/FileGetShortcut.htm">FileGetShortcut</a></li>
  <li><a href="../lib/FileRecycle.htm">FileRecycle</a></li>
  <li><a href="../lib/SoundPlay.htm">SoundPlay</a>（この場合は127文字まで）</li>
  <li><a href="../lib/DriveSetLabel.htm">DriveSetLabel</a>および<a href="../lib/Drive.htm">DriveGet のバリエーション</a>(<a href="../lib/DriveGetType.htm">DriveGetType</a>を除く)</li>
  <li>特殊なフォルダー・パス（長いパスはどのみち不可能かもしれない）を返す組み込み変数：<a href="../Variables.htm#AppData">A_AppData</a>、<a href="../Variables.htm#Desktop">A_Desktop</a>、<a href="../Variables.htm#MyDocuments">A_MyDocuments</a>、<a href="../Variables.htm#ProgramFiles">A_ProgramFiles</a>、<a href="../Variables.htm#Programs">A_Programs</a>、<a href="../Variables.htm#StartMenu">A_StartMenu</a>、<a href="../Variables.htm#Startup">A_Startup</a>およびCommonバリアント、<a href="../Variables.htm#Temp">A_Temp</a>、<a href="../Variables.htm#WinDir">A_WinDir</a></li>
</ul>
<p><a href="../lib/SetWorkingDir.htm">SetWorkingDir</a>と <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>は、<code>\\?\</code>接頭辞が使用できないため、Windows 10のロング・パス認識が有効な場合にのみロング・パスに対応します。作業ディレクトリがMAX_PATHを超えると、<a href="../lib/Run.htm">Run</a>でプログラムを起動できなくなる。これらの制限はOSによって課される。</p>
<p>MAX_PATHを超えるフルパスで実行ファイルを実行することはできないようです。そうなると、より長い実行可能パスをサポートすることを目的とした変更を完全にテストすることはできない。そのため、MAX_PATHの制限は以下のように残されている：</p>
<ul>
  <li><a href="WinTitle.htm#ahk_exe">ahk_exe</a></li>
  <li>デフォルトのスクリプトのパスで、現在の実行ファイルのパスに基づいている。</li>
  <li>AutoHotkeyのインストールディレクトリの取得。コンパイルされたスクリプトで<a href="../Variables.htm#AhkPath">A_AhkPath</a>によって使用され、Window Spyまたはヘルプファイルを起動するために使用されます。</li>
  <li><a href="../lib/WinGetProcessPath.htm">WinGetProcessPath</a>。</li>
  <li><a href="../lib/WinGetProcessName.htm">WinGetProcessName</a>（これは名前部分にのみ適用され、NTFSは255文字までの名前しかサポートしないので、理論的には問題ない）。</li>
</ul>
<p>エラーメッセージに表示される長い<a href="../lib/_Include.htm">#Include</a>パスは、任意に切り捨てられる可能性があります。</p>

</body>
</html>
