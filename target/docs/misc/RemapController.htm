<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>コントローラをキーボードまたはマウスにリマップする｜AutoHotkey v2</title>
<meta name="description" content="コントローラのボタンやその他のコントロールにキーストロークやマウスクリックを送信させる方法を学びます。" />
<meta name="keywords" content="キーボード,キー,キーストローク,クリック,マウス,ボタン,ボタン,コントローラー,ゲームパッド,ジョイスティック,ホットキー,ホットキー,マクロ">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>コントローラをキーボードまたはマウスにリマップする</h1>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#imp">重要な注意事項</a></li>
  <li><a href="#button">コントローラボタンがキーストロークやマウスクリックを送るようにする</a>
  <ul>
      <li><a href="#different-approaches">さまざまなアプローチ</a></li>
      <li><a href="#auto-repeating-controller-buttons">キーストロークの自動繰り返し</a></li>
      <li><a href="#context-sensitive-controller-buttons">状況に応じたコントローラーボタン</a></li>
      <li><a href="#using-a-controller-as-a-mouse">コントローラーをマウスとして使う</a></li>
  </ul></li>
  <li><a href="#axis">他のコントローラコントロールにキーストロークまたはマウスクリックを送信させる</a>
  <ul>
      <li><a href="#controller-axes">コントローラー軸</a></li>
      <li><a href="#controller-pov-hat">コントローラーPOVハット</a></li>
      <li><a href="#auto-repeating-other">キーストロークの自動繰り返し</a></li>
  </ul></li>
  <li><a href="#Remarks">備考</a></li>
  <li><a href="#related">関連する話題</a></li>
</ul>

<h2 id="imp">重要な注意事項</h2>
<ul>
  <li>歴史的な理由から、以下のボタンとコントロールの名前は<code>ジョイスティック</code>の略である<code>Joy</code>で始まる。しかし、通常はゲームパッドやステアリングホイールなど、他のゲームコントローラーにも使用できる。</li>
  <li>コントローラのボタンや軸をキーやマウスのボタンにリマップすることはできますが、他のコントローラのボタンや軸にリマップすることはできません。それは、<a href="https://sourceforge.net/projects/vjoystick/">vJoy</a>のようなコントローラー・エミュレーターがあればこそ可能なことだ。</li>
  <li>AutoHotkeyは、コントローラの各ボタンを1～32のユニークな番号で識別します。これらの数値を決定するには、<a href="../scripts/index.htm#ControllerTest">コントローラのテストスクリプト</a>を使用します。</li>
  <li>Xbox コントローラ 2013 以降（Xbox 360 コントローラより新しいもの）の場合、Joy1～Joy32 のホットキーは、<a href="../lib/MsgBox.htm">メッセージ ボックス</a>、<a href="../lib/Gui.htm">GUI</a>、<a href="../Program.htm#main-window">スクリプトのメイン ウィンドウ</a>など、スクリプトが所有するウィンドウがアクティブな場合にのみ機能します。この制限は、Joy1～Joy32、JoyX、JoyY、JoyZ、JoyR、JoyU、JoyPOV（および場合によってはJoyV）の<a href="../lib/GetKeyState.htm">GetKeyState</a>にも適用されるが、JoyName、JoyButtons、JoyAxes、JoyInfoには適用されない。他のアクティブウィンドウのコントローラ入力を検出するには、<a href="https://www.autohotkey.com/boards/viewtopic.php?f=83&t=106254">XInput.ahkライブラリ</a>を使用する。</li>
</ul>

<h2 id="button">コントローラボタンがキーストロークやマウスクリックを送るようにする</h2>

<h3 id="different-approaches">さまざまなアプローチ</h3>
<p>以下、最も単純なものから最も複雑なものまで、3つのアプローチを紹介する。最も複雑な方法は、（キーやマウスボタンを押し続ける必要があるゲームなど）最も幅広い状況で機能する。</p>

<h4 id="Method_1">Method #1</h4>
<p>この方法は、単純なキー入力やマウスクリックを送信する。事例：</p>
<pre>Joy1::<a href="../lib/Send.htm">Send</a> "{Left}"  <em>; Have button #1 send a left-arrow keystroke.</em>
Joy2::<a href="../lib/Click.htm">Click</a>  <em>; Have button #2 send a click of left mouse button.</em>
Joy3::Send "a{Esc}{Space}{Enter}"  <em>; Have button #3 send the letter "a" followed by Escape, Space, and Enter.</em>
Joy4::Send "Sincerely,{Enter}John Smith"  <em>; Have button #4 send a two-line signature.</em></pre>
<p>To have a button perform more than one line, put them <em>beneath</em> the button name and enclose them in braces. 事例：</p>
<pre>Joy5::
{
    Run "notepad"
    WinWait "Untitled - Notepad"
    WinActivate
    Send "This is the text that will appear in Notepad.{Enter}"
}</pre>
<p>For details, see <a href="../howto/WriteHotkeys.htm">How to Write Hotkeys</a>.</p>
<p>キーとマウス/コントローラボタンの完全なリストは、<a href="../KeyList.htm">キーリスト</a>を参照してください。</p>

<h4 id="Method_2">Method #2</h4>
<p>この方法は、コントローラーのボタンを押している間ずっと、キーやマウスのボタンを押し続けなければならない場合に必要です。次の例では、コントローラーの第2ボタンを左矢印キーにします：</p>
<pre>Joy2::
{
    Send "{Left down}"  <em>; Hold down the left-arrow key.</em>
    <a href="../lib/KeyWait.htm">KeyWait</a> "Joy2"  <em>; Wait for the user to release the controller button.</em>
    Send "{Left up}"  <em>; Release the left-arrow key.</em>
}</pre>

<h4 id="Method_3">Method #3</h4>
<p>この方法は、方法#2で説明したタイプのコントローラーホットキーが複数あり、そのようなホットキーを同時に押したり離したりすることがある場合に必要です。次の例では、コントローラの第3ボタンをマウスの左ボタンにします：</p>
<pre>Joy3::
{
    Send "{LButton down}"   <em>; Hold down the left mouse button.</em>
    SetTimer WaitForButtonUp3, 10
}

WaitForButtonUp3()
{
    if <a href="../lib/GetKeyState.htm">GetKeyState</a>("Joy3")  <em>; The button is still, down, so keep waiting.</em>
        return
    <em>; Otherwise, the button has been released.</em>
    Send "{LButton up}"  <em>; Release the left mouse button.</em>
    SetTimer , 0
}
</pre>

<h3 id="auto-repeating-controller-buttons">キーストロークの自動繰り返し</h3>
<p>プログラムやゲームによっては、（キーボードを押し続けているように）キーを繰り返し送信する必要がある場合があります。以下の例では、コントローラーの第2ボタンを押しながらスペースバーのキー入力を繰り返すことでこれを実現しています：</p>
<pre>Joy2::
{
    Send "{Space down}"   <em>; Press the spacebar down.</em>
    SetTimer WaitForJoy2, <strong>30</strong>  <em>; Reduce the number <strong>30</strong> to 20 or 10 to send keys faster. Increase it to send slower.</em>
}

WaitForJoy2()
{
    if not GetKeyState("Joy2")  <em>; The button has been released.</em>
    {
        Send "{Space up}"  <em>; Release the spacebar.</em>
        SetTimer , 0  <em>; Stop monitoring the button.</em>
        return
    }
    <em>; Since above didn't "return", the button is still being held down.</em>
    Send "{Space down}"  <em>; Send another Spacebar keystroke.</em>
}</pre>

<h3 id="context-sensitive-controller-buttons">状況に応じたコントローラーボタン</h3>
<p><a href="../lib/_HotIf.htm">#HotIf</a>ディレクティブを使用すると、アクティブなウィンドウの種類などの条件に応じて、選択したコントローラのボタンに異なるアクションを実行させることができます。</p>

<h3 id="using-a-controller-as-a-mouse">コントローラーをマウスとして使う</h3>
<p><a href="../scripts/index.htm#ControllerMouse">Controller-To-Mouseスクリプト</a>は、ボタンと軸制御を再マッピングすることで、コントローラをマウスに変換します。</p>

<h2 id="axis">他のコントローラコントロールにキーストロークまたはマウスクリックを送信させる</h2>
<p>To have a script respond to movement of a stick's axis or POV hat, use <a href="../lib/SetTimer.htm">SetTimer</a> and <a href="../lib/GetKeyState.htm">GetKeyState</a>.</p>

<h3 id="controller-axes">コントローラー軸</h3>
<p>The following example makes the stick's X and Y axes behave like the arrow key cluster on a keyboard (left, right, up, and down):</p>
<pre><a href="../lib/SetTimer.htm">SetTimer</a> WatchAxis, 5

WatchAxis()
{
    static KeyToHoldDown := ""
    JoyX := <a href="../lib/GetKeyState.htm">GetKeyState</a>("JoyX")  <em>; Get position of X axis.</em>
    JoyY := GetKeyState("JoyY")  <em>; Get position of Y axis.</em>
    KeyToHoldDownPrev := KeyToHoldDown  <em>; Prev now holds the key that was down before (if any).</em>

if JoyX &gt; 70
        KeyToHoldDown := "Right"
    else if JoyX &lt; 30
        KeyToHoldDown := "Left"
    else if JoyY &gt; 70
        KeyToHoldDown := "Down"
    else if JoyY &lt; 30
        KeyToHoldDown := "Up"
    else
        KeyToHoldDown := ""

if KeyToHoldDown = KeyToHoldDownPrev  <em>; The correct key is already down (or no key is needed).</em>
        return  <em>; Do nothing.</em>

<em>; Otherwise, release the previous key and press down the new key:</em>
    SetKeyDelay -1  <em>; Avoid delays between keystrokes.</em>
    if KeyToHoldDownPrev   <em>; There is a previous key to release.</em>
        Send "{" KeyToHoldDownPrev " up}"  <em>; Release it.</em>
    if KeyToHoldDown   <em>; There is a key to press down.</em>
        Send "{" KeyToHoldDown " down}"  <em>; Press it down.</em>
}</pre>

<h3 id="controller-pov-hat">コントローラーPOVハット</h3>
<p>次の例では、コントローラのPOVハットをキーボードの矢印キーのように動作させます； 
つまり、POVハットは矢印キー（左、右、上、下）を送信します：</p>
<pre>SetTimer WatchPOV, 5

WatchPOV()
{
    static KeyToHoldDown := ""
    POV := GetKeyState("JoyPOV")  <em>; Get position of the POV control.</em>
    KeyToHoldDownPrev := KeyToHoldDown  <em>; Prev now holds the key that was down before (if any).</em>

<em>; Some controllers might have a smooth/continous POV rather than one in fixed increments.
; To support them all, use a range:</em>
    if POV &lt; 0   <em>; No angle to report</em>
        KeyToHoldDown := ""
    else if POV &gt; 31500                <em>; 315 to 360 degrees: Forward</em>
        KeyToHoldDown := "Up"
    else if POV &gt;= 0 and POV &lt;= 4500      <em>; 0 to 45 degrees: Forward</em>
        KeyToHoldDown := "Up"
    else if POV &gt;= 4501 and POV &lt;= 13500  <em>; 45 to 135 degrees: Right</em>
        KeyToHoldDown := "Right"
    else if POV &gt;= 13501 and POV &lt;= 22500 <em>; 135 to 225 degrees: Down</em>
        KeyToHoldDown := "Down"
    else                                  <em>; 225 to 315 degrees: Left</em>
        KeyToHoldDown := "Left"

if KeyToHoldDown = KeyToHoldDownPrev  <em>; The correct key is already down (or no key is needed).</em>
        return  <em>; Do nothing.</em>

<em>; Otherwise, release the previous key and press down the new key:</em>
    SetKeyDelay -1  <em>; Avoid delays between keystrokes.</em>
    if KeyToHoldDownPrev   <em>; There is a previous key to release.</em>
        Send "{" KeyToHoldDownPrev " up}"  <em>; Release it.</em>
    if KeyToHoldDown   <em>; There is a key to press down.</em>
        Send "{" KeyToHoldDown " down}"  <em>; Press it down.</em>
}</pre>

<h3 id="auto-repeating-other">キーストロークの自動繰り返し</h3>
<p>上記のどちらの例も、単にキーを押し続けるのではなく、繰り返しキーを送るように修正することができる（つまり、キーボードのキーを物理的に押し続けることを模倣することができる）。これを行うには、以下の行を置き換える：</p>
<pre>return  <em>; Do nothing.</em></pre>
<p>With the following:</p>
<pre>{
    if KeyToHoldDown
        Send "{" KeyToHoldDown " down}"  <em>; Auto-repeat the keystroke.</em>
    return
}</pre>
<h2 id="Remarks">備考</h2>
<p>ボタンまたは軸名の前にコントローラの番号を付けることで、最初以外のコントローラを使用できます。例えば、<code>2Joy1</code>は、2つ目のコントローラーの最初のボタンとなる。</p>
<p>他の便利なコントローラスクリプトを見つけるには、<a href="https://www.autohotkey.com/forum/">AutoHotkeyフォーラム</a>をご覧ください。<em>Controller、GetKeyState、Send</em>などのキーワードで検索すると、興味のあるトピックが見つかるだろう。</p>
<h2 id="related">関連する話題</h2>
<ul>
    <li><a href="../scripts/index.htm#ControllerMouse">Controller-To-Mouseスクリプト（コントローラーをマウスとして使う）</a></li>
    <li><a href="../KeyList.htm#Controller">コントローラーのボタン、軸、コントロールのリスト</a></li>
    <li><a href="../lib/GetKeyState.htm">GetKeyState</a></li>
    <li><a href="Remap.htm">キーボードとマウスのリマッピング</a></li>
</ul>

</body>
</html>
