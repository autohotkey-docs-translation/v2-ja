<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>リマッピングキー（キーボード、マウス、コントローラ）｜AutoHotkey v2</title>
<meta name="description" content="マウスやコントローラーのボタンもリマップできる無料のキーボードリマッパー。また、キー操作やマウスクリックを送信することで、繰り返し作業を自動化することもできる。">
<meta name="keywords" content="keyboard,remapper,remap,remapping,keys,key,keystrokes,clicks,mouse,buttons,button,controller,gamepad,joystick,hotkeys,hotkey">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>キーのリマッピング<span class="headnote">（キーボード、マウス、コントローラー）</span></h1>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#intro">はじめに</a></li>
  <li><a href="#Remap">キーボードとマウスのリマッピング</a></li>
  <li><a href="#remarks">備考</a></li>
  <li><a href="#moving-the-mouse-cursor">キーボードによるマウスカーソルの移動</a></li>
  <li><a href="#registry">レジストリの「スキャンコードマップ」によるリマッピング</a></li>
  <li><a href="#related">関連する話題</a></li>
</ul>

<h2 id="intro">はじめに</h2>
<p><strong>制限</strong>以下に説明するAutoHotkeyのリマッピング機能は、一般的にWindowsレジストリ経由で直接リマッピングするほど純粋で効果的ではありません。各アプローチの利点と欠点については、<a href="#registry">レジストリの再マッピング</a>を参照のこと。</p>
<h2 id="Remap">キーボードとマウスのリマッピング</h2>
<p>組み込みの再マッピング機能の構文は<code>OriginKey::DestinationKey</code>です。例えば、以下の行だけで構成される<a href="../Scripts.htm">スクリプト</a>は、<kbd>A</kbd>を <kbd>B</kbd>のように動作させる：</p>
<pre>a::b</pre>
<p>上記の例では、<kbd>B</kbd>自体は変更されていない。<kbd>B</kbd>は、次の例のように他のキーにリマップしない限り、「b」キーストロークを送信し続ける：</p>
<pre>a::b
b::a</pre>
<p>上記の例では小文字を使用しているが、これは対応する大文字もリマップするため、ほとんどの目的には小文字が推奨される（つまり、<kbd>CapsLock</kbd>が「オン」または<kbd>Shift</kbd>が押されたままだと大文字が送信される）。対照的に、右側に大文字を指定すると、強制的に大文字になる。例えば、次の行では、「a」または「A」を入力すると、大文字の「B」が表示される（<kbd>CapsLock</kbd>がオフの場合）：</p>
<pre>a::B</pre>
<p>逆に、左サイドに含まれていて右サイドに含まれていないモディファイアは、キーが送信されると自動的に解除される。例えば、次の2行は、<kbd>Shift</kbd>+<kbd>A</kbd>または<kbd>Ctrl</kbd>+<kbd>A</kbd>を押すと小文字の「b」が表示される：</p>
<pre>A::b
^a::b</pre>

<h3 id="RemapMouse">マウスリマッピング</h3>
<p>キーボードの代わりにマウスをリマップするには、同じ方法を使います。事例：</p>
<table class="info">
  <tr>
    <th style="min-width: 11em;">例</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td><code>MButton::Shift</code></td>
    <td>真ん中のボタンを<kbd>Shift</kbd>のように動作させる。</td>
  </tr>
  <tr>
    <td><code>XButton1::LButton</code></td>
    <td>マウスの第4ボタンをマウスの左ボタンのように動作させる。</td>
  </tr>
  <tr>
    <td><code>RAlt::RButton</code></td>
    <td>右<kbd>Alt</kbd>をマウスの右ボタンのように動作させる。</td>
  </tr>
</table>

<h3 id="other-useful-remappings">その他の便利なリマッピング</h3>
<table class="info">
  <tr>
    <th style="min-width: 11em;">例</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td><code>CapsLock::Ctrl</code></td>
    <td><kbd>CapsLock</kbd>を <kbd>Ctrl</kbd>にする。<kbd>CapsLock</kbd>のオン/オフ機能を保持するには、まずリマッピング<code>+CapsLock::CapsLock</code>を追加する。<kbd>Shift</kbd>を押しながら<kbd>CapsLock</kbd>を押すと、<kbd>CapsLock</kbd>のオン/オフが切り替わります。どちらのリマッピングも修飾キーを押したままにできるため、より特殊な<code>+CapsLock::CapsLock</code>リマッピングを最初に配置しなければ動作しない。</td>
  </tr>
  <tr>
    <td><code>XButton2::^LButton</code></td>
    <td>マウスの第5ボタン(XButton2)をコントロールクリックする。</td>
  </tr>
  <tr>
    <td><code>RAlt::AppsKey</code></td>
    <td>右の<kbd>Alt</kbd>を <kbd>Menu</kbd>（コンテキストメニューを開くキー）にする。</td>
  </tr>
  <tr>
    <td><code>RCtrl::RWin</code></td>
    <td>正しい<kbd>Ctrl</kbd>が正しい<kbd>Win</kbd>になる。</td>
  </tr>
  <tr>
    <td><code>Ctrl::Alt</code></td>
    <td><kbd>Ctrl</kbd>を <kbd>Alt</kbd>のように動作させる。ただし、<a href="#AltTab">alt-tabの問題</a>を参照。</td>
  </tr>
  <tr>
    <td><code>^x::^c</code></td>
    <td><kbd>Ctrl</kbd>+<kbd>X</kbd>が <kbd>Ctrl</kbd>+<kbd>C</kbd>になる。また、<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>X</kbd>が<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>C</kbd>などを生成する。</td>
  </tr>
  <tr>
    <td><code>RWin::Return</code></td>
    <td>右<kbd>Win</kbd>は単に<a href="../lib/Return.htm">リターン</a>させることで無効にする。</td>
  </tr>
</table>
<p>これらの例を「Remap.ahk」のような新しいテキストファイルにコピーし、ファイルを起動することで試すことができる。</p>
<p>キーとマウスボタンの名前の完全なリストは、<a href="../KeyList.htm">キーリスト</a>を参照してください。</p>
<h2 id="remarks">備考</h2>
<p><a href="../lib/_HotIf.htm">#HotIf</a>ディレクティブは、選択したリマッピングを指定したウィンドウでのみ（または指定した条件が満たされている間）有効にするために使用できます。事例：</p>
<pre>#HotIf WinActive("ahk_class Notepad")
a::b  <em>; Makes the 'a' key send a 'b' key, but only in Notepad.</em>
#HotIf  <em>; This puts subsequent remappings and hotkeys in effect for all windows.</em></pre>
<p>キーやボタンのリマッピングは、以下の点で「完了」となります：</p>
<ul>
  <li><kbd>Ctrl</kbd>や<kbd>Shift</kbd>などの修飾子を押しながら原点キーを入力すると、その修飾子が移動先のキーに有効になります。例えば、<code>b::a</code>は、<kbd>Ctrl</kbd>+<kbd>B</kbd>を押すと<kbd>Ctrl</kbd>+<kbd>A</kbd>になる。</li>
  <li><kbd>CapsLock</kbd>は通常、通常のキーと同じようにリマップキーに影響します。</li>
  <li>デスティネーションキーまたはボタンは、オリジンキーを押し続けている間、押し続けられる。ただし、リマッピングに対応していないゲームもあります。その場合、キーボードとマウスはリマッピングされていないものとして動作します。</li>
  <li>リマップされたキーは、押したまま自動リピートされます（マウスボタンにリマップされたキーを除く）。</li>
</ul>
<p id="HookHotkeys">リマップキーは通常のホットキーをトリガーできますが、デフォルトではマウスホットキーや<a href="../lib/_UseHook.htm">フックホットキー</a>をトリガーすることはできません（どのホットキーが「フック」なのかは<a href="../lib/ListHotkeys.htm">ListHotkeys</a>を使って調べてください）。例えば、<code>a::b</code>のリマッピングが有効な場合、<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd>を押すと、<code>^!b</code>がフックホットキーでない場合のみ<code>^!b</code>ホットキーがトリガーされます。<code>^!b</code>がフックホットキーである場合、<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd>で<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>B</kbd>と同じ動作をさせたい場合は、<code>^!a</code>をホットキーとして定義できます。事例：</p>
<pre>a::b
^!a::
^!b::ToolTip "You pressed " ThisHotkey
</pre>
<p>Alternatively, <a href="../lib/_InputLevel.htm">#InputLevel</a> can be used to override the default behaviour. 事例：</p>
<pre>#InputLevel 1
a::b

#InputLevel 0
^!b::ToolTip "You pressed " ThisHotkey
</pre>
<p id="SendPlay"><a href="../Scripts.htm#auto">スクリプト起動</a>時に<a href="../lib/SendMode.htm">SendMode</a>が使用されると、すべてのリマッピングに影響する。しかし、リマッピングは<a href="../lib/Send.htm#blind">Send "{Blind}"</a>を使用し、<a href="../lib/SendMode.htm#Play">SendPlayモードは</a>{Blind}を完全にはサポートしていないため、一部のリマッピングはSendPlayモードでは正しく機能しない可能性があります（特に<kbd>Ctrl</kbd>、<kbd>Shift</kbd>、<kbd>Alt</kbd>、<kbd>Win</kbd>）。これを回避するには、リマッピングがある場合は、<a href="../Scripts.htm#auto">スクリプトの起動</a>時に<code>SendMode "Play"</code>を使用しないようにします。そして、スクリプト中の他の場所で、関数<a href="../lib/Send.htm#SendPlay">SendPlay</a>対Sendを使う。あるいは、リマッピングをホットキーに変換し（後述）、SendEvent対Sendを明示的に呼び出すこともできる。</p>
<p id="EscapeBrace"><em>DestinationKey</em>が <code>{</code>の場合は、<code>x::`{</code>のように<a href="EscapeChar.htm">エスケープ</a>しなければならない。そうでない場合は、<a href="../Hotkeys.htm">ホットキー</a>の機能の開始ブレースとして解釈される。</p>
<p id="actually">スクリプトが起動すると、各リマッピングは<a href="../Hotkeys.htm">ホットキー</a>のペアに変換されます。例えば、<code>a::b</code>を含むスクリプトは、実際には代わりに以下の2つのホットキーを含む：</p>
<pre>*a::
{
    SetKeyDelay -1   <em>; If the destination key is a mouse button, SetMouseDelay is used instead.</em>
    Send "<a href="../lib/Send.htm#blind">{Blind}</a>{b DownR}"  <em>; <a href="../lib/Send.htm#DownR">DownR</a> is like Down except that other Send functions in the script won't assume "b" should stay down during their Send.</em>
}

*a up::
{
    SetKeyDelay -1  <em>; See note below for why press-duration is not specified with either of these SetKeyDelays.</em>
    Send "{Blind}{b Up}"
}</pre>
<p>ただし、上記のホットキーは以下の状況で変化する：</p>
<ol>
  <li>送信元キーが左<kbd>Ctrl</kbd>、送信先キーが<kbd>Alt</kbd>の場合、<code>Send "{Blind}{LAlt DownR}"</code>という行は、<code>Send "{Blind}<strong>{LCtrl up}</strong>{LAlt DownR}"</code>に置き換えられる。ソースが右<kbd>Ctrl</kbd>の場合も、<code>{RCtrl up}</code>が使われる以外は同じである。This is done to ensure that the system translates Alt-key combinations as though <kbd>Ctrl</kbd> is not being held down, but it also causes the remapping to override any prior {Ctrl down}. <span class="ver">[v2.0.8+]</span>: The unsuppressed Ctrl key-up is still sent for backward-compatibility, but is no longer needed for its original purpose. The side effect can be avoided by replacing the remapping with an explicit pair of hotkeys as demonstrated above.</li>
  <li>キーボードのキーがマウスボタンにリマップされる場合（例：<code>RCtrl::RButton</code>）、上記のホットキーはSetKeyDelayの代わりにSetMouseDelayを使用します。さらに、上記の最初のホットキーは以下のように置き換えられ、キーボードのオートリピート機能によるマウスクリックの繰り返しを防ぎます：
    <pre>*RCtrl::
{
    SetMouseDelay -1
    if not GetKeyState("RButton")  <em>; i.e. the right mouse button isn't down yet.</em>
        Send "{Blind}{RButton DownR}"
}</pre>
  </li>
  <li>ソースが<a href="../Hotkeys.htm#combo">カスタムの組み合わせ</a>である場合、ワイルドカード修飾子（*）はホットキーが機能するように省略されます。</li>
  <li>If any of the modifier symbols in <code>!#^+</code> are applied to the source key and not the destination key, they are inserted after the word "Blind" to allow those modifiers to be released by Send. For example, <code>^a::b</code> would use <code>{Blind^}</code>. <code>&lt;^a::b</code> would also use <code>{Blind^}</code>, which may produce unexpected results if used in combination with RCtrl. For details, see <a href="../lib/Send.htm#blind">Blind mode</a>.</li>
</ol>
<p>上記のホットキーでは、SetKeyDelayの2番目のパラメータ（<a href="../lib/SetKeyDelay.htm#dur">押す時間</a>）が省略されていることに注意してください。これは、<code>{b down}</code>や <code>{b up}</code>のような下方向のみ、上方向のみのイベントには、プレス・デュレーションが適用されないからである。ただし、修飾キー（Shift、Ctrl、Alt、Win）の状態の変化には適用され、<code>a::B</code>や <code>a::^b</code>のようなリマッピングに影響する。その結果、<a href="../Scripts.htm#auto">スクリプトの起動</a>時にスクリプトが有効にするプレスデュレーションは、そのような再マッピングすべてに適用される。</p>
<p>リマッピングは前述のようにホットキーに変換されるため、<a href="../lib/Suspend.htm">サスペンド</a>機能はそれらに影響する。同様に、<a href="../lib/Hotkey.htm">ホットキー</a>機能はリマッピングを無効にしたり変更したりすることができる。例えば、以下の2つの関数は<code>a::b</code>のリマッピングを無効にする。</p>
<pre>Hotkey "*a", "Off"
Hotkey "*a up", "Off"</pre>
<p id="AltTab">Alt-tabの問題：キーやマウスボタンを<kbd>Alt</kbd>にリマップした場合、そのキーはおそらくAltタブがうまくできないだろう。可能な回避策は、<code>*Tab::Send "{Blind}{Tab}"</code>というホットキーを追加することです。しかし、これは本物の <kbd>Alt</kbd> を使って alt-tab するのを邪魔する可能性が高いので注意してください。したがって、リマップキーや<a href="../Hotkeys.htm#alttab">alt-tabホットキー</a>のみでalt-tabを行う場合にのみ使用すべきである。</p>
<p>In addition to the keys and mouse buttons on the <a href="../KeyList.htm">Key List</a> page, the source key may also be a virtual key (VKnn) or scan code (SCnnn) as described in the <a href="../KeyList.htm#SpecialKeys">Special Keys</a> section. デスティネーション・キーについても同様であるが、バーチャル・キーの後にスキャン・コードを指定することもできる。例えば、<code>sc01e::vk42sc030</code>は、ほとんどのキーボードレイアウトでは<code>a::b</code>と等価である。</p>
<p>キーをリマップするのではなく、無効にするには、単に<a href="../lib/Return.htm">returns</a>ホットキーにします。例えば、<code>F1::return</code>は <kbd>F1</kbd>を無効にする。</p>
<p>以下のキーは、内蔵リマッピング方式ではサポートされていない：</p>
<ul>
  <li>マウスホイール（WheelUp/Down/Left/Right）。</li>
  <li>デスティネーションキー名として「Pause」（組み込み関数の名前と一致するため）。代わりに<code>vk13</code>または対応するスキャンコードを使用してください。</li>
  <li>中括弧{}をデスティネーション・キーとする。代わりに<a href="../lib/Send.htm#vk">VK/SCメソッド</a>を使用する。例えば、<code>x::+sc01A</code>と<code>y::+sc01B</code>。</li>
</ul>
<h2 id="moving-the-mouse-cursor">キーボードによるマウスカーソルの移動</h2>
<p>キーボードをマウスカーソルの移動に使うことができるのは、フル機能の<a href="../scripts/index.htm#NumpadMouse">Keyboard-To-Mouseスクリプト</a>で実証済みだ。このスクリプトは、スムーズなカーソル移動、加速、その他の機能を提供するので、キーボードでのマウス操作が多い場合は、この方法をお勧めする。対照的に、以下の例はよりシンプルなデモンストレーションである：</p>
<pre>*#up::MouseMove 0, -10, 0, "R"  <em>; Win+UpArrow hotkey =&gt; Move cursor upward</em>
*#Down::MouseMove 0, 10, 0, "R"  <em>; Win+DownArrow =&gt; Move cursor downward</em>
*#Left::MouseMove -10, 0, 0, "R"  <em>; Win+LeftArrow =&gt; Move cursor to the left</em>
*#Right::MouseMove 10, 0, 0, "R"  <em>; Win+RightArrow =&gt; Move cursor to the right</em>

*&lt;#RCtrl::  <em>; LeftWin + RightControl =&gt; Left-click (hold down Control/Shift to Control-Click or Shift-Click).</em>
{
    SendEvent "{Blind}{LButton down}"
    KeyWait "RCtrl"  <em>; Prevents keyboard auto-repeat from repeating the mouse click.</em>
    SendEvent "{Blind}{LButton up}"
}

*&lt;#AppsKey::  <em>; LeftWin + AppsKey =&gt; Right-click</em>
{
    SendEvent "{Blind}{RButton down}"
    KeyWait "AppsKey"  <em>; Prevents keyboard auto-repeat from repeating the mouse click.</em>
    SendEvent "{Blind}{RButton up}"
}</pre>
<h2 id="registry">レジストリの「スキャンコードマップ」によるリマッピング</h2>
<p><strong>メリット：</strong></p>
<ul>
  <li>レジストリの再マッピングは、一般的に<a href="#Remap">AutoHotkeyの再マッピング</a>よりも純粋で効果的です。例えば、より幅広いゲームで動作し、<a href="#AltTab">alt-tabの問題</a>がなく、AutoHotkeyのフックホットキーを使用することができます（AutoHotkeyのリマッピングには<a href="#HookHotkeys">回避策</a>が必要です）。</li>
  <li>レジストリエントリを手動で作成する場合（以下で説明）、キーボードのリマッピングに外部ソフトウェアはまったく必要ありません。<a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a>を使ってレジストリエントリを作成しても、（AutoHotkeyと違って）KeyTweakは常に起動している必要はありません。</li>
</ul>
<p><strong>デメリット：</strong></p>
<ul>
  <li>レジストリの再マッピングは比較的永続的である：変更を元に戻したり、新しい変更を有効にするには再起動が必要です。</li>
  <li>その効果は世界的だ：特定のユーザー、アプリケーション、ロケールに特化したリマッピングを作成することはできません。</li>
  <li><kbd>Shift</kbd>、<kbd>Ctrl</kbd>、<kbd>Alt</kbd>、<kbd>AltGr</kbd>で変更されたキーストロークは送信できない。たとえば、小文字を大文字にリマップすることはできない。</li>
  <li>キーボードのみをサポートしています（AutoHotkeyには<a href="#RemapMouse">マウスリマッピング</a>といくつかの<a href="RemapController.htm">限定的なコントローラリマッピング</a>があります）。</li>
</ul>
<p><strong>レジストリに変更を適用する方法：</strong>レジストリからキーのマッピングを変更するには、少なくとも2つの方法がある：</p>
<ol>
  <li><a href="https://www.bleepingcomputer.com/download/keytweak/">KeyTweak</a>（フリーウェア）のようなプログラムを使って、キーのマッピングを視覚的に変更する。レジストリを変更してくれる。</li>
  <li>.regファイル（プレーンテキスト）を作成し、レジストリにロードすることで、手動でキーを再マップする。これは<a href="https://www.autohotkey.com/board/index.php?showtopic=8359#entry52760">アーカイブされたフォーラム</a>で実証されている。</li>
</ol>
<h2 id="related">関連する話題</h2>
<ul>
  <li><a href="../KeyList.htm">キー、マウスボタン、コントローラーコントロールのリスト</a></li>
  <li><a href="../lib/GetKeyState.htm">GetKeyState</a></li>
  <li><a href="RemapController.htm">コントローラーのリマッピング</a></li>
</ul>
</body>
</html>
