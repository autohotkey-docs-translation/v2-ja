<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>関数オブジェクト - 定義と使用法｜AutoHotkey v2</title>
<meta name="description" content="関数オブジェクトは、実際の関数を表すFuncオブジェクトへの参照か、関数のように呼び出すことができるオブジェクトです。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>機能オブジェクト</h1>

<p>「機能オブジェクト」とは、通常、以下のいずれかを意味する：</p>
<ul>
  <li><a href="../lib/Func.htm">Func</a>または<a href="../Functions.htm#closures">Closure</a>オブジェクトで、実際の<a href="../Functions.htm">関数を</a>表す。</li>
  <li>関数のように呼び出すことができるユーザー定義オブジェクト。これは「ファンクター」とも呼ばれる。</li>
  <li><a href="#BoundFunc">BoundFuncオブジェクトや</a>COMメソッドが返すJavaScript関数オブジェクトなど、関数のように呼び出すことができるその他のオブジェクト。</li>
</ul>
<p>ファンクション・オブジェクトは以下のように使用できる：</p>
<ul>
  <li><a href="../lib/CallbackCreate.htm">CallbackCreate</a></li>
  <li><a href="../lib/GuiOnEvent.htm">Gui events</a></li>
  <li><a href="../lib/For.htm">For ... in</a></li>
  <li><a href="../lib/HotIf.htm">HotIf</a></li>
  <li><a href="../lib/Hotkey.htm">Hotkey</a></li>
  <li><a href="../lib/Hotstring.htm">Hotstring</a></li>
  <li><a href="../lib/InputHook.htm">InputHook</a>（OnEnd、OnChar、OnKeyDown、OnKeyUp）</li>
  <li><a href="../lib/Menu.htm#Add">Menu.Add</a></li>
  <li><a href="../lib/OnClipboardChange.htm">OnClipboardChange</a></li>
  <li><a href="../lib/OnError.htm">OnError</a></li>
  <li><a href="../lib/OnExit.htm">OnExit</a></li>
  <li><a href="../lib/OnMessage.htm">OnMessage</a></li>
  <li><a href="RegExCallout.htm">RegEx callouts</a></li>
  <li><a href="../lib/SetTimer.htm">SetTimer</a></li>
  <li><a href="../lib/Sort.htm">Sort</a></li>
</ul>
<p id="HasCall">オブジェクトが呼び出し可能かどうかを判断するには、以下のいずれかを使用する：</p>
<ul>
  <li><code>Value.HasMethod()</code>は、デフォルトではすべてのAutoHotkeyの値とオブジェクトで動作しますが、一部のオブジェクトやクラスではHasMethodをオーバーライドできます。COMオブジェクトの場合、COMオブジェクトが実際には別のプロセスのAutoHotkeyオブジェクトでない限り、これは通常失敗します（例外をスローするか、間違った結果を生成します）。</li>
  <li><code>HasMethod(Value)</code>は、すべてのAutoHotkeyの値およびオブジェクトで動作し、オーバーライドすることはできませんが、<em>Call</em>メソッドの存在を判断できない場合はfalseを返します。<em>Value</em>が <a href="../lib/ComObject.htm">ComObject</a>の場合は例外がスローされる。</li>
</ul>

<h2 id="User-Defined">User-Defined</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>ユーザー定義関数オブジェクトは、「関数」の実装を含む<em>Call</em>メソッドを定義しなければならない。</p>
<pre>class YourClassName {
    Call(a, b) {  <em>; Declare parameters as needed, or an <a href="../Functions.htm#Variadic">array*</a>.</em>
        <em>;...</em>
        return c
    }
    <em>;...</em>
}
</pre>
<p>これは、<code>YourClassName()</code>が返すオブジェクトなど、<em>YourClassName</em>の<em>インスタンス</em>に適用されます。<code>Call</code>を <code>static Call</code>に置き換えると、代わりに<em>YourClassName</em>自身が呼び出されたときに起こることがオーバーライドされる。</p>
<h3 id="User-Defined-Examples">例</h3>
<p>呼び出されると、配列の各要素を順番に呼び出す。</p>
<pre>class FuncArrayType extends Array {
    Call(params*) {
        <em>; Call a list of functions.</em>
        for fn in this
            fn(params*)
    }
}

<em>; Create an array of functions.</em>
funcArray := FuncArrayType()
<em>; Add some functions to the array (can be done at any point).</em>
funcArray.Push(One)
funcArray.Push(Two)
<em>; Create an object which uses the array as a method.</em>
obj := {method: funcArray}
<em>; Call the method (and consequently both One and Two).</em>
obj.method("2nd")
<em>; Call it as a function.</em>
(obj.method)("1st", "2nd")

One(param1, param2) {
    ListVars
    MsgBox
}
Two(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">BoundFuncオブジェクト</h2>
<p>関数のように動作するが、定義済みのパラメータを別の関数に渡すだけである。</p>
<p>BoundFuncオブジェクトを作成する方法は2つある：</p>
<ul>
  <li><a href="../lib/Func.htm#Bind">Func.Bind</a>メソッドを呼び出すことで、パラメータ値を関数にバインドする。</li>
  <li><a href="../lib/ObjBindMethod.htm">ObjBindMethod</a>関数を呼び出すことで、パラメータ値とメソッド名をターゲット・オブジェクトにバインドする。</li>
</ul>
<p>BoundFuncオブジェクトは、以下の例のように呼び出すことができる。BoundFuncが呼び出されると、バインドされている関数やメソッドが呼び出され、バインドされているパラメータと呼び出し元のパラメータの組み合わせが渡される。未束縛のパラメータ位置は、呼び出し元のパラメータリストから左から右へと割り当てられる。例：</p>
<pre>fn := RealFn.Bind(1)  <em>; Bind first parameter only</em>
fn(2)      <em>; 「1, 2」と表示します</em>
fn.Call(3) <em>; 「1, 3」と表示します</em>

fn := RealFn.Bind( , 1)  <em>; Bind second parameter only</em>
fn(2, 0)   <em>; 「2, 1, 0」と表示します</em>
fn.Call(3) <em>; 「3, 1」と表示します</em>
fn(, 4)    <em>; Error: 'a' was omitted</em>

RealFn(a, b, c?) {
    MsgBox a ", " b (IsSet(c) ? ", " c : "")
}</pre>
<p><a href="../lib/ObjBindMethod.htm">ObjBindMethod</a>は、メソッド自体への参照を取得できない場合でも、メソッドにバインドするために使用できます。例：</p>
<pre>Shell := ComObject("Shell.Application")
RunBox := ObjBindMethod(Shell, "FileRun")
<em>; Show the Run dialog.</em>
RunBox</pre>
<p>より複雑な例については、<a href="../lib/SetTimer.htm#ExampleClass">SetTimer</a>を参照のこと。</p>
<p>その他のプロパティやメソッドは<a href="../lib/Func.htm">Func</a>から継承されるが、対象となる関数やメソッドのプロパティは反映されない（関数として実装する必要はない）。BoundFuncは、以下の<a href="../Variables.htm#fat-arrow">ファット・アロー関数</a>と同様に、他の正式なパラメーターを持たない無名バリアド関数として機能する：</p>
<pre>Func_Bind(fn, bound_args*) {
    return (args*) =&gt; (args.InsertAt(1, bound_args*), fn(args*))
}</pre>

</body>
</html>
