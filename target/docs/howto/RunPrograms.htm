<!DOCTYPE html>
<html lang="en">
<head>
<meta name="description" content="AutoHotkeyでプログラムを実行する方法をご紹介します。" />
<meta name="ahk:equiv-v1" content="Tutorial.htm#s4" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>プログラムの実行方法｜AutoHotkey v2</title>
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>プログラムの実行方法</h1>
<p>AutoHotkeyの最も簡単で便利な機能の1つは、プログラムを起動するキーボードショートカット（ホットキー）を作成することができることです。</p>
<p>プログラムの起動は、<a href="../lib/Run.htm">Run</a>関数を呼び出して、プログラムのコマンドラインを<a href="../Concepts.htm#parameters">パラメータとして</a><a href="../Concepts.htm#pass-parameters">渡す</a>ことで行います。</p>
<pre>Run "C:\Windows\notepad.exe"</pre>
<p>この例では、メモ帳を起動します。試す方法は、「<a href="RunExamples.htm">サンプルコードを実行する方法</a>」を参照してください。</p>
<p>この段階では、ホットキー（言い換えれば、キーボードショートカットの割り当て）を定義していないので、すぐに指示が実行される。この場合、スクリプトは他にすることがないので、自動的に終了します。学習しながら便利なホットキーを作りたい方は、まず「<a href="WriteHotkeys.htm">ホットキーの書き方</a>」をご覧ください。</p>
<p class="note"><strong>注：</strong>「実行」は、ドキュメント、フォルダ、URLを開くためにも使用できます。</p>
<p>他のプログラムを起動する場合は、上記の例のパスを起動したいプログラムのパスに置き換えるだけです。プログラムによってはパスがシステムに登録されているものもあり、その場合は拡張子「.exe」の有無にかかわらず、プログラムのファイル名だけを渡すことで対応できます（場合によっては拡張子「.exe」のないものもあります）。事例:</p>
<pre>Run "notepad"</pre>

<h2>コマンドラインパラメーター</h2>
<p>プログラムがコマンドラインパラメーターを受け付ける場合は、<a href="../lib/Run.htm">Run</a>関数の最初のパラメーターの一部として渡すことができます。以下の例では、license.txtをメモ帳で開いているはずです。</p>
<pre>
Run "notepad C:\Program Files\AutoHotkey\license.txt"
</pre>
<p class="note"><strong>注意：</strong>この例では、AutoHotkeyがデフォルトの場所にインストールされていることを前提としており、そうでない場合はエラーが表示されます。</p>
<p>シンプルでしょう？ここで、メモ帳ではなく、WordPadでファイルを開きたいとします。</p>
<pre>Run "wordpad C:\Program Files\AutoHotkey\license.txt"</pre>
<p>このコードを実行し、その結果から何を学ぶことができるかを確認します。</p>
<p>なるほど、新しいコードは動かないんですね。エラーダイアログは、コーディングの過程では当たり前のことであり、非常に有用な情報が含まれていることが多いからです。この一枚で、いくつかのことがわかるはずだ。</p>
<ul>
  <li>まず、当たり前のことですが。と表示され、プログラムが起動できませんでした。</li>
  <li>ダイアログには「Action」と「Params」が表示されていますが、「Action」の横には私たちのコマンドライン全体が表示され、「Params」は空になっています。つまり、Run関数は、プログラム名の終わりとパラメータの始まりを知らないのです。</li>
  <li>"システムは指定されたファイルを見つけることができません"（英語版システムにおいて）。おそらく、システムは「wordpad」を見つけられなかったのでしょうが、本当に言っているのは、「wordpad C:・・・」というようなファイルが存在しない、ということなのでしょう。</li>
</ul>
<p>しかし、なぜメモ帳が使えたのでしょうか？notepad」と「wordpad」のどちらかを単独で実行しても動作しますが、その理由は異なります。wordpad.exeはnotepad.exeと異なり、環境変数PATHに記載されている各ディレクトリを確認しても見つけることができない。別の方法で探すことも可能で、その場合はRun関数でプログラム名とパラメータを分離する必要があります。</p>
<p>そこで、この場合、Run関数には、次のような形で、ちょっとした手助けが必要です。</p>
<ul>
  <li>明示的に拡張子「.exe」を使用する。</li>
  <li>wordpad.exeのフルパスを明示的に使用する。</li>
  <li>番組名を引用符で囲んでください。</li>
</ul>
<p>とりあえず、一番簡単な選択肢を選んでください。</p>
<pre>Run "wordpad.exe C:\Program Files\AutoHotkey\license.txt"</pre>
<p>これでWordPadは起動するのですが、エラーが表示されます。"C:㊙プログラム "は見つかりませんでした。</p>

<h2>引用符とスペース</h2>
<p>コマンドラインパラメーターをプログラムに渡す際、パラメーターにスペースが含まれている場合、各パラメーターを引用符で囲む必要があることがよくあります。これはメモ帳では必要なかったのですが、メモ帳は一般的な例外です。単純に引用符を増やせばいいという安直な発想で解決できるかもしれません。</p>
<pre>Run "wordpad.exe "C:\Program Files\AutoHotkey\license.txt""</pre>
<p>しかし、デフォルトでは、リテラルテキストの開始と終了を示すために引用符が使用されるため、これは機能しません。では、コマンドラインを終了させるのではなく、コマンドライン内にリテラルな引用符を入れるにはどうすればよいのでしょうか。</p>
<p><strong>方法1：</strong>各リテラルの引用符の前に<code>`（</code>バックティック、バッククオート、グレイブアクセント）を付ける。これを<a href="../misc/EscapeChar.htm">エスケープシーケンスと</a>呼びます。このとき、引用符はコマンドライン（Run関数に渡される文字列）に含まれ、バックティックはその目的を果たした後、省かれる。</p>
<pre>Run "wordpad.exe `"C:\Program Files\AutoHotkey\license.txt`""</pre>
<p><strong>方法2：</strong>コマンドラインをダブルクォーテーションではなく、シングルクォーテーションで囲む。</p>
<pre>Run 'wordpad.exe "C:\Program Files\AutoHotkey\license.txt"'</pre>
<p>もちろん、その場合、テキスト中の<em>文字通りの</em>シングルクォート（またはアポストロフィー）はエスケープ<code>（`'</code>）する必要があります。</p>
<p>コードの書き方によって、どの引用符が実際に実行機能で処理されるかが変わります。上の2つの例では、Run関数が<code>wordpad.exe "C:\Program FilesAutoHotkey@license.txt"</code>という文字列を受け取っています。Run機能は、これを<em>プログラム名と</em> <em>パラメータ</em>（それ以外のすべて）に分割するか、システムに委ねるかのどちらかです。いずれの場合も、残りの引用符がどのように解釈されるかは、ターゲットとなるプログラムに完全に依存します。</p>
<p>多くのプログラムでは、引用符の前にバックスラッシュがある場合、パラメータの一部として扱います。例えば、<code>「my.exe "A"」を実行</code>します。<code>B'</code>は、2つのパラメータの代わりに、値<code>A" Bを</code>持つパラメータを生成するかもしれません。これはプログラム次第で、通常、<code>Run 'my.exe "A"</code>のようにバックスラッシュを2重にすることで回避することが可能です。<code>B'</code>、これは通常2つのパラメータ<code>（A</code>、<code>B</code>）を生成する。</p>
<p>ほとんどのプログラムは、引用符を一種のトグルとして解釈し、「スペースはパラメーターを終了する」と「スペースはパラメーターに含まれる」の間でモードを切り替えます。つまり、<code>Run 'my.exe "A B"'</code>は一般的に<code>Run 'my.exe A" "B'</code>と同等ですそこで、スラッシュの問題を回避する別の方法として、<code>Run 'my.exe "A" \B'</code>のように、パラメータ全体ではなく<em>スペースを</em>引用するか、スラッシュの前で引用を終了します。</p>

<h2>変数を含む</h2>
<p>コマンドラインには、しばしばいくつかの<a href="../Concepts.htm#variables">変数を</a>含める必要があります。例えば、「Program Files」ディレクトリの場所はシステムによって異なることがあり、スクリプトは<a href="../Variables.htm#ProgramFiles">A_ProgramFiles</a>変数を使用することでこれを考慮することができます。変数にコマンドライン全体が含まれている場合は、その変数をRun関数に渡すだけで実行できます。</p>
<pre>Run A_ComSpec<em>; コマンドプロンプト（ほとんどの場合cmd.exe）を起動します。</em>
Run A_MyDocuments<em>; ユーザーの「Documents」フォルダを開く。</em></pre>
<p>引用符で囲まれた文字列の<em>中に</em>変数を入れてもうまくいかないので、代わりに<a href="../Variables.htm#concat">連結を使って</a>リテラル文字列と変数を連結する。事例:</p>
<pre>Run 'notepad.exe "' A_MyDocuments '\AutoHotkey.ahk"'</pre>
<p>また、<a href="../lib/Format.htm">Formatを</a>使用して置換を行う方法もあります。事例:</p>
<pre>Run Format('notepad.exe "{1}\AutoHotkey.ahk"', A_MyDocuments)</pre>
<p class="note"><strong>注：</strong>Formatは、0やスペースによるパディングや、数値を10進数ではなく16進数でフォーマットするなど、追加のフォーマットを同時に実行することができます。</p>

<h2>実行時パラメータ</h2>
<p>実行するコマンドラインの他に、Run関数はその動作に影響を与えるいくつかの<a href="../Concepts.htm#parameters">パラメータを</a>受け付けます。</p>
<p><em>WorkingDir</em>は、新しいプロセスの作業ディレクトリを指定します。プログラムに相対パスを指定した場合は、このディレクトリからの相対パスとなります。コマンドラインパラメータの相対パスもこのディレクトリからの相対パスであることが多いが、それはプログラムによって異なる。</p>
<pre>Run "cmd", "C:\"<em>; コマンドプロンプトをC:³³に開きます。</em></pre>
<p><em>オプションは</em>、プログラムを画面にポップアップさせるのではなく、最小化または非表示にして実行するために使用できることが多いですが、プログラムによっては無視されることもあります。</p>
<p><em>OutputVarPIDは</em>プロセスIDを与えるもので、<a href="../lib/WinWait.htm">WinWaitや</a> <a href="../lib/WinWaitActive.htm">WinWaitActive</a>、<a href="../misc/WinTitle.htm#ahk_pid">ahk_pidとともに</a>、プログラムが画面にウィンドウを表示するまで待つ、あるいはそのウィンドウの一つを特定するためによく使われる。事例:</p>
<pre>Run "notepad",,, &amp;pid
WinWaitActive "ahk_pid " pid
SendText "Hello, world!"</pre>

<h2>システム動詞</h2>
<p><a href="../lib/Run.htm#verbs">システム動詞とは</a>、システムやアプリケーションが特定のファイルタイプに対して登録するアクションのことです。これらは通常、エクスプローラーのファイルの右クリックメニューで利用できますが、実際の名前はメニューに表示されるテキストと必ずしも一致しません。例えば、AutoHotkeyスクリプトには、スクリプトをエディタで開く「edit」動詞と、（Ahk2Exeがインストールされていれば）スクリプトを<a href="../Scripts.htm#ahk2exe">コンパイル</a>する「compile」動詞があります。</p>
<p>"Edit "は、Runがデフォルトで認識する一般的な動詞のリストの1つで、次のように、単語の後にスペースとファイル名を書くだけで使用することができます。</p>
<pre>Run 'edit ' A_ScriptFullPath<em>; 一般的に<a href="../lib/Edit.htm">Editに</a>相当する。</em></pre>
<p>システムに登録されている動詞は、以下のように*接頭辞をつけることで実行することができます。</p>
<pre>Run '*Compile-Gui ' A_ScriptFullPath</pre>
<p>Ahk2Exeがインストールされている場合、現在のスクリプトがあらかじめ選択された状態でAhk2Exe Guiが開かれます。</p>

<h2>環境</h2>
<p>新しいプロセスが起動すると、一般的にそのプロセスを起動したプロセス（<em>親プロセス</em>）の<em>環境を</em>引き継ぎます。これは基本的に、スクリプトの<a href="../Concepts.htm#environment-variables">環境変数が</a>すべて、<a href="../lib/Run.htm">Runで</a>起動したプログラムに継承されることを意味します。</p>
<p>場合によっては、プログラムを起動する前に<a href="../lib/EnvSet.htm">EnvSetで</a>環境変数を設定し、プログラムの動作に影響を与えたり、情報を渡したりすることができます。また、スクリプトは<a href="../lib/EnvGet.htm">EnvGetを</a>使用して、親プロセスから継承した環境変数を読み込むことができます。</p>
<p>64ビットシステムでは、スクリプトを実行するEXEが32ビットか64ビットかに応じて、スクリプト自身の環境が大きく変化します。32ビットプロセスは、環境変数が異なるだけでなく、互換性のために<a href="https://learn.microsoft.com/windows/win32/winprog64/file-system-redirector">ファイルシステムのリダイレクトが</a>行われている。</p>
<pre>Run "cmd /k set pro"</pre>
<p>上の例では、"pro "で始まるすべての環境変数を表示するコマンドプロンプトを表示しています。32ビットスクリプトから実行した場合、<code>PROCESSOR_ARCHITECTURE=x86</code>、<code>ProgramFiles=C:˶Program Files (x86</code>) と表示されると思います。タイトルは「C:㊦WindowsSystem32」ですが、これは嘘で、本当は「C:㊦WindowsSysWow64cmd.exe」にある32ビット版なのです。</p>
<p>このような単純なケースでは、「System32」のリダイレクトを回避する最も簡単な方法は、代わりに「SysNative」を使用することです。ただし、これは64ビットシステム上の32ビットプロセスからしか動作しないので、条件付きで行う必要があります。以下の例を64ビットシステムで実行すると、スクリプトが32ビットであっても、64ビットのコマンドプロンプトが表示されます。</p>
<pre>if FileExist(A_WinDir "\SysNative")
    Run A_WinDir "\SysNative\cmd.exe /k set pro"
else
    Run "cmd /k set pro"</pre>

</body>
</html>
