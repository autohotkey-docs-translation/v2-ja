<!DOCTYPE html>
<html lang="ja">
<head>
<meta name="description" content="AutoHotkeyでキーストロークやテキストを送信する方法についてご紹介します。" />
<meta name="ahk:equiv-v1" content="Tutorial.htm#s3" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>キーストロークの送信方法｜AutoHotkey v2</title>
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>キーストロークの送信方法</h1>
<pre>Send "Hello, world{!}{Left}^+{Left}"</pre>
<p>キーストローク（略してキー）の送信は、最も一般的に機能するため、プログラムを自動化する方法として最も一般的です。より直接的な方法は、特定のタイプのアプリにのみ有効な傾向があります。</p>
<p>鍵の送り方を学ぶには、大きく分けて2つのパートがあります。</p>
<ol>
  <li>どのキーを送りたいのか、プログラムがわかるようにコードを書く方法。</li>
  <li>正しい結果を得るために、利用可能なモードやオプションをどのように使用するか。</li>
</ol>
<p>キーを送信することで、人間の速度まで遅くしても、物理的にキーを押す行為が完全に再現されるわけではないことを理解しておく必要があります。しかし、その前に、いくつかの基本的なことを説明します。</p>

<h2 id="Trying_the_examples">例題の試用</h2>
<p><code>SendText "Hi!"</code>のような例を実行すると、テキストはアクティブ（フォーカス）なウィンドウに即座に送信されるので、例の実行方法によってはあまり役に立たないかもしれません。通常は、ホットキーを定義し、サンプルを実行してロードし、その効果を試したいときにホットキーを押すのがよいでしょう。以下のいくつかの例では、<code>^1::</code>（<kbd>Ctrl</kbd>と数字、重複がなければ一度に複数の例を試すことができます）のような番号付きのホットキーを使用しますが、あなたの好みに合わせて変更することができます。</p>
<p>ホットキーのカスタマイズや独自に作成する方法については、「<a href="WriteHotkeys.htm">ホットキーの書き方</a>」を参照してください。</p>
<p>例題を試す方法がわからない場合は、「<a href="RunExamples.htm">例題コードを実行する方法</a>」をご覧ください。</p>

<h2 id="How_to_write_the_code">コードの書き方</h2>
<p>キーを送信する場合、一般的には、キーまたはキーの組み合わせを送信してその効果を得るか（クリップボードにコピーする<kbd>Ctrl</kbd>+<kbd>C</kbd>のような）、何らかのテキストを入力することになります。:文字入力の方が簡単なので、まずはそこから。<a href="../lib/Send.htm">SendText</a>関数を呼び出し、送信したいテキストを正確に<a href="../Concepts.htm#pass-parameters">渡すだけ</a>です。</p>
<pre>^1::SendText "To Whom It May Concern"</pre>
<p>技術的には、SendTextは実際にはキーストロークではなく、Unicodeの文字パケットを送信するため、<kbd>Shift</kbd>+<kbd>2</kbd> or <kbd>AltGr</kbd>+<kbd>a</kbd>のようなキーコンビネーションで通常入力される文字に対してより信頼性が高くなります。</p>

<h3 id="Rules_of_quoted_strings">引用符で囲まれた文字列のルール</h3>
<p>SendTextは、テキストをそのまま送信しますが、<a href="../Language.htm">言語</a>のルールに注意してください。例えば、<a href="../Language.htm#strings">リテラルテキスト</a>は引用符（ダブル<code>"</code>またはシングル<code>'</code>」）で囲む必要があり、引用符そのものはSendText関数には「見えない」のです。文字通りの引用符を送るには、逆のタイプの引用符で囲むとよいでしょう。事例：</p>
<pre>^2::SendText 'Quote marks are also known as "quotes".'</pre>
<p>または、<a href="../misc/EscapeChar.htm">エスケープシーケンス</a>を使用します。引用符で囲まれた文字列の中では、<code>`"</code>はリテラル<code>"</code>に、<code>`'</code>はリテラル<code>'</code>に変換されます。事例：</p>
<pre>^3::{
    SendText "Double quote (`")"
    SendText 'Single quote (`')'
}</pre>
<p>引用符を交互に並べることも可能です。</p>
<pre>^4::SendText 'Double (") and' . " single (') quote"</pre>
<p>2つの文字列は、SendText関数に渡される前に結合（<a href="../Variables.htm#concat">連結</a>）されます。ドット(<code>.</code>)は省略可能ですが、その場合、一方が終わり、他方が始まるのがわかりづらくなります。</p>
<p>上で見たように、エスケープ文字<code>`（</code> <em>backquote</em>、<em>backtick</em>、<em>grave accent</em>などの名前で知られている）には特別な意味があるので、その文字を文字通り送りたい（または対応するキーを送りたい）場合は、 <code>Send "``"</code> ように二重にする必要があります。その他によく使われるエスケープシーケンスとして、改行（Enter）を表す<code>`n</code>、タブを表す<code>`t</code>があります。詳しくは「<a href="../misc/EscapeChar.htm">エスケープシーケンス</a>」をご覧ください。</p>

<h3 id="Sending_keys_and_key_combinations">キーとキーの組み合わせの送信</h3>
<p><a href="../lib/Send.htm">SendTextは</a>テキストをそのまま送信するのに適していますが、<kbd>Left</kbd>や <kbd>Home</kbd>のようなテキストを生成しないキーは送信できません。<a href="../lib/Send.htm">Send</a>、<a href="../lib/Send.htm">SendInput</a>、<a href="../lib/Send.htm">SendPlay</a>、<a href="../lib/Send.htm">SendEvent</a>、<a href="../lib/ControlSend.htm">ControlSend</a>は、テキストとキーの組み合わせ、またはテキストを生成しないキーの両方を送信できます。そのために、次のようなシンボルに特別な意味を持たせている。<code>^!+#{}</code></p>
<p>最初の4つの記号は、標準的な修飾キーであるCtrl (<code>^</code>), Alt (<code>!</code>), Shift (<code>+</code>) and Win (<code>#</code>)に対応していますこれらは組み合わせて使うことができますが、それ以外は次のキーにしか影響しません。</p>
<p>キーを名前で送る場合、または上記の記号のいずれかを文字どおり送る場合は、中括弧で囲んでください。事例：</p>
<ul>
  <li><code>^+{Left}</code>は<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Left</kbd>です。</li>
  <li><code>^{+}{Left}</code>は<kbd>Ctrl</kbd>+<kbd>+</kbd>の後に<kbd>Left</kbd>が続きます。</li>
  <li><code>^+Left</code>は<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>L</kbd>の後に<code>eft</code>の文字が続きます。</li>
</ul>
<p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>"</kbd>を押すと、次の例では2つの引用符が送られ、挿入点が左に移動して引用符の内側を入力できる状態になります。</p>
<!-- span works around a highlighter bug (4/12/22) -->
<pre><span class="no-highlight">^+"</span>::Send '""{Left}'</pre>
<p>Sendは、<code>^!+#{}</code>以外の任意の1文字について、それを対応するキーの組み合わせに変換し、その組み合わせを押したり離したりします。例えば、<code>Send "aB"</code>は、<kbd>A</kbd>を押して離し、<kbd>Shift</kbd>+<kbd>B</kbd>を押して離します。同様に、中括弧で囲まれたキー名は、デフォルトで押したり離したりされます。例えば、<code>Send "{Ctrl}a"</code>を実行すると、<kbd>Ctrl</kbd>を押したまま離し、<kbd>A</kbd>を押したまま離すことになり、おそらく望むところではありません。</p>
<p>キーを押す（押し続ける）、または離すだけなら、キー名を中括弧で囲み、その後にスペースを入れ、"down"または"up"という言葉を入れます。次の例では、<kbd>Ctrl</kbd>+<kbd>CapsLock</kbd>が <kbd>Shift</kbd>のトグルとして機能するようにします。</p>
<pre>*^CapsLock::{
    if GetKeyState("Shift")
        Send "{Shift up}"
    else
        Send "{Shift down}"
}</pre>

<h3 id="Hotkeys_vs_Send">ホットキーと送信の比較</h3>
<p class="warning"><strong>警告：</strong>ホットキーと送信には、注意しなければならない違いがあります。</p>
<p><a href="../Hotkeys.htm">ホットキー</a>も、記号<code>^!+#</code>と同じキー名を使用しますが、いくつかの重要な違いがあります。</p>
<ul>
  <li>その他のホットキー修飾記号は、Sendではサポートされていません。例えば、<code>&gt;^a::</code>は<kbd>RCtrl</kbd>+<kbd>A</kbd>に対応しますが、この組み合わせを送信するには、<code>Send "{RCtrl down}a{RCtrl up}"</code>のように、キー名をフルスペルで記述する必要があります。</li>
  <li>キー名は、ホットキー内では中括弧で囲むことはありませんが、Sendでは必ず中括弧で囲む必要があります（1文字より長い場合）。</li>
  <li>送信は大文字と小文字を区別します。例えば、<code>Send "^A"</code>、<kbd>Ctrl</kbd>と <em>大文字</em>の"a"の組み合わせになるので、<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd>で送信します。これに対して、<code>^a::</code>と<code>^A::</code>は等価です。</li>
</ul>
<p>これは、Sendが複数の目的を果たすのに対し、ホットキーはキーの組み合わせに最適化されているためです。</p>
<p>なお、<a href="../Hotstrings.htm">ホットストリング</a>はテキスト入力の検出専用なので、ホットストリングトリガーのテキスト内では、記号<code>^!+#{}</code>は特別な意味を持ちません。ただし、ホットストリングの<em>置換</em>テキストは、Sendと同じ構文を使用します（<a href="../Hotstrings.htm#T">Tオプション</a>を使用した場合を除く）。以下のホットストリングがアクティブな状態で "{" を入力すると、"}"を送信し、さらに<kbd>左</kbd>で挿入点を中括弧の間に戻す。</p>
<pre>:*?B0:{::{}}{Left}</pre>

<h3 id="Blind_mode">ブラインドモード</h3>
<p>通常、Sendは、物理的に押している修飾キーが、送信を要求しているキーと組み合わされてはいけないと仮定しています。例えば、<kbd>Ctrl</kbd>を押しながら<code>Send "Hi"</code>を呼ぶと、Sendは"Hi"を送信する前に<kbd>Ctrl</kbd>を自動的に離し、送信後にCtrlを押し戻すようにします。</p>
<p>あるキーを、以前に押したり送ったりした他のモディファイアと組み合わせて送りたいことがあります。そのためには、接頭辞として<code>{Blind}</code>を使用することができます。以下の例を実行しながら、空でないテキストエディターや入力フィールドにフォーカスし、<kbd>Ctrl</kbd>または<kbd>Ctrl</kbd>+<kbd>Shift</kbd>を押したまま、<kbd>1</kbd>または<kbd>2</kbd>を押してみてください。</p>
<pre>*^1::Send "{Blind}{Home}"
*^2::Send "{Blind}{End}"</pre>
<p><code>{Blind}</code>については、「<a href="../lib/Send.htm#Blind">ブラインドモード</a>」を参照してください。</p>

<h3 id="Others">その他</h3>
<p>Sendは、他にもいくつかの特殊な構成要素をサポートしています。</p>
<ul>
  <li><code>{U+00B5}</code>Unicodeの文字を序列値（文字コード）で送信します。</li>
  <li><code>{ASC 0181}</code>Alt+Numpad のシーケンスを送信します。</li>
  <li><code class="no-highlight">{Click <i>Options</i>}</code> マウスをクリックしたり動かしたりします。</li>
</ul>
<p>全リストは、「<a href="../lib/Send.htm#keynames">主要な名称</a>」をご覧ください。</p>

<h2 id="Modes_and_options">モードとオプション</h2>
<p>キーを送信しても、物理的にキーを押すという行為を完全に再現することはできません。OSでは、キーを送信する方法がいくつか用意されており、それぞれに注意点があります。時には、望む結果を得るために、さまざまな方法を試すだけでなく、タイミングを微調整することも必要です。</p>
<p><a href="../lib/Send.htm#Send_variants">主なメソッド</a>は、SendInput、SendEvent、SendPlayです。一般的にSendInputが最も信頼性が高いので、デフォルトではSendはSendInputと同義です。<a href="../lib/SendMode.htm">SendMode</a>を使用することで、SendをSendEventまたはSendPlayと同義にすることができます。ドキュメントには<a href="../lib/Send.htm#SendInputDetail">SendInput</a>と <a href="../lib/Send.htm#SendPlayDetail">SendPlay</a>の他の長所と短所が長々と書かれていますが、SendInputで問題があったときにSendEventやSendPlayを試してみるだけでもいいと思います。</p>
<p class="warning"><strong>警告：</strong>SendPlayは、<a href="../Program.htm#Installer_uiAccess">UIアクセスで実行</a>しない限り、最新のシステムで動作しない傾向があります。</p>
<p>また、<a href="../lib/ControlSend.htm">ControlSend</a>も試してみる価値のあるオプションです。これは、キー操作を送信する公式な方法を使わず、指定したウィンドウに直接メッセージを送信します。主な利点は、これらのメッセージを受信するためにウィンドウが通常アクティブである必要がないことです。しかし、システムによるキーボード入力の通常処理をバイパスするため、うまくいかないこともあります。</p>

<h3 id="Timing_and_delays">タイミングと遅延</h3>
<p>人並み以上の速さでキー入力の洪水を送っても大丈夫な場合もあれば、そうでない場合もあります。ディレイが必要になる場面は、一般的に2つあると思います。</p>
<ul>
  <li>キープレスは、ターゲットアプリ内で何らかの変化（新しいコントロールやウィンドウの表示など）を引き起こすものであり、その前に別のキープレスを送信すると、間違った効果をもたらします。</li>
  <li>キーストロークの急激な流れにアプリがついていけず、すべてをスローダウンさせる必要があります。</li>
</ul>
<p>最初の場合は、「Send」→「<a href="../lib/Sleep.htm">Sleep</a>」→「Send」と呼び出すだけでよいです。</p>
<p><a href="../lib/SetKeyDelay.htm">SetKeyDelay</a> 2番目のケースに存在します。この機能は、各キーストロークの間に実行される遅延と、キーストロークの持続時間（つまり、キーを押してから離すまでの遅延）を設定できます。</p>
<pre>^1::{
    SetKeyDelay 75, 25  <em>; キー間75ms、ダウン/アップ間25ms。</em>
    SendEvent "You should see the keys{bs 4}text appear gradually."
}</pre>
<p class="warning"><strong>警告：</strong>SendInputは、キー遅延をサポートしておらず、デフォルトのSendもサポートしていません。</p>
<p>SetKeyDelayを有効にするためには、一般的に<code>SendMode "Event"</code>を使用するか、SendやSendTextの代わりにSendEvent、SendPlay、ControlSendを呼ぶ必要があります。</p>

<h2 id="Sending_a_lot_of_text">テキストを大量に送信する</h2>
<p>複数行の文章を送る方法として、<a href="../Scripts.htm#continuation-section">継続部分</a>を利用する方法があります。</p>
<pre>SendText "
(
    先頭のインデントが取り除かれます。
    を1行目としています。
改行が保持されます
    "Join"オプションを使用しない限り。
)"</pre>
<p>一般的にかなり高速ですが、SendTextはまだ各文字を一度に送信する必要があり、Sendは一般的に少なくとも2倍のメッセージ（<em>キーダウン・キーアップ</em>）を送信する必要があります。そのため、大量のテキストを送信する際には、顕著な遅延が発生します。また、遅延が長くなると、ユーザーの入力と衝突したり、キーボードのフォーカスがずれたり、その他の条件が変化するリスクが高くなるため、信頼性が低くなる可能性があります。</p>
<p>一般的には、クリップボードにテキストを置き、それを<em>貼り付ける</em>方が、より速く、より確実です。事例：</p>
<pre>^1::{
    old_clip := ClipboardAll()  <em>; クリップボードの内容をすべて保存する</em>
    A_Clipboard := "
    (Join`s
        このテキストは、クリップボードに置かれます。
        で、Ctrl+Vを送ると下に貼り付けられます。
)"
    Send "^v"
    Sleep 500  <em>; Ctrl+V が処理されるまで少し待つ。</em>
    A_Clipboard := old_clip  <em>; 以前のクリップボードの内容を復元する</em>
}</pre>

</body>
</html>
