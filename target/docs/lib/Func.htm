<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Func Object - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="Func オブジェクトは、関数がパラメータの数などの値を取得したり、呼び出しなどのアクションを実行するためのインターフェイスを提供します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Func Object</h1>
<pre class="NoIndent">class Func extends Object</pre>

<p>ユーザー定義関数または組込み関数を表します。</p>
<p>関数のように呼び出すことができる他のオブジェクトについては、<a href="../misc/Functor.htm">関数オブジェクト</a>を参照してください。</p>
<p><code>Closure</code>クラスは<code>Funcを</code>拡張していますが、新しいプロパティは定義していません。</p>

<p>スクリプト内の各組込み関数または関数定義に対して、Funcオブジェクトを含む対応する読み取り専用変数が存在します。この変数は、関数を呼び出すために直接使われますが、その値を読み込むことで、関数そのものを、値として取り出すこともできます。事例：</p>
<pre>InspectFn StrLen
InspectFn InspectFn

InspectFn(fn)
{
    <em>; Display information about the passed function.</em>
    MsgBox fn.Name "() is " (fn.IsBuiltIn ? "built-in." : "user-defined.")
}
</pre>
<p>"Func "はクラスそのものなので、"FuncObj"は、任意のFuncオブジェクトのプレースホルダーとして以下使用します。</p>
<p>Funcオブジェクトは、<a href="Object.htm">Object</a>から継承されたメソッドとプロパティに加え、以下の定義済みのメソッドとプロパティを持ちます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Call">Call</a>:関数を呼び出します。</li>
      <li><a href="#Bind">Bind</a>:パラメータを関数にバインドし、<a href="../misc/Functor.htm#BoundFunc">BoundFuncオブジェクト</a>を返す。</li>
      <li><a href="#IsByRef">IsByRef</a>:パラメータがByRefであるかどうかを判定します。</li>
      <li><a href="#IsOptional">IsOptional</a>:パラメータがオプションであるかどうかを判定します。</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#Name">Name</a>:関数の名前を返します。</li>
      <li><a href="#IsBuiltIn">IsBuiltIn</a>:関数が<a href="../Functions.htm#BuiltIn">内蔵</a>されている場合は<i>true</i>、そうでない場合は<i>false</i>を返します。</li>
      <li><a href="#IsVariadic">IsVariadic</a>:関数が<a href="../Functions.htm#Variadic">variadic</a>であれば<i>true</i>を、そうでなければ<i>false</i>を返します。</li>
      <li><a href="#MinParams">MinParams</a>:必要なパラメータの数を返します。</li>
      <li><a href="#MaxParams">MaxParams</a>:ユーザー定義関数の場合は正式に宣言されたパラメータの数、組み込み関数の場合は最大パラメータ数を返します。</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">メソッド</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>関数を呼び出します。</p>
<pre class="Syntax">FuncObj(Param1, Param2, ...)
FuncObj.<span class="func">Call</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>パラメータと戻り値は、関数で定義されます。</dd>
</dl>
<p>Call」メソッドは、値を呼び出す際に暗黙の了解となっているため、明示的に指定する必要はない。</p>
</div>

<div class="methodShort" id="Bind"><h3>Bind</h3>
<p>パラメータを関数にバインドし、<a href="../misc/Functor.htm#BoundFunc">BoundFuncオブジェクト</a>を返す。</p>
<pre class="Syntax">BoundFunc := FuncObj.<span class="func">Bind</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>パラメータの数は問いません。</dd>
</dl>
<p>詳細および例については、<a href="../misc/Functor.htm#BoundFunc">BoundFunc オブジェクト</a>を参照してください。</p>
</div>

<div class="methodShort" id="IsByRef"><h3>IsByRef</h3>
<p>パラメータがByRefであるかどうかを判定します。</p>
<pre class="Syntax">Boolean := FuncObj.<span class="func">IsByRef</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>オプショナル：パラメータの1ベースインデックス。省略された場合、<em>Boolean</em>は、関数が ByRef パラメータを持つかどうかを示します。</p>
  </dd>
</dl>
<p>パラメータが ByRef であるかどうかを示す boolean 値を返す。<em>ParamIndex</em>が無効な場合は、例外が発生します。</p>
</div>

<div class="methodShort" id="IsOptional"><h3>IsOptional</h3>
<p>パラメータがオプションであるかどうかを判定します。</p>
<pre class="Syntax">Boolean := FuncObj.<span class="func">IsOptional</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>オプショナル：パラメータの1ベースインデックス。省略された場合、<em>Boolean</em>は、関数が任意のパラメータを持つかどうかを示します。</p>
  </dd>
</dl>
<p>パラメータがオプションであるか否かを示すブール値を返します。<em>ParamIndex</em>が無効な場合は、例外が発生します。</p>
<p>関数が変種である場合、パラメータを正式に宣言する必要はありません。組込機能に対応しています。</p></div>

<h2 id="Properties">属性</h2>

<div class="methodShort" id="Name"><h3>名前</h3>
<p>関数の名前を返します。</p>
<pre class="Syntax">FunctionName := FuncObj.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h3>IsBuiltIn</h3>
<p>関数が<a href="../Functions.htm#BuiltIn">内蔵</a>されている場合は<i>true</i>、そうでない場合は<i>false</i>を返します。</p>
<pre class="Syntax">Boolean := FuncObj.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h3>IsVariadic</h3>
<p>関数が<a href="../Functions.htm#Variadic">variadic</a>であれば<i>true</i>を、そうでなければ<i>false</i>を返します。</p>
<pre class="Syntax">Boolean := FuncObj.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h3>MinParams</h3>
<p>必要なパラメータの数を返します。</p>
<pre class="Syntax">ParamCount := FuncObj.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h3>MaxParams</h3>
<p>ユーザー定義関数の場合は正式に宣言されたパラメータの数、組み込み関数の場合は最大パラメータ数を返します。</p>
<pre class="Syntax">ParamCount := FuncObj.MaxParams</pre>
<p>関数が<a href="../Functions.htm#Variadic">variadic</a>の場合、<em>ParamCount</em>は"variadic*"パラメータに溢れることなく関数が受け入れることができるパラメータの最大数を示します。</p></div>

</body>
</html>
