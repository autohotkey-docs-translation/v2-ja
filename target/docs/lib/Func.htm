<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Func Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="The Func object provides an interface for a function to retrieve values, such as the number of parameters, or to perform actions, such as calling." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Func Object</h1>
<pre class="NoIndent">class Func extends Object</pre>

<p>Represents a user-defined or built-in function.</p>
<p>For information about other objects which can be called like functions, see <a href="../misc/Functor.htm">Function Objects</a>.</p>
<p>The <code>Closure</code> class extends <code>Func</code> but does not define any new properties.</p>

<p>For each built-in function or function definition within the script, there is a corresponding read-only variable containing a Func object. This variable is directly used to call the function, but its value can also be read to retrieve the function itself, as a value. 事例:</p>
<pre>InspectFn StrLen
InspectFn InspectFn

InspectFn(fn)
{
    <em>; Display information about the passed function.</em>
    MsgBox fn.Name "() is " (fn.IsBuiltIn ? "built-in." : "user-defined.")
}
</pre>
<p>"FuncObj" is used below as a placeholder for any Func object, as "Func" is the class itself.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, Func objects have the following predefined methods and properties.</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#Methods">Methods</a>:
    
    <ul>
      <li><a href="#Call">Call</a>: Calls the function.</li>
      <li><a href="#Bind">Bind</a>: Binds parameters to the function and returns a <a href="../misc/Functor.htm#BoundFunc">BoundFunc object</a>.</li>
      <li><a href="#IsByRef">IsByRef</a>: Determines whether a parameter is ByRef.</li>
      <li><a href="#IsOptional">IsOptional</a>: Determines whether a parameter is optional.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    
    <ul>
      <li><a href="#Name">Name</a>: Returns the function's name.</li>
      <li><a href="#IsBuiltIn">IsBuiltIn</a>: Returns <i>true</i> if the function is <a href="../Functions.htm#BuiltIn">built-in</a> and <i>false</i> otherwise.</li>
      <li><a href="#IsVariadic">IsVariadic</a>: Returns <i>true</i> if the function is <a href="../Functions.htm#Variadic">variadic</a> and <i>false</i> otherwise.</li>
      <li><a href="#MinParams">MinParams</a>: Returns the number of required parameters.</li>
      <li><a href="#MaxParams">MaxParams</a>: Returns the number of formally-declared parameters for a user-defined function or maximum parameters for a built-in function.</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">メソッド</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>Calls the function.</p>
<pre class="Syntax">FuncObj(Param1, Param2, ...)
FuncObj.<span class="func">Call</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>Parameters and return value are defined by the function.</dd>
</dl>
<p>The "Call" method is implied when calling a value, so need not be explicitly specified.</p>
</div>

<div class="methodShort" id="Bind"><h3>Bind</h3>
<p>Binds parameters to the function and returns a <a href="../misc/Functor.htm#BoundFunc">BoundFunc object</a>.</p>
<pre class="Syntax">BoundFunc := FuncObj.<span class="func">Bind</span>(Param1, Param2, ...)</pre>
<dl>
  <dt>Param1, Param2, ...</dt>
  <dd>Any number of parameters.</dd>
</dl>
<p>For details and examples, see <a href="../misc/Functor.htm#BoundFunc">BoundFunc object</a>.</p>
</div>

<div class="methodShort" id="IsByRef"><h3>IsByRef</h3>
<p>Determines whether a parameter is ByRef.</p>
<pre class="Syntax">Boolean := FuncObj.<span class="func">IsByRef</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Optional: the one-based index of a parameter. If omitted, <em>Boolean</em> indicates whether the function has any ByRef parameters.</p>
  </dd>
</dl>
<p>Returns a boolean value indicating whether the parameter is ByRef. If <em>ParamIndex</em> is invalid, an exception is thrown.</p>
</div>

<div class="methodShort" id="IsOptional"><h3>IsOptional</h3>
<p>Determines whether a parameter is optional.</p>
<pre class="Syntax">Boolean := FuncObj.<span class="func">IsOptional</span>(<span class="optional">ParamIndex</span>)</pre>
<dl>
  <dt>ParamIndex</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Optional: the one-based index of a parameter. If omitted, <em>Boolean</em> indicates whether the function has any optional parameters.</p>
  </dd>
</dl>
<p>Returns a boolean value indicating whether the parameter is optional. If <em>ParamIndex</em> is invalid, an exception is thrown.</p>
<p>Parameters do not need to be formally declared if the function is variadic. Built-in functions are supported.</p></div>

<h2 id="Properties">Properties</h2>

<div class="methodShort" id="Name"><h3>Name</h3>
<p>Returns the function's name.</p>
<pre class="Syntax">FunctionName := FuncObj.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h3>IsBuiltIn</h3>
<p>Returns <i>true</i> if the function is <a href="../Functions.htm#BuiltIn">built-in</a> and <i>false</i> otherwise.</p>
<pre class="Syntax">Boolean := FuncObj.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h3>IsVariadic</h3>
<p>Returns <i>true</i> if the function is <a href="../Functions.htm#Variadic">variadic</a> and <i>false</i> otherwise.</p>
<pre class="Syntax">Boolean := FuncObj.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h3>MinParams</h3>
<p>Returns the number of required parameters.</p>
<pre class="Syntax">ParamCount := FuncObj.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h3>MaxParams</h3>
<p>Returns the number of formally-declared parameters for a user-defined function or maximum parameters for a built-in function.</p>
<pre class="Syntax">ParamCount := FuncObj.MaxParams</pre>
<p>If the function is <a href="../Functions.htm#Variadic">variadic</a>, <em>ParamCount</em> indicates the maximum number of parameters which can be accepted by the function without overflowing into the "variadic*" parameter.</p></div>

</body>
</html>
