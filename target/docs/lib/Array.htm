<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>配列オブジェクト - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="配列オブジェクトは、値のリストまたはシーケンスを含んでいます。" />
<meta name="ahk:equiv-v1" content="lib/Object.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>配列オブジェクト</h1>
<pre class="NoIndent">クラス配列のオブジェクト拡張</pre>

<p><strong>配列</strong>オブジェクトは、値のリストまたはシーケンスを含んでいます。</p>
<p>値は、配列内の位置（<em>配列インデックス</em>）で指定され、位置1が最初の要素になります。</p>
<p>配列は、値のリストを括弧で囲むことで作成されることが多い。事例：</p>
<pre>veg := ["Asparagus", "Broccoli", "Cucumber"]
Loop veg.Length
    MsgBox veg[A_Index]</pre>
<p>負のインデックスは、要素を逆にアドレスするために使用することができ、-1は最後の要素、-2は2番目の最後の要素、といった具合です。</p>
<p>範囲外の配列インデックス（ゼロや絶対値が配列の<a href="#Length">長さ</a>より大きい場合など）を使用しようとすると、エラーとみなされ、<a href="Error.htm#IndexError">IndexError</a>がスローされます。配列に新しい要素を追加するには、<a href="#InsertAt">InsertAt</a>または<a href="#Push">Push</a>を呼び出すのが最適です。事例：</p>
<pre>users := Array()
users.Push A_UserName
MsgBox users[1]</pre>
<p>また、<a href="#Length">Length</a>に大きな値を代入することで、配列を拡張することができる。これにより、有効なインデックスが変わりますが、<a href="#Has">Has</a>は新要素に価値がないことを示します。値のない要素は、通常、<a href="../Functions.htm#VariadicCall">バリアドコール</a>や <a href="../Functions.htm#Variadic">バリアド関数</a>によって使用されるが、どのような目的にも使用できる。</p>
<p>"Array "はクラスそのものなので、以下ではあらゆる配列オブジェクトのプレースホルダとして "ArrayObj "を使用します。</p>
<p>配列オブジェクトは、<a href="Object.htm">オブジェクト</a>から継承されたメソッドとプロパティに加え、以下の定義済みのメソッドとプロパティを持ちます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#StaticMethods">静的メソッドです。</a>
    <ul>
      <li><a href="#Call">Call</a>: Creates a new Array containing the specified values.</li>
    </ul>
  </li>
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Clone">Clone</a>: Returns a shallow copy of an array.</li>
      <li><a href="#Delete">Delete</a>: Removes the value of an array element, leaving the index without a value.</li>
      <li><a href="#Get">Get</a>: Returns the value at a given index, or a default value.</li>
      <li><a href="#Has">Has</a>: Returns a non-zero number if the index is valid and there is a value at that position.</li>
      <li><a href="#InsertAt">InsertAt</a>: Inserts one or more values at a given position.</li>
      <li><a href="#Pop">Pop</a>: Removes and returns the last array element.</li>
      <li><a href="#Push">Push</a>: Appends values to the end of an array.</li>
      <li><a href="#RemoveAt">RemoveAt</a>: Removes items from an array.</li>
      <li><a href="#__New">__New</a>: Appends items. プッシュに相当します。</li>
      <li><a href="#__Enum">__Enum</a>: Enumerates array elements.</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#Length">Length</a>: Retrieves or sets the length of an array.</li>
      <li><a href="#Capacity">Capacity</a>: Retrieves or sets the current capacity of an array.</li>
      <li><a href="#Default">Default</a>: Defines the default value returned when an element with no value is requested.</li>
      <li><a href="#__Item">__Item</a>: Retrieves or sets the value of an array element.</li>
    </ul>
  </li>
</ul>

<h2 id="StaticMethods">静的メソッド</h2>

<div class="methodShort" id="Call"><h3>Call</h3>
<p>指定された値を含む新しい配列を作成します。</p>
<pre class="Syntax">ArrayObj := Array(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)
ArrayObj := Array.<span class="func">Call</span>(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)</pre>
<p>パラメータは<a href="#__New">__New</a>で定義します。</p>
</div>

<h2 id="Methods">メソッド</h2>

<div class="methodShort" id="Clone"><h3>Clone</h3>
<p>配列のシャローコピーを返します。</p>
<pre class="Syntax">Clone := ArrayObj.<span class="func">Clone</span>()</pre>
<p>配列の全要素が新しい配列にコピーされます。オブジェクトの<em>参照</em>はコピーされますが（通常の代入と同様）、オブジェクトそのものはコピーされません。</p>
<p><a href="Object.htm#Clone">Obj.Clone</a>に準じて、自プロパティ、自メソッド、ベースはコピーされます。</p>
</div>

<div class="methodShort" id="Delete"><h3>Delete</h3>
<p>配列の要素の値を削除し、インデックスに値を残さないようにします。</p>
<pre class="Syntax">RemovedValue := ArrayObj.<span class="func">Delete</span>(Index)</pre>
<h4 id="Delete_Parameters">パラメータ</h4>
<dl>
  <dt>インデックス</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>有効な配列のインデックス。</p>
  </dd>
</dl>
<h4 id="Delete_Return_Value">戻り値</h4>
<p>Type: <a href="../Concepts.htm#values">Any</a></p>
<p>This method returns the removed value (blank if none).</p>
<h4 id="Delete_Remarks">備考</h4>
<p>This method does not affect the <a href="#Length">Length</a> of the array.</p>
<p><em>Index</em>が範囲外の場合、<a href="Error.htm#ValueError">ValueError</a>が投げられる。</p>
</div>

<div class="methodShort" id="Get"><h3>Get</h3>
<p>指定されたインデックスにある値、またはデフォルト値を返します。</p>
<pre class="Syntax">Value := ArrayObj.<span class="func">Get</span>(Index <span class="optional">, Default</span>)</pre>
<p>この方法では、次のようなことができます。</p>
<ul>
  <li><em>Index</em>が0または範囲外の場合、<a href="Error.htm#IndexError">IndexError</a>を投げる。</li>
  <li><em>Index</em>に値がある場合、その値を返す（<a href="#Has">Has</a>参照）。</li>
  <li><em>Default</em>パラメータが指定されている場合は、その値を返します。</li>
  <li><code>ArrayObj.Default</code>が定義されていれば、その値を返す。</li>
  <li><a href="Error.htm#UnsetError">UnsetItemError</a>を投げる。</li>
</ul>
<p><em>Default</em>が省略された場合、<a href="#__Item">__Item</a>が呼び出されないことを除いて<code>ArrayObj[Index]</code>と同等となる。</p>
</div>

<div class="methodShort" id="Has"><h3>Has</h3>
<p>Returns a non-zero number if the index is valid and there is a value at that position.</p>
<pre class="Syntax">HasIndex := ArrayObj.<span class="func">Has</span>(Index)</pre>
</div>

<div class="methodShort" id="InsertAt"><h3>InsertAt</h3>
<p>指定された位置に1つまたは複数の値を挿入します。</p>
<pre class="Syntax">ArrayObj.<span class="func">InsertAt</span>(Index, Value1 <span class="optional">, Value2, ... Value<i>N</i></span>)</pre>
<h4 id="InsertAt_Parameters">パラメータ</h4>
<dl>
  <dt>インデックス</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p><em>Value1</em>を挿入する位置を指定します。それ以降の値は、Index+1、Index+2 などに挿入されます。0を指定すると、<a href="#Length">Length</a>+ 1を指定したのと同じになります。N</p>
  </dd>
  <dt>Value1 ...</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>挿入する1つまたは複数の値。値の配列を挿入するには、次のように渡します。 <code><a href="../Functions.htm#VariadicCall">theArray*</a></code>を最後のパラメータとして指定します。</p>
  </dd>
</dl>
<h4 id="InsertAt_Remarks">備考</h4>
<p>InsertAtは、<a href="#RemoveAt">RemoveAt</a>と対になるものです。</p>
<p>これまで<em>Index</em>の右側にあったアイテムは、右側に移動します。欠落したパラメータも挿入されるが、値はない。事例：</p>
<pre>x := []
x.InsertAt(1, "A", "B") <em>; =&gt;  ["A", "B"]</em>
x.InsertAt(2, "C")      <em>; =&gt;  ["A", "C", "B"]</em>

<em>; Missing elements are preserved:</em>
x := ["A", , "C"]
x.InsertAt(2, "B")      <em>; =&gt;  ["A", "B",    , "C"]</em>

x := ["C"]
x.InsertAt(1, , "B")    <em>; =&gt;  [   , "B", "C"]</em></pre>
<p><em>Index</em>が<code>-ArrayObj.Length</code>よりも小さいか、<code>ArrayObj.Length + 1</code>よりも大きい場合は<a href="Error.htm#ValueError">ValueError</a>がスローされます。例えば、3つの項目からなる配列の場合、<em>Index</em>は-3から4までの間でなければならない。</p>
</div>

<div class="methodShort" id="Pop"><h3>Pop</h3>
<p>配列の最後の要素を削除して返します。</p>
<pre class="Syntax">RemovedValue := ArrayObj.<span class="func">Pop</span>()</pre>
<p>以下はすべて同等です。</p>
<pre>RemovedValue := ArrayObj.Pop()
RemovedValue := ArrayObj.RemoveAt(ArrayObj.Length)
RemovedValue := ArrayObj.RemoveAt(-1)</pre>
<p>配列が空の場合（<a href="#Length">Length</a>が0）、<a href="Error.htm">エラー</a>となる。</p>
</div>

<div class="methodShort" id="Push"><h3>Push</h3>
<p>配列の末尾に値を追加します。</p>
<pre class="Syntax">ArrayObj.<span class="func">Push</span>(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)</pre>
<h4 id="Push_Parameters">パラメータ</h4>
<dl>
  <dt>Value ...</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>挿入する1つまたは複数の値。値の配列を挿入するには、次のように渡します。 <code><a href="../Functions.htm#VariadicCall">theArray*</a></code>を最後のパラメータとして指定します。</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="RemoveAt"><h3>RemoveAt</h3>
<p>配列から項目を削除します。</p>
<pre class="Syntax">RemovedValue := ArrayObj.<span class="func">RemoveAt</span>(Index)
ArrayObj.<span class="func">RemoveAt</span>(Index, Length)</pre>
<h4 id="RemoveAt_Parameters">パラメータ</h4>
<dl>
  <dt>インデックス</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>削除する値（複数可）のインデックス。</p>
  </dd>
  
  <dt>Length</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>省略された場合は、1つの項目が削除されます。Otherwise, specify the length of the range of values to remove.</p>
  </dd>
</dl>
<h4 id="RemoveAt_Return_Value">戻り値</h4>
<p>Type: <a href="../Concepts.htm#values">Any</a></p>
<p><em>Length</em>が省略された場合は、削除された値が返される（ない場合は空白）。そうでない場合は、戻り値はありません。</p>
<h4 id="RemoveAt_Remarks">備考</h4>
<p>RemoveAtは<a href="#InsertAt">InsertAt</a>の対になるものです。</p>
<p><em>Index</em>と <em>Length</em>で示される範囲が、配列の現在の範囲に完全に収まっていない場合、<a href="Error.htm#ValueError">ValueError</a>がスローされます。</p>
<p><em>Pos</em>の右にある残りの項目は、<em>Length</em>（省略時は1）だけ左にシフトされます。事例：</p>
<pre>x := ["A", "B"]
MsgBox x.RemoveAt(1)  <em>; A</em>
MsgBox x[1]           <em>; B</em>

x := ["A", , "C"]
MsgBox x.RemoveAt(1, 2)  <em>; 1</em>
MsgBox x[1]              <em>; C</em></pre>
</div>

<div class="methodShort" id="__New"><h3>__New</h3>
<p>項目を追加します。<a href="#Push">プッシュに</a>相当します。</p>
<pre class="Syntax">ArrayObj.<span class="func">__New</span>(<span class="optional">Value, Value2, ..., Value<i>N</i></span>)</pre>
<p>このメソッドは<a href="#Call">Call</a>をサポートするために存在し、直接呼び出すことは意図していません。<a href="../Objects.htm#Custom_NewDelete">建設と破壊</a>をご覧ください。</p>
</div>

<div class="methodShort" id="__Enum"><h3>__Enum</h3>
<p>配列の要素を列挙します。</p>
<pre class="Syntax">For Value in ArrayObj</pre>
<pre class="Syntax">For Index, Value in ArrayObj</pre>
<p>新しい<a href="Enumerator.htm">列挙者</a>を返します。このメソッドは通常、直接呼び出されることはありません。その代わり、配列オブジェクトは直接<a href="For.htm">forループ</a>に渡され、forループは__Enumを一度呼び出し、ループの各繰り返しで列挙器を一度呼び出します。列挙者を呼び出すたびに、次の配列要素が返されます。forループの変数は、列挙者のパラメータに対応しており、次のようになっています。</p>
<dl>
  <dt>インデックス</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>配列のインデックス。通常は<a href="../Variables.htm#Index">A_Index</a>と同じ。2パラメータモード時のみ存在します。</p>
  </dd>
  <dt>値</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#values">Any</a></p>
    <p>値（値がない場合、<em>Value</em>は <a href="../Concepts.htm#uninitialized-variables">未初期化</a>される）。</p>
  </dd>
</dl>
</div>

<h2 id="Properties">属性</h2>

<div class="methodShort" id="Length"><h3>Length</h3>
<p>配列の長さを取得または設定します。</p>
<pre class="Syntax">Length := ArrayObj.<span class="func">Length</span></pre>
<pre class="Syntax">ArrayObj.<span class="func">Length</span> := Length</pre>
<p>長さには、価値のない要素も含まれます。長さを長くすると、どのインデックスが有効とみなされるかが変わりますが、新しい要素には価値がありません（<a href="#Has">Has</a>で示されます）。長さを小さくすると、配列は切り捨てられます。</p>
<pre>
MsgBox ["A", "B", "C"].Length  <em>;  3</em>
MsgBox ["A",    , "C"].Length  <em>;  3</em>
</pre>
</div>

<div class="methodShort" id="Capacity"><h3>Capacity</h3>
<p>配列の現在の容量を取得または設定します。</p>
<pre class="Syntax">MaxItems := ArrayObj.<span class="func">Capacity</span></pre>
<pre class="Syntax">ArrayObj.<span class="func">Capacity</span> := MaxItems</pre>
<p><em>MaxItems</em> is an <a href="../Concepts.htm#numbers">integer</a> representing the maximum number of elements the array should be able to contain before it must be automatically expanded.  If setting a value less than <a href="#Length">Length</a>, elements are removed.</p>
</div>

<div class="methodShort" id="Default"><h3>デフォルト</h3>
<p>値のない要素が要求されたときに返されるデフォルト値を定義します。</p>
<pre class="Syntax">ArrayObj.<span class="func">Default</span> := Value</pre>
<p>このプロパティは、実はデフォルトでは存在せず、スクリプトで定義することができます。If defined, its value is returned by <a href="#__Item">__Item</a> or <a href="#Get">Get</a> if the requested element has no value, instead of throwing an <a href="Error.htm#UnsetError">UnsetItemError</a>. It can be implemented by any of the normal means, including a <a href="Object.htm#DefineProp">dynamic property</a> or <a href="../Objects.htm#Meta_Functions">meta-function</a>, but determining which key was queried would require overriding <a href="#__Item">__Item</a> or <a href="#Get">Get</a> instead.</p>
<p>デフォルト値を設定しても、インデックスが範囲外である場合にエラーが発生することは防げません。</p>
</div>

<div class="methodShort" id="__Item"><h3>__Item</h3>
<p>配列の要素の値を取得または設定します。</p>
<pre class="Syntax">Value := ArrayObj[Index]
Value := ArrayObj.<span class="func">__Item</span>[Index]</pre>
<pre class="Syntax">ArrayObj[Index] := Value
ArrayObj.<span class="func">__Item</span>[Index] := Value</pre>
<p><em>Index</em> is an <a href="../Concepts.htm#numbers">integer</a> representing a valid array index; that is, an integer with absolute value between 1 and <a href="#Length">Length</a> (inclusive). 負のインデックスは、-1が最後の要素、-2が2番目の最後の要素というように、要素を逆にアドレスするために使用することができます。Attempting to use an index which is out of bounds (such as zero, or if its absolute value is greater than the <a href="#Length">Length</a> of the array) is considered an error and will cause an <a href="Error.htm#IndexError">IndexError</a> to be thrown.</p>
<p>プロパティ名 __Item は、上記のように通常は省略されますが、プロパティをオーバーライドする際に使用されます。</p>
</div>

</body>
</html>
