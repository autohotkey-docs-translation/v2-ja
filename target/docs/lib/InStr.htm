<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>InStr - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="InStr関数は、文字列の左または右から、指定された出現箇所を検索します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>InStr</h1>

<p>文字列の左または右から、指定された出現箇所を検索します。</p>

<pre class="Syntax">FoundPos := <span class="func">InStr</span>(Haystack, Needle <span class="optional">, CaseSense, StartingPos, Occurrence</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Haystack</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>内容を検索する文字列。</p>
  </dd>
  
  <dt>Needle</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>検索する文字列です。</p>
  </dd>
  
  <dt>CaseSense</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../Concepts.htm#boolean">Integer (boolean)</a></p>
    <p>省略したときは、<em>Off</em>が初期値になります。そうでないときは、次のいずれかの値を指定します：</p>
    <p><strong>On</strong> or <strong>1</strong> (true): The search is case-sensitive.</p>
    <p><strong>Off</strong> or <strong>0</strong> (false): The search is not case-sensitive, i.e. the letters A-Z are considered identical to their lowercase counterparts.</p>
    <p><strong>ロケール：</strong>検索では、現在のユーザーのロケールの規則に従って大文字と小文字は区別されません。例えば、英語や西欧のロケールでは、A～Zの小文字だけでなく、ÄやÜなどの非ASCII文字も小文字と同じように扱われることがほとんどです。<em>Locale</em>は、比較する文字列の性質によって、<em>Off</em>の1～8倍遅くなります。</p>
  </dd>

  <dt>StartingPos</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>省略したときは、文字列全体が検索対象になります。そうでないときは、検索を開始する位置を指定します。1が最初の文字、2が2番目の文字のように指定します。負の値は<em>Haystack</em>の最後から数えるので、-1が最後の文字、-2が2番目の文字のように指定します。。</p>
    <p><em>Occurrence</em>を省略したときは、<em>StartingPos</em>が負であれば、右から左へ検索します。ただし、<em>Occurrence</em>を指定したときは、<em>StartingPos</em>は検索の方向には影響しません。</p>
    <p>右から左への検索では、<em>StartingPos</em>は<em>Needle</em>の最初の出現候補の<u>最後の</u>文字の位置を指定します。例えば、<code>InStr("abc", "bc",, 2, +1)</code>はマッチしますが、<code>InStr("abc", "bc",, 2, -1)</code>はそうではありません。</p>
    <p><em>StartingPos</em>の絶対値が<em>Haystack</em>の長さより大きいときは、0 が返されます。</p>
  </dd>

  <dt>Occurrence</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>省略したときは、<em>Haystack</em>での最初のマッチが初期値となります。<em>StartingPos</em> が負の場合は右から左へ、そうでないときはは左から右へ検索されます。</p>
    <p><em>Occurrence</em>が正の場合、検索は常に左から右へ行われる。<em>Occurrence</em>に2を指定すると、2番目にマッチした位置を、3を指定すると3番目にマッチした位置を返します。</p>
    <p><em>Occurrence</em>が負の場合、検索は常に右から左へ行われます。例えば、-2は右から2番目に出現するものを検索します。</p>
  </dd>

  </dl>

<h2 id="Return_Value">戻り値</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>この関数は、文字列<em>Haystack</em>の中で文字列<em>Needle</em>が出現する位置を返します。これは、0が「偽」と同義であり、直感的に「見つからない」ことを示すからである。</p>
<p><em>StartingPos</em>や<em>Occurrence</em>の値に関係なく、戻り値は常に<em>Haystack</em>の最初の文字に対する相対値です。例えば、"123abc789"の "abc"の位置は、常に4です。</p>
<p>通常、空文字列（<code>""</code>）は、どの位置にも出現します。しかし、空白の<em>Needle</em>は通常間違って渡されるだけなので、エラーとして扱われ、例外がスローされます。
</p>

<h2 id="Error_Handling">エラー処理</h2>
<p>以下のいずれかに該当する場合、<a href="Error.htm#ValueError">ValueError</a>が発生します：</p>
<ul>
  <li><em>Needle</em>は、空（長さゼロ）の文字列です。</li>
  <li><em>ケースセンス</em>は無効です。</li>
  <li><em>Occurrence</em>または<em>StartingPos</em>が0または非数値である。</li>
</ul>

<h2 id="Remarks">備考</h2>
<p><a href="RegExMatch.htm">RegExMatch</a>は、文字列の中にあるパターン（正規表現）を検索することができるので、InStrよりはるかに柔軟性があります。しかし、単純な部分文字列を検索する場合は、一般にInStrの方がRegExMatchより高速です。</p>
<p>InStrは最初のバイナリゼロ（ヌルターミネーター）までしか検索しませんが、RegExMatchはバイナリゼロが含まれていても、文字列の<a href="StrLen.htm">全長</a>を検索しています。</p>

<h2 id="Related">関連</h2>
<p><a href="RegExMatch.htm">RegExMatch</a>、<a href="Is.htm">は関数</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExRetValue">
<p><a class="ex_number" href="#ExRetValue"></a> 文字列 "123abc789"中の部分文字列 "abc"の1基準の位置を報告する。</p>
<pre>MsgBox InStr("123abc789", "abc") <em>; 4を返します。</em></pre>
</div>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> <var>Haystack</var>を<var>Needle</var>で探します。</p>
<pre>Haystack := "The Quick Brown Fox Jumps Over the Lazy Dog"
Needle := "Fox"
If InStr(Haystack, Needle)
    MsgBox "The string was found."
Else
    MsgBox "文字列が見つかりません。"</pre>
</div>

<div class="ex" id="ExCaseSens">
<p><a class="ex_number" href="#ExCaseSens"></a> 大文字小文字を区別したり、しなかったりしたときの例です。</p>
<pre>Haystack := "The Quick Brown Fox Jumps Over the Lazy Dog"
Needle := "the"
MsgBox InStr(Haystack, Needle, false, 1, 2) <em>; case-insensitive search, return start position of second occurence</em>
MsgBox InStr(Haystack, Needle, true) <em>; case-sensitive search, return start position of first occurence, same result as above</em>
</pre>
</div>

</body>
</html>
