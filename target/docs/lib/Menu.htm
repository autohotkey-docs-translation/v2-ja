<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Menu/MenuBar Object - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="Menu/MenuBar オブジェクトは、メニューやメニューバーがメニュー項目の追加などのアクションを実行したり、デフォルトのメニュー項目などの値を取得または設定するためのインターフェースを提供します。" />
<meta name="ahk:equiv-v1" content="lib/Menu.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Menu/MenuBar Object</h1>
<p>メニューやメニューバーを変更したり表示したりするときに使用します。</p>
<pre class="NoIndent">class Menu extends Object</pre>
<p>メニューオブジェクトは、ポップアップメニューの定義、変更、表示に使用します。<a href="Menu.htm#Call">Menu()</a>、<a href="MenuFromHandle.htm">MenuFromHandle</a>および<a href="../Variables.htm#TrayMenu">A_TrayMenu</a>は、この型のオブジェクトを返す。</p>
<pre class="NoIndent">class MenuBar extends Menu</pre>
<p>MenuBarオブジェクトは、<a href="Gui.htm#MenuBar">Gui.MenuBarで</a>使用するメニューバーの定義や修正に使用します。<a href="Menu.htm#Call">MenuBar()</a>で作成します。<a href="MenuFromHandle.htm">MenuFromHandle</a>は、メニューバーハンドルが与えられた場合、このタイプのオブジェクトを返します。</p>

<p>"Menu"はクラスそのものであるため、以下ではあらゆるMenuオブジェクトのプレースホルダーとして使用します。</p>
<p>メニューオブジェクトは、<a href="Object.htm">Object</a>から継承されるメソッドとプロパティに加えて、以下の定義済みのメソッドとプロパティを持ちます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#StaticMethods">静的メソッドです。</a>
    <ul>
      <li><a href="#Call">Call</a>:新しい Menu または MenuBar オブジェクトを作成します。</li>
    </ul>
  </li>
  <li><a href="#Methods">Methods</a>:
    <ul>
      <li><a href="#Add">Add</a>:メニュー項目を追加または変更します。</li>
      <li><a href="#AddStandard">AddStandard</a>:標準トレイのメニュー項目を追加します。</li>
      <li><a href="#Check">Check</a>:メニューの横に、目に見えるチェックマークを付けます。</li>
      <li><a href="#Delete">Delete</a>:メニュー項目またはすべてのメニュー項目を削除します。</li>
      <li><a href="#Disable">Disable</a>:メニュー項目をグレーに変更し、ユーザーが選択できないことを示します。</li>
      <li><a href="#Enable">Enable</a>:グレー表示になっているメニューを再度選択できるようにします。</li>
      <li><a href="#Insert">Insert</a>:指定された項目の前に、新しい項目を挿入します。</li>
      <li><a href="#Rename">Rename</a>:メニュー項目の名前を変更します。</li>
      <li><a href="#SetColor">SetColor</a>:メニューの背景色を変更します。</li>
      <li><a href="#SetIcon">SetIcon</a>:メニュー項目の横に表示するアイコンを設定します。</li>
      <li><a href="#Show">Show</a>:メニューを表示します。</li>
      <li><a href="#ToggleCheck">ToggleCheck</a>:メニューの横にあるチェックマークを切り替えます。</li>
      <li><a href="#ToggleEnable">ToggleEnable</a>:メニュー項目の有効／無効を設定します。</li>
      <li><a href="#Uncheck">Uncheck</a>:メニュー項目からチェックマーク（ある場合）を削除します。</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    <ul>
      <li><a href="#ClickCount">ClickCount</a>:トレイメニューのデフォルト項目を有効にするために必要なクリック数を取得または設定します。</li>
      <li><a href="#Default">Default</a>:デフォルトのメニュー項目を取得または設定します。</li>
      <li><a href="#Handle">Handle</a>:メニューのWin32ハンドルを取得します。</li>
    </ul>
  </li>
  <li>General:
    <ul>
      <li><a href="#MenuItemName">MenuItemName</a></li>
      <li><a href="#Win32_Menus">Win32 Menus</a></li>
      <li><a href="#Remarks">備考</a></li>
      <li><a href="#Related">関連</a></li>
      <li><a href="#Examples">例</a></li>
    </ul>
  </li>
</ul>

<h2 id="StaticMethods">静的メソッド</h2>
<div class="methodShort" id="Call">
<h3>Call</h3>
<p>新しい Menu または MenuBar オブジェクトを作成します。</p>
<pre class="Syntax">
MyMenu := <span class="func">Menu</span>()
MyMenuBar := <span class="func">MenuBar</span>()
</pre>
</div>

<h2 id="Methods">メソッド</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>メニュー項目を追加または変更します。</p>
<pre class="Syntax">MyMenu<span class="func">.Add</span><span class="optional">(MenuItemName, Function-or-Submenu, Options</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目に表示するテキスト、または修正する既存項目の位置&amp;を指定します。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
  <dt>Function-or-Submenu</dt><dd>
    <p>型：<a href="../misc/Functor.htm">機能オブジェクト</a>または<strong>メニュー</strong></p>
    <p>メニュー項目が選択されたときに新しい<a href="../misc/Threads.htm">スレッドとして</a>呼び出す<a href="../misc/Functor.htm">関数オブジェクト</a>、またはサブメニューとして使用するMenuオブジェクトへのリファレンス。</p>
    <p>このパラメータは、新規にアイテムを作成する場合は必須ですが、既存のアイテムの<em>Optionsを</em>更新する場合はオプションです。</p>
  <p id="CallbackParams">この関数は、以下のパラメータを受け付ける必要があります：</p>
<pre class="Syntax"><i>FunctionName</i>(ItemName, ItemPos, MyMenu)</pre>
    </dd>
  <dt>Options</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
  <p>省略されない場合、<em>Options</em>は、以下のオプションの1つ以上をスペースまたはタブで区切ったリストでなければならない：</p>
<table class="info">
  <tr>
    <th>Option</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr><td>P<em>n</em></td>
  <td><em>nを</em>メニュー項目の<a href="../misc/Threads.htm">スレッド優先</a>度に置き換えます（例：<code>P1</code>）。メニュー項目を追加する際にこのオプションを省略した場合、優先順位は標準のデフォルトである0になります。メニュー項目を更新する際に省略した場合、その項目の優先順位は変更されません。優先順位として10進数（16進数ではない）を使用します。</td></tr>
  <tr><td>+Radio</td>
  <td>項目にチェックが入っている場合は、チェックマークの代わりに箇条書きを使用します。</td></tr>
  <tr><td>+Right</td>
  <td>メニューバー内で項目が右寄せになります。これは<a href="Gui.htm#MenuBar">メニューバーだけに</a>適用され、ポップアップメニューやサブメニューには適用されません。</td></tr>
  <tr><td>+Break</td>
  <td>ポップアップメニューの新しい列を開始する項目です。</td></tr>
  <tr><td>+BarBreak</td>
  <td>上記と同様ですが、列の間に仕切り線があります。</td></tr>
</table>
<p>プラス記号（+）はオプションで、<code>-Radioの</code>ようにマイナス記号（-）に置き換えてオプションを解除することができます。オプションは、大文字と小文字を区別しません。</p>
<p>コールバックやサブメニューに影響を与えずに既存のアイテムのオプションを変更するには、<em>Callback-or-Submenu</em>パラメータを省略するだけです。</p>
  </dd>
</dl>
<p>メニューの追加、新しいサブメニューやコールバックによる更新、通常のメニューからサブメニューへの変換（またはその逆）など、多目的に使えるメソッドです。<em>MenuItemName</em>がまだ存在しない場合、メニューに追加されます。そうでない場合は、<em>MenuItemName</em>は新しく指定された<em>Callback-or-Submenu</em>や <em>Options</em>で更新される。</p>
<p>メニューの区切り線を追加する場合は、3つのパラメータをすべて省略します。</p>
<p><em>Add</em>は常にメニューの一番下に新しいメニュー項目を追加しますが、<a href="#Insert">Insert</a>は既存のカスタムメニュー項目の前に項目を挿入するために使用することができます。</p>
</div>

<div class="methodShort" id="AddStandard">
<h3>AddStandard</h3>
<p>標準<a href="../Program.htm#tray-icon">トレイのメニュー項目を</a>追加します。</p>
<pre class="Syntax">MyMenu.<span class="func">AddStandard</span>()</pre>
<p>この方法は、トレイメニューや他のメニューでも使用できます。</p>
<p>標準項目は、既存の項目の後に挿入されます。すでにある標準的なメニューは重複せず、足りないものは追加されます。空のメニューでAddStandardを呼び出した後の標準アイテムの名前と位置を下表に示します：</p>
<style>
.fake-menu {
  background-color: #f2f2f2;
  border: 1px solid #cccccc;
  color: black;
  line-height: 1.4;
}
.fake-menu td {
  padding: 0 .5em;
}
.fake-menu td {
  text-align: right;
}
.fake-menu td:first-child {
  text-align: left;
}
.fake-sep {
  border: 1px solid #d7d7d7;
  border-width: 1px 0 0;
}
</style>
<table class="fake-menu">
  <tr><td>&amp;Open</td><td>1</td><td>0</td></tr>
  <tr><td>&amp;Help</td><td>2</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>3</td><td></td></tr>
  <tr><td>&amp;Window Spy</td><td>4</td><td></td></tr>
  <tr><td>&amp;Reload Script</td><td>5</td><td></td></tr>
  <tr><td>&amp;Edit Script</td><td>6</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>7</td><td></td></tr>
  <tr><td>&amp;Suspend Hotkeys</td><td>8</td><td>1</td></tr>
  <tr><td>&amp;Pause Script</td><td>9</td><td>2</td></tr>
  <tr><td>E&amp;xit</td><td>10</td><td>3</td></tr>
</table>
<p>コンパイルされたスクリプトには、デフォルトで最後の3つだけが含まれています。AddStandardを呼び出したときに<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>が1の場合のみ、<code>&amp;Open</code>が含まれます（その場合、3列目に示す位置に1を追加します）。トレイメニューに標準項目が含まれている場合、<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>が変更されるたびに、<code>&amp;Open</code>が挿入または削除されます。その他のメニューでは、<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>が 0 の場合、<code>&amp;Open</code>の効果はありません。</p>
<p>各標準項目は、その機能に対応する内部メニュー項目IDを持つが、それ以外は他のメニュー項目と同様に変更または削除することができます。AddStandardは、名前ではなくIDで既存アイテムを検出します。<a href="#Add">Add</a>メソッドを使用して標準メニューに関連するコールバック関数を変更した場合、そのメニューには新しい一意のIDが割り当てられ、もはや標準メニューとはみなされない。</p>
<p>トレイメニューに<code>&amp;Open</code>項目を追加すると、その項目がまだない場合はデフォルトの項目となります。</p>
</div>

<div class="methodShort" id="Check">
<h3>Check</h3>
<p>メニューの<em>MenuItemName</em>の隣に、目に見えるチェックマークを追加します（まだチェックマークがない場合）。</p>
<pre class="Syntax">MyMenu<span class="func">.Check</span>(MenuItemName)を実行します。</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>メニュー項目またはすべてのカスタムメニュー項目を削除します。</p>
<pre class="Syntax">MyMenu<span class="func">.Delete</span><span class="optional">(MenuItemName</span>)を実行します。</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
<p><em>MenuItemName</em>が省略された場合、すべての項目がメニューから削除され、メニューは空っぽになる。空のメニューはまだ存在するので、それをサブメニューとして使用している他のメニューは、それらのサブメニューを保持します。</p>
<p>セパレータラインを削除するには、メニュー内の位置で識別します。例えば、セパレータの前に2つの項目がある場合は、<code>MyMenu.Delete("3&amp;")</code>を使用します。</p>
<p><em>デフォルト</em>のメニュー項目を削除した場合、<code>MyMenu.Default := ""</code>を設定した場合と同様の効果が得られます。</p>
</div>

<div class="methodShort" id="Disable">
<h3>Disable</h3>
<p><em>MenuItemName</em>をグレー色に変更し、ユーザーが選択できないことを示します。</p>
<pre class="Syntax">MyMenu.<span class="func">Disable</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
</div>

<div class="methodShort" id="Enable">
<h3>Enable</h3>
<p><em>MenuItemName</em>が無効（グレー表示）になっている場合、再度選択できるようにします。</p>
<pre class="Syntax">MyMenu.<span class="func">Enable</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
</div>

<div class="methodShort" id="Insert">
<h3>Insert</h3>
<p>指定された項目の前に、新しい項目を挿入します。</p>
<pre class="Syntax">MyMenu<span class="func">.Insert</span><span class="optional">(ItemToInsertBefore, NewItemName, Callback-or-Submenu, Options</span>)</pre>
<dl>
  <dt>ItemToInsertBefore</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>既存のアイテムの名前、または1から<a href="#Examples">現在のカスタムアイテムの数</a>プラス1までの間の位置&amp;（<a href="#MenuItemName">MenuItemName</a>と同じ規則に従う）。また、<em>ItemToInsertBefore</em>を省略することで、アイテムを追加することができる。</p></dd>
  <dt>NewItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目に表示するテキストです。<a href="#Add">Add</a>とは異なり、ポジションにはなりえません。</p></dd>
</dl>
<p><em>NewItemName</em>が既存のアイテム名と一致しても、<em>Insert</em>は新しいアイテムを作成することを除き、残りのパラメータは<a href="#Add">Add</a>メソッドと同様に動作する。</p>
</div>

<div class="methodShort" id="Rename">
<h3>Rename</h3>
<p><em>MenuItemName</em>の名前を<em>NewName</em>に変更します。</p>
<pre class="Syntax">MyMenu.<span class="func">Rename</span>(MenuItemName <span class="optional">, NewName</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
  <dt>NewName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>新しい名前です。空または省略された場合、<em>MenuItemName</em>はセパレータラインに変換されます。</p></dd>
</dl>
<p>メニューアイテムの現在のコールバックまたはサブメニューは変更されます。</p>
<p>区切り線の位置と空白でない<em>NewName</em>を指定し、<em>Add</em>メソッドでコールバックやサブメニューを与えることで、区切り線を通常のアイテムに変換することができます。</p>
</div>

<div class="methodShort" id="SetColor">
<h3>SetColor</h3>
<p>メニューの背景色を<em>ColorValue</em>に変更します。</p>
<pre class="Syntax">MyMenu.<span class="func">SetColor</span>(<span class="optional">ColorValue, ApplyToSubmenus</span>)</pre>
<dl>
  <dt>ColorValue</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p>16種類の<a href="../misc/Colors.htm">HTMLカラー名</a>、16進数のRGBカラー文字列（0x接頭辞はオプション）、または純粋な数値のRGBカラー値のいずれか1つ。<em>ColorValue</em>を省略（または空文字列または "Default "を指定）すると、メニューの色をデフォルトに戻すことができます。例値：<code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p></dd>
  <dt>ApplyToSubmenus</dt><dd>
    <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
    <p>この色がこのメニューのすべてのサブメニューに適用される場合は1（真）、そうでない場合は0（偽）です。デフォルトは1（true）です。</p></dd>
</dl>
</div>

<div class="methodShort" id="SetIcon">
<h3>SetIcon</h3>
<p><em>MenuItemName</em>の横に表示するアイコンを設定します。</p>
<pre class="Syntax">MyMenu.<span class="func">SetIcon</span>(MenuItemName, FileName <span class="optional">, IconNumber, IconWidth</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>     <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
  <dt>FileName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>アイコンや画像ファイルのパス。対応フォーマットの一覧は、<a href="GuiControls.htm#IconSupport">ピクチャーコントロール</a>をご覧ください。</p>
  <p>ファイル名の代わりに<a href="../misc/ImageHandles.htm">ビットマップやアイコンハンドル</a>を使用することができます。例えば、<code>"HICON:"  handle</code>。</p>
  <p><em>FileName</em>を省略するか、空文字列または<code>"*"</code>を指定すると、アイテムの現在のアイコンが削除されます。</p></dd>
  <dt>IconNumber</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>ファイルの先頭以外のアイコングループを使用する場合は、<em>IconNumber</em>にその番号を指定します（省略した場合はデフォルトで1）。<em>IconNumber</em>が負の場合、その絶対値は実行ファイル内のアイコンのリソース ID とみなされます。</p></dd>
  <dt>IconWidth</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>アイコンの幅を指定します。<em>IconNumberで</em>示されるアイコングループに複数のアイコンサイズが含まれる場合、最も近いサイズのアイコンを使用し、指定されたサイズに拡大縮小されます。使用例については、「使用例」をご参照ください。</p></dd>
</dl>
<p>現在、アイコンの透明度を保つために、設定時に「実寸」を指定する必要があります。例えば：</p>
<pre>MyMenu.SetIcon "My menu item", "Filename.png",, 0</pre>
<p>ファイル名の代わりに<a href="../misc/ImageHandles.htm">ビットマップやアイコンハンドル</a>を使用することができます。例えば、<code>"HBITMAP:" handle</code>。</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>メニューを表示し、矢印キー、メニューショートカット（下線部文字）、またはマウスで項目を選択できるようにします。</p>
<pre class="Syntax">MyMenu.<span class="func">Show</span>(<span class="optional">X, Y</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>メニューを表示する座標を指定します。XとYの両方を省略した場合は、マウスカーソルの現在位置にメニューが表示されます。片方だけが省略された場合、マウスカーソルの位置がそれに使われます。XとYは、デフォルトではアクティブウィンドウのクライアント領域からの相対値です。このデフォルトを上書きするには、<code><a href="CoordMode.htm">CoordMode</a>"Menu",<i>Mode</i></code>または<code>A_CoordModeMenu :=<i>Mode</i></code>を使用します。</p></dd>
</dl>
<p>サブメニューやトレイメニューなど、あらゆるポップアップメニューを表示することが可能です。ただし、<em>Menu</em>がMenuBarオブジェクトである場合は例外が発生します。</p>
</div>

<div class="methodShort" id="ToggleCheck">
<h3>ToggleCheck</h3>
<p>チェックマークがない場合は追加し、それ以外の場合は削除します。</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleCheck</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>     <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
</div>

<div class="methodShort" id="ToggleEnable">
<h3>ToggleEnable</h3>
<p><em>MenuItemName</em>が以前に有効であった場合、それを無効にし、そうでない場合、それを有効にします。</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleEnable</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>     <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
</div>

<div class="methodShort" id="Uncheck">
<h3>Uncheck</h3>
<p>メニュー項目からチェックマーク（ある場合）を削除します。</p>
<pre class="Syntax">MyMenu.<span class="func">Uncheck</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>     <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p></dd>
</dl>
</div>

<h2 id="Properties">属性</h2>
<div class="methodShort" id="ClickCount">
<h3>ClickCount</h3>
<p>トレイメニューのデフォルト項目を有効にするために必要なクリック数を取得または設定します。</p>
<pre class="Syntax">MyMenu.ClickCount := Count</pre>
<dl>
  <dt>Count</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>1を指定すると、シングルクリックでトレイメニューのデフォルトメニュー項目を起動できるようになります。デフォルトの動作に戻す場合は2を指定します（ダブルクリック）。</p></dd>
</dl>
<p>例えば：<code>A_TrayMenu.ClickCount := 1</code></p>
</div>

<div class="methodShort" id="Default">
<h3>デフォルト</h3>
<p>デフォルトのメニュー項目を取得または設定します。</p>
<pre class="Syntax">CurrentDefault := MyMenu.Default</pre>
<dl>
  <dt>CurrentDefault</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>デフォルトのメニュー項目の名前、またはデフォルトがない場合は空の文字列を指定します。</p></dd>
</dl>
<pre class="Syntax">MyMenu.Default := MenuItemName</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  <p><em>MenuItemName</em>が空文字列の場合、デフォルトは存在しない。</p></dd>
</dl>
<p>デフォルトの項目を設定すると、その項目のフォントが太くなります（トレイメニュー以外のメニューでデフォルトの項目を設定することは、現在のところ純粋な外観上の問題です）。ユーザーがトレイアイコンをダブルクリックすると、そのデフォルトのメニュー項目が起動します（その項目が無効になっている場合でも）。デフォルトがない場合、ダブルクリックしても効果はありません。</p>
<p>トレイメニューのデフォルト項目は、存在する場合、最初は<code>&amp;Open</code>です。<a href="#AddStandard">AddStandard</a>の呼び出しや<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>の変更によってトレイメニューに<code>&amp;Open</code>を追加すると、すでになかった場合はデフォルトのアイテムになることもあります。</p>
<p>デフォルトの項目が削除された場合、メニューには何もない状態になります。</p>
</div>

<div class="methodShort" id="Handle">
<h3>Handle</h3>
<p><a href="#Win32_Menus">Win32メニュー</a>のハンドル（<code>HMENU</code>型ハンドル）を、必要に応じて構築して返します。</p>
<pre class="Syntax">MyMenu.Handle</pre>
<p>返されたハンドルは、Win32メニューが破棄されるまで有効であり、通常Menuオブジェクトが解放されたときに発生する。メニューが破壊されると、オペレーティングシステムは、スクリプトまたは他のプログラムによってその後に作成されたすべてのメニューにハンドル値を再割り当てすることができます。</p>
</div>

<h2 id="MenuItemName">MenuItemName</h2>
<p>メニュー項目の名称や位置。このパラメータを使用するすべてのメソッドで、いくつかの共通のルールが適用されます：</p>
<p>メニュー名の1文字に下線を引くには、その文字の前にアンパサンド（&amp;）を付けます。メニューが表示されているときに、キーボードの対応するキーを押すことで、その項目を選択することができます。文字通りのアンパサンドを表示するには、この例のように連続した2つのアンパサンドを指定します：<code>"Save &amp;&amp; Exit"</code></p>
<p>既存のメニューを参照する場合、名前の大文字と小文字は区別されませんが、アンパサンドは必ず含まれていなければなりません。例えば：<code>"&amp;Open"</code></p>
<p>メニュー項目の名称は260文字まで可能です。</p>
<p>既存の項目をメニュー内の位置で識別するには、項目の位置の後にアンパサンドを記述します。例えば、<code>"1&amp;"</code>は最初の項目を示します。</p>

<h2 id="Win32_Menus">Win32 Menus</h2>
<p>Windowsは、標準的な外観と動作を持つメニューを作成、変更、表示するための<a href="https://learn.microsoft.com/windows/win32/menurc/menus">一連の関数と通知を</a>提供します。これらの関数を用いて作成されたメニューを<em>Win32メニュー</em>と呼ぶことにします。</p>
<p>メニューに項目が追加されたり、変更されたりすると、各項目の名前とその他のプロパティがMenuオブジェクトに保存されます。Win32メニューは、メニューまたはその親メニューがGUIに添付されるか、表示される最初の時に構築されます。メニューオブジェクトが削除されたとき（参照カウントがゼロになったとき）に、自動的に破棄されます。</p>
<p><a href="#Handle">Menu.Handle</a>は、Win32メニューのハンドル（<code>HMENU</code>型ハンドル）を、必要に応じて構築して返します。</p>
<p>Win32の関数で直接メニューに加えられた修正は、スクリプトのMenuオブジェクトには反映されないので、ビルトインメソッドでアイテムが修正されると、失われる可能性があります。</p>
<p>各メニューには、最初にメニューに追加されるときにIDが割り当てられます。スクリプトは、アイテムが特定のIDを受け取ることに依存することはできませんが、<a href="#ExDllCall">例5</a>で示すようにGetMenuItemIDを使用して、アイテムのIDを取得することができます。このIDはMenuオブジェクトでは使用できませんが、<a href="https://learn.microsoft.com/windows/win32/menurc/menus">Win32</a>の各種<a href="https://learn.microsoft.com/windows/win32/menurc/menus">機能</a>で使用することができます。</p>

<h2 id="Remarks">備考</h2>
<p>メニューは通常このような形になっています：</p>
<img src="../static/ctrl_menu.png" alt="Menu" style="border: 1px solid silver;" />
<p><code>MyMenu.Delete()</code>などでメニューが完全に空になった場合は、表示することができません。トレイメニューが空になると、トレイアイコンを右クリックやダブルクリックしても効果がありません（このような場合は、通常<a href="_NoTrayIcon.htm">#NoTrayIcon</a>を使用する方がよいでしょう）。</p>
<p>メニュー項目のコールバックがすでに実行されている状態で、ユーザーが同じメニューを再度選択した場合、その同じコールバックを実行するために新しい<a href="../misc/Threads.htm">スレッド</a>が作成され、前のスレッドを中断させます。このようなイベントを後でバッファリングするには、コールバックの最初の行に<a href="Critical.htm">Critical</a>を使用します（ただし、この場合、ホットキーの押下など他のスレッドもバッファリング/ディファーされます）。</p>
<p>メニューから関数を呼び出すと、<a href="SendMode.htm">SendMode</a>などの設定値は常に初期値でスタートします。これらのデフォルトは、<a href="../Scripts.htm#auto">スクリプト起動</a>時に変更することができます。</p>
<p>メニューの内容が常に同じとは限らない場合、そのようなメニューはすべて同じ関数を指定し、その関数の<a href="#CallbackParams">パラメータ</a>を参照して動作を決定する方法があります。また、<a href="../misc/Functor.htm">関数オブジェクト</a>、<a href="../Functions.htm#closures">クロージャ</a>、<a href="../Variables.htm#fat-arrow">ファットアロー関数</a>を使用して、1つ以上の値や変数をメニューアイテムのコールバック関数にバインドすることもできる。</p>

<h2 id="Related">関連</h2>
<p><a href="Gui.htm">GUI</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="_NoTrayIcon.htm">#NoTrayIcon</a>, <a href="../Functions.htm">Functions</a>, <a href="Return.htm">Return</a>, <a href="SetTimer.htm">SetTimer</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> トレイアイコンメニューの下部に新しいメニュー項目を追加します。</p>
<pre>A_TrayMenu.Add()  <em>; セパレータラインを作成します。</em>
A_TrayMenu.Add("Item1", MenuHandler)  <em>; 新しいメニュー項目を作成する。</em>
Persistent

MenuHandler(ItemName, ItemPos, MyMenu) {
    MsgBox "You selected " ItemName " (position " ItemPos ")"
}</pre>
</div>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> ユーザーがホットキーを押したときに表示されるポップアップメニューを作成します。</p>
<pre><em>; ポップアップメニューにいくつかの項目を追加して作成します。</em>
MyMenu := Menu()
MyMenu.Add "Item 1", MenuHandler
MyMenu.Add "Item 2", MenuHandler
MyMenu.Add  <em>; 区切り線を追加する。</em>

<em>; 上のメニューのサブメニューとなるような別のメニューを作成する。</em>
Submenu1 := Menu()
Submenu1.Add "Item A", MenuHandler
Submenu1.Add "Item B", MenuHandler

<em>; 最初のメニューにサブメニューを作成する（右矢印の表示）。ユーザーが選択すると、2番目のメニューが表示される。</em>
MyMenu.Add "My Submenu", Submenu1

MyMenu.Add  <em>; サブメニューの下に区切り線を追加します。</em>
MyMenu.Add "Item 3", MenuHandler  <em>; サブメニューの下に別のメニューを追加します。</em>

MenuHandler(Item, *) {
    MsgBox "You selected " Item
}

#z::MyMenu.Show  <em>; つまり、Win-Zホットキーを押してメニューを表示する。</em></pre>
</div>

<div class="ex" id="ExTray">
<p><a class="ex_number" href="#ExTray"></a> 様々なメニューオブジェクトメンバーの一部を実演しています。</p>
<pre>#SingleInstance
Persistent
tray := A_TrayMenu <em>; 便宜上</em>
tray.delete <em>;標準の項目を削除する。</em>
tray.add <em>; separator</em>
tray.add "TestToggleCheck", TestToggleCheck
tray.add "TestToggleEnable", TestToggleEnable
tray.add "TestDefault", TestDefault
tray.add "TestAddStandard", TestAddStandard
tray.add "TestDelete", TestDelete
tray.add "TestDeleteAll", TestDeleteAll
tray.add "TestRename", TestRename
tray.add "Test", Test

<em>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</em>

TestToggleCheck(*)
{
    tray.ToggleCheck "TestToggleCheck"
    tray.Enable "TestToggleEnable"  <em>; 自分自身の無効化を取り消すことができないので、次のテストも有効に</em>します。
    tray.add "TestDelete", TestDelete <em>; Similar to above.</em>
}

TestToggleEnable(*)
{
    tray.ToggleEnable "TestToggleEnable"
}

TestDefault(*)
{
    if tray.default = "TestDefault"
        tray.default := ""
    else
        tray.default := "TestDefault"
}

TestAddStandard(*)
{
    tray.addStandard
}

TestDelete(*)
{
    tray.delete "TestDelete"
}

TestDeleteAll(*)
{
    tray.delete
}

TestRename(*)
{
    static OldName := "", NewName := ""
    if NewName != "renamed"
    {
        OldName := "TestRename"
        NewName := "renamed"
    }
    else
    {
        OldName := "renamed"
        NewName := "TestRename"
    }
    tray.rename OldName, NewName
}

Test(Item, *)
{
    MsgBox 'You selected "' Item '"'
}</pre>
</div>

<div class="ex" id="ExIcon">
<p><a class="ex_number" href="#ExIcon"></a> メニュー項目にアイコンを追加する方法を説明します。</p>
<pre>FileMenu := Menu()
FileMenu.Add("Script Icon", MenuHandler)
FileMenu.Add("Suspend Icon", MenuHandler)
FileMenu.Add("Pause Icon", MenuHandler)
FileMenu.SetIcon("Script Icon", A_AhkPath, 2) <em>; 2nd icon group from the file</em>
FileMenu.SetIcon("Suspend Icon", A_AhkPath, -206) <em>; icon with resource ID 206</em>
FileMenu.SetIcon("Pause Icon", A_AhkPath, -207) <em>; icon with resource ID 207</em>
MyMenuBar := MenuBar()
MyMenuBar.Add("&amp;File", FileMenu)
MyGui := Gui()
MyGui.MenuBar := MyMenuBar
MyGui.Add("Button",, "Exit This Example").OnEvent("Click", (*) =&gt; WinClose())
MyGui.Show

MenuHandler(*) {
    <em>; この例では、メニュー項目は何もしません。</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> メニューの項目数と最後の項目のIDを報告します。</p>
<pre>
MyMenu := Menu()
MyMenu.Add "Item 1", NoAction
MyMenu.Add "Item 2", NoAction
MyMenu.Add "Item B", NoAction

<em>; メニューの項目数を取得する。</em>
item_count := DllCall("GetMenuItemCount", "ptr", MyMenu.Handle)

<em>; 最後のアイテムのIDを取得します。</em>
last_id := DllCall("GetMenuItemID", "ptr", MyMenu.Handle, "int", item_count-1)

MsgBox "MyMenu has " item_count " items, and its last item has ID " last_id

NoAction(*) {
    <em>; Do nothing.</em>
}
</pre>
</div>

</body>
</html>
