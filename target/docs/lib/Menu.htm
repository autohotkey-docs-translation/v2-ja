<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Menu/MenuBar Object - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="The Menu/MenuBar object provides an interface to create and modify a menu or menu bar, add and modify menu items, and retrieve information about the menu or menu bar." />
<meta name="ahk:equiv-v1" content="lib/Menu.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Menu/MenuBar Object</h1>
<p>Provides an interface to create and modify a menu or menu bar, add and modify menu items, and retrieve information about the menu or menu bar.</p>
<pre class="NoIndent">class Menu extends Object</pre>
<p>メニューオブジェクトは、ポップアップメニューの定義、変更、表示に使用します。<a href="#Call">Menu()</a>、<a href="MenuFromHandle.htm">MenuFromHandle</a>および<a href="../Variables.htm#TrayMenu">A_TrayMenu</a>は、この型のオブジェクトを返す。</p>
<pre class="NoIndent">class MenuBar extends Menu</pre>
<p>MenuBarオブジェクトは、<a href="Gui.htm#MenuBar">Gui.MenuBarで</a>使用するメニューバーの定義や修正に使用します。<a href="#Call">MenuBar()</a>で作成します。<a href="MenuFromHandle.htm">MenuFromHandle</a>は、メニューバーハンドルが与えられた場合、このタイプのオブジェクトを返します。</p>

<p>"Menu"はクラスそのものであるため、以下ではあらゆるMenuオブジェクトのプレースホルダーとして使用します。</p>
<p>メニューオブジェクトは、<a href="Object.htm">Object</a>から継承されるメソッドとプロパティに加えて、以下の定義済みのメソッドとプロパティを持ちます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#StaticMethods">静的メソッドです。</a>
    <ul>
      <li><a href="#Call">Call</a>: Creates a new Menu or MenuBar object.</li>
    </ul>
  </li>
  <li><a href="#Methods">メソッド</a>:
    <ul>
      <li><a href="#Add">Add</a>: Adds or modifies a menu item.</li>
      <li><a href="#AddStandard">AddStandard</a>: Adds the standard tray menu items.</li>
      <li><a href="#Check">Check</a>: Adds a visible checkmark next to a menu item.</li>
      <li><a href="#Delete">Delete</a>: Deletes one or all menu items.</li>
      <li><a href="#Disable">Disable</a>: Grays out a menu item to indicate that the user cannot select it.</li>
      <li><a href="#Enable">Enable</a>: Allows the user to once again select a menu item if it was previously disabled (grayed out).</li>
      <li><a href="#Insert">Insert</a>: Inserts a new item before the specified item.</li>
      <li><a href="#Rename">Rename</a>: Renames a menu item.</li>
      <li><a href="#SetColor">SetColor</a>: Changes the background color of the menu.</li>
      <li><a href="#SetIcon">SetIcon</a>: Sets the icon to be displayed next to a menu item.</li>
      <li><a href="#Show">Show</a>: Displays the menu.</li>
      <li><a href="#ToggleCheck">ToggleCheck</a>: Toggles the checkmark next to a menu item.</li>
      <li><a href="#ToggleEnable">ToggleEnable</a>: Enables or disables a menu item.</li>
      <li><a href="#Uncheck">Uncheck</a>: Removes the checkmark (if there is one) from a menu item.</li>
    </ul>
  </li>
  <li><a href="#Properties">プロパティ</a>:
    <ul>
      <li><a href="#ClickCount">ClickCount</a>: Retrieves or sets how many times the tray icon must be clicked to select its default menu item.</li>
      <li><a href="#Default">Default</a>: Retrieves or sets the default menu item.</li>
      <li><a href="#Handle">Handle</a>: Retrieves the menu's Win32 handle.</li>
    </ul>
  </li>
  <li>General:
    <ul>
      <li><a href="#MenuItemName">MenuItemName</a></li>
      <li><a href="#Win32_Menus">Win32 Menus</a></li>
      <li><a href="#Remarks">備考</a></li>
      <li><a href="#Related">関連</a></li>
      <li><a href="#Examples">例</a></li>
    </ul>
  </li>
</ul>

<h2 id="StaticMethods">静的メソッド</h2>
<div class="methodShort" id="Call">
<h3>コール</h3>
<p>新しい Menu または MenuBar オブジェクトを作成します。</p>
<pre class="Syntax">
MyMenu := Menu()
MyMenuBar := MenuBar()
MyMenu := Menu.<span class="func">Call</span>()
MyMenuBar := MenuBar.<span class="func">Call</span>()
</pre>
</div>

<h2 id="Methods">メソッド</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>メニュー項目を追加または変更します。</p>
<pre class="Syntax">MyMenu.<span class="func">Add</span>(<span class="optional">MenuItemName, CallbackOrSubmenu, Options</span>)</pre>
<h4 id="Add_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The text to display on the menu item, or the position of an existing item to modify. <a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
  <dt id="CallbackOrSubmenu">CallbackOrSubmenu</dt>
  <dd>
    <p>Type: <a href="../misc/Functor.htm">Function Object</a> or <strong>Menu</strong></p>
    <p>The function to call as a new <a href="../misc/Threads.htm">thread</a> when the menu item is selected, or a reference to a Menu object to use as a submenu.</p>
    <p>This parameter is required when creating a new item, but optional when updating the options of an existing item.</p>
    <p>コールバックは3つのパラメーターを受け取り、以下のように<a href="../Functions.htm#intro">定義</a>できる：</p>
    <pre class="NoIndent">MyCallback(ItemName, ItemPos, MyMenu) { ...</pre>
    <p>パラメータに与える名前は重要ではないが、以下の値が順次割り当てられる：</p>
    <ol>
      <li>The name of the menu item.</li>
      <li>The position number of the menu item.</li>
      <li>The Menu object of the menu to which the menu item was added.</li>
    </ol>
    <p>対応する情報が不要な場合、コールバックのパラメータリストの最後から1つ以上のパラメータを省略することができますが、この場合、<code>MyCallback(Param1, *)</code>のように、最後のパラメータとしてアスタリスクを指定する必要があります。</p>
  </dd>
  <dt id="Options">Options</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, it defaults to no options. Otherwise, specify one or more options from the list below (not case-sensitive). 各オプションと次のオプションはスペースまたはタブで区切る。オプションを削除する場合は、オプションの前にマイナス記号を付けます。オプションを追加する場合は、プラス記号を使用することができますが、必須ではありません。</p>
    <p><strong>P</strong><em>n</em>: Specify for <em>n</em> the menu item's <a href="../misc/Threads.htm">thread priority</a>, e.g. <code>P1</code>. メニュー項目を追加する際にこのオプションを省略した場合、優先順位は標準のデフォルトである0になります。メニュー項目を更新する際に省略した場合、その項目の優先順位は変更されません。優先順位として10進数（16進数ではない）を使用します。</p>
    <p><strong>Radio:</strong> If the item is checked, a bullet point is used instead of a check mark.</p>
    <p><strong>Right:</strong> The item is right-justified within the menu bar. This only applies to <a href="Gui.htm#MenuBar">menu bars</a>, not popup menus or submenus.</p>
    <p><strong>Break:</strong> The item begins a new column in a popup menu.</p>
    <p><strong>BarBreak:</strong> As above, but with a dividing line between columns.</p>
<p>To change an existing item's options without affecting its callback or submenu, simply omit the <em>CallbackOrSubmenu</em> parameter.</p>
  </dd>
</dl>
<h4 id="Add_Remarks">備考</h4>
<p>メニューの追加、新しいサブメニューやコールバックによる更新、通常のメニューからサブメニューへの変換（またはその逆）など、多目的に使えるメソッドです。<em>MenuItemName</em>がまだ存在しない場合、メニューに追加されます。Otherwise, <em>MenuItemName</em> is updated with the newly specified <em>CallbackOrSubmenu</em> and/or <em>Options</em>.</p>
<p>メニューの区切り線を追加する場合は、3つのパラメータをすべて省略します。</p>
<p>This method always adds new menu items at the bottom of the menu, while the <a href="#Insert">Insert</a> method can be used to insert an item before an existing custom menu item.</p>
</div>

<div class="methodShort" id="AddStandard">
<h3>AddStandard</h3>
<p>標準<a href="../Program.htm#tray-icon">トレイのメニュー項目を</a>追加します。</p>
<pre class="Syntax">MyMenu.<span class="func">AddStandard</span>()</pre>
<p>この方法は、トレイメニューや他のメニューでも使用できます。</p>
<p>標準項目は、既存の項目の後に挿入されます。すでにある標準的なメニューは重複せず、足りないものは追加されます。空のメニューでAddStandardを呼び出した後の標準アイテムの名前と位置を下表に示します：</p>
<style>
.fake-menu {
  background-color: #f2f2f2;
  border: 1px solid #cccccc;
  color: black;
  line-height: 1.4;
}
.fake-menu td {
  padding: 0 .5em;
}
.fake-menu td {
  text-align: right;
}
.fake-menu td:first-child {
  text-align: left;
}
.fake-sep {
  border: 1px solid #d7d7d7;
  border-width: 1px 0 0;
}
</style>
<table class="fake-menu">
  <tr><td>&amp;Open</td><td>1</td><td>0</td></tr>
  <tr><td>&amp;Help</td><td>2</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>3</td><td></td></tr>
  <tr><td>&amp;Window Spy</td><td>4</td><td></td></tr>
  <tr><td>&amp;Reload Script</td><td>5</td><td></td></tr>
  <tr><td>&amp;Edit Script</td><td>6</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>7</td><td></td></tr>
  <tr><td>&amp;Suspend Hotkeys</td><td>8</td><td>1</td></tr>
  <tr><td>&amp;Pause Script</td><td>9</td><td>2</td></tr>
  <tr><td>E&amp;xit</td><td>10</td><td>3</td></tr>
</table>
<p>コンパイルされたスクリプトには、デフォルトで最後の3つだけが含まれています。AddStandardを呼び出したときに<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>が1の場合のみ、<code>&amp;Open</code>が含まれます（その場合、3列目に示す位置に1を追加します）。トレイメニューに標準項目が含まれている場合、<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>が変更されるたびに、<code>&amp;Open</code>が挿入または削除されます。その他のメニューでは、<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>が 0 の場合、<code>&amp;Open</code>の効果はありません。</p>
<p>各標準項目は、その機能に対応する内部メニュー項目IDを持つが、それ以外は他のメニュー項目と同様に変更または削除することができます。AddStandardは、名前ではなくIDで既存アイテムを検出します。<a href="#Add">Add</a>メソッドを使用して標準メニューに関連するコールバック関数を変更した場合、そのメニューには新しい一意のIDが割り当てられ、もはや標準メニューとはみなされない。</p>
<p>トレイメニューに<code>&amp;Open</code>項目を追加すると、その項目がまだない場合はデフォルトの項目となります。</p>
</div>

<div class="methodShort" id="Check">
<h3>Check</h3>
<p>Adds a visible checkmark in the menu next to a menu item (if there isn't one already).</p>
<pre class="Syntax">MyMenu<span class="func">.Check</span>(MenuItemName)を実行します。</pre>
<h4 id="Check_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>Deletes one or all menu items.</p>
<pre class="Syntax">MyMenu<span class="func">.Delete</span><span class="optional">(MenuItemName</span>)を実行します。</pre>
<h4 id="Delete_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If omitted, all menu items are deleted from the menu, leaving the menu empty. Otherwise, specify the name or position of a menu item. <a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
<h4 id="Delete_Remarks">備考</h4>
<p>空のメニューはまだ存在するので、それをサブメニューとして使用している他のメニューは、それらのサブメニューを保持します。</p>
<p>セパレータラインを削除するには、メニュー内の位置で識別します。例えば、セパレータの前に2つの項目がある場合は、<code>MyMenu.Delete("3&amp;")</code>を使用します。</p>
<p><em>デフォルト</em>のメニュー項目を削除した場合、<code>MyMenu.Default := ""</code>を設定した場合と同様の効果が得られます。</p>
</div>

<div class="methodShort" id="Disable">
<h3>Disable</h3>
<p>Grays out a menu item to indicate that the user cannot select it.</p>
<pre class="Syntax">MyMenu.<span class="func">Disable</span>(MenuItemName)</pre>
<h4 id="Disable_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Enable">
<h3>Enable</h3>
<p>Allows the user to once again select a menu item if it was previously disabled (grayed out).</p>
<pre class="Syntax">MyMenu.<span class="func">Enable</span>(MenuItemName)</pre>
<h4 id="Enable_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Insert">
<h3>Insert</h3>
<p>指定された項目の前に、新しい項目を挿入します。</p>
<pre class="Syntax">MyMenu.<span class="func">Insert</span>(<span class="optional">MenuItemName, ItemToInsert, CallbackOrSubmenu, Options</span>)</pre>
<h4 id="Insert_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, <em>ItemToInsert</em> will be added at the bottom of the menu. Otherwise, specify the name or position of an existing custom menu item before which <em>ItemToInsert</em> should be inserted. See <a href="#MenuItemName">MenuItemName</a>.</p>
  </dd>
  <dt>ItemToInsert</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name of a new menu item to insert before <em>MenuItemName</em>. Unlike the <a href="#Add">Add</a> method, a new item is always created, even if <em>ItemToInsert</em> matches the name of an existing item.</p>
  </dd>
  <dt>CallbackOrSubmenu</dt>
  <dd>
    <p>See the Add method's <a href="#CallbackOrSubmenu">CallbackOrSubmenu parameter</a>.</p>
  </dd>
  <dt>Options</dt>
  <dd>
    <p>See the Add method's <a href="#Options">Options parameter</a>.</p>
  </dd>
</dl>
<h4 id="Insert_Remarks">備考</h4>
<p>To insert a menu separator line before an existing custom menu item, omit all parameters except <em>MenuItemName</em>. To add a menu separator line at the bottom of the menu, omit all parameters.</p>
</div>

<div class="methodShort" id="Rename">
<h3>Rename</h3>
<p>メニュー項目の名前を変更します。</p>
<pre class="Syntax">MyMenu.<span class="func">Rename</span>(MenuItemName <span class="optional">, NewName</span>)</pre>
<h4 id="Rename_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
  <dt>NewName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>If blank or omitted, <em>MenuItemName</em> will be converted into a separator line. Otherwise, specify the new name.</p>
  </dd>
</dl>
<h4 id="Rename_Remarks">備考</h4>
<p>メニューアイテムの現在のコールバックまたはサブメニューは変更されます。</p>
<p>A separator line can be converted to a normal item by specifying the position of the separator such as <code>"1&amp;"</code> for <em>MenuItemName</em> and a non-blank name for <em>NewName</em>, and then using the <a href="#Add">Add</a> method to give the item a callback or submenu.</p>
</div>

<div class="methodShort" id="SetColor">
<h3>SetColor</h3>
<p>メニューの背景色を変更します。</p>
<pre class="Syntax">MyMenu.<span class="func">SetColor</span>(<span class="optional">ColorValue, ApplyToSubmenus</span>)</pre>
<h4 id="SetColor_Parameters">パラメータ</h4>

<dl>
  <dt>ColorValue</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If blank or omitted, it defaults to the word Default, which restores the default color of the menu. Otherwise, specify one of the 16 primary <a href="../misc/Colors.htm">HTML color names</a>, a hexadecimal RGB color string (the 0x prefix is optional), or a pure numeric RGB color value. Example values: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p>
  </dd>
  <dt>ApplyToSubmenus</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#boolean">Boolean</a></p>
    <p>省略したときは、デフォルトでTrueになります。</p>
    <p>If <strong>true</strong>, the color will be applied to all of the menu's submenus.</p>
    <p>If <strong>false</strong>, the color will be applied to the menu only.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="SetIcon">
<h3>SetIcon</h3>
<p>メニュー項目の横に表示するアイコンを設定します。</p>
<pre class="Syntax">MyMenu.<span class="func">SetIcon</span>(MenuItemName, FileName <span class="optional">, IconNumber, IconWidth</span>)</pre>
<h4 id="SetIcon_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
  <dt>FileName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The path to an icon or image file, or a <a href="../misc/ImageHandles.htm">bitmap or icon handle</a> such as <code>"HICON:" handle</code>. For a list of supported formats, see <a href="GuiControls.htm#IconSupport">the Picture control</a>.</p>
    <p>Specify an empty string or <code>"*"</code> to remove the item's current icon.</p>
  </dd>
  <dt>IconNumber</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to 1 (the first icon group). Otherwise, specify the number of the icon group to be used in the file. For example, <code>MyMenu.SetIcon(MenuItemName, "Shell32.dll", 2)</code> would use the default icon from the second icon group. If negative, its absolute value is assumed to be the resource ID of an icon within an executable file.</p>
  </dd>
  <dt>IconWidth</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, it defaults to the width of a small icon recommended by the OS (usually 16 pixels). If 0, the original width is used. Otherwise, specify the desired width of the icon, in pixels. <em>IconNumberで</em>示されるアイコングループに複数のアイコンサイズが含まれる場合、最も近いサイズのアイコンを使用し、指定されたサイズに拡大縮小されます。</p>
  </dd>
</dl>
<h4 id="SetIcon_Remarks">備考</h4>
<p>Currently it is necessary to specify the "actual size" when setting the icon to preserve transparency, e.g.
<code>MyMenu.SetIcon(MenuItemName, "Filename.png",, 0)</code>.</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>メニューを表示します。</p>
<pre class="Syntax">MyMenu.<span class="func">Show</span>(<span class="optional">X, Y</span>)</pre>
<h4 id="Show_Parameters">パラメータ</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted, the menu will be shown near the mouse cursor. Otherwise, specify the X and Y coordinates at which to display the upper left corner of the menu. The coordinates are relative to the active window's client area unless overridden by using <a href="CoordMode.htm">CoordMode</a> or <a href="../Variables.htm#CoordMode">A_CoordModeMenu</a>.</p>
  </dd>
</dl>
<h4 id="Show_Remarks">備考</h4>
<p>Displaying the menu allows the user to select an item with arrow keys, menu shortcuts (underlined letters), or the mouse.</p>
<p>サブメニューやトレイメニューなど、あらゆるポップアップメニューを表示することが可能です。However, an exception is thrown if <em>MyMenu</em> is a MenuBar object.</p>
</div>

<div class="methodShort" id="ToggleCheck">
<h3>ToggleCheck</h3>
<p>チェックマークがない場合は追加し、それ以外の場合は削除します。</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleCheck</span>(MenuItemName)</pre>
<h4 id="ToggleCheck_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="ToggleEnable">
<h3>ToggleEnable</h3>
<p>Disables a menu item if it was previously enabled; otherwise, enables it.</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleEnable</span>(MenuItemName)</pre>
<h4 id="ToggleEnable_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="Uncheck">
<h3>Uncheck</h3>
<p>メニュー項目からチェックマーク（ある場合）を削除します。</p>
<pre class="Syntax">MyMenu.<span class="func">Uncheck</span>(MenuItemName)</pre>
<h4 id="Uncheck_Parameters">パラメータ</h4>
<dl>
  <dt>MenuItemName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>メニュー項目の名称や位置。<a href="#MenuItemName">MenuItemName</a>」を参照。</p>
  </dd>
</dl>
</div>

<h2 id="Properties">属性</h2>
<div class="methodShort" id="ClickCount">
<h3>ClickCount</h3>
<p>Retrieves or sets how many times the <a href="../Program.htm#tray-icon">tray icon</a> must be clicked to select its default menu item.</p>
<pre class="Syntax">CurrentCount := MyMenu.<span class="func">ClickCount</span></pre>
<pre class="Syntax">MyMenu.<span class="func">ClickCount</span> := NewCount</pre>
<p><em>CurrentCount</em> is <em>NewCount</em> if assigned, otherwise 2 by default.</p>
<p><em>NewCount</em> can be 1 to allow a single-click to select the tray menu's default menu item, or 2 to return to the default behavior (double-click). Any other value is invalid and throws an exception.</p>
</div>

<div class="methodShort" id="Default">
<h3>デフォルト</h3>
<p>デフォルトのメニュー項目を取得または設定します。</p>
<pre class="Syntax">CurrentDefault := MyMenu.<span class="func">Default</span></pre>
<pre class="Syntax">MyMenu.<span class="func">Default</span> := MenuItemName</pre>
<p><em>CurrentDefault</em> is the name of the default menu item, or an empty string if there is no default.</p>
<p><em>MenuItemName</em> is the name or position of a menu item. See <a href="#MenuItemName">MenuItemName</a>. If <em>MenuItemName</em> is an empty string, there will be no default.</p>
<p>デフォルトの項目を設定すると、その項目のフォントが太くなります（トレイメニュー以外のメニューでデフォルトの項目を設定することは、現在のところ純粋な外観上の問題です）。When the user double-clicks the <a href="../Program.htm#tray-icon">tray icon</a>, its default menu item is selected (even if the item is disabled). デフォルトがない場合、ダブルクリックしても効果はありません。</p>
<p>トレイメニューのデフォルト項目は、存在する場合、最初は<code>&amp;Open</code>です。<a href="#AddStandard">AddStandard</a>の呼び出しや<a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a>の変更によってトレイメニューに<code>&amp;Open</code>を追加すると、すでになかった場合はデフォルトのアイテムになることもあります。</p>
<p>デフォルトの項目が削除された場合、メニューには何もない状態になります。</p>
</div>

<div class="methodShort" id="Handle">
<h3>Handle</h3>
<p><a href="#Win32_Menus">Win32メニュー</a>のハンドル（<code>HMENU</code>型ハンドル）を、必要に応じて構築して返します。</p>
<pre class="Syntax">Handle := MyMenu.<span class="func">Handle</span></pre>
<p>返されたハンドルは、Win32メニューが破棄されるまで有効であり、通常Menuオブジェクトが解放されたときに発生する。メニューが破壊されると、オペレーティングシステムは、スクリプトまたは他のプログラムによってその後に作成されたすべてのメニューにハンドル値を再割り当てすることができます。</p>
</div>

<h2 id="MenuItemName">MenuItemName</h2>
<p>メニュー項目の名称や位置。このパラメータを使用するすべてのメソッドで、いくつかの共通のルールが適用されます：</p>
<p>メニュー名の1文字に下線を引くには、その文字の前にアンパサンド（&amp;）を付けます。メニューが表示されているときに、キーボードの対応するキーを押すことで、その項目を選択することができます。To display a literal ampersand, specify two consecutive ampersands as in this example: <code>"Save &amp;&amp; Exit"</code></p>
<p>When referring to an existing menu item, the name is not case-sensitive but any ampersands must be included. For example: <code>"&amp;Open"</code></p>
<p>メニュー項目の名称は260文字まで可能です。</p>
<p>既存の項目をメニュー内の位置で識別するには、項目の位置の後にアンパサンドを記述します。例えば、<code>"1&amp;"</code>は最初の項目を示します。</p>

<h2 id="Win32_Menus">Win32 Menus</h2>
<p>Windowsは、標準的な外観と動作を持つメニューを作成、変更、表示するための<a href="https://learn.microsoft.com/windows/win32/menurc/menus">一連の関数と通知を</a>提供します。これらの関数を用いて作成されたメニューを<em>Win32メニュー</em>と呼ぶことにします。</p>
<p>メニューに項目が追加されたり、変更されたりすると、各項目の名前とその他のプロパティがMenuオブジェクトに保存されます。Win32メニューは、メニューまたはその親メニューがGUIに添付されるか、表示される最初の時に構築されます。メニューオブジェクトが削除されたとき（参照カウントがゼロになったとき）に、自動的に破棄されます。</p>
<p><a href="#Handle">Menu.Handle</a>は、Win32メニューのハンドル（<code>HMENU</code>型ハンドル）を、必要に応じて構築して返します。</p>
<p>Win32の関数で直接メニューに加えられた修正は、スクリプトのMenuオブジェクトには反映されないので、ビルトインメソッドでアイテムが修正されると、失われる可能性があります。</p>
<p>各メニューには、最初にメニューに追加されるときにIDが割り当てられます。スクリプトは、アイテムが特定のIDを受け取ることに依存することはできませんが、<a href="#ExDllCall">例5</a>で示すようにGetMenuItemIDを使用して、アイテムのIDを取得することができます。このIDはMenuオブジェクトでは使用できませんが、<a href="https://learn.microsoft.com/windows/win32/menurc/menus">Win32</a>の各種<a href="https://learn.microsoft.com/windows/win32/menurc/menus">機能</a>で使用することができます。</p>

<h2 id="Remarks">備考</h2>
<p>メニューは通常このような形になっています：</p>
<img src="../static/ctrl_menu.png" alt="Menu" style="border: 1px solid silver;" />
<p><code>MyMenu.Delete()</code>などでメニューが完全に空になった場合は、表示することができません。If the tray menu becomes empty, right-clicking and double-clicking the <a href="../Program.htm#tray-icon">tray icon</a> will have no effect (in such cases it is usually better to use <a href="_NoTrayIcon.htm">#NoTrayIcon</a>).</p>
<p>メニュー項目のコールバックがすでに実行されている状態で、ユーザーが同じメニューを再度選択した場合、その同じコールバックを実行するために新しい<a href="../misc/Threads.htm">スレッド</a>が作成され、前のスレッドを中断させます。このようなイベントを後でバッファリングするには、コールバックの最初の行に<a href="Critical.htm">Critical</a>を使用します（ただし、この場合、ホットキーの押下など他のスレッドもバッファリング/ディファーされます）。</p>
<p>メニューから関数を呼び出すと、<a href="SendMode.htm">SendMode</a>などの設定値は常に初期値でスタートします。これらのデフォルトは、<a href="../Scripts.htm#auto">スクリプト起動</a>時に変更することができます。</p>
<p>メニューの内容が常に同じとは限らない場合、そのようなメニューはすべて同じ関数を指定し、その関数の<a href="#CallbackOrSubmenu">パラメータ</a>を参照して動作を決定する方法があります。また、<a href="../misc/Functor.htm">関数オブジェクト</a>、<a href="../Functions.htm#closures">クロージャ</a>、<a href="../Variables.htm#fat-arrow">ファットアロー関数</a>を使用して、1つ以上の値や変数をメニューアイテムのコールバック関数にバインドすることもできる。</p>

<h2 id="Related">関連</h2>
<p><a href="Gui.htm">GUI</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="_NoTrayIcon.htm">#NoTrayIcon</a>, <a href="../Functions.htm">Functions</a>, <a href="Return.htm">Return</a>, <a href="SetTimer.htm">SetTimer</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Adds a new menu item to the bottom of the <a href="../Program.htm#tray-icon">tray icon</a> menu.</p>
<pre>A_TrayMenu.Add()  <em>; Creates a separator line.</em>
A_TrayMenu.Add("Item1", MenuHandler)  <em>; Creates a new menu item.</em>
Persistent

MenuHandler(ItemName, ItemPos, MyMenu) {
    MsgBox "You selected " ItemName " (position " ItemPos ")"
}</pre>
</div>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> ユーザーがホットキーを押したときに表示されるポップアップメニューを作成します。</p>
<pre><em>; Create the popup menu by adding some items to it.</em>
MyMenu := Menu()
MyMenu.Add("Item 1", MenuHandler)
MyMenu.Add("Item 2", MenuHandler)
MyMenu.Add()  <em>; Add a separator line.</em>

<em>; Create another menu destined to become a submenu of the above menu.</em>
Submenu1 := Menu()
Submenu1.Add("Item A", MenuHandler)
Submenu1.Add("Item B", MenuHandler)

<em>; Create a submenu in the first menu (a right-arrow indicator). When the user selects it, the second menu is displayed.</em>
MyMenu.Add("My Submenu", Submenu1)

MyMenu.Add()  <em>; Add a separator line below the submenu.</em>
MyMenu.Add("Item 3", MenuHandler)  <em>; Add another menu item beneath the submenu.</em>

MenuHandler(Item, *) {
    MsgBox("You selected " Item)
}

#z::MyMenu.Show()  <em>; i.e. press the Win-Z hotkey to show the menu.</em></pre>
</div>

<div class="ex" id="ExTray">
<p><a class="ex_number" href="#ExTray"></a> 様々なメニューオブジェクトメンバーの一部を実演しています。</p>
<pre>#SingleInstance
Persistent
Tray := A_TrayMenu <em>; For convenience.</em>
Tray.Delete() <em>; Delete the standard items.</em>
Tray.Add() <em>; separator</em>
Tray.Add("TestToggleCheck", TestToggleCheck)
Tray.Add("TestToggleEnable", TestToggleEnable)
Tray.Add("TestDefault", TestDefault)
Tray.Add("TestAddStandard", TestAddStandard)
Tray.Add("TestDelete", TestDelete)
Tray.Add("TestDeleteAll", TestDeleteAll)
Tray.Add("TestRename", TestRename)
Tray.Add("Test", Test)

<em>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</em>

TestToggleCheck(*)
{
    Tray.ToggleCheck("TestToggleCheck")
    Tray.Enable("TestToggleEnable") <em>; Also enables the next test since it can't undo the disabling of itself.</em>
    Tray.Add("TestDelete", TestDelete) <em>; Similar to above.</em>
}

TestToggleEnable(*)
{
    Tray.ToggleEnable("TestToggleEnable")
}

TestDefault(*)
{
    if Tray.Default = "TestDefault"
        Tray.Default := ""
    else
        Tray.Default := "TestDefault"
}

TestAddStandard(*)
{
    Tray.AddStandard()
}

TestDelete(*)
{
    Tray.Delete("TestDelete")
}

TestDeleteAll(*)
{
    Tray.Delete()
}

TestRename(*)
{
    static OldName := "", NewName := ""
    if NewName != "renamed"
    {
        OldName := "TestRename"
        NewName := "renamed"
    }
    else
    {
        OldName := "renamed"
        NewName := "TestRename"
    }
    Tray.Rename(OldName, NewName)
}

Test(Item, *)
{
    MsgBox("You selected " Item)
}</pre>
</div>

<div class="ex" id="ExIcon">
<p><a class="ex_number" href="#ExIcon"></a> メニュー項目にアイコンを追加する方法を説明します。</p>
<pre>FileMenu := Menu()
FileMenu.Add("Script Icon", MenuHandler)
FileMenu.Add("Suspend Icon", MenuHandler)
FileMenu.Add("Pause Icon", MenuHandler)
FileMenu.SetIcon("Script Icon", A_AhkPath, 2) <em>; 2nd icon group from the file</em>
FileMenu.SetIcon("Suspend Icon", A_AhkPath, -206) <em>; icon with resource ID 206</em>
FileMenu.SetIcon("Pause Icon", A_AhkPath, -207) <em>; icon with resource ID 207</em>
MyMenuBar := MenuBar()
MyMenuBar.Add("&amp;File", FileMenu)
MyGui := Gui()
MyGui.MenuBar := MyMenuBar
MyGui.Add("Button",, "Exit This Example").OnEvent("Click", (*) =&gt; WinClose())
MyGui.Show()

MenuHandler(*) {
    <em>; For this example, the menu items don't do anything.</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> メニューの項目数と最後の項目のIDを報告します。</p>
<pre>
MyMenu := Menu()
MyMenu.Add("Item 1", NoAction)
MyMenu.Add("Item 2", NoAction)
MyMenu.Add("Item B", NoAction)

<em>; Retrieve the number of items in a menu.</em>
item_count := DllCall("GetMenuItemCount", "ptr", MyMenu.Handle)

<em>; Retrieve the ID of the last item.</em>
last_id := DllCall("GetMenuItemID", "ptr", MyMenu.Handle, "int", item_count-1)

MsgBox("MyMenu has " item_count " items, and its last item has ID " last_id)

NoAction(*) {
    <em>; Do nothing.</em>
}
</pre>
</div>

</body>
</html>
