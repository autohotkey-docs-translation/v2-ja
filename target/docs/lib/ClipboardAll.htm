<!DOCTYPE HTML>
<html lang="jac">
<head>
<title>ClipboardAll - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="ClipboardAllクラスは、クリップボード上のすべてのもの（画像や書式など）の保存と復元を容易にします。" />
<meta name="ahk:equiv-v1" content="misc/Clipboard.htm#ClipboardAll" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ClipboardAll</h1>

<p>クリップボード上のすべてのもの（画像や書式など）を含むオブジェクトを作成します。</p>
<pre class="Syntax">ClipSaved := <span class="func">ClipboardAll</span>(<span class="optional">Data, Size</span>)</pre>
<p><em></em><code>ClipboardAll</code>自体は、<code>Buffer</code>から派生した<a href="Class.htm">クラス</a>です。</p>

<h2 id="Parameters">パラメータ</h2>
<p>両方のパラメータを省略すると、クリップボードの現在の内容を取得することができます。それ以外の場合は、1つまたは両方のパラメータを指定して、与えられたバイナリクリップボードデータを含むオブジェクトを作成します。</p>
<dl>
  <dt>Data</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#objects">オブジェクト</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p><a href="Buffer.htm">Buffer</a>のようなオブジェクト、またはバイナリデータのアドレスである純粋な整数。データは特定のフォーマットでなければならないので、一般的には、以前にClipboardAllを呼び出したときに発生したものです。以下の<a href="#ExFile">例2</a>参照。</p>
  </dd>
  <dt>Size</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>使用するデータのバイト数を指定します。<em>Data</em>がオブジェクトの場合は省略可能です。</p>
  </dd>
</dl>

<h2 id="clipboardall-object">戻り値</h2>
<p>型：<a href="../Concepts.htm#objects">オブジェクト</a></p>
<p>この関数は、2つのプロパティ（<a href="Buffer.htm">Buffer</a>から継承）を持つClipboardAllオブジェクトを返す：</p>
<ul>
  <li><a href="Buffer.htm#Ptr">Ptr</a>：オブジェクトが含むデータのアドレス。このアドレスは、オブジェクトが解放されるまで有効です。</li>
  <li><a href="Buffer.htm#Size">Size</a>：未加工のバイナリデータのサイズ（バイト単位）です。</li>
</ul>

<h2 id="Remarks">備考</h2>
<p>組込変数<a href="A_Clipboard.htm">A_Clipboard</a>は、プレーンテキストとして表現されたWindowsクリップボードの現在の内容を反映しますが、ClipboardAllオブジェクトを割り当てて、その内容をクリップボードに復元することができます。</p>
<p><em>ClipboardAll</em>は、クリップボードの内容を保存して、スクリプトが一時的にクリップボードを操作に使用できるようにするために最もよく使われます。操作が完了すると、スクリプトは<a href="#ExVar">例1</a>および<a href="#ExFile">例2</a>に示すように、元のクリップボードの内容を復元します。</p>
<p><em>ClipboardAll</em>がクリップボード上の1つ以上のデータオブジェクト（フォーマット）を取得できない場合、それらは省略されますが、残りのオブジェクトはすべて保存されます。</p>
<p><a href="ClipWait.htm">ClipWait</a>は、クリップボードにデータ（オプションで非テキストデータも含む）が含まれていることを検出するために使用することができる。</p>
<p>オブジェクトが含むバイナリデータは、4バイトのフォーマットタイプ、4バイトのデータブロックサイズ、そのフォーマットのデータブロックの順で構成されます。クリップボードに複数のフォーマットが含まれている場合（ほとんどの場合）、すべてのフォーマットが含まれるまで、これら3つの項目が繰り返されます。データは、4バイトのフォーマットタイプ「0」で終了します。</p>

<h2 id="Related">関連</h2>
<p><a href="A_Clipboard.htm">A_Clipboard</a>, <a href="ClipWait.htm">ClipWait</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="_ClipboardTimeout.htm">#ClipboardTimeout</a>, <a href="Buffer.htm">Buffer</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExVar">
<p><a class="ex_number" href="#ExVar"></a> 変数を使ってクリップボードのすべてを保存・復元します。</p>
<pre>ClipSaved := ClipboardAll()   <em>; クリップボード全体を任意の変数に保存します。
; ... ここで、大量のテキストを素早く貼り付けるなど、クリップボードを一時的に使用する ...</em>
A_Clipboard := ClipSaved   <em>; 元のクリップボードを復元します。<i>ClipboardAll</i>ではなく、<i>A_Clipboard</i>を使用していることに注意してください。</em>
ClipSaved := ""  <em>; クリップボードが非常に大きい場合に備えて、メモリを解放しています。</em></pre>
</div>

<div class="ex" id="ExFile">
<p><a class="ex_number" href="#ExFile"></a> クリップボードにあるすべてのものを、ファイルを使って保存・復元します。</p>
<pre><em>; オプション1：既存のファイルを削除し、FileAppendを使用します。</em>
<a href="FileDelete.htm">FileDelete</a> "Company Logo.clip"
<a href="FileAppend.htm">FileAppend</a> ClipboardAll(), "Company Logo.clip" <em>; ファイル拡張子は問いません。</em>

<em>; オプション2：FileOpenを上書きモードで使用し、File.RawWriteを使用します。</em>
ClipData := ClipboardAll()
<a href="FileOpen.htm">FileOpen</a>("Company Logo.clip", "w").<a href="File.htm#RawWrite">RawWrite</a>(ClipData)</pre>
<p>後でファイルをクリップボードに（または変数に）読み戻すには、次の例に従います：</p>
<pre>ClipData := FileRead("Company Logo.clip", "RAW")  <em>; この場合、FileReadはBufferを返します。</em>
A_Clipboard := ClipboardAll(ClipData)  <em>; BufferをClipboardAllに変換してアサインします。</em></pre>
</div>

</body>
</html>
