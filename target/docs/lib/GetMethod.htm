<!DOCTYPE HTML>
<html lang="jac">
<head>
<title>GetMethod - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="GetMethod 関数は、メソッドの実装関数を取得します。" />
<meta name="ahk:equiv-v1" content="index.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetMethod</h1>

<p>メソッドの実装関数を取得します。</p>

<pre class="Syntax">Method := <span class="func">GetMethod</span>(Value <span class="optional">, Name, ParamCount</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>
  <dt>Value</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#values">任意</a></p>
    <p>ComObject 以外の任意の型の値。</p>
  </dd>
  <dt>Name</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>If omitted, validation is performed on <em>Value</em> itself and <em>Value</em> is returned if successful. Otherwise, specify the name of the method to retrieve.</p>
    <p></p>
  </dd>
  <dt>ParamCount</dt>
  <dd>
    <tp>Type: <a href="../Concepts.htm#numbers">Integer</a></tp>
    <p>省略したとき、またはパラメータ数が確認されなかったときは、オブジェクトが呼び出し可能である可能性が高いことを確認するために、Callメソッドに対して基本的なチェックが実行されます。</p>
    <p>そうでないときは、メソッドまたは関数に渡されるパラメーターの数を指定します。指定された場合、メソッドの MinParams、MaxParams、IsVariadic プロパティを照会して、この数のパラメータを受け入れることができることを確認することができます。これらのプロパティが存在しない場合、パラメータ数の確認は行われません。</p>
    <p>このカウントには、暗黙の<code>this</code>パラメータを含めてはなりません。</p>
  </dd>
</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../misc/Functor.htm">機能オブジェクト</a></p>
<p>この関数は、メソッドの実装を含む関数オブジェクト、または<em>Name</em>が省略された場合は<em>Value</em>自体を返す。</p>

<h2 id="Errors">エラー</h2>
<p>メソッドが見つからない場合、またはプロパティゲッターを呼び出さずに取得できない場合は、<a href="Error.htm#MethodError">MethodError</a>がスローされます。</p>
<p>バリデーションが試みられた場合、メソッドのプロパティを照会した結果、例外が発生することがあります。バリデーションに失敗した場合、<a href="Error.htm#ValueError">ValueError</a>または<a href="Error.htm#MethodError">MethodError</a>がスローされます。</p>

<h2 id="Remarks">備考</h2>
<p>メソッドは、以下のいずれかによって定義することができる：</p>
<ul>
  <li><em>コールアクセサー</em>関数を持つダイナミックプロパティです。包含：
    <ul>
      <li>クラス内の<a href="../Objects.htm#Custom_Classes_method">メソッド定義</a>によって作成されるすべてのプロパティ。</li>
      <li>記述子を渡すことで作成されるプロパティ、以下のような<code>{Call: fn}</code> から<a href="Object.htm#DefineProp">DefineProp</a>へ、<em>fn</em>はメソッドを実装しています。</li>
      <li>任意の定義済み/組み込みの方法。</li>
    </ul>
  </li>
  <li>オブジェクトまたはそのベースとなるオブジェクトの1つの独自の値プロパティで、値が<a href="../misc/Functor.htm">関数オブジェクト</a>である場合。</li>
  <li>関数オブジェクトを返すゲッターを持つダイナミックプロパティです。このケースはGetMethodではサポートされていません。</li>
  <li><a href="../Objects.htm#Meta_Functions">メタファンクション</a>__Call内で処理します。この方法で実装されたメソッドは検出できず、対応する関数オブジェクトもない可能性があるため、GetMethodではサポートされません。</li>
</ul>
<p>関数オブジェクトを呼び出す際には、通常は隠されている<em>this</em>パラメータに値を与える必要があります。例えば、<code>Method(Value, Parameters*)</code>のようなものです。</p>
<p>GetMethodの標準的な実装には上記のような制限がありますが、<code>GetMethod(Value, Name)</code>の代わりに<code>Value.GetMethod(Name)</code>を使用すれば、オブジェクト<em>Value</em>は独自のGetMethodの実装を定義できます。</p>
<p><code>GetMethod(Value, "Call", N)</code>は、<code>GetMethod(Value,, N)</code>とは異なり、Callメソッドは関数オブジェクト自身をパラメータとし、その使用方法は<em>Value</em>と異なる場合があります。例えば、<code>Func.Prototype.Call</code>は、すべての組み込み関数とユーザー定義関数に適用される単一のメソッドであり、そのため、任意の数のパラメータを受け入れる必要があります。</p>

<h2 id="Related">関連</h2>
<p><a href="../Objects.htm">オブジェクト</a>、<a href="HasMethod.htm">HasMethod</a>、<a href="HasBase.htm">HasBase</a>、<a href="HasProp.htm">HasProp</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> <a href="Any.htm#GetMethod">GetMethod メソッド</a>に関する情報を取得し、報告します。</p>
<pre>
method := GetMethod({}, "GetMethod")  <em>; It's also a method.</em>
MsgBox method.MaxParams  <em>; Takes 2 parameters, including 'this'.</em>
MsgBox method = GetMethod  <em>; Actually the same object in this case.</em>
</pre>
</div>

</body>
</html>
