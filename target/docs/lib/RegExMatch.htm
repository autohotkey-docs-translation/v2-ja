<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>RegExMatch - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="RegExMatch 関数は、文字列がパターン（正規表現）を含むかどうかを判定します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegExMatch</h1>

<p>文字列がパターン（正規表現）を含むかどうかを判定します。</p>

<pre class="Syntax">FoundPos := <span class="func">RegExMatch</span>(Haystack, NeedleRegEx <span class="optional">, &amp;OutputVar, StartingPos</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Haystack</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">String</a></p>
    <p>内容を検索する文字列。バイナリーゼロを含む場合があります。</p>
  </dd>

  <dt>NeedleRegEx</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">String</a></p>
    <p>検索するパターンで、Perl互換正規表現（PCRE）です。パターンの<a href="../misc/RegEx-QuickRef.htm#Options">オプション</a>がある場合は、文字列の先頭に含める必要があり、その後に閉じ括弧が続きます。例えば、<span class="regex"><span class="red">i)</span>abc.*123</span>というパターンは、大文字小文字を区別しないオプションをオンにし、"abc "の後に任意の文字が0回以上出現し、その後に "123 "が続くものを検索対象とします。オプションがない場合、")"はオプションです。例えば、<span class="regex">)abcは</span> <span class="regex">abcと</span>同等です。</p>
    <p><em>NeedleRegEx</em>はバイナリーゼロを含むことができませんが、<em>Haystack</em>内のバイナリーゼロに一致させるために、パターン<code>\x00</code>を使用することができます。</p>
  </dd>

  <dt>&amp;OutputVar</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>If omitted, no output variable will be used. Otherwise, specify a reference to the output variable in which to store a <a href="#MatchObject">match object</a>, which can be used to retrieve the position, length and value of the overall match and of each <a href="../misc/RegEx-QuickRef.htm#subpat">captured subpattern</a>, if any are present.</p>
    <p>パターンが見つからない場合（つまり、関数が0を返す場合）、この変数は空白にされる。</p>
  </dd>

  <dt>StartingPos</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>If omitted, it defaults to 1 (the beginning of <em>Haystack</em>). それ以外の場合は、2文字目から始める場合は2、3文字目から始める場合は3、といった具合に指定します。If <em>StartingPos</em> is beyond the length of <em>Haystack</em>, the search starts at the empty string that lies at the end of <em>Haystack</em> (which typically results in no match).</p>
    <p>負の<em>StartingPos</em>を指定すると、その位置で右からスタートする。例えば、-1は最後の文字から、-2はその次の文字から始まります。<em>StartingPos</em>が <em>Haystack</em>の左端を越えようとした場合、<em>Haystack</em>の全てが検索される。</p>
    <p>0を指定すると、<em>Haystack</em>の末尾、つまり最後の文字の右側の位置から開始します。これは、<code>(?&lt;=a)</code>のようなゼロ幅のアサーションで使用することができます。</p>
    <p><em>StartingPos</em>の値に関係なく、戻り値は常に<em>Haystack</em>の最初の文字からの相対値です。例えば、"123abc789"の "abc"の位置は、常に4です。</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#numbers">整数</a></p>
<p>この関数は、文字列<em>Haystack</em>の中で<em>NeedleRegEx</em>が最も左側に出現する位置を返します。ポジション1が最初の文字です。パターンが見つからない場合は0が返される。</p>

<h2 id="Errors">エラー</h2>
<p><strong>シンタックスエラー</strong>パターンに構文エラーが含まれる場合、以下のようなメッセージとともに<a href="Error.htm">Error</a>が投げられる：<em>オフセットMでコンパイルエラーN：description</em>. その文字列の中で、<em>Nは</em>PCREのエラー番号、<em>Mは</em>正規表現内の問題のある文字の位置、<em>descriptionは</em>エラーを説明するテキストである。</p>
<p><strong>実行エラー：</strong>正規表現の<em>実行</em>中にエラーが発生した場合、<a href="Error.htm">Error</a>が投げられます。エラーオブジェクトの<em>Extra</em>プロパティには、PCREのエラー番号が記載されています。このようなエラーは稀ですが、発生しやすいのは「空文字列の可能性が多すぎる」（-22）、「再帰が深すぎる」（-21）、「マッチの限界に達した」（-8）です。このような場合は、可能な限り * を ?、+、{0,3} のような制限に置き換えるなど、より制限の多いパターンに設計し直すようにしてください。</p>

<h2 id="Options">Options</h2>
<p>See <a href="../misc/RegEx-QuickRef.htm#Options">RegEx Quick Reference</a> for options such as <span class="regex"><span class="red">i)</span>abc</span>, which turns off case-sensitivity.</p>

<h2 id="MatchObject">マッチオブジェクト(RegExMatchInfo)</h2>
<p>一致した場合、一致した情報を含むオブジェクトが<em>OutputVar</em>に格納される。このオブジェクトは、以下のメソッドとプロパティを持ちます：</p>
<p><strong>Match.Pos</strong>, <strong>Match.Pos[N]</strong> または <strong>Match.Pos(N)</strong>:全体一致の位置、または取り込んだサブパターンの位置を返します。</p>
<p><strong>Match.Len</strong>, <strong>Match.Len[N]</strong> または <strong>Match.Len(N)</strong>:全体的なマッチの長さ、またはキャプチャしたサブパターンの長さを返します。</p>
<p><strong>Match.Name[N]</strong> または <strong>Match.Name(N)</strong>:与えられたサブパターンがある場合、その名前を返します。</p>
<p><strong>Match.Count:</strong> Returns the overall number of subpatterns (capturing groups), which is also the maximum value for <em>N</em>.</p>
<p><strong>Match.Mark:</strong> Returns the <em>NAME</em> of the last encountered <span class="regex">(*MARK:NAME)</span>, when applicable.</p>
<p><strong>Match[]</strong> または <strong>Match[N]</strong>:全体的なマッチ、またはキャプチャしたサブパターンを返します。</p>
<p>以上のことから、<em>N</em>は以下のいずれかになることができます：</p>
<ul>
  <li>全体の試合では0。</li>
  <li>サブパターンの番号で、名前も持っているものでもよい。</li>
  <li>サブパターンの名前です。</li>
</ul>
<p><strong>Match.N:</strong> Shorthand for <strong>Match["N"]</strong>, where <em>N</em> is any unquoted name or number which does not conflict with a defined property (listed above). 例えば、<code>match.1や</code> <code>match.Year</code>などです。</p>
<p>また、このオブジェクトは列挙をサポートしています。つまり、<a href="For.htm">for-loop</a>がサポートされています。または、<code><a href="Loop.htm">Loop</a>Match.Count</code>を使用します。</p>

<h2 id="Performance">パフォーマンス</h2>
<p>大きな文字列の中の単純な部分文字列を検索するには、RegExMatchよりも高速な<a href="InStr.htm">InStr</a>を使用します。</p>
<p>パフォーマンスを向上させるため、最近使用された100個の正規表現をメモリ上にキャッシュしておく（コンパイルされた状態）。</p>
<p><a href="../misc/RegEx-QuickRef.htm#Study">学習オプション(S)</a>は、（ループ内などで）何度も使用される正規表現のパフォーマンスを向上させることができる場合があります。</p>

<h2 id="Remarks">備考</h2>
<p id="NamedSubPat">サブパターンには、パターン<span class="regex">(?P&lt;Year&gt;d{4})</span>における<em>Year</em>という単語のような名前を付けることができる。このような名前は、最大32文字の英数字とアンダースコアで構成されます。名前付きサブパターンにも番号が振られるため、「Year」の後に<a href="../misc/RegEx-QuickRef.htm#subpat">名前なしサブパターン</a>が発生した場合、<code>OutputVar[1]</code>ではなく<code>OutputVar[2]<code>に格納されることに注意しましょう。</p>
<p>abc123 のようなほとんどの文字は、正規表現の中で文字通り使用することができます。However, any of the characters in the set <code>\.*?+[{|()^$</code> must be preceded by a backslash to be seen as literal. 例えば、<span class="regex">.</span>はリテラルピリオド、<span class="regex">.</span>はリテラルバックスラッシュです。エスケープを回避するには、\Q...\E.を使用します。事例：<span class="regex">\QLiteral Text\E</span>.</p>
<p>正規表現の中で、タブや改行などの特殊文字は、アクセント記号(`)またはバックスラッシュ(\)でエスケープすることができます。For example, <span class="regex">`t</span> is the same as <span class="regex">\t</span> except when the <a href="../misc/RegEx-QuickRef.htm#opt_x">x option</a> is used.</p>
<p>正規表現の基本を学ぶ（またはパターン構文の記憶を取り戻す）には、<a href="../misc/RegEx-QuickRef.htm">RegExクイックリファレンス</a>をご覧ください。</p>
<p>AutoHotkeyの正規表現は、<a href="http://www.pcre.org/">www.pcre.org</a>のPerl-compatible Regular Expressions (PCRE)を使用して実装されています。</p>
<p>Within an <a href="../Variables.htm#Expressions">expression</a>, <code>a ~= b</code> can be used as shorthand for <code>RegExMatch(a, b)</code>.</p>
<h2 id="Related">関連</h2>
<p><a href="RegExReplace.htm">RegExReplace</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>, <a href="../misc/RegExCallout.htm">Regular Expression Callouts</a>, <a href="InStr.htm">InStr</a>, <a href="SubStr.htm">SubStr</a>, <a href="SetTitleMatchMode.htm#RegEx">SetTitleMatchMode RegEx</a>, <a href="https://www.autohotkey.com/forum/topic16164.html">Global matching and Grep (forum link)</a></p>
<p>テキストデータの一般的なソース：<a href="FileRead.htm">FileRead</a>, <a href="Download.htm">Download</a>, <a href="A_Clipboard.htm">A_Clipboard</a>, <a href="GuiControls.htm#Edit">GUI Edit controls</a></p>

<h2 id="Examples">例</h2>
<p>一般的なRegExの例については、<a href="../misc/RegEx-QuickRef.htm">RegExクイックリファレンス</a>を参照してください。</p>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 一致した位置である4を報告する。</p>
<pre>MsgBox RegExMatch("xxxabc123xyz", "abc.*xyz")</pre>
</div>

<div class="ex" id="ExDollar">
<p><a class="ex_number" href="#ExDollar"></a> 7を報告するのは、＄がマッチを最後にすることを要求しているからです。</p>
<pre>MsgBox RegExMatch("abc123123", "123$")</pre>
</div>

<div class="ex" id="ExCaseInsens">
<p><a class="ex_number" href="#ExCaseInsens"></a> 大文字小文字を区別しないオプションで一致したため、1を報告します。</p>
<pre>MsgBox RegExMatch("abc123", "i)^ABC")</pre>
</div>

<div class="ex" id="ExOutputVar">
<p><a class="ex_number" href="#ExOutputVar"></a> 1を報告し、SubPat[1]に "XYZ "を格納する。</p>
<pre>MsgBox RegExMatch("abcXYZ123", "abc(.*)123", &amp;SubPat)</pre>
</div>

<div class="ex" id="ExStartingPos">
<p><a class="ex_number" href="#ExStartingPos"></a> スタート位置が1ではなく2のため、1ではなく7を報告する。</p>
<pre>MsgBox RegExMatch("abc123abc456", "abc\d+",, 2)</pre>
</div>

<div class="ex" id="ExObject">
<p><a class="ex_number" href="#ExObject"></a> Matchオブジェクトの使い方を説明します。</p>
<pre>FoundPos := RegExMatch("Michiganroad 72", "(.*) (?&lt;nr&gt;\d+)", &amp;SubPat)
MsgBox SubPat.Count ": " SubPat[1] " " SubPat.Name[2] "=" SubPat.nr  <em>; Displays "2: Michiganroad nr=72"</em></pre>
</div>

<div class="ex" id="ExExtension">
<p><a class="ex_number" href="#ExExtension"></a> ファイルの拡張子を取得します。なお、<a href="SplitPath.htm">SplitPath</a>を使用することも可能で、そちらの方がより確実です。</p>
<pre>Path := "C:\Foo\Bar\Baz.txt"
RegExMatch(Path, "\w+$", &amp;Extension)
MsgBox Extension[]  <em>; Reports "txt".</em></pre>
</div>

<div class="ex" id="ExDeref">
<p><a class="ex_number" href="#ExDeref"></a> AutoHotkey v1のTransform Derefと同様に、他の変数内に含まれる変数参照や<a href="../misc/EscapeChar.htm">エスケープ</a>シーケンスを展開する機能を以下に示します。さらに、この例では、最初のマッチで停止するのではなく、文字列内のすべてのマッチを検索する方法を示しています（JavaScriptのRegExのgフラグに似ています）。</p>
<pre>var1 := "abc"
var2 := 123
MsgBox Deref("%var1%def%var2%")  <em>; Reports abcdef123.</em>

Deref(Str)
{
    spo := 1
    out := ""
    while (fpo:=RegexMatch(Str, "(%(.*?)%)|``(.)", &amp;m, spo))
    {
        out .= SubStr(Str, spo, fpo-spo)
        spo := fpo + StrLen(m[0])
        if (m[1])
            out .= %m[2]%
        else switch (m[3])
        {
            case "a":out .= "`a"
            case "b":out .= "`b"
            case "f":out .= "`f"
            case "n":out .= "`n"
            case "r":out .= "`r"
            case "t":out .= "`t"
            case "v":out .= "`v"
            default:out .= m[3]
        }
    }
    return out SubStr(Str, spo)
}</pre>
</div>

</body>
</html>
