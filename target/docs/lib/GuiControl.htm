<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>GuiControlオブジェクト - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="The GuiControl object provides an interface for modifying GUI controls and retrieving information about them." />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControlオブジェクト</h1>
<pre class="NoIndent"><span class="dec">class</span> Gui.Control <span class="dec">extends</span> Object</pre>

<p>GUIコントロールを変更したり、コントロールに関する情報を取得するためのインターフェイスを提供します。<a href="Gui.htm#Add">Gui.Add</a>、<a href="Gui.htm#__Item">Gui.__Item</a>、<a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>は、このタイプのオブジェクトを返します。</p>

<p>「GuiCtrl」は、<code>Gui.Control</code>クラスのインスタンスのプレースホルダーとして、以下で使用されます。</p>
<p><code>Gui.Control</code>はすべてのGUIコントロールの基本クラスとして機能しますが、コントロールの種類によって独自のクラスが存在します。以下のメソッドの一部は、該当するクラスのプロトタイプ、または<code>Gui.List</code>の基底クラスで定義されます。全リストは「<a href="../ObjList.htm">組込クラス</a>」をご覧ください。</p>
<p><a href="Object.htm">Object</a>から継承されたメソッドとプロパティに加えて、GuiControlオブジェクトは、以下の定義済みのメソッドとプロパティを持つことができます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#Methods">メソッド</a>：
    <ul>
      <li><a href="#Add">Add</a>: Appends items to a multi-item control.</li>
      <li><a href="#Choose">Choose</a>: Selects an item in a multi-item control.</li>
      <li><a href="#Delete">Delete</a>: Deletes one or all items from a multi-item control.</li>
      <li><a href="#Focus">Focus</a>：コントロールにキーボードフォーカスを設定します。</li>
      <li><a href="#GetPos">GetPos</a>：コントロールの位置と大きさを取得します。</li>
      <li><a href="#Move">Move</a>：コントロールの移動およびサイズ変更を行います。</li>
      <li><a href="#OnCommand">OnCommand</a>: Registers a function or method to be called on WM_COMMAND.</li>
      <li><a href="#OnEvent">OnEvent</a>：与えられたイベントが発生したときに呼び出される関数またはメソッドを登録します。</li>
      <li><a href="#OnNotify">OnNotify</a>: Registers a function or method to be called on WM_NOTIFY.</li>
      <li><a href="#Opt">Opt</a>：コントロールの外観や動作に関するさまざまなオプションやスタイルを設定します。</li>
      <li><a href="#Redraw">Redraw</a>：コントロールが占有するGUIウィンドウの領域を再描画します。</li>
      <li><a href="#SetFont">SetFont</a>：コントロールのフォントの書体、サイズ、スタイル、色などを設定します。</li>
    </ul>
  </li>
  <li><a href="#Properties">プロパティ</a>：
    <ul>
      <li><a href="#ClassNN">ClassNN</a>: Retrieves the class name and sequence number (ClassNN) of the control.</li>
      <li><a href="#Enabled">Enabled</a>: Retrieves or sets the interaction state of the control.</li>
      <li><a href="#Focused">Focused</a>：コントロールのフォーカス状態を取得します。</li>
      <li><a href="#Gui">Gui</a>：コントロールの親ウィンドウの<a href="Gui.htm">Guiオブジェクト</a>を取得します。</li>
      <li><a href="#Hwnd">Hwnd</a>：コントロールのウィンドウハンドル(HWND)を取得します。</li>
      <li><a href="#Name">Name</a>：コントロールの明示的な名前を取得または設定します。</li>
      <li><a href="#Text">Text</a>：コントロールのテキスト/キャプションを取得または設定します。</li>
      <li><a href="#Type">Type</a>：コントロールの種類を取得します。</li>
      <li><a href="#Value">Value</a>: Retrieves or sets the contents of a value-capable control.</li>
      <li><a href="#Visible">Visible</a>: Retrieves or sets the visibility state of the control.</li>
    </ul>
  </li>
  <li><a href="#GenRemarks">一般的な備考</a>：
    <ul>
      <li><a href="#redraw-remarks">Redraw</a>：コントロールの再描画動作に関するパフォーマンスに関する注意事項。</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">メソッド</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Appends items to a multi-item control (ListBox, DropDownList, ComboBox, or Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Add</span>(Items)</pre>
<h4 id="Add_Parameters">パラメータ</h4>
<dl>
  <dt>Items</dt><dd>
    <p>型：<a href="Array.htm">配列</a></p>
    <p>An array of strings to be inserted as items at the end of the control's list, e.g. <code>["Red", "Green", "Blue"]</code>.</p>
  </dd>
</dl>
<h4 id="Add_Remarks">備考</h4>
<p>To replace (overwrite) the list instead, use the <a href="#Delete">Delete method</a> beforehand. To select an item, use the <a href="#Choose">Choose method</a>.</p>
<h4 id="Add_Related">関連</h4>
<p><a href="ListView.htm#Add">ListView.Add</a>、<a href="TreeView.htm#Add">TreeView.Add</a></p>
</div>

<div class="methodShort" id="Choose">
<h3>Choose</h3>
<p>Selects an item in a multi-item control (ListBox, DropDownList, ComboBox, or Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Choose</span>(Value)</pre>
<h4 id="Choose_Parameters">パラメータ</h4>
<dl>
  <dt>Value</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#strings">文字列</a></p>
    <p>Specify 1 for the first item, 2 for the second, etc.</p>
    <p>If <em>Value</em> is a string (even a numeric string), the item whose leading name part matches <em>Value</em> will be selected. 検索では、大文字と小文字は区別されません。例えば、コントロールに「UNIXテキスト」という項目がある場合、unix（小文字）という単語を指定すれば、それだけで選択できます。<a href="GuiControls.htm#ListBoxMulti">複数選択リストボックス</a>の場合、一致するすべての項目が選択されます。</p>
    <p><em>Value</em>が0または空の場合、現在の選択項目は削除されます。</p></dd>
</dl>
<h4 id="Choose_Remarks">備考</h4>
<p><a href="GuiControls.htm#ListBoxMulti">多項目選択リストボックス</a>の<u>全項目</u>を選択または選択解除するには、次のようにします：</p>
<pre>PostMessage 0x0185, 1, -1, ListBox  <em>; 全項目を選択。0x0185はLB_SETSELです。</em>
PostMessage 0x0185, 0, -1, ListBox  <em>; すべてのアイテムの選択を解除します。</em>
ListBox.Choose(0)  <em>; すべての項目の選択を解除します。</em></pre>
<p><a href="ControlChooseIndex.htm">ControlChooseIndex</a>とは異なり、このメソッドは<a href="GuiOnEvent.htm#Change">Change</a>または<a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a>イベントを発生させません。</p>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>Deletes one or all items from a multi-item control (ListBox, DropDownList, ComboBox, or Tab).</p>
<pre class="Syntax">GuiCtrl.<span class="func">Delete</span>(<span class="optional">Value</span>)</pre>
<h4 id="Delete_Parameters">パラメータ</h4>
<dl>
  <dt>Value</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>If omitted, all items will be deleted. Otherwise, specify 1 for the first item, 2 for the second, etc.</p>
  </dd>
</dl>
<h4 id="Delete_Remarks">備考</h4>
<p>For Tab controls, a tab's sub-controls stay associated with their original tab number; that is, they are never associated with their tab's actual display-name. このため、タブの名前を変更したり削除しても、サブコントロールが属するタブ番号は変更されません。例えば、3つのタブ<code>["Red", "Green", "Blue"]</code>があり、<code>MyTab.Delete(2)</code>で2番目のタブを削除すると、もともとGreenに関連していたサブコントロールは、Blueに関連付けられます。この動作のため、一般的には末尾のタブのみを削除する必要があります。この方法で削除されたタブは、後で再び追加することができ、その時は元の操作系を取り戻します。</p>
<h4 id="Delete_Related">関連</h4>
<p><a href="ListView.htm#Delete">ListView.Delete</a>、<a href="TreeView.htm#Delete">TreeView.Delete</a></p>
</div>

<div class="methodShort" id="Focus">
<h3>Focus</h3>
<p>コントロールにキーボードフォーカスを設定します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Focus</span>()</pre>
<p>効果的に使用するためには、一般的にウィンドウを最小化または非表示にする必要はありません。</p>
<p>To retrieve the focus state of the control, use the <a href="#Focused">Focused property</a>.</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>コントロールの位置と大きさを取得します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">GetPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<h4 id="GetPos_Parameters">パラメータ</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>省略したときは、対応する値は保存されません。そうでないときは、コントロールの左上隅のX座標とY座標をピクセル単位で格納する出力変数への参照を指定します。These coordinates are relative to the upper-left corner of the window's client area, which is the area not including title bar, menu bar, and borders.</p>
  </dd>
  <dt>&amp;Width, &amp;Height</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>省略したときは、対応する値は保存されません。そうでないときは、コントロールの幅と高さをピクセル単位で格納する出力変数への参照を指定します。</p>
  </dd>
</dl>
<h4 id="GetPos_Remarks">備考</h4>
<p><a href="ControlGetPos.htm">ControlGetPos</a>とは異なり、このメソッドは返された座標に<a href="Gui.htm#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
<h4 id="GetPos_Examples">例</h4>
<pre>MyEdit.GetPos(&amp;x, &amp;y, &amp;w, &amp;h)
MsgBox "X座標は" x ". Y座標は" y ". 幅は" w ". 高さは " h "."
</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>コントロールの移動およびサイズ変更を行います。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<h4 id="Move_Parameters">パラメータ</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>どちらかを省略すると、その次元ではコントロールの位置は変更されません。そうでないときは、コントロールの新しい位置の左上隅のX座標とY座標をピクセル単位で指定します。The coordinates are relative to the upper-left corner of the window's client area, which is the area not including title bar, menu bar, and borders.</p>
  </dd>
  <dt>Width, Height</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>どちらかを省略すると、その次元ではコントロールのサイズは変更されません。そうでないときは、コントロールの新しい幅と高さをピクセル単位で指定します。</p>
  </dd>
</dl>
<h4 id="Move_Remarks">備考</h4>
<p><a href="ControlMove.htm">ControlMove</a>とは異なり、このメソッドは座標に<a href="Gui.htm#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
<h4 id="Move_Examples">例</h4>
<pre>MyEdit.Move(10, 20, 200, 100)
MyEdit.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)</pre>
</div>

<div class="methodShort" id="OnCommand">
<h3>OnCommand</h3>
<p><a href="GuiOnCommand.htm#WM_COMMAND">WM_COMMAND</a>メッセージで制御通知を受信したときに呼び出される関数やメソッドを登録します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnCommand</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnCommand.htm">OnCommand</a>を参照してください。</p>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>与えられた<a href="GuiOnEvent.htm#Control_Events">イベント</a>が発生したときに呼び出される関数またはメソッドを登録します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnEvent.htm">OnEvent</a>を参照してください。</p>
</div>

<div class="methodShort" id="OnNotify">
<h3>OnNotify</h3>
<p><a href="GuiOnNotify.htm#WM_NOTIFY">WM_NOTIFY</a>メッセージで制御通知を受信したときに呼び出される関数やメソッドを登録します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnNotify</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnNotify.htm">OnNotify</a>を参照してください。</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>コントロールの外観や動作に関するさまざまなオプションやスタイルを設定します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Opt</span>(Options)</pre>
<h4 id="Opt_Parameters">パラメータ</h4>
<dl>
  <dt>Options</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>Specify one or more <a href="GuiControls.htm">control-specific</a> or <a href="Gui.htm#OtherOptions">general</a> options and styles, each separated from the next with one or more spaces or tabs.</p>
  </dd>
</dl>
<h4 id="Opt_Remarks">備考</h4>
<p>次の例では、コントロールが<a href="Gui.htm#Disabled">無効化</a>され、その<a href="Gui.htm#Background">背景</a>がシステムデフォルトに戻されています：</p>
<pre>MyEdit.Opt("+Disabled -Background")</pre>
<p>次の例では、OKボタンが新しいデフォルトボタンになります：</p>
<pre>OKButton.Opt("+Default")</pre>
<p><a href="../misc/Styles.htm">スタイル</a>や拡張スタイルも認識されるが、コントロール作成後に適用・削除できないものもあります。変更が正常に適用されたとしても、コントロールはそれを無視することを選択するかもしれません。</p>
</div>

<div class="methodShort" id="Redraw">
<h3>Redraw</h3>
<p>コントロールが占有するGUIウィンドウの領域を再描画します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Redraw</span>()</pre>
<p>これは、繰り返し高速に呼び出された場合に不要なちらつきが発生する可能性がありますが、<a href="GuiControls.htm#GroupBox">GroupBox</a>などの特定のコントロールタイプの表示アーチファクトを解決することができます。</p>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>コントロールのフォントの書体、サイズ、スタイル、色などを設定します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<p>両方のパラメータを省略すると、<a href="Gui.htm#SetFont">Gui.SetFont</a>で設定されたGUIのカレントフォントに設定されます。それ以外の場合、指定されていないフォント属性は、コントロールの以前のフォントからコピーされます。文字色は、<em>オプション</em>で指定した場合のみ変更されます。</p>
<p>両パラメータの詳細については、<a href="Gui.htm#SetFont">Gui.SetFont</a>を参照してください。</p>
</div>

<h2 id="Properties">プロパティ</h2>
<div class="methodShort" id="ClassNN">
<h3>ClassNN</h3>
<p>Retrieves the class name and sequence number (ClassNN) of the control.</p>
<pre class="Syntax">ClassNN := GuiCtrl.<span class="func">ClassNN</span></pre>
<p>コントロールのClassNNは、コントロールのウィンドウクラスの名前と、それを含むトップレベルウィンドウ内のシーケンス番号で構成されます。例えば、「Edit1」はウィンドウ上の最初のEditコントロール、「Button12」は2番目のボタンです。</p>
<p>関連：<a href="ControlGetClassNN.htm">ControlGetClassNN</a></p>
</div>

<div class="methodShort" id="Enabled">
<h3>Enabled</h3>
<p>Retrieves or sets the interaction state of the control.</p>
<pre class="Syntax">CurrentSetting := GuiCtrl.<span class="func">Enabled</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Enabled</span> := NewSetting</pre>
<p><em>CurrentSetting</em> is <em>NewSetting</em> if assigned, otherwise 1 (true) by default unless overwritten by the <a href="Gui.htm#Disabled">Disabled option</a>.</p>
<p><em>NewSetting</em> is a <a href="../Concepts.htm#boolean">boolean value</a> that enables or disables this setting. If true, the control is enabled. If false, the control is disabled.</p>
<p>タブコントロールの場合、タブのサブコントロールもすべて有効または無効になります。ただし、<code>GuiCtrl.Enabled := false</code> で明示的に無効化されたサブコントロールは、その設定を記憶しているため、そのタブコントロールが再度有効化された後も無効のままです。</p>
</div>

<div class="methodShort" id="Focused">
<h3>Focused</h3>
<p>コントロールのフォーカス状態を取得します。</p>
<pre class="Syntax">IsFocused := GuiCtrl.<span class="func">Focused</span></pre>
<p><em>IsFocused</em>は、キーボードフォーカスがあれば1 (true)を、そうでないときは0 (false)を返します。</p>
<p>効果的に使用するためには、一般的にウィンドウを最小化または非表示にする必要はありません。</p>
<p>コントロールにフォーカスするには、<a href="#Focus">Focus method</a>を使用してください。</p>
</div>

<div class="methodShort" id="Gui">
<h3>Gui</h3>
<p>コントロールの親ウィンドウの<a href="Gui.htm">Guiオブジェクト</a>を取得します。</p>
<pre class="Syntax">GuiObj := GuiCtrl.<span class="func">Gui</span></pre>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>コントロールのウィンドウハンドル(HWND)を取得します。</p>
<pre class="Syntax">Hwnd := GuiCtrl.<span class="func">Hwnd</span></pre>
<p>コントロールのHWNDは、<a href="PostMessage.htm">PostMessage</a>、<a href="SendMessage.htm">SendMessage</a>、<a href="DllCall.htm">DllCall</a>でよく使用されます。また、<a href="Control.htm#Parameter">Controlパラメータ</a>で使用します。</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>コントロールの明示的な名前を取得または設定します。</p>
<pre class="Syntax">CurrentName := GuiCtrl.<span class="func">Name</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Name</span> := NewName</pre>
<p><em>CurrentName</em> is <em>NewName</em> if assigned, otherwise an empty string by default unless overwritten by the <a href="Gui.htm#var">V option</a>.</p>
<p><em>NewName</em> is the control's new name, which can be used with <a href="Gui.htm#__Item">Gui.__Item</a> to retrieve the GuiControl object. ほとんどの入力可能なコントロールの場合、この名前は<a href="Gui.htm#Submit">Gui.Submit</a>でも使用されます。</p>
</div>

<div class="methodShort" id="Text">
<h3>Text</h3>
<p>コントロールのテキスト/キャプションを取得または設定します。</p>
<pre class="Syntax">CurrentText := GuiCtrl.<span class="func">Text</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Text</span> := NewText</pre>
<p>注：コントロールに可視キャプションテキストがなく、（単一の）テキスト値もない場合、このプロパティはコントロールの非表示キャプションテキストに対応します（<a href="ControlGetText.htm">ControlGetText</a>/<a href="ControlSetText.htm">ControlSetText</a>のように）。</p>
<p><em>CurrentText</em> and <em>NewText</em> depend on the <a href="GuiControls.htm">control type</a>:</p>

<p><strong>Button / CheckBox / Edit / GroupBox / Link / Radio / Text</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the caption/display text of the <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#CheckBox">CheckBox</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Radio">Radio</a> or <a href="GuiControls.htm#Text">Text</a> control. コントロールは自動的に拡大されないので、拡大したい場合は<code>GuiCtrl.<a href="#Move">Move</a>(,, 300)</code>などを使用してください。</p>

<p><strong>DateTime</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the formatted text displayed by the <a href="GuiControls.htm#DateTime">DateTime</a> control. コントロールにフォーマットされた日付/時刻文字列を割り当てることはサポートされていません。To change the date/time being displayed, assign the <a href="#Value">Value property</a> a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format.</p>

<p><strong>DropDownList / ComboBox / ListBox / Tab</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the text of the currently selected item/tab of the <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a> or <a href="GuiControls.htm#Tab">Tab</a> control.</p>
<p><em>NewText</em>には、選択する項目/タブの全文（大文字・小文字を区別しない）を指定します。</p>
<p>コンボボックスの場合、選択された項目がない場合は、コントロールのエディットフィールドのテキストを代わりに取得します。その他のコントロールの場合、<em>CurrentText</em>は、空/空白となります。同様に、<em>NewText</em>が空/空白の場合は、現在のアイテム/タブが非選択になります。</p>
<p><a href="GuiControls.htm#ListBoxMulti">多選択リストボックス</a>の場合、<em>CurrentText</em>は配列になります。<em>NewText</em>は配列にはできませんが、複数の項目が一致した場合、すべて選択されます。To select multiple items with different text, call the <a href="#Choose">Choose method</a> repeatedly.</p>
<p>To select an item by its position number instead of its text, use the <a href="#Value">Value property</a>.</p>

<p><strong>Edit</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the text of the <a href="GuiControls.htm#Edit">Edit</a> control. 他のコントロールと同様に、テキストはそのまま取得または設定され、行末の翻訳は行われません。To retrieve or set the text of a multi-line Edit control while also translating between <code>`r`n</code> and <code>`n</code>, use the <a href="#Value">Value property</a>.</p>

<p><strong>StatusBar</strong></p>
<p><em>CurrentText</em> and <em>NewText</em> are the text of the <a href="GuiControls.htm#StatusBar">StatusBar</a> control's first part only (use <a href="GuiControls.htm#SB_SetText">SB.SetText</a> for greater flexibility).</p>
</div>

<div class="methodShort" id="Type">
<h3>Type</h3>
<p>コントロールの種類を取得します。</p>
<pre class="Syntax">CurrentType := GuiCtrl.<span class="func">Type</span></pre>
<p>Depending on the <a href="GuiControls.htm">control type</a>, <var>CurrentType</var> is one of the following strings: ActiveX, Button, CheckBox, ComboBox, Custom, DateTime, DDL, Edit, GroupBox, Hotkey, Link, ListBox, ListView, MonthCal, Pic, Progress, Radio, Slider, StatusBar, Tab, Tab2, Tab3, Text, TreeView, UpDown.</p>
</div>

<div class="methodShort" id="Value">
<h3>Value</h3>
<p>Retrieves or sets the contents of a value-capable control.</p>
<pre class="Syntax">CurrentValue := GuiCtrl.<span class="func">Value</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Value</span> := NewValue</pre>
<p>注：コントロールが値対応でない場合、<em>CurrentValue</em>は空白となり、<em>NewValue</em>の代入はエラーとなります。無効な値では例外が発生します。</p>
<p><em>CurrentValue</em> and <em>NewValue</em> depend on the <a href="GuiControls.htm">control type</a>:</p>

<p><strong>ActiveX</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#ActiveX">ActiveX</a>コントロールの ActiveX オブジェクトです。例えば、<em>Shell.Explorer</em>というテキストでコントロールが作成された場合、これは<a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752043(v=vs.85)">WebBrowser</a>オブジェクトであることを示しています。毎回、同じ<a href="ComValue.htm">ラッパーオブジェクト</a>が返されます。</p>
<p><em>NewValue</em> is invalid and throws an exception.</p>

<p><strong>CheckBox / Radio</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#CheckBox">CheckBox</a>または<a href="GuiControls.htm#Radio">Radio</a>コントロールがチェックされている場合は 1、チェックされていない場合は 0、灰色のチェックマークがある場合は -1 となります。</p>
<p><em>NewValue</em>は、ボタンのチェックを外す場合は0、チェックする場合は1、グレーのチェックマークを付ける場合は-1です。ラジオボタンの場合、あるラジオボタンがチェックされている（オンになっている）場合、そのラジオボタンがマルチラジオグループのメンバーであれば、そのグループ内の他のラジオボタンは自動的にチェックされなくなります。</p>
<p>To get or set control's text/caption instead, use the <a href="#Text">Text property</a>.</p>

<p><strong>ComboBox / DropDownList / ListBox / Tab</strong></p>
<p><em>CurrentValue</em> is the position number of the currently selected item/tab in the <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ListBox">ListBox</a> or <a href="GuiControls.htm#Tab">Tab</a> control. 何も選択されていない場合は、0が返されます。ComboBoxにテキストが入力された場合、テキストが一致する最初の項目が使用されます。一致する項目がない場合、コントロール内にテキストがあっても結果は0となります。<a href="GuiControls.htm#ListBoxMulti">複数選択可能なリストボックス</a>の場合、結果は数値の配列になります（項目が選択されていない場合は空です）。</p>
<p><em>NewValue</em> is the position number of a single item/tab to select, or zero to clear the current selection (this is valid even for Tab controls). To select multiple items, call the <a href="#Choose">Choose method</a> repeatedly.</p>
<p>To get or set the selected item given its text instead of its position, use the <a href="#Text">Text property</a>.</p>

<p><strong>DateTime / MonthCal</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#DateTime">DateTime</a>または<a href="GuiControls.htm#MonthCal">MonthCal</a>コントロールで現在選択されている<a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDH24MISS</a>形式の日付-時間スタンプです。</p>
<p><em>NewValue</em>は、<a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>形式の日付-時間スタンプです。現在の日時（今日）を使用する場合は、<code>A_Now</code>を指定します。DateTimeコントロールの場合、<em>NewValue</em>に空文字列を指定すると、（<a href="GuiControls.htm#ChooseNone">その能力</a>で作成された場合）コントロールに日付/時刻が選択されないようにすることができる。MonthCalコントロールの場合、<a href="GuiControls.htm#MonthCalMulti">複数選択</a>可能な場合は、範囲を指定することができます。</p>

<p><strong>Edit</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#Edit">Edit</a>コントロールの現在の内容です。複数行のコントロールの場合、テキストの改行は、<a href="ControlGetText.htm">ControlGetText</a>や <a href="ControlSetText.htm">ControlSetText</a>などの非GUI関数で使用される従来のCR+LF（`r`n）ではなく、プレーンラインフィード（`n）として表されます。</p>
<p><em>NewValue</em>は新しいコンテンツです。複数行のコントロールの場合、<em>NewValue</em>の改行（`n）のうち、先行するキャリッジリターン（`r）がないものは、自動的にCR+LF（`r`n）に変換され、正しく表示されます。しかし、<a href="Gui.htm#Submit">Gui.Submit</a>を使用する際や、この値を取得する際には、CR+LFをLF（`n）に置き換えることで、この変換は自動的に逆転するので、通常は気にする必要はありません。</p>
<p>To retrieve or set the text without translating `n to or from `r`n, use the <a href="#Text">Text property</a>.</p>

<p><strong>Hotkey</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#Hotkey">Hotkey</a>コントロールにホットキーがある場合は修飾子およびキー名、それ以外は空白とします。例：<code>^!C</code>、<code>^Home</code>、<code>+^NumpadHome</code>。</p>
<p><em>NewValue</em>には、キー名を持つ修飾語のセット、またはコントロールをクリアするためのブランクを指定することができます。例：<code>^!c</code>、<code>^Numpad1</code>、<code>+Home</code>。対応する修飾語は、^（Control）、！（Alt）および +（Shift）のみです。使用可能なキー名については、<a href="../KeyList.htm">キーリスト</a>を参照してください。</p>

<p><strong>Picture</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#Picture">Picture</a>コントロールの作成時に指定された画像のファイル名です。この名前は、新しい画像ファイル名が指定されても変わりません。</p>
<p><em>NewValue</em>は、読み込む新しい画像のファイル名（または<a href="../misc/ImageHandles.htm">ハンドル</a>）です（サポートされているファイルタイプは<a href="GuiControls.htm#Picture">Picture</a>を参照してください）。ファイル名の直前に、以下のオプションを0個以上指定することができます：<code>*wN</code>（幅N）、<code>*hN</code>（高さN）、<code>*IconN</code>（DLLまたはEXEファイル内のアイコン群番号N）です。次の例では、2番目のアイコングループのデフォルトアイコンが、幅100、「縦横比を保つ」による自動高さで読み込まれます：<code>MyPic.Value := "*icon2 *w100 *h-1 C:\My Application.exe"</code>。画像の実際の幅と高さを使用する場合は、<code>*w0 *h0</code>を指定します。<code>*w</code>と<code>*h</code>が省略された場合、画像はコントロールの現在のサイズに合うように拡大縮小されます。マルチアイコンの.ICOファイルから読み込む場合、幅と高さを指定することで、どのアイコンを読み込むかも決まります。注：最後のオプションとファイル名の間には、スペースまたはタブを1つだけ使用します。その他のスペースやタブは、ファイル名の一部として扱われます。</p>

<p><strong>Progress / Slider / UpDown</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#Progress">Progress</a>、<a href="GuiControls.htm#Slider">Slider</a>、<a href="GuiControls.htm#UpDown">UpDown</a>コントロールの現在の位置です。</p>
<p><em>NewValue</em>はコントロールの新しい位置で、例えば<code>MySlider.Value := 10</code>のようになります。相対的に値を調整する場合は、<code>:=</code>の代わりに演算子<code>+=</code>、<code>-=</code>、<code>++</code>、<code>--</code>を使用します。新しい位置がコントロールの範囲外になる場合、コントロールは一般的に最も近い有効値に設定されます。</p>

<p><strong>Text</strong></p>
<p><em>CurrentValue</em>は、<a href="GuiControls.htm#Text">Text</a>コントロールのテキスト/キャプションです。</p>
<p><em>NewValue</em>は、コントロールの新しいテキストです。コントロールは自動的に拡大されないので、コントロールを拡大する必要がある場合は、<code>GuiCtrl.<a href="#Move">Move</a>(,, 300)</code>を使用してください。</p>
</div>

<div class="methodShort" id="Visible">
<h3>Visible</h3>
<p>Retrieves or sets the visibility state of the control.</p>
<pre class="Syntax">CurrentSetting := GuiCtrl.<span class="func">Visible</span></pre>
<pre class="Syntax">GuiCtrl.<span class="func">Visible</span> := NewSetting</pre>
<p><em>CurrentSetting</em> is <em>NewSetting</em> if assigned, otherwise 1 (true) by default unless overwritten by the <a href="Gui.htm#Hidden">Hidden option</a>.</p>
<p><em>NewSetting</em> is a <a href="../Concepts.htm#boolean">boolean value</a> that enables or disables this setting. If true, the control is visible. If false, the control is hidden.</p>
<p>タブコントロールの場合、タブのサブコントロールの表示・非表示もすべて行います。また、コントロールのショートカットキー（下線文字）が効かないようにしたい場合は、<code>GuiCtrl.Enabled := false</code>でコントロールを無効化します。</p>
</div>

<h2 id="GenRemarks">総論</h2>

<h3 id="redraw-remarks">Redraw</h3>
<p><a href="ListView.htm">リストビュー</a>、<a href="TreeView.htm">ツリービュー</a>、<a href="GuiControls.htm#ListBox">リストボックス</a>などのコントロールに多数のアイテムを追加する場合、変更中にコントロールが再描画されるのを防ぐことで、パフォーマンスを向上させることができます。これは、項目を追加する前に<code>GuiCtrl.Opt("-Redraw")</code>、追加後に<code>GuiCtrl.Opt("+Redraw")</code>を使用することで実現しています。再描画を無効にする前にまだ表示されていなかったコントロールの変更は、通常、再描画が再有効になるまで表示されません。</p>
<p>パフォーマンス上の理由から、一般に、コントロールの内容を変更しても、再描画が有効であっても、コントロールが直ちに再描画されることはありません。その代わり、制御の一部が「無効化」され、通常、プログラムが内部メッセージキューをチェックする際に、短い遅延の後に再描画されます。スクリプトは、<code>Sleep -1</code>を呼び出すことで、これを直ちに強制的に実行させることができます。</p>

</body>
</html>
