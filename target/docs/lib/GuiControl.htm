<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>GuiControl Object - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="GuiControlオブジェクトは、GUIコントロールが移動などの動作を行ったり、テキストなどの値を取得・設定したりするためのインターフェースを提供します。" />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GuiControl Object</h1>
<pre class="NoIndent">class Gui.Control extends Object</pre>

<p>GUIコントロールを変更したり、コントロールに関する情報を取得するためのインターフェイスを提供します。<a href="Gui.htm#Add">Gui.Add</a>、<a href="Gui.htm#__Item">Gui.__Item</a>、<a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>は、このタイプのオブジェクトを返します。</p>

<p>"GuiCtrl"は、<code>Gui.Control</code>クラスのインスタンスのプレースホルダーとして、以下で使用されます。</p>
<p><code>Gui.Control</code>はすべてのGUIコントロールの基本クラスとして機能しますが、コントロールの種類によって独自のクラスが存在します。以下のメソッドの一部は、該当するクラスのプロトタイプ、または<code>Gui.List</code>の基底クラスで定義されます。全リストは「<a href="../ObjList.htm">組込クラス</a>」をご覧ください。</p>
<p><a href="Object.htm">Object</a>から継承されたメソッドとプロパティに加えて、GuiControlオブジェクトは、以下の定義済みのメソッドとプロパティを持つことができます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#Methods">Methods</a>:
    
    <ul>
      <li><a href="#Add">Add</a>:ListBox、DropDownList、ComboBox、Tab コントロールの現在のリストに、指定された項目を追加する。</li>
      <li><a href="#Choose">Choose</a>:ListBox、DropDownList、ComboBox、Tab コントロールの選択範囲を指定された値に設定します。</li>
      <li><a href="#Delete">Delete</a>:ListBox、DropDownList、ComboBox、Tab コントロールの指定された項目またはすべての項目を削除する。</li>
      <li><a href="#Focus">Focus</a>:コントロールにキーボードフォーカスを設定します。</li>
      <li><a href="#GetPos">GetPos</a>:コントロールの位置と大きさを取得します。</li>
      <li><a href="#Move">Move</a>:コントロールの移動およびサイズ変更を行います。</li>
      <li><a href="#OnCommand">OnCommand</a>:WM_COMMANDメッセージで制御通知を受信したときに呼び出される関数やメソッドを登録する。</li>
      <li><a href="#OnEvent">OnEvent</a>:与えられたイベントが発生したときに呼び出される関数またはメソッドを登録します。</li>
      <li><a href="#OnNotify">OnNotify</a>:WM_NOTIFYメッセージで制御通知を受信したときに呼び出される関数やメソッドを登録する。</li>
      <li><a href="#Opt">Opt</a>:コントロールの外観や動作に関するさまざまなオプションやスタイルを設定します。</li>
      <li><a href="#Redraw">Redraw</a>:コントロールが占有するGUIウィンドウの領域を再描画する。</li>
      <li><a href="#SetFont">SetFont</a>:コントロールのフォントの書体、サイズ、スタイル、色などを設定する。</li>
      <li><a href="#SetFormat">SetFormat</a>:DateTime コントロールの表示形式を設定します。</li>
      <li><a href="#UseTab">UseTab</a>:追加されたコントロールは、タブコントロールの指定されたタブに所属するようにします。</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    
    <ul>
      <li><a href="#ClassNN">ClassNN</a>:コントロールの ClassNN を取得します。</li>
      <li><a href="#Enabled">Enabled</a>:コントロールの現在のインタラクションの状態を取得し、有効または無効（グレイアウト）にします。</li>
      <li><a href="#Focused">Focused</a>:コントロールの現在のフォーカス状態を取得する。</li>
      <li><a href="#Gui">Gui</a>:コントロールの GUI 親を取得します。</li>
      <li><a href="#Hwnd">Hwnd</a>:コントロールの HWND を取得します。</li>
      <li><a href="#Name">Name</a>:コントロールの明示的な名前を取得または設定します。</li>
      <li><a href="#Text">Text</a>:コントロールのテキスト/キャプションを取得または設定する。</li>
      <li><a href="#Type">Type</a>:コントロールの種類を取得します。</li>
      <li><a href="#Value">Value</a>:値付け可能なコントロールに新しいコンテンツを取得または設定する。</li>
      <li><a href="#Visible">Visible</a>:コントロールの現在の表示状態を取得し、表示または非表示にします。</li>
    </ul>
  </li>
  <li><a href="#GenRemarks">一般的な備考</a>：
    <ul>
      <li><a href="#redraw-remarks">Redraw</a>:コントロールの再描画動作に関するパフォーマンスに関する注意事項。</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">メソッド</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>ListBox、DropDownList、ComboBoxにはリストアイテムを、Tabコントロールにはタブを追加します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Add</span>(Items)</pre>
<dl>
  <dt>Items</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>の<a href="../Concepts.htm#objects">配列</a></p>
    <p>コントロールのリストの最後に挿入する文字列の配列（例：<code>["Red", "Green", "Blue"]</code>）。代わりにリストを置き換える（上書きする）には、あらかじめ<a href="#Delete">GuiCtrl.Delete</a>を使用してください。</p>
  </dd>
</dl>
<p><a href="#Choose">GuiCtrl.Choose</a>で項目を選択します。</p>
<p>関連:<a href="ListView.htm#Add">ListView.Add</a>, <a href="TreeView.htm#Add">TreeView.Add</a></p>
</div>

<div class="methodShort" id="Choose">
<h3>Choose</h3>
<p>ListBox、DropDownList、ComboBox、Tab コントロールの選択範囲を指定された値に設定します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Choose</span>(Value)</pre>
<dl>
  <dt>値</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#strings">文字列</a></p>
    <p>このパラメータは、最初のエントリーの場合は1、2番目のエントリーの場合は2、などとします。</p>
    <p><em>Value</em>が文字列（数値文字列でも可）の場合、先頭部分が<em>Value</em>と一致するエントリーが選択されます。検索では、大文字と小文字は区別されません。例えば、コントロールに「UNIXテキスト」という項目がある場合、unix（小文字）という単語を指定すれば、それだけで選択できます。<a href="GuiControls.htm#ListBoxMulti">複数選択リストボックス</a>の場合、一致するすべての項目が選択されます。</p>
    <p><em>Value</em>が0または空の場合、現在の選択項目は削除されます。</p></dd>
</dl>
<p><a href="GuiControls.htm#ListBoxMulti">多項目選択リストボックス</a>の<u>全項目</u>を選択または選択解除するには、次のようにします：</p>
<pre>PostMessage 0x0185, 1, -1, ListBox  <em>; 全項目を選択。0x0185はLB_SETSELです。</em>
PostMessage 0x0185, 0, -1, ListBox  <em>;すべてのアイテムの選択を解除する。</em>
ListBox.Choose(0)  <em>; すべての項目の選択を解除する。</em></pre>
<p><a href="ControlChooseIndex.htm">ControlChooseIndex</a>とは異なり、このメソッドは<a href="GuiOnEvent.htm#Change">Change</a>または<a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a>イベントを発生させません。</p>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>ListBox、DropDownList、ComboBox、Tab コントロールの指定された項目またはすべての項目を削除する。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Delete</span>(<span class="optional">Value</span>)</pre>
<dl>
  <dt>値</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>このパラメータは、最初のエントリーの場合は1、2番目のエントリーの場合は2、などとします。省略された場合は、すべてのエントリーが削除されます。</p>
  </dd>
</dl>
<p>タブコントロールの場合、タブのサブコントロールは元のタブ番号に関連付けられ、タブの実際の表示名には関連付けられないことに注意する必要があります。このため、タブの名前を変更したり削除しても、サブコントロールが属するタブ番号は変更されません。例えば、3つのタブ<code>["Red", "Green", "Blue"]</code>があり、<code>MyTab.Delete(2)</code>で2番目のタブを削除すると、もともとGreenに関連していたサブコントロールは、Blueに関連付けられます。この動作のため、一般的には末尾のタブのみを削除する必要があります。この方法で削除されたタブは、後で再び追加することができ、その時は元の操作系を取り戻します。</p>
<p>関連:<a href="ListView.htm#Delete">ListView.Delete</a>, <a href="TreeView.htm#Delete">TreeView.Delete</a></p>
</div>

<div class="methodShort" id="Focus">
<h3>Focus</h3>
<p>コントロールにキーボードフォーカスを設定します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Focus</span>()</pre>
<p>注：効果的に使用するためには、一般的にウィンドウを最小化または非表示にする必要はありません。</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>コントロールの位置と大きさを取得します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">GetPos</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<p>各パラメータは、それぞれの座標を格納する変数への<a href="../Concepts.htm#variable-references">参照</a>とする。位置は、GUIウィンドウのクライアント領域（タイトルバー、メニューバー、ボーダーを含まない領域）からの相対位置です。</p>
<p><a href="ControlGetPos.htm">ControlGetPos</a>とは異なり、このメソッドは返された座標に<a href="Gui.htm#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
<p>Example:</p>
<pre>MyEdit.GetPos(&amp;x, &amp;y, &amp;w, &amp;h)
MsgBox "The X coordinate is " x ". Y座標は" y "です。幅は" w "です。高さは " h "です。"
</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>コントロールの移動およびサイズ変更を行います。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>GUIウィンドウのクライアント領域（タイトルバー、メニューバー、ボーダーを含まない領域）に対する相対的な新しい位置。</p></dd>
  <dt>幅、高さ</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>新しいサイズです。</p></dd>
</dl>
<p><a href="ControlMove.htm">ControlMove</a>とは異なり、このメソッドは座標に<a href="Gui.htm#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
<p>例：</p>
<pre>MyEdit.Move(10, 20, 200, 100)
MyEdit.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)</pre>
</div>

<div class="methodShort" id="OnCommand">
<h3>OnCommand</h3>
<p><a href="https://learn.microsoft.com/windows/win32/menurc/wm-command">WM_COMMAND</a>メッセージで制御通知を受信したときに呼び出される関数やメソッドを登録する。</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnCommand</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnCommand.htm">OnCommand</a>を参照してください。</p>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>与えられた<a href="GuiOnEvent.htm#Control_Events">イベント</a>が発生したときに呼び出される関数またはメソッドを登録します。</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnEvent.htm">OnEvent</a>を参照してください。</p>
</div>

<div class="methodShort" id="OnNotify">
<h3>OnNotify</h3>
<p><a href="https://learn.microsoft.com/windows/win32/controls/wm-notify">WM_NOTIFY</a>メッセージで制御通知を受信したときに呼び出される関数やメソッドを登録する。</p>
<pre class="Syntax">GuiCtrl.<span class="func">OnNotify</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnNotify.htm">OnNotify</a>を参照してください。</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>コントロールの各種オプションやスタイルを追加・削除する。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Opt</span>(Options)</pre>
<dl>
  <dt>オプション</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p><a href="GuiControls.htm">コントロールに特化</a>したもの、<a href="Gui.htm#OtherOptions">一般的</a>なオプションやスタイルのいずれかを選択します。</p>
  </dd>
</dl>
<p>次の例では、コントロールが<a href="Gui.htm#Disabled">無効化</a>され、その<a href="Gui.htm#Background">背景</a>がシステムデフォルトに戻されています：</p>
<pre>MyEdit.Opt("+Disabled -Background")</pre>
<p>次の例では、OKボタンが新しいデフォルトボタンになります：</p>
<pre>OKButton.Opt("+Default")</pre>
<p><a href="../misc/Styles.htm">スタイル</a>や拡張スタイルも認識されるが、コントロール作成後に適用・削除できないものもある。変更が正常に適用されたとしても、コントロールはそれを無視することを選択するかもしれません。</p>
</div>

<div class="methodShort" id="Redraw">
<h3>Redraw</h3>
<p>コントロールが占有するGUIウィンドウの領域を再描画する。</p>
<pre class="Syntax">GuiCtrl.<span class="func">Redraw</span>()</pre>
<p>これは、繰り返し高速に呼び出された場合に不要なちらつきが発生する可能性がありますが、<a href="GuiControls.htm#GroupBox">GroupBox</a>などの特定のコントロールタイプの表示アーチファクトを解決することができます。</p>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>コントロールのフォントの書体、サイズ、スタイル、色などを設定する。</p>
<p>注：両方のパラメータを省略すると、<a href="Gui.htm#SetFont">Gui.SetFont</a>で設定されたGUIのカレントフォントに設定されます。それ以外の場合、指定されていないフォント属性は、コントロールの以前のフォントからコピーされます。文字色は、<em>オプション</em>で指定した場合のみ変更されます。</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<p>両パラメータの詳細については、<a href="Gui.htm#SetFont">Gui.SetFont</a>を参照してください。</p>
</div>

<div class="methodShort" id="SetFormat">
<h3>SetFormat</h3>
<p><a href="GuiControls.htm#DateTime">DateTime</a>コントロールの表示形式を設定する。</p>
<pre class="Syntax">GuiCtrl.<span class="func">SetFormat</span>(<span class="optional">Format</span>)</pre>
  <p>詳しくは<a href="GuiControls.htm#DateTimeFormat">SetFormat</a>を参照してください。</p>
</div>

<div class="methodShort" id="UseTab">
<h3>UseTab</h3>
<p>追加されたコントロールは、タブコントロールの指定されたタブに所属するようにします。</p>
<pre class="Syntax">GuiCtrl.<span class="func">UseTab</span>(<span class="optional">Value, ExactMatch</span>)</pre>
<dl>
  <dt>値</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#strings">文字列</a></p>
    <p>このパラメータは、1番目のタブには1、2番目のタブには2、などとします。<em>Value</em>が整数でない場合、先頭部分が<em>Value</em>と一致するタブが使用されます。検索では、大文字と小文字は区別されません。例えば、あるコントロールに　"UNIX Text" というタブがある場合、unix（小文字）という単語を指定すれば、それを使用することができます。<em>Value</em>が 0、空文字列、または省略された場合、Tab コントロールの外側にコントロールが追加されます。</p>
  </dd>
  <dt>ExactMatch</dt><dd>
    <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
    <p>このパラメータがtrueの場合、<em>Value</em>は完全一致でなければならないが、大文字と小文字は区別されなません。</p>
  </dd>
</dl>
</div>

<h2 id="Properties">属性</h2>
<div class="methodShort" id="ClassNN">
<h3>ClassNN</h3>
<p>コントロールの ClassNN を取得します。</p>
<pre class="Syntax">ClassNN := GuiCtrl.ClassNN</pre>
</div>

<div class="methodShort" id="Enabled">
<h3>Enabled</h3>
<p>コントロールの現在のインタラクションの状態を取得し、有効または無効（グレイアウト）にします。</p>
<pre class="Syntax">RetrievedState := GuiCtrl.Enabled</pre>
<pre class="Syntax">GuiCtrl.Enabled := NewState</pre>
<p>タブコントロールの場合、タブのサブコントロールもすべて有効または無効になります。ただし、<code>GuiCtrl.Enabled := false</code> で明示的に無効化されたサブコントロールは、その設定を記憶しているため、そのタブコントロールが再度有効化された後も無効のままです。</p>
</div>

<div class="methodShort" id="Focused">
<h3>Focused</h3>
<p>コントロールの現在のフォーカス状態を取得する。</p>
<pre class="Syntax">RetrievedState := GuiCtrl.Focused</pre>
<p>注：効果的に使用するためには、一般的にウィンドウを最小化または非表示にする必要はありません。</p>
</div>

<div class="methodShort" id="Gui">
<h3>Gui</h3>
<p>コントロールの親GUIウィンドウの<a href="Gui.htm">Guiオブジェクト</a>を取得します。</p>
<pre class="Syntax">GuiObj := GuiCtrl.Gui</pre>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>コントロールのウィンドウハンドル(HWND)を取得します。 </p>
<pre class="Syntax">Hwnd := GuiCtrl.Hwnd</pre>
<p>コントロールのHWNDは、<a href="PostMessage.htm">PostMessage</a>、<a href="SendMessage.htm">SendMessage</a>、<a href="DllCall.htm">DllCall</a>でよく使用されます。</p>
</div>

<div class="methodShort" id="Name">
<h3>名前</h3>
<p>コントロールの名前を取得または設定します。</p>
<pre class="Syntax">RetrievedName := GuiCtrl.Name</pre>
<pre class="Syntax">GuiCtrl.Name := NewName</pre>
<p>コントロールの名前は、<a href="Gui.htm#__Item">Gui.__Item</a>でGuiControlオブジェクトを取得することができます。ほとんどの入力可能なコントロールの場合、この名前は<a href="Gui.htm#Submit">Gui.Submit</a>でも使用されます。</p>
</div>

<div class="methodShort" id="Text">
<h3>Text</h3>
<p>コントロールのテキスト/キャプションを取得または設定する。</p>
<pre class="Syntax">RetrievedText := GuiCtrl.Text</pre>
<pre class="Syntax">GuiCtrl.Text := NewText</pre>
<p>注：コントロールに可視キャプションテキストがなく、（単一の）テキスト値もない場合、このプロパティはコントロールの非表示キャプションテキストに対応します（<a href="ControlSetText.htm">ControlGetText</a>/<a href="ControlGetText.htm">ControlSetText</a>のように）。</p>
<p><strong>Caption/display text</strong>: The <em>Text</em> property retrieves or sets the caption/display text of the following control types: <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#Text">Text</a>. Since the control will not expand automatically, use <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> or similar if the control needs to be widened.</p>

<p><strong><a href="GuiControls.htm#DateTime">DateTime</a></strong>: The <em>Text</em> property retrieves the formatted text displayed by the control. Assigning a formatted date/time string to the control is not supported. To change the date/time being displayed, assign <a href="#Value">GuiCtrl.Value</a> a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format.</p>

<p><strong><a href="GuiControls.htm#Edit">Edit</a></strong>: As with other controls, the text is retrieved or set as-is; no end-of-line translation is performed. To retrieve or set the text of a multi-line Edit control while also translating between <code>`r`n</code> and <code>`n</code>, use <a href="#Value">GuiCtrl.Value</a>.</p>

<p><strong><a href="GuiControls.htm#StatusBar">StatusBar</a></strong>: The <em>Text</em> property retrieves or sets the text of the first part only (use <a href="GuiControls.htm#SB_SetText">SB.SetText</a> for greater flexibility).</p>

<p><strong>List item text</strong>: The <em>Text</em> property retrieves or sets the currently selected item/tab for the following control types: <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a>.</p>
<p><em>NewText</em> should be the full text (case insensitive) of the item/tab to select.</p>
<p>For a ComboBox, if there is no selected item, the text in the control's edit field is retrieved instead. For other controls, <em>RetrievedText</em> is empty/blank. Similarly, if <em>NewText</em> is empty/blank, the current item/tab will be deselected.</p>
<p>For a <a href="GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, <em>RetrievedText</em> is an array. <em>NewText</em> cannot be an array, but if multiple items match, they are all selected. To select multiple items with different text, call <a href="#Choose">GuiCtrl.Choose</a> repeatedly.</p>
<p>To select an item by its position number instead of its text, use <a href="#Value">GuiCtrl.Value</a>.</p>
</div>

<div class="methodShort" id="Type">
<h3>型</h3>
<p>コントロールの種類を取得します。</p>
<pre class="Syntax">RetrievedType := GuiCtrl.Type</pre>
<p>Depending on the <a href="GuiControls.htm">control type</a>, <var>RetrievedType</var> is one of the following strings: Text, Edit, UpDown, Pic, Button, CheckBox, Radio, DDL, ComboBox, ListBox, ListView, TreeView, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox, Tab, Tab2, Tab3, StatusBar, ActiveX, Custom.</p>
</div>

<div class="methodShort" id="Value">
<h3>値</h3>
<p>Retrieves or sets the contents of a control.</p>
<pre class="Syntax">RetrievedValue := GuiCtrl.Value</pre>
<pre class="Syntax">GuiCtrl.Value := NewValue</pre>
  <p>注：If the control is not value-capable, <em>RetrievedValue</em> will be blank and assigning <em>NewValue</em> will raise an error. Invalid values throw an exception.</p>
  <p>Following control types are value-capable:</p>

<p><strong>Picture</strong></p>
<p><em>RetrievedValue</em> is the picture's file name as it was originally specified when the <a href="GuiControls.htm#Picture">Picture</a> control was created. This name does not change even if a new picture file name is specified.</p>
<p><em>NewValue</em> is the filename (or <a href="../misc/ImageHandles.htm">handle</a>) of the new image to load (see <a href="GuiControls.htm#Picture">Picture</a> for supported file types). Zero or more of the following options may be specified immediately in front of the filename:<code>*wN</code> (width N), <code>*hN</code> (height N), and <code>*IconN</code> (icon group number N in a DLL or EXE file). In the following example, the default icon from the second icon group is loaded with a width of 100 and an automatic height via "keep aspect ratio":<code>MyPic.Value := "*icon2 *w100 *h-1 C:\My Application.exe"</code>. Specify <code>*w0 *h0</code> to use the image's actual width and height. If <code>*w</code> and <code>*h</code> are omitted, the image will be scaled to fit the current size of the control. When loading from a multi-icon .ICO file, specifying a width and height also determines which icon to load. 注：Use only one space or tab between the final option and the filename itself; any other spaces and tabs are treated as part of the filename.</p>

<p><strong>Text</strong></p>
<p><em>RetrievedValue</em> is the text/caption of the <a href="GuiControls.htm#Text">Text</a> control.</p>
<p><em>NewValue</em> is the control's new text. Since the control will not expand automatically, use <code>GuiCtrl.<a href="#Move">Move</a>("w300")</code> if the control needs to be widened.</p>

<p><strong>Edit</strong></p>
<p><em>RetrievedValue</em> is the current content of the <a href="GuiControls.htm#Edit">Edit</a> control. For multi-line controls, any line breaks in the text will be represented as plain linefeeds (`n) rather than the traditional CR+LF (`r`n) used by non-GUI functions such as <a href="ControlGetText.htm">ControlGetText</a> and <a href="ControlSetText.htm">ControlSetText</a>.</p>
<p><em>NewValue</em> is the new content. For multi-line controls, Any linefeeds (`n) in <em>NewValue</em> that lack a preceding carriage return (`r) are automatically translated to CR+LF (`r`n) to make them display properly. However, this is usually not a concern because when using <a href="Gui.htm#Submit">Gui.Submit</a> or when retrieving this value this translation will be reversed automatically by replacing CR+LF with LF (`n).</p>
  <p>To retrieve or set the text without translating `n to or from `r`n, use <a href="#Text">GuiCtrl.Text</a>.</p>

<p><strong>Hotkey</strong></p>
<p><em>RetrievedValue</em> is the modifiers and key name if there is a hotkey in the <a href="GuiControls.htm#Hotkey">Hotkey</a> control; otherwise blank. 例：<code>^!C</code>, <code>^Home</code>, <code>+^NumpadHome</code>.</p>
<p><em>NewValue</em> can be a set of modifiers with a key name, or blank to clear the control. 例：<code>^!c</code>, <code>^Numpad1</code>, <code>+Home</code>. The only modifiers supported are ^ (Ctrl), ! (Alt), and + (Shift). See the <a href="../KeyList.htm">key list</a> for available key names.</p>

<p><strong>Checkbox / Radio</strong></p>
<p><em>RetrievedValue</em> is 1 if the <a href="GuiControls.htm#Checkbox">Checkbox</a> or <a href="GuiControls.htm#Radio">Radio</a> control is checked, 0 if it is unchecked, or -1 if it has a gray checkmark.</p>
<p><em>NewValue</em> can be 0 to uncheck the button, 1 to check it, or -1 to give it a gray checkmark. For Radio buttons,  if one is being checked (turned on) and it is a member of a multi-radio group, the other radio buttons in its group will be automatically unchecked.</p>
  <p>To get or set control's text/caption instead, use <a href="#Text">GuiCtrl.Text</a>.</p>

<p><strong>DateTime / MonthCal</strong></p>
<p><em>RetrievedValue</em> is a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format currently selected in the <a href="GuiControls.htm#DateTime">DateTime</a> or <a href="GuiControls.htm#MonthCal">MonthCal</a> control.</p>
<p><em>NewValue</em> is a date-time stamp in <a href="FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a> format. Specify <code>A_Now</code> to use the current date and time (today). For DateTime controls, <em>NewValue</em> may be an empty string to cause the control to have no date/time selected (if it was created with <a href="GuiControls.htm#ChooseNone">that ability</a>). For MonthCal controls, a range may be specified if the control is <a href="GuiControls.htm#MonthCalMulti">multi-select</a>.</p>

<p><strong>UpDown / Slider / Progress</strong></p>
<p><em>RetrievedValue</em> is the current position of the <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Slider">Slider</a> or <a href="GuiControls.htm#Progress">Progress</a> control.</p>
<p><em>NewValue</em> is the new position of the control, for example <code>MySlider.Value := 10</code>. To adjust the value by a relative amount, use the operators <code>+=</code>, <code>-=</code>, <code>++</code> or <code>--</code> instead of <code>:=</code>. If the new position would be outside the range of the control, the control is generally set to the nearest valid value.</p>

<p><strong>Tab / DropDownList / ComboBox / ListBox</strong></p>
<p><em>RetrievedValue</em> is the position of the currently selected item/tab in the <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a> or <a href="GuiControls.htm#ListBox">ListBox</a> control. If none is selected, zero is returned. If text is entered into a ComboBox, the first item with matching text is used. If there is no matching item, the result is zero even if there is text in the control. For a <a href="GuiControls.htm#ListBoxMulti">multi-select ListBox</a>, the result is an array of numbers (which is empty if no items are selected).</p>
<p><em>NewValue</em> is the position of a single item/tab to select, or zero to clear the current selection (this is valid even for Tab controls). To select multiple items, call <a href="#Choose">GuiCtrl.Choose</a> repeatedly.</p>
<p>To get or set the selected item given its text instead of its position, use <a href="#Text">GuiCtrl.Text</a>.</p>

<p><strong>ActiveX</strong></p>
<p><em>RetrievedValue</em> is the ActiveX object of the <a href="GuiControls.htm#ActiveX">ActiveX</a> control. For example, if the control was created with the text <em>Shell.Explorer</em>, this is a <a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752043(v=vs.85)">WebBrowser</a> object. The same <a href="ComValue.htm">wrapper object</a> is returned each time.</p>
</div>

<div class="methodShort" id="Visible">
<h3>Visible</h3>
<p>コントロールの現在の表示状態を取得し、表示または非表示にします。</p>
<pre class="Syntax">RetrievedState := GuiCtrl.Visible</pre>
<pre class="Syntax">GuiCtrl.Visible := NewState</pre>
<p>For Tab controls, this will also show or hide all of the tab's sub-controls. If you additionally want to prevent a control's shortcut key (underlined letter) from working, disable the control via <code>GuiCtrl.Enabled := false</code>.</p>
</div>

<h2 id="GenRemarks">総論</h2>

<h3 id="redraw-remarks">Redraw</h3>
<p>When adding a large number of items to a control (such as a <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a> or <a href="GuiControls.htm#ListBox">ListBox</a>), performance can be improved by preventing the control from being redrawn while the changes are being made. This is done by using <code>GuiCtrl.Opt("-Redraw")</code> before adding the items and <code>GuiCtrl.Opt("+Redraw")</code> afterward. Changes to the control which have not yet become visible prior to disabling redraw will generally not become visible until after redraw is re-enabled.</p>
<p>For performance reasons, changes to a control's content generally do not cause the control to be immediately redrawn even if redraw is enabled. Instead, a portion of the control is "invalidated" and is usually repainted after a brief delay, when the program checks its internal message queue. The script can force this to take place immediately by calling <code>Sleep -1</code>.</p>

</body>
</html>
