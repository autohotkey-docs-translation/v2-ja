<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>IsSet / IsSetRef - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="IsSet 演算子および IsSetRef 関数は、指定された変数に値が割り当てられている場合、0 以外の数値を返します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>IsSet / IsSetRef</h1>

<p>指定された変数に値が割り当てられている場合、0以外の数値を返します。</p>

<pre class="Syntax">VarIsSet := <span class="func">IsSet</span>(Var)</pre>
<pre class="Syntax">VarIsSet := <span class="func">IsSetRef</span>(&amp;Ref)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Var</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variables">変数</a></p>
    <p>直接の変数参照です。例えば：<code>IsSet(MyVar)</code>.</p>
  </dd>

  <dt>&amp;Ref</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>変数への間接的な参照。これは通常、<code>IsSetRef(&amp;MyVar)</code>のように直接渡されるのではなく、VarRefを<em>含む</em>パラメータを<a href="../Variables.htm#deref">再参照する</a>前にチェックするような間接的なものである。 </p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#boolean">整数（ブーリアン）</a></p>
<p>戻り値は、<em>Var</em>または<em>Ref</em>で表される変数に値が割り当てられている場合は 1（真）、それ以外の場合は 0（偽）である。</p>

<h2 id="Remarks">備考</h2>
<p><code>IsSet(MyGlobalVar)</code>のように、変数を直接チェックする場合は、IsSetを使用します。</p>
<p>IsSetRefを使用すると、以下の例のように、通常変数に含まれる<a href="../Concepts.htm#variable-references">VarRef</a>をチェックすることができます。</p>
<p>値が割り当てられていない変数は、<a href="../Concepts.htm#uninitialized-variables">uninitialized variable</a>とも呼ばれます。初期化されていない変数を読み込もうとすると、例外が発生します。IsSetは、グローバル変数や静的変数の初回使用時の初期化など、これを回避するために使用することができます。</p>
<p class="note"><strong>注：</strong> <code>static my_static_array := []</code>のような<a href="../Functions.htm#InitStatic">静的初期化子</a>は、実行中に最初に到達したときに一度だけ評価されるため、通常、IsSetの使用は必要ありません。</p>
<p>IsSetは関数呼び出しと同じ構文を使っていますが、関数というより演算子と考えた方がいいかもしれません。キーワード<em>IsSet</em>は、ここに示す用途のために予約されており、変数や関数として再定義することはできない。初期化されていない変数を渡そうとするとエラーが発生するため、IsSetを間接的に呼び出すことはできない。</p>
<p>IsSetRefは、<a href="../Variables.htm#ref">参照演算子</a>と併用することで、特定の変数をチェックすることも可能です。このような使い方をする場合、<a href="../Functions.htm#Global">変数</a>がグローバルな場合は最初に<a href="../Functions.htm#Global">宣言</a>する必要があることに注意してください。例えば、<code>IsSetRef(&amp;MyVar)</code>の<code>&amp;</code>は、<code>グローバルMyVar</code>の宣言がない想定ローカル関数内で使用すると、<em>MyVar</em>がデフォルトでローカル変数に解決されます。</p>

<h2 id="Related">関連</h2>
<p><a href="../Functions.htm#ByRef">ByRefパラメータ</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> IsSetとIsSetRefの使い分けを紹介しています。</p>
<pre>
Loop 2
    if !IsSet(MyVar)  <em>; MyVarの最初の「使用」か？</em>
        MyVar := A_Index  <em>; Initialize on first "use".</em>
MsgBox Function1(&amp;MyVar)
MsgBox Function2(&amp;MyVar)

Function1(&amp;Param)  <em>; ByRef parameter.</em>
{
    if IsSet(Param)  <em>; MyVarのエイリアスであるParamそのものを渡します</em>。
        return Param  <em>; ByRefパラメータは自動的に再参照さ</em>れる。
    else
        return "unset"
}

Function2(Param)
{
    if IsSetRef(Param)  <em>; Paramが含むVarRefを渡す</em>。
        return %Param%  <em>;明示的にParamをデリファレンスする。</em>
    else
        return "unset"
}</pre>
</div>

</body>
</html>
