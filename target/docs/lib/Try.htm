<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Try - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Try文は、実行時エラーやThrow文によって投げられる値に対して、1つ以上の文をガードする。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Try</h1>

<p><a href="Throw.htm">Throw</a>ステートメントによってスローされる実行時エラーや値に対して、1 つ以上の<a href="../Concepts.htm#statement">ステートメント</a>をガードします。</p>

<pre class="Syntax"><span class="func">Try</span> <i>Statement</i></pre>
<pre class="Syntax" style="line-height: 100%"><span class="func">Try</span>
{
    <i>Statements</i>
}</pre>
<h2 id="Remarks">備考</h2>
<p>The <em>Try</em> statement is usually followed by a <a href="Block.htm">block</a> (one or more <a href="../Concepts.htm#statement">statements</a> enclosed in braces). 実行する文が1つだけの場合は、<em>Try</em>と同じ行か次の行に記述し、中括弧は省略できる。<em>Try</em>がエラーをキャッチしたときだけ実行するコードを指定するには、1つ以上の<a href="Catch.htm">Catch</a>ステートメントを使用します。</p>
<p><em>Catch</em>や <em>Finally</em>を使わずに<em>Try</em>を使うと、空のブロックで<code>catch Error</code>を実行するのと同じことになる。</p>
<p>実行時エラーが発生した場合、<a href="Throw.htm">Throw</a>文またはプログラムによって値が投げられる。<em>Try</em>ブロックまたは<em>Try</em>ブロックによって呼び出された関数の内部から値がスローされると、以下のことが起こる：</p>
<ul>
  <li>スローされた値のクラスと一致する<a href="Catch.htm">Catch</a>文があれば、実行はその文に移される。</li>
  <li>一致する<em>Catch</em>文がなく、<a href="Finally.htm">Finally</a>文がある場合、その文は実行されるが、それが終了すると、値は自動的に再びスローされる。</li>
  <li>一致する<em>Catch</em>文または<em>Finally</em>文がない場合、値は自動的に再度スローされる（前述のように<em>Catch</em>または<em>Finally</em>がまったくない場合を除く）。</li>
</ul>
<p>最後の<em>Catch</em>は、オプションで次のように続けることができます。 <a href="Else.htm"><em>Else</em></a>。例外がスローされることなく（<em>Return</em>や<em>Break</em>などで制御が他に移ることなく）<em>Try</em>文が完了すると、<em>Else</em>文が実行される。<em>Else</em>文でスローされた例外は、関連する<em>Try</em>文では処理されませんが、それを囲んでいる<em>Try</em>文によって処理される場合があります。<em>Finally</em>も存在できるが、<em>Else</em>の後に置かなければならず、常に最後に実行される。</p>
<p><a href="Block.htm#otb">One True Brace（OTB）スタイル</a>は、オプションで<em>Try</em>ステートメントと一緒に使用することができます。事例：</p>
<pre>try {
    ...
} catch Error as err {
    ...
} else {
    ...
} finally {
    ...
}</pre>

<h2 id="Related">関連</h2>
<p><a href="Throw.htm">Throw</a>、<a href="Catch.htm">Catch</a>、<a href="Else.htm">Else</a>、<a href="Finally.htm">Finally</a>、<a href="Block.htm">ブロック</a>、<a href="OnError.htm">OnError</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ex_basic">
<p><a class="ex_number" href="#ex_basic"></a> <em>Try-Catch</em>と <em>Throw</em>の基本概念を示す。</p>
<pre>try  <em>; Attempts to execute code.</em>
{
    HelloWorld
    MakeToast
}
catch as e  <em>; Handles the first error thrown by the block above.</em>
{
    MsgBox "An error was thrown!`nSpecifically: " e.Message
    Exit
}

HelloWorld()  <em>; Always succeeds.</em>
{
    MsgBox "Hello, world!"
}

MakeToast()  <em>; Always fails.</em>
{
    <em>; Jump immediately to the try block's error handler:</em>
    <a href="Throw.htm">throw</a> Error(A_ThisFunc " is not implemented, sorry")
}
</pre>
</div>

<div class="ex" id="ex_el">
<p><a class="ex_number" href="#ex_el"></a> 組込み関数の基本的なエラー処理を示す。</p>
<pre>try
{
    <em>; The following tries to back up certain types of files:</em>
    FileCopy A_MyDocuments "\*.txt", "D:\Backup\Text documents"
    FileCopy A_MyDocuments "\*.doc", "D:\Backup\Text documents"
    FileCopy A_MyDocuments "\*.jpg", "D:\Backup\Photos"
}
catch
{
    MsgBox "There was a problem while backing the files up!",, "IconX"
    ExitApp 1
}
else
{
    MsgBox "Backup successful."
    ExitApp 0
}
</pre>
</div>

<div class="ex" id="ex_com">
<p><a class="ex_number" href="#ex_com"></a> COMエラーを処理する<em>Try-Catch</em>の使用法を示す。以下で使用するCOMオブジェクトの詳細については、<a href="https://learn.microsoft.com/previous-versions/visualstudio/visual-studio-6.0/aa227633(v=vs.60)">ScriptControlの使用法（Microsoft Docs）</a>を参照してください。</p>
<pre>try
{
    obj := ComObject("ScriptControl")
    obj.ExecuteStatement('MsgBox "This is embedded VBScript"')  <em>; This line produces an Error.</em>
    obj.InvalidMethod()  <em>; This line would produce a MethodError.</em>
}
catch MemberError  <em>; Covers MethodError and PropertyError.</em>
{
    MsgBox "We tried to invoke a member that doesn't exist."
}
catch as e
{
    <em>; For more detail about the object that e contains, see <a href="Error.htm">Error Object</a>.</em>
    MsgBox("Exception thrown!`n`nwhat: " e.what "`nfile: " e.file
        . "`nline: " e.line "`nmessage: " e.message "`nextra: " e.extra,, 16)
}
</pre>
</div>

<div class="ex" id="ex_nesting">
<p><a class="ex_number" href="#ex_nesting"></a> <em>Try-Catch</em>ステートメントの入れ子を示す。</p>
<pre>try Example1 <em>; Any single statement can be on the same line with Try.</em>
catch Number as e
    MsgBox "Example1() threw " e

Example1()
{
    try Example2
    catch Number as e
    {
        if (e = 1)
            throw <em>; Rethrow the caught value to our caller.</em>
        else
            MsgBox "Example2() threw " e
    }
}

Example2()
{
    throw Random(1, 2)
}</pre>
</div>

</body>
</html>
