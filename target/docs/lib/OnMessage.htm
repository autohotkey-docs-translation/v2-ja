<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>OnMessage - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="The OnMessage function registers a function to be called automatically whenever the script receives the specified message." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnMessage</h1>

<p>Registers a <a href="../Functions.htm">function</a> to be called automatically whenever the script receives the specified message.</p>

<pre class="Syntax"><span class="func">OnMessage</span> MsgNumber, Callback <span class="optional">, MaxThreads</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>MsgNumber</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>監視または問い合わせるメッセージの番号で、0から4294967295（0xFFFFFFF）の間でなければなりません。<a href="../misc/SendMessageList.htm">システムメッセージ</a>（つまり0x0400以下のもの）を監視したくない場合は、選択の余地がある範囲で4096（0x1000）より大きい数字を選ぶとよいでしょう。これにより、AutoHotkeyの現在および将来のバージョンで内部的に使用されるメッセージに干渉する可能性を低減することができます。</p>
  </dd>

  <dt id="The_Functions_Parameters">Callback</dt>
  <dd>
    <p>型：<a href="../misc/Functor.htm">機能オブジェクト</a></p>
    <p>The function to call.</p>
    <p>The callback accepts four parameters and can be <a href="../Functions.htm#intro">defined</a> as follows:</p>
    <pre class="NoIndent">MyCallback(wParam, lParam, msg, hwnd) { ...</pre>
    <p>パラメータに与える名前は重要ではないが、以下の値が順次割り当てられる：</p>
    <ol>
      <li>メッセージのWPARAMの値です。</li>
      <li>メッセージのLPARAM値です。</li>
      <li>The message number, which is useful in cases where a callback monitors more than one message.</li>
      <li>メッセージの送信先のウィンドウまたはコントロールのHWND（ユニークID）です。HWNDは、<a href="../misc/WinTitle.htm#ahk_id">WinTitleパラメータ</a>で直接使用することができます。</li>
    </ol>
    <p>対応する情報が不要な場合、コールバックのパラメータリストの最後から1つ以上のパラメータを省略することができますが、この場合、<code>MyCallback(Param1, *)</code>のように、最後のパラメータとしてアスタリスクを指定する必要があります。</p>
    <p>WPARAMとLPARAMは、スクリプトを実行するexeが32ビットか64ビットかに応じて、符号なし32ビット整数（0から2<sup>32</sup>-1）または符号付き64ビット整数<sup>（-2</sup>63から2<sup>63</sup>-1）です。32ビットスクリプトの場合、入力されるパラメータが符号付き整数であることを意図している場合、この例に従って負の数を明らかにすることができます：</p>
    <pre>if (A_PtrSize = 4 &amp;&amp; wParam &gt; 0x7FFFFFFF)  <em>; Checking <a href="../Variables.htm#PtrSize">A_PtrSize</a> ensures the script is 32-bit.</em>
    wParam := -(~wParam) - 1</pre>
  </dd>

  <dt id="MaxThreads">MaxThreads</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>If omitted, it defaults to 1, meaning the callback is limited to one <a href="../misc/Threads.htm">thread</a> at a time. This is usually best because otherwise, the script would process messages out of chronological order whenever the callback interrupts itself. そのため、<em>MaxThreads</em>の代替として、<a href="#Critical">以下</a>のように<em>Critical</em>を使用することを検討します。</p>
    <p>If the callback directly or indirectly causes the message to be sent again while the callback is still running, it is necessary to specify a <em>MaxThreads</em> value greater than 1 or less than -1 to allow the callback to be called for the new message (if desired). スクリプトの自プロセスが自分自身に送信する（投稿しない）メッセージは、遅延やバッファリングができません。</p>
    <p>Specify 0 to unregister the previously registered callback identified by <em>Callback</em>.</p>
    <p>By default, when multiple callbacks are registered for a single <em>MsgNumber</em>, they are called in the order that they were registered. To register a callback to be called before any previously registered callbacks, specify a negative value for <em>MaxThreads</em>. For example, <code>OnMessage Msg, Fn, -2</code> registers <code>Fn</code> to be called before any other callbacks previously registered for <em>Msg</em>, and allows <em>Fn</em> a maximum of 2 threads. However, if the callback is already registered, the order will not change unless it is unregistered and then re-registered.</p>
  </dd>

</dl>

<h2 id="Usage">使用方法</h2>
<p>Any number of callbacks can monitor a given <em>MsgNumber</em>.</p>
<p>Either of these two lines registers a callback to be called <u>after</u> any previously registered callbacks:</p>
<pre>OnMessage MsgNumber, Callback     <em>; Option 1 - omit MaxThreads</em>
OnMessage MsgNumber, Callback, 1  <em>; Option 2 - specify MaxThreads 1</em></pre>
<p>This registers a callback to be called <u>before</u> any previously registered callbacks:</p>
<pre>OnMessage MsgNumber, Callback, -1</pre>
<p>To unregister a callback, specify 0 for <em>MaxThreads</em>:</p>
<pre>OnMessage MsgNumber, Callback, 0</pre>

<h2 id="Additional_Information_Available_to_the_Callback">Additional Information Available to the Callback</h2>
<p>In addition to the received parameters mentioned above, the callback may also consult the built-in variable <strong>A_EventInfo</strong>, which contains 0 if the message was sent via SendMessage. PostMessageで送信された場合、メッセージが投稿された<a href="../Variables.htm#TickCount">tick-count の時間</a>が含まれます。</p>
<p>A callback's <a href="../misc/WinTitle.htm#LastFoundWindow">last found window</a> starts off as the parent window to which the message was sent (even if it was sent to a control). If the window is hidden but not a GUI window (such as the <a href="../Program.htm#main-window">script's main window</a>), turn on <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> before using it. 事例：</p>
<pre>DetectHiddenWindows True
MsgParentWindow := WinExist()  <em>; This stores the unique ID of the window to which the message was sent.</em></pre>

<h2 id="What_the_Callback_Should_Return">What the Callback Should Return</h2>
<p>If a callback uses <a href="Return.htm">Return</a> without any parameters, or it specifies a blank value such as "" (or it never uses Return at all), the incoming message goes on to be processed normally when the callback finishes. The same thing happens if the callback <a href="Exit.htm">exits</a> or causes a runtime error such as <a href="Run.htm">running</a> a nonexistent file. これに対して、整数を返すと、返信としてすぐに送信されます。つまり、プログラムはそれ以上メッセージを処理しません。For example, a callback monitoring WM_LBUTTONDOWN (0x0201) may return an integer to prevent the target window from being notified that a mouse click has occurred. 多くの場合（<a href="PostMessage.htm">PostMessage</a>で届いたメッセージなど）、どの整数を返すかは問題ではありませんが、疑わしい場合は通常0が最も安全です。</p>
<p>有効な戻り値の範囲は、スクリプトを実行するexeが32ビットか64ビットかによって異なります。空でない戻り値は、32ビットスクリプトでは -2<sup>31</sup> から 2<sup>32</sup>-1 (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 4</code>) 、64ビットスクリプトでは -2<sup>63</sup> から 2<sup>63</sup>-1 (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 8</code>) でなければなりません。</p>
<p>If there are multiple callbacks monitoring a given message number, they are called one by one until one returns a non-empty value.</p>

<h2 id="Remarks">総論</h2>
<p>Unlike a normal function-call, the arrival of a monitored message calls the callback as a new <a href="../misc/Threads.htm">thread</a>. Because of this, the callback starts off fresh with the default values for settings such as <a href="SendMode.htm">SendMode</a> and <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>. これらのデフォルトは、<a href="../Scripts.htm#auto">スクリプト起動</a>時に変更することができます。</p>
<p>コントロールに送信されたメッセージは（投稿されるのではなく）、システムが裏でコントロールに直接ルーティングするため、監視されることはありません。システムで生成されたメッセージは、そのほとんどが投稿されるため、これが問題になることはほとんどありません。</p>
<p>スクリプトがアイドル状態で実行され続け、メッセージの着信を監視することを意図している場合、スクリプトの終了を防ぐために<a href="Persistent.htm">Persistent</a>関数を呼び出す必要がある場合があります。OnMessage は、スクリプトを自動的に永続化するわけではありません。例えば、OnMessageを使用してGUIウィンドウへの入力を監視する場合（<a href="#ExLButtonDown">WM_LBUTTONDOWNの例</a>など）、最後のGUIウィンドウが閉じられたときにスクリプトが自動的に終了するようにする方が適切な場合があります。</p>
<p id="Critical">If a message arrives while its callback is still running due to a previous arrival of the same message, by default the callback will not be called again; instead, the message will be treated as unmonitored. もしこれが望ましくないのであれば、それを回避する方法は複数あります：</p>
<ul>
  <li>If the message is posted rather than sent and has a number greater than 0x0311, it can be buffered until its callback completes by specifying <a href="Critical.htm">Critical</a> as the first line of the callback. Alternatively, <a href="Thread.htm#Interrupt">Thread Interrupt</a> can achieve the same effect as long as it lasts long enough for the callback to finish.</li>
  <li>Using <a href="Critical.htm">Critical</a> to increase the <a href="Critical.htm#Interval">message check interval</a> gives the callback more time to complete before any messages are dispatched. 信頼性のために16以上の間隔が必要な場合があります。Due to the granularity of the system timer (usually 15.6 milliseconds), the default interval for non-Critical threads (5 milliseconds) might appear to pass the instant after the callback starts.</li>
  <li>Ensuring that the callback returns quickly reduces the risk that messages will be missed due to <em>MaxThreads</em>. 一つの方法として、0x0311より大きい監視メッセージ番号を自身のスクリプトに<a href="PostMessage.htm">投稿</a>することで、未来のスレッドをキューに入れることができます。That message's callback should use <a href="Critical.htm">Critical</a> as its first line to ensure that its messages are buffered. また、<a href="SetTimer.htm">タイマー</a>を使って未来のスレッドをキューに入れることも可能です。</li>
  <li>Specifying a higher value for <a href="#MaxThreads"><em>MaxThreads</em></a> allows the callback to be interrupted to process the newly-received message.</li>
</ul>
<p id="buffering">If a monitored message that is numerically greater than 0x0311 is posted while the script is <a href="../misc/Threads.htm#Interrupt">uninterruptible</a>, the message is buffered; that is, its callback is not called until the script becomes interruptible. しかし、投稿ではなく送信されるメッセージは、戻り値を提供する必要があるため、バッファリングすることはできません。システムダイアログ、リストビューのドラッグ＆ドロップ操作、メニューなどのモーダルメッセージループが実行されている場合、投稿されたメッセージがバッファされない場合があります。</p>
<p>If a monitored message arrives and is not buffered, its callback is called immediately even if the thread is <a href="../misc/Threads.htm#Interrupt">uninterruptible</a> when the message is received.</p>
<p>OnMessageスレッドの<a href="../misc/Threads.htm">優先順位</a>は常に0です。その結果、現在のスレッドの優先順位が0より高い場合、メッセージの監視やバッファリングは行われない。</p>
<p>システムメッセージ（0x0400以下のメッセージ）を監視する場合は、注意が必要です。For example, if a callback does not finish quickly, the response to the message might take longer than the system expects, which might cause side-effects. Unwanted behavior may also occur if a callback returns an integer to suppress further processing of a message, but the system expected different processing or a different response.</p>
<p>スクリプトが<a href="MsgBox.htm">MsgBox</a>などのシステムダイアログを表示している場合、コントロールに投稿されたメッセージは監視されません。For example, if the script is displaying a message box and the user clicks a button in a GUI window, the WM_LBUTTONDOWN message is sent directly to the button without calling the callback.</p>
<p>外部プログラムがPostThreadMessage()などのAPIコールでスクリプトのスレッドに直接メッセージを投稿することもできますが、スクリプトが<a href="MsgBox.htm">メッセージボックス</a>などのシステムウィンドウを表示している場合、メッセージが失われるためお勧めしません。Instead, it is usually best to post or send the messages to the <a href="../Program.htm#main-window">script's main window</a> or one of its GUI windows.</p>
<h2 id="Related">関連</h2>
<p><a href="CallbackCreate.htm">CallbackCreate</a>, <a href="OnExit.htm">OnExit</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="../Functions.htm">Functions</a>, <a href="../misc/SendMessageList.htm">Windows Messages</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Critical.htm">Critical</a>, <a href="DllCall.htm">DllCall</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExLButtonDown">
<p><a class="ex_number" href="#ExLButtonDown"></a> GUIウィンドウのマウスクリックを監視する。関連トピック<a href="GuiOnEvent.htm#ContextMenu">ContextMenu</a>イベント</p>
<pre>MyGui := Gui(, "Example Window")
MyGui.Add("Text",, "Click anywhere in this window.")
MyGui.Add("Edit", "w200")
MyGui.Show
OnMessage 0x0201, WM_LBUTTONDOWN

WM_LBUTTONDOWN(wParam, lParam, msg, hwnd)
{
    X := lParam &amp; 0xFFFF
    Y := lParam &gt;&gt; 16
    Control := ""
    thisGui := GuiFromHwnd(hwnd)
    thisGuiControl := GuiCtrlFromHwnd(hwnd)
    if thisGuiControl
    {
        thisGui := thisGuiControl.Gui
        Control := "`n(in control " . thisGuiControl.ClassNN . ")"
    }
    ToolTip "You left-clicked in Gui window '" thisGui.Title "' at client coordinates " X "x" Y "." Control
}</pre>
</div>

<div class="ex" id="ExShutdown">
<p><a class="ex_number" href="#ExShutdown"></a> システムのシャットダウン/ログオフを検出し、ユーザーがそれを中止できるようにします。Windows Vista以降では、シャットダウン/ログオフをブロックしているプログラムを示すユーザーインターフェイスを表示し、ユーザーが強制的にシャットダウン/ログオフできるようにします。古いOSの場合、スクリプトは確認プロンプトを表示します。関連トピック<a href="OnExit.htm">OnExit</a></p>
<pre><em>; The following DllCall is optional: it tells the OS to shut down this script first (prior to all other applications).</em>
DllCall("kernel32.dll\SetProcessShutdownParameters", "UInt", 0x4FF, "UInt", 0)
OnMessage(0x0011, On_WM_QUERYENDSESSION)
Persistent

On_WM_QUERYENDSESSION(wParam, lParam, *)
{
    ENDSESSION_LOGOFF := 0x80000000
    if (lParam &amp; ENDSESSION_LOGOFF)  <em>; User is logging off.</em>
        EventType := "Logoff"
    else  <em>; System is either shutting down or restarting.</em>
        EventType := "Shutdown"
    try
    {
        <em>; Set a prompt for the OS shutdown UI to display.  We do not display
        ; our own confirmation prompt because we have only 5 seconds before
        ; the OS displays the shutdown UI anyway.  Also, a program without
        ; a visible window cannot block shutdown without providing a reason.</em>
        BlockShutdown("Example script attempting to prevent " EventType ".")
        return false
    }
    catch
    {
        <em>; ShutdownBlockReasonCreate is not available, so this is probably
        ; Windows XP, 2003 or 2000, where we can actually prevent shutdown.</em>
        Result := MsgBox(EventType " in progress. Allow it?",, "YN")
        if (Result = "Yes")
            return true  <em>; Tell the OS to allow the shutdown/logoff to continue.</em>
        else
            return false  <em>; Tell the OS to abort the shutdown/logoff.</em>
    }
}

BlockShutdown(Reason)
{
    <em>; If your script has a visible GUI, use it instead of A_ScriptHwnd.</em>
    DllCall("ShutdownBlockReasonCreate", "ptr", A_ScriptHwnd, "wstr", Reason)
    OnExit StopBlockingShutdown
}

StopBlockingShutdown(*)
{
    OnExit StopBlockingShutdown, 0
    DllCall("ShutdownBlockReasonDestroy", "ptr", A_ScriptHwnd)
}</pre>
</div>

<div class="ex" id="ExCustom">
<p><a class="ex_number" href="#ExCustom"></a> 他のスクリプトやプログラムから、カスタムメッセージと最大2つの数字を受信する（数字ではなく文字列を送信する場合は、この後の例を参照してください）。</p>
<pre>OnMessage 0x5555, MsgMonitor
Persistent

MsgMonitor(wParam, lParam, msg, *)
{
    <em>; Since returning quickly is often important, it is better to use ToolTip than</em>
    <em>; something like MsgBox that would prevent the callback from finishing:</em>
    ToolTip "Message " msg " arrived:`nWPARAM:" wParam "`nLPARAM:" lParam
}

<em>; The following could be used inside some other script to run the callback inside the above script:</em>
SetTitleMatchMode 2
DetectHiddenWindows True
if WinExist("Name of Receiving Script.ahk ahk_class AutoHotkey")
    PostMessage 0x5555, 11, 22  <em>; The message is sent to the "<a href="../misc/WinTitle.htm#LastFoundWindow">last found window</a>" due to WinExist above.</em>
DetectHiddenWindows False  <em>; Must not be turned off until after PostMessage.</em></pre>
</div>

<div class="ex" id="ExSendString">
<p><a class="ex_number" href="#ExSendString"></a> あるスクリプトから別のスクリプトへ、任意の長さの文字列を送信します。これを使うには、次の2つのスクリプトを保存して実行し、<kbd>Win</kbd>+<kbd>Space</kbd>を押して入力ボックスを表示し、文字列を入力するよう促します。両方のスクリプトは同じ<a href="../Concepts.htm#native-encoding">ネイティブエンコーディング</a>を使用する必要があります。</p>
<p>以下のスクリプトを<strong>Receiver.ahk</strong>として保存し、起動してください。</p>
<pre filename="Receiver.ahk">#SingleInstance
OnMessage 0x004A, Receive_WM_COPYDATA  <em>; 0x004A is WM_COPYDATA</em>
Persistent

Receive_WM_COPYDATA(wParam, lParam, msg, hwnd)
{
    StringAddress := NumGet(lParam, 2*A_PtrSize, "Ptr")  <em>; Retrieves the CopyDataStruct's lpData member.</em>
    CopyOfData := StrGet(StringAddress)  <em>; Copy the string out of the structure.</em>
    <em>; Show it with ToolTip vs. MsgBox so we can return in a timely fashion:</em>
    ToolTip A_ScriptName "`nReceived the following string:`n" CopyOfData
    return true  <em>; Returning 1 (true) is the traditional way to acknowledge this message.</em>
}</pre>
<p>以下のスクリプトを<strong>Sender.ahk</strong>として保存し、起動してください。その後、<kbd>Win</kbd>+<kbd>Space</kbd>のホットキーを押してください。</p>
<pre filename="Sender.ahk">TargetScriptTitle := "Receiver.ahk ahk_class AutoHotkey"

#space::  <em>; Win+Space hotkey. Press it to show an input box for entry of a message string.</em>
{
    ib := InputBox("Enter some text to Send:", "Send text via WM_COPYDATA")
    if ib.Result = "Cancel"  <em>; User pressed the Cancel button.</em>
        return
    result := Send_WM_COPYDATA(ib.Value, TargetScriptTitle)
    if result = ""
        MsgBox "SendMessage failed or timed out. Does the following WinTitle exist?:`n" TargetScriptTitle
    else if (result = 0)
        MsgBox "Message sent but the target window responded with 0, which may mean it ignored it."
}

Send_WM_COPYDATA(StringToSend, TargetScriptTitle)
<em>; This function sends the specified string to the specified window and returns the reply.
; The reply is 1 if the target window processed the message, or 0 if it ignored it.</em>
{
    CopyDataStruct := Buffer(3*A_PtrSize)  <em>; Set up the structure's memory area.</em>
    <em>; First set the structure's cbData member to the size of the string, including its zero terminator:</em>
    SizeInBytes := (StrLen(StringToSend) + 1) * 2
    NumPut( "Ptr", SizeInBytes  <em>; OS requires that this be done.</em>
          , "Ptr", StrPtr(StringToSend)  <em>; Set lpData to point to the string itself.</em>
          , CopyDataStruct, A_PtrSize)
    Prev_DetectHiddenWindows := A_DetectHiddenWindows
    Prev_TitleMatchMode := A_TitleMatchMode
    DetectHiddenWindows True
    SetTitleMatchMode 2
    TimeOutTime := 4000  <em>; Optional. Milliseconds to wait for response from receiver.ahk. Default is 5000
    ; Must use SendMessage not PostMessage.</em>
    RetValue := SendMessage(0x004A, 0, CopyDataStruct,, TargetScriptTitle,,,, TimeOutTime) <em>; 0x004A is WM_COPYDATA.</em>
    DetectHiddenWindows Prev_DetectHiddenWindows  <em>; Restore original setting for the caller.</em>
    SetTitleMatchMode Prev_TitleMatchMode         <em>; Same.</em>
    return RetValue  <em>; Return SendMessage's reply back to our caller.</em>
}</pre>
</div>

<p>ネットワーク接続でデータが到着したときに通知を受け取るOnMessageの使い方の例は、<a href="../scripts/index.htm#WinLIRC">WinLIRCクライアントスクリプト</a>をご覧ください。</p>

</body>
</html>
