<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Click - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Click関数は、指定された座標でマウスボタンをクリックする関数です。また、マウスボタンの長押し、マウスホイールの回転、マウスの移動も可能です。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Click</h1>

<p>指定した座標でマウスボタンをクリックします。また、マウスボタンの長押し、マウスホイールの回転、マウスの移動も可能です。</p>
<pre class="Syntax"><span class="func">Click</span> <span class="optional">Options</span></pre>

<h2 id="Parameters">パラメータ</h2>
<dl>
  <dt>Options</dt>
  <dd>
    <p>以下の構成要素のうち、0個以上を指定します。<var>Coords</var>, <var>WhichButton</var>, <var>ClickCount</var>, <var>DownOrUp</var>, and/or <var>Relative</var>. 各コンポーネントは、少なくとも1つのスペース、タブ、カンマで次のコンポーネントと区切る（文字列内または個別のパラメータとして）。コンポーネントは、<var>ClickCount</var>を除いて、どのような順序で表示されても構いません。</p>
    <p><strong>Coords（座標）：</strong>クリックする前にマウスカーソルを移動させるX、Y座標です。例えば、<code>Click "100 200"</code>は、マウスの左ボタンを特定の位置でクリックすることができます。座標は、<a href="CoordMode.htm">CoordMode</a>で変更されない限り、アクティブウィンドウからの相対座標となります。省略された場合は、カーソルの現在位置が使用されます。</p>
    <p><strong>WhichButton</strong>左（デフォルト）、右、中（またはそれぞれの最初の文字）、またはマウスの4番目か5番目のボタン（X1またはX2）。例えば、<code>クリック「右」</code>すると、マウスカーソルの現在位置でマウスの右ボタンをクリックすることができます。左はプライマリーボタン、右はセカンダリーボタンに対応します。ユーザーがシステム設定でボタンを入れ替えると、ボタンの物理的な位置は入れ替わりますが、効果は変わりません。</p>
    <p><var>WhichButton</var>には、ホイールを上方向（自分から離れる方向）に向けるWheelUpまたはWU、ホイールを下方向（自分から近づく方向）に向けるWheelDownまたはWDを指定することも可能です。WheelLeft（またはWL）またはWheelRight（またはWR）を指定することもできる。<var>ClickCount</var>には、ホイールを回すノッチ数を指定します。ただし、アプリケーションによっては、マウスホイールの<var>ClickCount</var>の値が1以上であることに従わないものもあります。それらのために、<a href="Loop.htm">Loop</a>などの手段でClick機能を複数回使用します。</p>
    <p><strong>ClickCount（クリックカウント）：</strong>マウスをクリックする回数を指定します。例えば、<code>Click 2</code>は、マウスカーソルの現在位置でダブルクリックを行います。省略された場合、ボタンは1回クリックされます。<var>Coords</var>が指定されている場合は、<var>ClickCount</var>はその後に表示されなければならない。クリックせずにマウスを動かす場合は、ゼロ（0）を指定します（例：<code>クリック「100 200 0」</code>）。</p>
    <p><strong>DownOrUp：</strong>このコンポーネントは通常省略され、その場合、各クリックはダウンイベントとアップイベントから構成されます。それ以外の場合は、マウスボタンを離さずに押し下げるDown（または文字D）を指定します。その後、Up（またはUの文字）という単語を使ってマウスボタンを離します。例えば、<code>Click "Down"</code>は、マウスの左ボタンを押し下げ、そのまま保持します。</p>
    <p><strong>Relative（相対）：</strong>RelまたはRelativeという単語は、指定されたXおよびY座標を現在のマウス位置からのオフセットとして扱います。つまり、カーソルは現在位置から右にXピクセル（負の場合は左）、下にYピクセル（負の場合は上）だけ移動します。</p>
  </dd>
</dl>

<h2 id="Remarks">備考</h2>
<p>Click関数は、<a href="SendMode.htm">SendMode</a>で設定された送信方式を使用します。特定のクリックに対してこのモードを上書きするには、この例のように<a href="Send.htm#Click">{Click}</a>と組み合わせて特定のSend関数を使用します。<code>SendEvent "{Click 100 200}"</code>.</p>
<p>Shift-ClickやControl-Clickを行うには、一般的に<a href="Send.htm#Click">Send経由のクリック</a>が最も簡単です。例えば：</p>
<pre>Send "+{Click 100 200}"  <em>; Shift+LeftClick</em>
Send "^{Click 100 200 Right}"  <em>; Control+RightClick</em></pre>
<p>クリック機能は、<a href="Send.htm">送信</a>とは異なり、修飾キー（Ctrl、Alt、Shift、Win）を自動的に解除することはありません。例えば、現在<kbd>Ctrl</kbd>が押されている場合、<code>Click</code>はコントロールクリックになりますが、<code>Send "{Click}"</code>は通常のクリックになります。</p>
<p><a href="SendMode.htm">SendPlayモード</a>は、他のモードに比べ、より幅広いゲームにおいてマウスイベントを正常に発生させることができます。また、アプリケーションやゲームによっては、マウスの動きが速すぎると追従できない場合があります。その場合は、<a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>を使用して速度を下げることができます（ただし、<a href="SendMode.htm">SendEventモード</a>時のみ）。</p>
<p><a href="BlockInput.htm">BlockInput</a>関数を使用すると、ユーザーによる物理的なマウス操作が、マウス関数によって生成されるシミュレーションマウスイベントを妨害することを防ぐことができます。ただし、<a href="SendMode.htm">SendInput</a>と <a href="SendMode.htm">SendPlay</a>モードでは、ユーザーの物理的なマウス操作を自動的に後回しにするため、一般にこの操作は必要ありません。</p>
<p>マウスのクリックダウンとクリックアップのたびに、自動的に遅延が発生します（<a href="SendMode.htm">SendInputモード</a>とマウスホイールを回す場合を除く）。ディレイの長さを変更する場合は、<a href="SetMouseDelay.htm">SetMouseDelay</a>を使用します。</p>
<h2 id="Related">関連</h2>
<p><a href="Send.htm#Click">Send "{Click}"</a>, <a href="SendMode.htm">SendMode</a>, <a href="CoordMode.htm">CoordMode</a>, <a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="SetMouseDelay.htm">SetMouseDelay</a>, <a href="MouseClick.htm">MouseClick</a>, <a href="MouseClickDrag.htm">MouseClickDrag</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="ControlClick.htm">ControlClick</a>, <a href="BlockInput.htm">BlockInput</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> マウスカーソルの現在位置でマウスの左ボタンをクリックします。</p>
<pre>Click</pre>
</div>

<div class="ex" id="ExCoord">
<p><a class="ex_number" href="#ExCoord"></a> マウスの左ボタンを特定の位置でクリックします。</p>
<pre>Click 100, 200</pre>
</div>

<div class="ex" id="ExCoordMove">
<p><a class="ex_number" href="#ExCoordMove"></a> クリックせずに、マウスカーソルを特定の位置に移動させます。</p>
<pre>Click 100, 200, 0</pre>
</div>

<div class="ex" id="ExCoordRight">
<p><a class="ex_number" href="#ExCoordRight"></a> マウスの右ボタンを特定の位置でクリックします。</p>
<pre>Click 100, 200, "Right"</pre>
</div>

<div class="ex" id="ExDouble">
<p><a class="ex_number" href="#ExDouble"></a> マウスカーソルの現在位置でダブルクリックを行います。</p>
<pre>Click 2</pre>
</div>

<div class="ex" id="ExDown">
<p><a class="ex_number" href="#ExDown"></a> マウスの左ボタンを押し下げ、そのまま保持します。</p>
<pre>Click "Down"</pre>
</div>

<div class="ex" id="ExUp">
<p><a class="ex_number" href="#ExUp"></a> マウスの右ボタンを離します。</p>
<pre>Click "Up Right"</pre>
</div>

</body>
</html>
