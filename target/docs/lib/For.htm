<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>For Loop - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="The For loop statement repeats one or more statements once for each key-value pair in an object." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>For-loop</h1>

<p>Repeats one or more statements once for each key-value pair in an object.</p>

<pre class="Syntax"><span class="func">For</span> Value1 <span class="optional">, Value2</span> in Expression</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Value1</dt>
  <dt>Value2</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variables">変数</a></p>
    <p>各反復の最初に列挙者が返す値を格納するための変数です。これらの値の性質は、<em>Expression</em>によって決定される列挙子によって定義されます。これらの変数は<a href="../Language.htm#dynamic-variables">動的</a>にはありえない。</p>
    <p>ループが切れたり終了したりすると、これらの変数は元の値に戻されます。ループ変数が<a href="../Functions.htm#ByRef">ByRef パラメータ</a>である場合、対象変数はループの影響を受けません。また、その変数を参照する<a href="../Functions.htm#closures">クロージャ</a>（ローカルな場合）も影響を受けず、ループの外でその変数が持っていた値だけを見ることができます。</p>
    <p class="warning"><strong>注：</strong>ループ本体内で定義されていても、ループ変数を参照するネストされた関数は、現在の反復の値を見たり変更したりすることはできません。代わりに、変数を明示的に渡すか、その値をパラメータに<a href="Func.htm#Bind">バインド</a>してください。</p>
    <p>列挙者がサポートしている場合、最大19個の変数がサポートされます。</p>
    <p>変数は省略可能です。例えば、<code>myMapのvalueに対して</code>、<em>myMap</em>のenumeratorを第2パラメータのみで呼び出し、第1パラメータを省略します。列挙者がユーザー定義で、パラメータが必須である場合は、通常通り例外が発生します。<a href="../Objects.htm#__Enum">Enum</a>に渡されるパラメータカウントは、変数やカンマがない場合は0、ない場合は1にカンマの数を加えたものになります。</p>
  </dd>

  <dt>式</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#objects">Object</a></p>
    <p>列挙可能なオブジェクトをもたらす<a href="../Variables.htm#Expressions">式</a>、または列挙可能なオブジェクトを含む変数。</p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p>パラメータリストは、オプションで括弧で囲むことができます。事例：<code>for (val in myarray)</code></p>
<p>列挙の流れは以下の通りです：</p>
<ul>
  <li>ループが始まる前に、<i>Expression</i>が評価され、ターゲットオブジェクトが決定されます。</li>
  <li>オブジェクトの<code>__Enum</code>メソッドを呼び出して <a href="Enumerator.htm"><i>列挙者</i></a>オブジェクトになります。そのようなメソッドが存在しない場合、オブジェクト自体が列挙者オブジェクトであるとみなされます。</li>
  <li>各反復の最初に、次の値または値のペアを取得するために列挙者が<a href="Enumerator.htm#Call">呼び出されます</a>。false（0または空文字列）を返すと、ループは終了します。</li>
</ul>
<p>for-loopと厳密に同じではありませんが、以下のようにこの処理を実演しています：</p>
<pre>_enum := <i>Expression</i>
try _enum := _enum.__Enum(2)
while _enum(&amp;Value1, &amp;Value2)
{
    ...
}
</pre>
<p>上記のコードと同様に、<em>Expression</em>または__Enumが呼び出すことのできない値を生成した場合、例外がスローされます。</p>
<p>プロパティ、メソッド、配列の要素を列挙している間、そのタイプの項目を挿入したり削除したりすることは一般的に安全ではありません。そのため、一部の項目がスキップされたり、複数回列挙されたりすることがあります。回避策として、削除するアイテムのリストを作成し、最初のループが完了した後に2番目のループでアイテムを削除する方法があります。</p>
<p>forループの後には、通常、ループの<em>本体</em>を形成するステートメントの集合体である<a href="Block.htm">ブロック</a>が続きます。ただし、1つの文しかないループにはブロックは必要ありません（"if"とその "else"は、この目的のために1つの文としてカウントされます）。オプションで、オープンブレースを下ではなく同じラインに表示させるOTB（One True Brace）スタイルを採用することも可能です。事例：<code>for x, y in z {</code>.</p>
<p>すべてのループと同様に、<a href="Break.htm">Break</a>、<a href="Continue.htm">Continue</a>、<a href="../Variables.htm#Index">A_Index</a>を使用することができます。</p>
<p>ループの後に<a href="Else.htm">Else</a>文が続くこともあり、ループの反復回数がゼロの場合に実行されます。</p>

<h2 id="COM_Objects">COM Objects</h2>
<p><i>Value1</i>と<i>Value2</i>は列挙者に直接渡されるため、どのような値が割り当てられるかは、列挙されるオブジェクトの種類に依存します。COM オブジェクトの場合、<i>Value1</i>には<a href="https://learn.microsoft.com/windows/win32/api/oaidl/nf-oaidl-ienumvariant-next">IEnumVARIANT::Next()</a>が返す値が、<i>Value2</i>にはその<a href="https://learn.microsoft.com/openspecs/windows_protocols/ms-oaut/3fe7db9f-5803-4dc4-9d14-5425d3f5461f">バリアントタイプ</a>を表す数値が含まれます。例えば、<a href="https://learn.microsoft.com/previous-versions/x4k5wbx4(v=vs.85)">Scripting.Dictionary</a>オブジェクトで使用する場合、各<i>Value1</i>には辞書のキーが含まれ、<i>Value2</i>は通常、文字列の場合は8、整数の場合は3です。タイプコードの一覧は<a href="ComObjType.htm">ComObjType</a>を参照してください。</p>
<p><a href="ComObjArray.htm">SafeArray</a>を列挙する場合、<i>Value1</i>には現在の要素が、<i>Value2</i>にはそのバリアントタイプが含まれる。</p>

<h2 id="Related">関連</h2>
<p><a href="Enumerator.htm">Enumerator object</a>, <a href="Object.htm#OwnProps">OwnProps</a>, <a href="While.htm">While-loop</a>, <a href="Loop.htm">Loop</a>, <a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> オブジェクトが所有するプロパティを一覧表示します。</p>
<pre>colours := {red:0xFF0000, blue:0x0000FF, green:0x00FF00}
<em>; 上記の表現は、以下の「colors」の代わりに直接使用することができます：</em>
s := ""
for k, v in colours.OwnProps()
    s .= k "=" v "`n"
MsgBox s
</pre>
</div>

<div class="ex" id="ExCOM">
<p><a class="ex_number" href="#ExCOM"></a> <a href="https://learn.microsoft.com/windows/win32/shell/shell">Shell</a>オブジェクトを使用して、開いているすべてのExplorerおよびInternet Explorerのウィンドウを一覧表示します。</p>
<pre>windows := ""
for window in ComObject("Shell.Application").Windows
    windows .= window.LocationName " :: " window.LocationURL "`n"
MsgBox windows</pre>
</div>

<div class="ex" id="ExFibF">
<p><a class="ex_number" href="#ExFibF"></a> <a href="../Variables.htm#fat-arrow">ファットアロー関数として</a>列挙子を定義します。フィボナッチ数列から、無期限または停止するまで数値を返します。</p>
<pre>for n in FibF()
    if MsgBox("#" A_Index " = " n "`nContinue?",, "y/n") = "No"
        break

FibF() {
    a := 0, b := 1
    return (&amp;n) =&gt; (
        n := c := b, b += a, a := c,
        true
    )
}</pre>
</div>

<div class="ex" id="ExFibC">
<p><a class="ex_number" href="#ExFibC"></a> 列挙者を<a href="../Objects.htm#Custom_Classes">クラス</a>として定義します。<a href="#ExFibF">前例</a>に準ずる。</p>
<pre>for n in FibC()
    if MsgBox("#" A_Index " = " n "`nContinue?",, "y/n") = "No"
        break

class FibC {
    a := 0, b := 1
    Call(&amp;n) {
        n := c := this.b, this.b += this.a, this.a := c
        return true
    }
}</pre>
</div>
</body>
</html>
