<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Send - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Send、SendText、SendInput、SendPlay、SendEvent関数は、アクティブウィンドウにキーストロークやマウスクリックのシミュレーションを送信します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Send / SendText / SendInput / SendPlay / SendEvent</h1>

<p>キーストロークやマウスクリックのシミュレーションを<a href="WinActivate.htm">アクティブ</a>ウィンドウに送信します。</p>

<pre class="Syntax"><span class="func">Send</span> Keys
<span class="func">SendText</span> Keys
<span class="func">SendInput</span> Keys
<span class="func">SendPlay</span> Keys
<span class="func">SendEvent</span> Keys</pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Keys</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>送信するキーのシーケンス。</p>
    <p>デフォルトでは（つまり、SendTextも<a href="#Raw">Rawモード</a>も <a href="#Text">Textモード</a>も使用しない場合）、文字<code>^+!#{}</code>は特別な意味を持つ。文字<code>^+!#</code>は、修飾キー<kbd>Ctrl</kbd>、<kbd>Shift</kbd>、<kbd>Alt</kbd>、<kbd>Win</kbd>を表します。次のキーにしか影響しません。対応する修飾キーを単独で送信する場合は、キー名を中括弧で囲んでください。キーを押したり離したりするだけなら、以下のようにキー名の後に「down」や「up」をつけてください。</p>
    <style>
      #modifierkeys td:not(:last-child) {
        white-space: nowrap;
        text-align: center
      }
    </style>
    <table id="modifierkeys" class="info">
      <tr>
        <th>記号</th>
        <th>キー</th>
        <th>プレス</th>
        <th>リリース</th>
        <th>例</th>
      </tr>
      <tr>
        <td>^</td>
        <td>{Ctrl}</td>
        <td>{Ctrl down}</td>
        <td>{Ctrl up}</td>
        <td><code>Send "^{Home}"</code><kbd>Ctrl</kbd>+<kbd>Home</kbd>を押す</td>
      </tr>
      <tr>
        <td>+</td>
        <td>{Shift}</td>
        <td>{Shift down}</td>
        <td>{Shift up}</td>
        <td><code>Send "+abC"</code>は、テキスト「AbC」を送信します<br>
          <code>Send "!+a"</code> は、<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd>を押します</td>
      </tr>
      <tr>
        <td>!</td>
        <td>{Alt}</td>
        <td>{Alt down}</td>
        <td>{Alt up}</td>
        <td><code>Send "!a"</code> は、<kbd>Alt</kbd>+<kbd>A</kbd>を押します</td>
      </tr>
      <tr>
        <td>#</td>
        <td>{LWin}<br>{RWin}</td>
        <td>{LWin down}<br>{RWin down}</td>
        <td>{LWin up}<br>{RWin up}</td>
        <td><code>Send "#e"</code> は、<kbd>Win</kbd>を押しながら<kbd>E</kbd>を押します</td>
      </tr>
    </table>
    <p class="note"><strong>注意：</strong><kbd>Shift</kbd>を送ると大文字が出るように、<code>A</code>はプログラムによっては<code>a</code>とは違う効果が出ます。例えば、<code>!A</code>は <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd>、および、<code>!a</code>は、<kbd>Alt</kbd>+<kbd>A</kbd>を押します。迷ったときは小文字を使います。</p>
    <p>文字<code>{}</code>は、<a href="#keynames">キー名やその他のオプション</a>を囲んだり、特殊文字を文字通りに送信するために使用します。例えば、<code>{Tab}</code> は <kbd>Tab</kbd>、<code>{!}</code>は文字通りのエクスクラメーションマークです。</p>
    <p>ASCII文字（a-zまたはA-Z）を中括弧で囲むと、その文字が現在のキーボードレイアウトに存在しない場合でも、対応する仮想キーコードとして送信されます。つまり、<code>Send "a"</code>は「a」が出るが、<code>Send "{a}"</code>をと「a」が出るかどうかは、キーボードの配列によって異なります。詳しくは、<a href="#AZ">下記の備考</a>をご覧ください。</p>
  </dd>

</dl>

<h2 id="Send_variants">Send variants</h2>
<p><strong>Send：</strong>デフォルトでは、SendはSendInputと同義ですが、<a href="SendMode.htm">SendMode</a>によってSendEventやSendPlayと同義にすることができます。</p>
<p><strong>SendText：</strong>Sendと似ていますが、<em>Keys</em>のすべての文字が解釈され、文字通り送信されます。詳しくは、「<a href="#Text">テキストモード</a>」をご覧ください。</p>
<p><strong id="SendInput">SendInput</strong>、<strong id="SendPlay">SendPlay</strong>：SendInputとSendPlayはSendEventと同じ構文を使用しますが、一般的により高速で信頼性が高いです。また、送信中にキーボードやマウスを操作した場合、バッファリングが行われるため、ユーザーのキー入力と送信中のキー入力が混在することを防ぐことができます。<a href="SendMode.htm">SendMode</a>を使用することで、SendをSendInputやSendPlayと同義にすることができます。各モードの詳細については、後述の<a href="#SendInputDetail">SendInput</a>および<a href="#SendPlayDetail">SendPlay</a>を参照してください。</p>
<p id="SendEvent"><strong>SendEvent：</strong>SendEventは、Windowsのkeybd_event関数（詳細はMicrosoft Docsを検索）を使用してキーストロークを送信します。キー入力の送信速度は、<a href="SetKeyDelay.htm">SetKeyDelay</a>で決定されます。<a href="SendMode.htm">SendMode</a>を使用することで、SendをSendEventまたはSendPlayと同義にすることができます。</p>

<h2 id="Special_modes">Special modes</h2>
<p>以下のモードは、<em>Keys</em>の文字の解釈や、Send、SendInput、SendPlay、SendEvent、<a href="ControlSend.htm">ControlSendなどの</a>キー送信関数の動作に影響を与えます。これらのモードは、<em>Keys</em>の<code>{x}</code>として指定する必要があり、xはRaw、Text、Blindのいずれかです。例えば、<code>{Raw}</code>です。</p>

<h3 id="Raw">Raw mode</h3>
<p id="SendRaw">Rawモードは<code>{Raw}</code>で有効にすることができ、<code>{Enter}</code>を <kbd>Enter</kbd>、<code>^c</code>を <kbd>Ctrl</kbd>+<kbd>C</kbd>などに変換するのではなく、特殊文字<code>^+!#{}</code>を含む後続のすべての文字が文字通り解釈されるようになります。例えば、<code>Send "{Raw}{Tab}"</code>は、<kbd>Tab</kbd>の代わりに<code>{Tab}</code>を送信します。</p>
<p>Rawモードは、<a href="../misc/EscapeChar.htm">エスケープシーケンス</a>や <a href="../Variables.htm#Expressions">式</a>の解釈には影響しません。例えば、<code>Send "{Raw}``100`%"</code>は、文字列<code class="no-highlight">`100%</code>を送信します。</p>

<h3 id="Text">テキストモード</h3>
<p id="SendText">テキストモードは<code>{Text}</code>、SendText、<a href="ControlSend.htm">ControlSendText</a>のいずれかで有効にすることができ、Rawモードと似ていますが、文字（<code>`r</code>、<code>`n</code>、<code>`t</code>、<code>`b</code>以外）をキーコードに変換しようとしないことを除いて、残りのすべての文字に対して<a href="#fallback">フォールバックメソッド</a>が使用されます。SendEvent、SendInput、<a href="ControlSend.htm">ControlSend</a>については、文字が正しい修飾子の状態に依存することが少なくなるため、信頼性が向上する。このモードは、ブラインドモードと組み合わせることで、修飾キーを離さないようにすることができます：<code>Send "{Blind}{Text}テキスト"</code>。ただし、アプリケーションによっては、修飾キーが解放されている必要があります。</p>
<p><code>`n</code>、<code>`r</code>、<code>`r`n</code>は、デフォルトの動作やRawモードが<code>`r`n</code>を2つの<kbd>Enter</kbd>に変換するのとは異なり、すべて1つの<kbd>Enter</kbd>に変換されます。<code>`t</code>は <kbd>Tab</kbd>に、<code>`b</code>は <kbd>Backspace</kbd>に変換されますが、それ以外の文字は変換されずに送信されます。</p>
<p>ブラインドモードと同様に、テキストモードは<a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>を無視し（つまり、<kbd>CapsLock</kbd>の状態は変化しない）、<a href="../Hotkeys.htm#win-l"><kbd>Win</kbd>が解除されるのを待つ</a>ことはありません。これは、テキストモードが通常<kbd>CapsLock</kbd>の状態に依存せず、システムの<kbd>Win</kbd>+<kbd>L</kbd>ホットキーをトリガーすることができないためです。ただし、<em>Keys</em>が <code>{Text}</code>または<code>{Blind}{Text}</code>で始まる場合のみ適用されます。</p>

<h3 id="Blind">ブラインドモード</h3>
<p id="blind">ブラインドモードは<code>{Blind}</code>で有効にすることができ、通常、期待通りに動作させるために自動的に行われる多くのことを無効にすることで、スクリプトをよりコントロールできるようにします。ブラインドモードを有効にするには、文字列の最初の項目として<code>{Blind}</code>を指定する必要があります。以下のような効果があります：</p>
<ul>
  <li>ブラインドモードは、修飾キー（Alt、Ctrl、Shift、Win）がダウンポジションでスタートした場合、修飾キーが<a href="#blind-exclude">除外されて</a>いない限り、解放を回避する。例えば、ホットキー<code>+s::Send "{Blind}abc"</code>は、ユーザーが<kbd>Shift</kbd>を押しているため、abc ではなく ABC を送信します。</li>
  <li>修飾キーは、ユーザーが物理的に押したままでも、センドがホットキーの修飾をオフにできるように、別の方法で復元されます。例えば、<code>^space::Send "{Ctrl up}"</code>は、ユーザーが物理的に<kbd>Ctrl</kbd>を押したままであれば、自動的に<kbd>Ctrl</kbd>を押し下げますが、<code>^space::Send "{Blind}{Ctrl up}"</code>では、物理的には下がっていても、論理的には<kbd>Ctrl</kbd>が上がっていることがあります。</li>
  <li><a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>は無視され、すなわち<kbd>CapsLock</kbd>の状態は変更されない。</li>
  <li><a href="A_MenuMaskKey.htm">Menu masking</a>は無効です。つまり、Sendは、予防のために送信されるはずの余分なキーストロークを省略します：1) Winキー操作時のスタートメニュー表示（LWin/RWin）、2) Altキー操作時のメニューバー起動。ただし、ブラインドモードでは、フックホットキー起動後のキーボードフックによるマスキングは防げません。</li>
  <li>送信は、テキストに<kbd>L</kbd>キーが含まれていても、<kbd>Win</kbd>の解除を待たずに送信します。これは通常、Sendがシステムの「ワークステーションをロック」ホットキー（<kbd>Win</kbd>+<kbd>L</kbd>）をトリガーするのを防ぐために行われるものです。See <a href="../Hotkeys.htm#win-l">Hotkeys</a> for details.</li>
</ul>
<p id="blind-exclude">「Blind」の後に1つ以上の修飾記号(<code>!#^+</code>)を付けると、必要に応じてそれらの修飾記号が自動的に解除されるようになる場合があります。例えば、<code>*^a::Send "{Blind^}b"</code> は、<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>B</kbd>ではなく、<kbd>Shift</kbd>+<kbd>B</kbd>を送信しますが、<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>A</kbd> が押し付けられた場合。<code>{Blind!#^+}</code>は、必要に応じてすべてのモディファイアを解除することができますが、Blindモードの他の効果を有効にします。</p>
<p>ブラインドモードは、<a href="../misc/Remap.htm">キーを再マッピング</a>する際に内部で使用されます。例えば、<code>a::b</code>の再マッピングでは、次のようになります：1)「a」と入力したときに「b」、2) 大文字の「A」と入力したときに「B」、3)  <kbd>Ctrl</kbd>+<kbd>B</kbd>と入力したときに<kbd>Ctrl</kbd>+<kbd>A</kbd>。ソースキーに修飾子が指定されている場合（ソースキーが大文字の場合は<kbd>Shift</kbd>を含む）、上記のように除外される。例えば、<code>^a::b</code>は、<kbd>Ctrl</kbd>+<kbd>B</kbd>ではなく、通常の<kbd>B</kbd>を出力します。</p>
<p><code>{Blind}</code>はSendTextや<a href="ControlSend.htm">ControlSendText</a>ではサポートされていませんので、代わりに<code>{Blind}{Text}</code>を使用してください。</p>
<p>ブラインドモードは、特に修飾キー（Ctrl、Alt、Shift、Win）を扱う場合、<a href="#SendPlayDetail">SendPlay</a>で完全にサポートされているわけではありません。</p>

<h2 id="keynames">キー名</h2>
<p>次の表は、送信可能な特殊キーの一覧です（各キー名は、中括弧で囲む必要があります）：</p>
<table class="info">
  <tr>
    <th abbr="キー">キー名</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td>{F1}～{F24}</td>
    <td>ファンクションキー。事例：{F12} は <kbd>F12</kbd>。</td>
  </tr>
  <tr>
    <td>{!}</td>
    <td>!</td>
  </tr>
  <tr>
    <td>{#}</td>
    <td>#</td>
  </tr>
  <tr>
    <td>{+}</td>
    <td>+</td>
  </tr>
  <tr>
    <td>{^}</td>
    <td>^</td>
  </tr>
  <tr>
    <td>{{}</td>
    <td>{</td>
  </tr>
  <tr>
    <td>{}}</td>
    <td>}</td>
  </tr>
  <tr>
    <td>{Enter}</td>
    <td>メインキーボードで<kbd>Enter</kbd></td>
  </tr>
  <tr>
    <td>{Escape}または{Esc}</td>
    <td><kbd>Esc</kbd></td>
  </tr>
  <tr>
    <td>{Space}</td>
    <td><kbd>Space</kbd>（送信する文字列の先頭または末尾に現れるスペースにのみ必要で、途中にあるものはリテラルスペースでもよい）</td>
  </tr>
  <tr>
    <td>{Tab}</td>
    <td><kbd>Tab</kbd></td>
  </tr>
  <tr>
    <td>{Backspace}または{BS}</td>
    <td><kbd>Backspace</kbd></td>
  </tr>
  <tr>
    <td>{Delete}または{Del}</td>
    <td><kbd>Del</kbd></td>
  </tr>
  <tr>
    <td>{Insert}または{Ins}</td>
    <td><kbd>Ins</kbd></td>
  </tr>
  <tr>
    <td>{Up}</td>
    <td>メインキーボードで<kbd>↑</kbd>（上矢印）</td>
  </tr>
  <tr>
    <td>{Down}</td>
    <td>メインキーボードで<kbd>↓</kbd>（下矢印）を押す</td>
  </tr>
  <tr>
    <td>{Left}</td>
    <td>メインキーボードで<kbd>←</kbd>（左矢印）を押す</td>
  </tr>
  <tr>
    <td>{Right}</td>
    <td>メインキーボードで<kbd>→</kbd>（右矢印</td>
  </tr>
  <tr>
    <td>{Home}</td>
    <td>メインキーボードで<kbd>Home</kbd></td>
  </tr>
  <tr>
    <td>{End}</td>
    <td>メインキーボードで<kbd>End</kbd></td>
  </tr>
  <tr>
    <td>{PgUp}</td>
    <td>メインキーボードで<kbd>PgUp</kbd></td>
  </tr>
  <tr class="sep_below">
    <td>{PgDn}</td>
    <td>メインキーボードの<kbd>PgDn</kbd></td>
  </tr>
  <tr>
    <td>{CapsLock}</td>
    <td><kbd>CapsLock</kbd>（<a href="SetNumScrollCapsLockState.htm">SetCapsLockState</a>を使用するとより確実です）。{CapsLock}を送信する場合、事前に<code><a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a> False</code>が必要な場合があります。</td>
  </tr>
  <tr>
    <td>{ScrollLock}</td>
    <td><kbd>ScrollLock</kbd>（参照：<a href="SetNumScrollCapsLockState.htm">SetScrollLockState</a>）</td>
  </tr>
  <tr class="sep_below">
    <td>{NumLock}</td>
    <td><kbd>NumLock</kbd>（参照：<a href="SetNumScrollCapsLockState.htm">SetNumLockState</a>）</td>
  </tr>
  <tr>
    <td>{Control}または{Ctrl}</td>
    <td><kbd>Ctrl</kbd>（技術情報：はニュートラルバーチャルキーを送信しますが、左のスキャンコード）</td>
  </tr>
  <tr>
    <td>{LControl}または{LCtrl}</td>
    <td>左<kbd>Ctrl</kbd>（技術情報：中立キーではなく、左の仮想キーを送信します）</td>
  </tr>
  <tr>
    <td>{RControl}または{RCtrl}</td>
    <td>右<kbd>Ctrl</kbd></td>
  </tr>
  <tr class="sep_below">
    <td>{Control down}または{Ctrl down}</td>
    <td>{Ctrl up}が送信されるまで、<kbd>Ctrl</kbd>を押したままにします。左または右のキーを押したままにするには、CtrlをLCtrlまたはRCtrlに置き換えてください。</td>
  </tr>
  <tr>
    <td>{Alt}</td>
    <td><kbd>Alt</kbd>（技術情報：はニュートラルバーチャルキーを送信しますが、左のスキャンコード）</td>
  </tr>
  <tr>
    <td>{LAlt}</td>
    <td>左<kbd>Alt</kbd>（技術情報：中立キーではなく、左の仮想キーを送信します）</td>
  </tr>
  <tr>
    <td>{RAlt}</td>
    <td>右<kbd>Alt</kbd>（キーボードレイアウトによっては<kbd>AltGr</kbd>）</td>
  </tr>
  <tr class="sep_below">
    <td>{Alt down}</td>
    <td>{Alt up}が送信されるまで<kbd>Alt</kbd>downを保持します。左または右のキーを押したままにする場合は、AltをLAltまたはRAltに置き換えてください。</td>
  </tr>
  <tr>
    <td>{Shift}</td>
    <td><kbd>Shift</kbd>（技術情報：はニュートラルバーチャルキーを送信しますが、左のスキャンコード）</td>
  </tr>
  <tr>
    <td>{LShift}</td>
    <td>左<kbd>Shift</kbd>（技術情報：中立キーではなく、左の仮想キーを送信します）</td>
  </tr>
  <tr>
    <td>{RShift}</td>
    <td>右<kbd>Shift</kbd></td>
  </tr>
  <tr class="sep_below">
    <td>{Shift down}</td>
    <td>{Shift up}が送信されるまで、<kbd>Shift</kbd>を押したままにします。左または右のキーを押したままにするには、ShiftをLShiftまたはRShiftに置き換えてください。</td>
  </tr>
  <tr>
    <td>{LWin}</td>
    <td>左<kbd>Win</kbd></td>
  </tr>
  <tr>
    <td>{RWin}</td>
    <td>右<kbd>Win</kbd></td>
  </tr>
  <tr>
    <td>{LWin down}</td>
    <td>{LWin up}が送信されるまで、左の<kbd>Win</kbd>を押したままにします</td>
  </tr>
  <tr class="sep_below">
    <td>{RWin down}</td>
    <td>{RWin up}が送信されるまで、右の<kbd>Win</kbd>を下に保持する</td>
  </tr>
  <tr>
    <td>{AppsKey}</td>
    <td><kbd>Menu</kbd>（右クリックメニューまたはコンテキストメニューを呼び出す）</td>
  </tr>
  <tr>
    <td>{Sleep}</td>
    <td><kbd>Sleep</kbd></td>
  </tr>
  <tr id="asc">
    <td>{ASC nnnnn}</td>
    <td><p><kbd>Alt</kbd>+nnnnのキーパッドの組み合わせを送信します。キーボードに存在しない特殊文字を生成するために使用することができます。To generate printable ASCII characters or other characters from <a href="https://en.wikipedia.org/wiki/Code_page_437">code page 437</a>, specify a number between 1 and 255. ANSI文字（ほとんどの言語で標準）を生成するには、128から255までの数字を指定しますが、その前に先頭の0を付けます（例：{Asc 0133}）。</p>
    <p>256から65535までの数字（先頭のゼロを含まない）を指定することで、ユニコード文字を生成することができます。ただし、すべてのアプリケーションで対応しているわけではありません。代替案については、以下のセクションを参照してください。</p></td>
  </tr>
  <tr id="Unicode">
    <td>{U+nnnn}</td>
    <td><p id="sendu">Unicode 文字を送信します。<em>nnnn</em>は、0x 接頭辞を除いた文字の 16 進数値です。SendとControlSendは自動的にUnicodeテキストをサポートするので、これは通常必要ありません。</p>
    <p>文字の送信には<a href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-sendinput">SendInput()</a>または<a href="https://learn.microsoft.com/windows/win32/inputdev/wm-char">WM_CHAR</a>が使用され、現在の送信モードは影響しない。この方法で送られた文字は、通常、ショートカットキーやホットキーは作動しません。</p></td>
  </tr>
  <tr id="vk" class="sep_below">
    <td><p>{vkXX}<br>
      {scYYY}<br>
    {vkXXscYYY}</p></td>
    <td><p>仮想キーXXとスキャンコードYYYを持つキーストロークを送信します。事例：<code>Send "{vkFFsc159}"</code>。sc または vk の部分が省略された場合、最も適切な値が代わりに送信されます。</p>
      <p>XXとYYYの値は16進数で、通常は<a href="../Program.htm#main-window">メインウィンドウ</a>「View-&gt;<a href="KeyHistory.htm">Key history</a>」メニュー項目から判断することができます。こちらも参照のこと：<a href="../KeyList.htm#SpecialKeys">特殊キー</a></p>
      <p class="warning"><strong>警告：</strong>この方法でvkとscを組み合わせることは、Sendの場合のみ有効です。</p></td>
  </tr>
  <tr>
    <td>{Numpad0}～{Numpad9}</td>
    <td>Numpadの数字キー（<kbd>NumLock</kbd>がONの時の状態です）。事例：{Numpad5} は <kbd>5</kbd>。</td>
  </tr>
  <tr>
    <td>{NumpadDot}</td>
    <td><kbd>.</kbd>（テンキー期間）（<kbd>NumLock</kbd>がONの時に見られる）。</td>
  </tr>
  <tr>
    <td>{NumpadEnter}</td>
    <td>キーパッドの<kbd>Enter</kbd></td>
  </tr>
  <tr>
    <td>{NumpadMult}</td>
    <td><kbd>*</kbd>（テンキーの乗算）</td>
  </tr>
  <tr>
    <td>{NumpadDiv}</td>
    <td><kbd>/</kbd>（テンキーの除算）</td>
  </tr>
  <tr>
    <td>{NumpadAdd}</td>
    <td><kbd>+</kbd>（テンキーの加算）</td>
  </tr>
  <tr class="sep_below">
    <td>{NumpadSub}</td>
    <td><kbd>-</kbd>（テンキーの減算）</td>
  </tr>
  <tr>
    <td>{NumpadDel}</td>
    <td>キーパッドの<kbd>Del</kbd>（<kbd>NumLock</kbd>がOFFのときは、このキーと以下のNumpadキーが使用されます）</td>
  </tr>
  <tr>
    <td>{NumpadIns}</td>
    <td>キーパッドの<kbd>Ins</kbd></td>
  </tr>
  <tr>
    <td>{NumpadClear}</td>
    <td>キーパッドのクリアキー（<kbd>NumLock</kbd>がOFFの場合、通常は<kbd>5</kbd>）。</td>
  </tr>
  <tr>
    <td>{NumpadUp}</td>
    <td>キーパッドで<kbd>↑</kbd>（上矢印）</td>
  </tr>
  <tr>
    <td>{NumpadDown}</td>
    <td>キーパッドで<kbd>↓</kbd>（下矢印）</td>
  </tr>
  <tr>
    <td>{NumpadLeft}</td>
    <td>キーパッドで<kbd>←</kbd>（左矢印）を押す</td>
  </tr>
  <tr>
    <td>{NumpadRight}</td>
    <td>キーパッドで<kbd>→</kbd>（右矢印</td>
  </tr>
  <tr>
    <td>{NumpadHome}</td>
    <td>キーパッドで<kbd>Home</kbd></td>
  </tr>
  <tr>
    <td>{NumpadEnd}</td>
    <td>キーパッドで<kbd>End</kbd></td>
  </tr>
  <tr>
    <td>{NumpadPgUp}</td>
    <td>キーパッドで<kbd>PgUp</kbd></td>
  </tr>
  <tr class="sep_below">
    <td>{NumpadPgDn}</td>
    <td>キーパッドで<kbd>PgDn</kbd></td>
  </tr>
  <tr>
    <td>{Browser_Back}</td>
    <td>ブラウザの「戻る」ボタンを選択する</td>
  </tr>
  <tr>
    <td>{Browser_Forward}</td>
    <td>ブラウザの「進む」ボタンを選択する</td>
  </tr>
  <tr>
    <td>{Browser_Refresh}</td>
    <td>ブラウザの「更新」ボタンを選択する</td>
  </tr>
  <tr>
    <td>{Browser_Stop}</td>
    <td>ブラウザの「停止」ボタンを選択する</td>
  </tr>
  <tr>
    <td>{Browser_Search}</td>
    <td>ブラウザの「検索」ボタンを選択する</td>
  </tr>
  <tr>
    <td>{Browser_Favorites}</td>
    <td>ブラウザの「お気に入り」ボタンを選択</td>
  </tr>
  <tr>
    <td>{Browser_Home}</td>
    <td>ブラウザを起動し、トップページに移動する</td>
  </tr>
  <tr>
    <td>{Volume_Mute}</td>
    <td>マスターボリュームをミュート／アンミュートする。通常、<code><a href="SoundSetMute.htm">SoundSetMute</a> -1</code>と同等です。</td>
  </tr>
  <tr>
    <td>{Volume_Down}</td>
    <td>マスターボリュームを小さくする。通常、<code><a href="SoundSetVolume.htm">SoundSetVolume</a> -5</code>と同等です。</td>
  </tr>
  <tr>
    <td>{Volume_Up}</td>
    <td>マスターボリュームを大きくする。通常、<code><a href="SoundSetVolume.htm">SoundSetVolume</a> "+5"</code>と同等です。</td>
  </tr>
  <tr>
    <td>{Media_Next}</td>
    <td>メディアプレーヤーで次のトラックを選択する</td>
  </tr>
  <tr>
    <td>{Media_Prev}</td>
    <td>メディアプレーヤーで前のトラックを選択する</td>
  </tr>
  <tr>
    <td>{Media_Stop}</td>
    <td>メディアプレーヤーの停止</td>
  </tr>
  <tr>
    <td>{Media_Play_Pause}</td>
    <td>メディアプレーヤーの再生/一時停止</td>
  </tr>
  <tr>
    <td>{Launch_Mail}</td>
    <td>メールアプリケーションを起動する</td>
  </tr>
  <tr>
    <td>{Launch_Media}</td>
    <td>メディアプレーヤーの起動</td>
  </tr>
  <tr>
    <td>{Launch_App1}</td>
    <td>ユーザーアプリ1起動</td>
  </tr>
  <tr class="sep_below">
    <td>{Launch_App2}</td>
    <td>ユーザーアプリ2起動</td>
  </tr>
  <tr>
    <td>{PrintScreen}</td>
    <td><kbd>PrtSc</kbd></td>
  </tr>
  <tr>
    <td>{CtrlBreak}</td>
    <td><kbd>Ctrl</kbd>+<kbd>Pause</kbd></td>
  </tr>
  <tr class="sep_below">
    <td>{Pause}</td>
    <td><kbd>Pause</kbd></td>
  </tr>
  <tr id="Click">
    <td>{Click [Options]}</td>
    <td><a href="Click.htm">クリック</a>機能と同じオプションを使って、マウスクリックを送信します。例えば、<code>Send "{Click}"</code>はマウスカーソルの現在位置でマウスの左ボタンを1回クリックし、<code>Send "{Click 100 200}"</code>は座標100、200（<a href="CoordMode.htm">CoordMode</a>に基づく）でクリックします。クリックせずにマウスを移動させる場合は、座標の後に0を指定します（例：<code>Send "{Click 100 200 0}"</code>）。マウスクリックの遅延時間は<a href="SetMouseDelay.htm">SetMouseDelay</a>で決定されます（<a href="SetKeyDelay.htm">SetKeyDelay</a>ではありません）。</td>
  </tr>
  <tr id="mouse-buttons">
    <td>{WheelDown}、{WheelUp}、{WheelLeft}、{WheelRight}、{LButton}、{RButton}、{MButton}、{XButton1}、{XButton2}</td>
    <td>
      <p>カーソルの現在位置でマウスボタンイベントを送信します（位置やその他のオプションを制御するには、上記の<a href="Click.htm">{Click}</a>を使用します）。マウスクリックの遅延時間は、<a href="SetMouseDelay.htm">SetMouseDelay</a>で決定されます。</p>
      <p>LButtonとRButtonは、マウスのプライマリボタンとセカンダリボタンに対応します。通常、マウスのプライマリボタン（LButton）は左側にありますが、ユーザーはシステム設定によってボタンを入れ替えることができます。</p>
    </td>
  </tr>
  <tr>
    <td>{Blind}</td>
    <td><a href="#blind">ブラインド</a>モードを有効にします。これは、一般的に期待通りに動作するように、通常自動的に行われる多くのことを無効にすることで、スクリプトをより制御できるようにするものです。<code>{Blind}</code>は文字列の先頭に出現する必要があります。</td>
  </tr>
  <tr>
    <td>{Raw}</td>
    <td>以下の文字が文字通りに解釈される<a href="#SendRaw">Rawモード</a>を有効にします：<code>^+!#{}</code>。Although <code>{Raw}</code> need not occur at the beginning of the string, once specified, it stays in effect for the remainder of the string.</td>
  </tr>
  <tr>
    <td>{Text}</td>
    <td>キーストロークではなく、文字のストリームを送信する<a href="#SendText">テキストモード</a>を有効にします。Rawモードと同様に、Textモードでは、以下の文字が文字通りに解釈されます：<code>^+!#{}</code>。Although <code>{Text}</code> need not occur at the beginning of the string, once specified, it stays in effect for the remainder of the string.</td>
  </tr>
</table>

<h2 id="Repeating_or_Holding_Down_a_Key">鍵盤の繰り返しや長押し</h2>
<p id="repeat"><strong>キー操作のリピート：</strong>中括弧で囲んで、キーの名前と、それを繰り返す回数を指定します。例：</p>
<pre>Send "{DEL 4}"  <em>; Presses the Delete key 4 times.</em>
Send "{S 30}"   <em>; Sends 30 uppercase S characters.</em>
Send "+{TAB 4}"  <em>; Presses Shift-Tab 4 times.</em></pre>
<p id="Down"><strong>キーを押したままにしたり離したりするには：</strong>キーの名前の後に<strong>Down</strong>または<strong>Up</strong>という単語を中括弧で囲みます。例：</p>
<pre>Send "{b down}{b up}"
Send "{TAB down}{TAB up}"
Send "{Up down}"  <em>; Presses down the up-arrow key.</em>
Sleep 1000  <em>; Keeps it down for one second.</em>
Send "{Up up}"  <em>; Releases the up-arrow key.</em></pre>
<p>上記の方法でキーを押した場合、物理的に押した場合のようにオートリピートが始まるわけではありません（オートリピートはドライバー/ハードウェアの機能であるためです）。しかし、<a href="Loop.htm">Loop</a>を使用することでオートリピートを模擬することができます。次の例では、タブキーを20回送信しています：</p>
<pre>Loop 20
{
    Send "{Tab down}"  <em>; Auto-repeat consists of consecutive down-events (with no up-events).</em>
    Sleep 30  <em>; The number of milliseconds between keystrokes (or use <a href="SetKeyDelay.htm">SetKeyDelay</a>).</em>
}
Send "{Tab up}"  <em>; Release the key.</em></pre>
<p>デフォルトでは、送信によって修飾キー（Control、Shift、Alt、Win）が「押下」された場合、送信は自動的に修飾キーを解除しません。例えば、<code>Send "a"</code> は、ユーザーが物理的に<kbd>Ctrl</kbd>を持っている場合、<code>Send "<a href="#blind">{Blind}</a>{Ctrl up}a{Ctrl down}"</code> と同様の動作をすることがあります、 が、<code>Send "{Ctrl Down}"</code>の後に<code>Send "a"</code>を送ると<kbd>Ctrl</kbd>+<kbd>A</kbd>となる。<em>DownTemp</em>と <em>DownR</em>を使用すると、この動作をオーバーライドすることができます。<em>DownTemp</em>と <em>DownR</em>は、修飾キー（Control、Shift、Alt、Win）以外は<em>Down</em>と同じ効果になります。</p>
<p id="DownTemp"><strong>DownTemp</strong>は、キーが永久にダウンしているわけではなく、キーストロークが必要とするときはいつでもリリースできることを後続の送信機に伝えます。例えば、<code>Send "{Control DownTemp}"</code>した後に<code>Send "a"</code>すると、 <kbd>Ctrl</kbd>+<kbd>A</kbd>ではなく、<kbd>A</kbd>が出力されます。Sendを使用すると、モディファイアを永久に解放する可能性があるため、<em>DownTemp</em>はモディファイアキー<a href="../misc/Remap.htm">の再マッピングに適して</a>いません。</p>
<p id="DownR"><strong>DownR</strong>（Rは<a href="../misc/Remap.htm">リマッピング</a>を意味し、主な用途はこれです）は、キーが自動的に離された場合、送信終了時に再び押されるように後続の送信機に指示します。例えば、<code>Send "{Control DownR}"</code>した後に<code>Send "a"</code>すると、<kbd>Ctrl</kbd>+<kbd>A</kbd>ではなく<kbd>A</kbd>を生成しますが、キーボードショートカットを使用するために<kbd>Ctrl</kbd>を押したままの状態にします。つまり、<em>DownR</em>は物理的にキーを押すのと同じような効果があるのです。</p>
<p>文字が現在のキーボードレイアウト上の仮想キーに対応していない場合、「押す」「離す」ことができません。例えば、<code>Send "{µ up}"</code>は、ほとんどのレイアウトで効果がなく、<code>Send "{µ down}"</code>は<code>Send "µ"</code>と同等であることを示しています。</p>

<h2 id="Remarks">総論</h2>
<p id="characters"><strong>キャラクターとキー：</strong>の比較：デフォルトでは、文字はまずキーストロークに変換されて送信されます。この変換が不可能な場合（つまり、現在のキーボードレイアウトにその文字を生成するキーまたはキーの組み合わせがない場合）、その文字は以下のフォールバックメソッドの1つによって送信されます：</p>
<ul id="fallback">
  <li>SendEventとSendInputは、<a href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-keybdinput#keyeventf_unicode">KEYEVENTF_UNICODEフラグ</a>付きの<a href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-sendinput">SendInput()</a>を使用します。</li>
  <li>SendPlayは<a href="#asc">Alt+nnnn</a>メソッドを使用し、ターゲットアプリケーションがサポートしている場合のみ、Unicodeを生成します。</li>
  <li>ControlSend は、<a href="https://learn.microsoft.com/windows/win32/inputdev/wm-char">WM_CHAR</a>メッセージを投稿します。</li>
</ul>
<p class="warning"><strong>注：</strong>上記の方法で送信された文字は、通常、キーボードショートカットやホットキーは作動しません。</p>
<p id="AZ">a-zまたはA-Z（ASCII文字）の範囲にある文字については、現在のキーボードレイアウトに存在しない各文字を、文字として、または対応する仮想キーコード（vk41～vk5A）として送信することができます：</p>
<ul>
  <li>裸の文字が送られる場合（つまり、修飾語や中括弧がない場合）、または<a href="#Raw">Raw</a>モードが有効な場合は、文字として送信されます。例えば、<code>Send "{Raw}Regards"</code>は所望のテキストを送信します。<kbd>R</kbd>（vk52）を押すと他の文字（ロシア語レイアウトでは<kbd>К</kbd>など）が出てくるが、期待通りのテキストが送られる。この場合、先行送信でモディファイアキーが有効になっていない限り、<code>{Raw}</code>は省略可能です。</li>
  <li>送信機能によって1つ以上の修飾キーが有効になっている場合、または文字が中括弧で囲まれている場合は、キーコード（文字が大文字の場合は<kbd>Shift</kbd>で修飾）として送信されます。これにより、スクリプトは標準的なキーボードショートカットを簡単に起動することができます。例えば、<code>^c</code>と<code>{Ctrl down}c{Ctrl up}</code>は標準の<kbd>Ctrl</kbd>+<kbd>C</kbd>ショートカットを有効にし、<code>{c}</code>は<code>{vk43}</code>と同等です。</li>
</ul>
<p>現在のキーボードレイアウトにその文字が存在する場合、そのレイアウトがその文字に関連付けるキーコードとして常に送信されます（<a href="#SendText">テキストモード</a>が使用されていない場合、その文字は他の手段で送信されます）。つまり、上記のセクションは、ロシア語のような非ラテン語ベースのレイアウトにのみ関係します。</p>
<p id="mask"><strong>モディファイアの状態：</strong>Sendは、<kbd>Win</kbd>または<kbd>Alt</kbd>修飾キーの状態を変更する必要がある場合（ユーザーがこれらのキーのいずれかを保持している場合など）、スタートメニューやウィンドウメニューが表示されないようにするために追加のキーストローク（デフォルトでは<kbd>Ctrl</kbd>）を注入することができます。詳しくは、<a href="A_MenuMaskKey.htm">A_MenuMaskKey</a>を参照してください。</p>
<p><strong>BlockInputとSendInput/SendPlayの比較：</strong><a href="BlockInput.htm">BlockInput</a>関数を使用すると、ユーザーが物理的に入力したキーストロークがシミュレーションされたキーストロークの流れを中断するのを防ぐことができますが、キーストロークとマウスクリックが中断しないように<a href="#SendInputDetail">SendInput</a>または<a href="#SendPlayDetail">SendPlay</a>を使用する方がよい場合があります。これは、BlockInputとは異なり、SendInput/Playは送信中にユーザーが入力したものを破棄せず、そのようなキー入力をバッファリングして後から送信するためです。</p>
<p>大量のキーを送信する場合、<a href="../Scripts.htm#continuation">継続部分</a>を使用することで、可読性と保守性を向上させることができます。</p>
<p>オペレーティング システムでは、<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> の組み合わせのシミュレーションはできないので、<code>Send "^!{Delete}"</code> などの操作を行ったとしても、何の影響もありません。。</p>
<p>アクティブウィンドウが管理者権限で実行され、スクリプトが管理者権限で実行されていない場合、<b>送信しても効果がない場合</b>があります。これは、User Interface Privilege Isolationと呼ばれるセキュリティの仕組みによるものです。</p>

<h2 id="SendInputDetail">SendInput</h2>
<p>SendInputは、その優れた速度と信頼性から、一般的にキーストロークやマウスクリックを送信する方法として好まれています。Under most conditions, SendInput is nearly instantaneous, even when sending long strings. SendInputは非常に高速なので、他のウィンドウが不意に現れてキー入力を傍受される機会が少なく、信頼性も高いです。SendInput中にユーザーが入力したものは、その後まで延期されるため、信頼性はさらに向上します。</p>
<p>他の送信モードと異なり、オペレーティングシステムではSendInputは約5000文字に制限されています（オペレーティングシステムのバージョンや性能設定により異なる場合があります）。この制限を超えた文字や事象は送信されません。</p>
<p class="note"><strong>注：</strong>SendInputは、オペレーティングシステムがこのモードでの遅延をサポートしないため、SetKeyDelayを無視します。ただし、後述の条件でSendInputが<a href="#SendEvent">SendEvent</a>に戻る場合は、<code><a href="SetKeyDelay.htm">SetKeyDelay</a> -1, 0</code> を使用します（SendEventのKeyDelayが <code>-1,-1</code> の場合は <code>-1,-1</code> を使用します）。SendInputが<a href="#SendPlayDetail">SendPlay</a>に戻ると、SendPlayのKeyDelayを使用します。</p>
<p id="SendInputHook">If the script has a <a href="InstallKeybdHook.htm">low-level keyboard hook</a> installed, SendInput automatically uninstalls it prior to executing and reinstalls it afterward. As a consequence, SendInput generally cannot trigger the script's own hook hotkeys or <a href="InputHook.htm">InputHooks</a>. The hook is temporarily uninstalled because its presence would otherwise disable all of SendInput's advantages, making it inferior to both SendPlay and SendEvent. However, this can only be done for the script's own hook, and is not done if an external hook is detected as described below.</p>
<p id="SendInputUnavail">SendInputを実行しているスクリプト<em>以外</em>のスクリプトに<a href="InstallKeybdHook.htm">低レベルのキーボードフック</a>がインストールされている場合、SendInputは自動的に<a href="#SendEvent">SendEvent</a>（<code><a href="SendMode.htm">SendMode</a> "InputThenPlay"</code>が有効な場合は<a href="#SendPlayDetail">SendPlay</a>）に戻されます。これは、外部フックの存在によってSendInputの利点がすべて無効になり、SendPlayとSendEventの両方に劣ることになるためである。ただし、SendInputはAutoHotkey v1.0.43+以外のプログラムでは低レベルフックを検出できないため、これらの場合は復帰せず、SendPlay/Eventより信頼性が低くなります。</p>
<p>SendInputが<a href="#Click">{Click}</a>などの手段でマウスクリックを送信し、<code><a href="CoordMode.htm">CoordMode</a> "Mouse", "Window"</code>または<code>CoordMode "Mouse", "Client"</code>が有効な場合、すべてのクリックは、送信開始時にアクティブだったウィンドウに対する相対移動となります。そのため、SendInputが意図的に別のウィンドウをアクティブにした場合（alt-tabなどの手段）、同じ関数内でのその後のクリックの座標が、古いウィンドウではなく新しいウィンドウに対するものであった場合、間違った座標になります。</p>

<h2 id="SendPlayDetail">SendPlay</h2>
<p class="warning"><strong>警告</strong>SendPlayは、UACが有効な場合、スクリプトが管理者として実行されていても、全く効果がない場合があります。詳しくは、<a href="../FAQ.htm#uac">FAQ</a>をご覧ください。</p>
<p>SendPlayの最大の特徴は、他のモードよりも幅広いゲームにおいて、キーストロークやマウスクリックを「再生」できることです。例えば、あるゲームでは、<a href="../Hotstrings.htm#SendMode">SendPlayオプション</a>があるときだけ<a href="../Hotstrings.htm#SendMode">hotstrings</a>を受け入れることができます。</p>
<p>3つの送信モードのうち、SendPlayはキー操作やマウスクリックそのものをシミュレートしていないため、最も珍しいものです。その代わりに、アクティブなウィンドウに直接流れる一連のイベント（メッセージ）を作成します（<a href="ControlSend.htm">ControlSend</a>と似ていますが、より低いレベルです）。その結果、SendPlayはホットキーやホットストリングをトリガーしません。</p>
<p><a href="#SendInputDetail">SendInput</a>と同様に、SendPlayのキー入力は、ユーザーが入力したキー入力が挟まれることはありません。そのため、SendPlay中にユーザーが何かを入力することがあっても、そのキー入力はその後まで延期されます。</p>
<p>SendPlayはSendInputよりかなり遅いですが、通常は従来の<a href="#SendEvent">SendEvent</a>モードより速いです（<a href="SetKeyDelay.htm">KeyDelay</a>が-1でも）。</p>
<p><a href="InstallKeybdHook.htm">キーボードフック</a>がインストールされている場合、SendPlay時に両<kbd>Win</kbd>（LWin、RWin）は自動的にブロックされます。これにより、ユーザーが送信中に誤って<kbd>Win</kbd>を押してしまっても、スタートメニューが表示されないようにしました。一方、LWinとRWin以外のキーは、OSが自動的にSendPlayの後まで延期するため（バッファリングにより）、ブロックする必要はありません。</p>
<p>SendPlayは、標準設定の<a href="SetKeyDelay.htm">SetKeyDelay</a>と <a href="SetMouseDelay.htm">SetMouseDelay</a>を使用しません。その代わり、デフォルトでは全く遅延しないようになっていますが、以下の例のように変更することが可能です：</p>
<pre><a href="SetKeyDelay.htm">SetKeyDelay</a> 0, 10, "Play"  <em>; Note that both 0 and -1 are the same in SendPlay mode.</em>
<a href="SetMouseDelay.htm">SetMouseDelay</a> 10, "Play"</pre>
<p>SendPlayは、<kbd>CapsLock</kbd>、<kbd>NumLock</kbd>、<kbd>ScrollLock</kbd>のオン/オフを切り替えることができません。同様に、キーストロークがスクリプト自身のウィンドウに送信されない限り、<a href="GetKeyState.htm">GetKeyState</a>によって見られるキーの状態を変更することはできません。その場合でも、左右の修飾キー（例：RControl）の変更は、中立の対応するキー（例：Control）を介してのみ検出することができます。また、SendPlayには<a href="SendMode.htm#Play">SendModeのページ</a>で説明されている他の制限があります。</p>
<p><a href="#SendInputDetail">SendInput</a>や<a href="#SendEvent">SendEvent</a>とは異なり、ユーザーは<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>または<kbd>Ctrl</kbd>+<kbd>Esc</kbd>を押してSendPlayを中断できます。この場合、残りのキー入力は送信されませんが、SendPlayが正常に完了したかのようにスクリプトの実行は継続されます。</p>
<p>SendPlayはLWinとRWinイベントを送ることができますが、それらはオペレーティングシステム本来の機能を果たすのではなく、アクティブウィンドウに直接送られます。これを回避するためには、<a href="#SendEvent">SendEvent</a>を使用します。例えば、<code>SendEvent "#r"</code>は、スタートメニューの実行ダイアログを表示します。</p>

<h2 id="Related">関連</h2>
<p><a href="SendMode.htm">SendMode</a>、<a href="SetKeyDelay.htm">SetKeyDelay</a>、<a href="SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>、<a href="../misc/EscapeChar.htm">エスケープシーケンス（例：`n）</a>、<a href="ControlSend.htm">ControlSend</a>、<a href="BlockInput.htm">BlockInput</a>、<a href="../Hotstrings.htm">ホットストリング</a>、<a href="WinActivate.htm">WinActivate</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 2行の署名を入力します。</p>
<pre>Send "Sincerely,{enter}John Smith"</pre>
</div>

<div class="ex" id="ExModifier">
<p><a class="ex_number" href="#ExModifier"></a> ファイル」→「保存」メニュー（Alt+Fの後にSを付ける）を選択します。</p>
<pre>Send "!fs"</pre>
</div>

<div class="ex" id="ExBrace">
<p><a class="ex_number" href="#ExBrace"></a> テキストの末尾にジャンプし、Shift+左矢印キーを4回送信します。</p>
<pre>Send "{End}+{Left 4}"</pre>
</div>

<div class="ex" id="ExSendInputRaw">
<p><a class="ex_number" href="#ExSendInputRaw"></a> 最速の方法で、長い一連の<a href="#Raw">生文字</a>を送信します。</p>
<pre><a href="#SendInputDetail">SendInput</a> "{Raw}A long series of raw characters sent via the fastest method."</pre>
</div>

<div class="ex" id="ExVar">
<p><a class="ex_number" href="#ExVar"></a> Holds down a key contained in a <a href="../Variables.htm">variable</a>.</p>
<pre>MyKey := "Shift"
Send "{" MyKey " down}"  <em>; Holds down the Shift key.</em>
</pre>
</div>

</body>
</html>
