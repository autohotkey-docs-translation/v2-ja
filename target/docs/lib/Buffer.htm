<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Buffer Object - 定義と使用法｜AutoHotkey v2</title>
<meta name="description" content="Buffer Objectは、DllCall、構造体、StrPut、生のファイルI/Oなどの高度な技術で使用するためのメモリブロックをカプセル化します。" />
<meta name="ahk:equiv-v1" content="lib/VarSetCapacity.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Buffer Object</h1>
<pre class="NoIndent">class Buffer extends Object</pre>

<p>DllCall、構造体、StrPut、生のファイルI/Oなどの高度な技術で使用するために、メモリブロックをカプセル化します。</p>
<p>Buffer Objectは、通常<a href="#Call">Buffer()</a>を呼び出して作成しますが、<a href="FileRead.htm">FileRead</a>で"RAW"オプションを付けて返すこともできます。</p>
<pre>BufferObj := Buffer(ByteCount)</pre>
<p><a href="ClipboardAll.htm">ClipboardAll</a>は、BufferのサブタイプであるClipboardAllを返す。</p>
<pre>class ClipboardAll extends Buffer</pre>

<p>"Buffer"はクラスそのものなので、以下ではあらゆるBufferオブジェクトのプレースホルダとして "BufferObj"を使用します。</p>
<p><a href="Object.htm">Object</a>から継承されたメソッドやプロパティに加え、Bufferオブジェクトは以下の定義済みプロパティを持ちます。</p>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#like">バッファ的オブジェクト</a></li>
  <li><a href="#StaticMethods">静的メソッドです。</a>
    <ul>
      <li>コールCreates a new Buffer object.</li>
    </ul>
  </li>
  <li><a href="#Methods">メソッド</a>:
    <ul>
      <li><a href="#__New">__New</a>:バッファの割り当てまたは再割り当てを行い、オプションでバッファを埋めます。</li>
    </ul>
  </li>
  <li><a href="#Properties">プロパティ</a>:
    <ul>
      <li><a href="#Ptr">Ptr</a>:バッファの現在のメモリアドレスを取得します。</li>
      <li><a href="#Size">Size</a>:バッファのサイズをバイト単位で取得または設定します。</li>
    </ul>
  </li>
  <li><a href="#Related">関連</a></li>
  <li><a href="#Examples">例</a></li>
</ul>

<h2 id="like">バッファ的オブジェクト</h2>
<p>一部の組み込み関数では、アドレスの代わりにBufferオブジェクトを受け付けます。これらの関数は、<a href="#Ptr">Ptr</a>と <a href="#Size">Size</a>プロパティを持つ他のオブジェクトも受け付けますが、ネイティブのBufferオブジェクトに最適化されています。</p>
<p>ほとんどの場合、Bufferオブジェクトを渡す方がアドレスを渡すよりも安全です。なぜなら、関数は<a href="#Size">バッファサイズ</a>を読み取ることで、バッファの外側のメモリ位置にアクセスしようとしないことを確認できるからです。例外として、<a href="DllCall.htm">DllCall</a>がプログラム外の関数を呼び出す場合があります。その場合は、<a href="#Size">バッファ</a>サイズを関数に明示的に渡す必要がある場合があります。</p>

<h2 id="StaticMethods">静的メソッド</h2>
<div class="methodShort" id="Call"><h3>コール</h3>
<p>Creates a new Buffer object.</p>
<pre class="Syntax">BufferObj := Buffer(<span class="optional">ByteCount, FillByte</span>)
BufferObj := Buffer.<span class="func">Call</span>(<span class="optional">ByteCount, FillByte</span>)</pre>
<h4 id="Call_Parameters">パラメータ</h4>
<dl>
  <dt>ByteCount</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>割り当てるバイト数を指定します。<a href="#Size">Buffer.Size</a>に対応します。</p>
    <p>省略された場合、Buffer は NULL（ゼロ）<a href="#Ptr">Ptr</a>とゼロ<a href="#Size">Size</a>で作成されます。</p>
  </dd>
  <dt>FillByte</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>0～255の数値を指定すると、バッファ内の各バイトにその数値が設定されます。</p>
    <p>バイト数に比例した時間的コストがかかるため、バッファを読み込まずに書き込むような場合には、一般に省略されるべきです。省略した場合、バッファのメモリは初期化されず、各バイトの値は任意です。</p>
  </dd>
</dl>
<h4 id="Call_Return_Value">戻り値</h4>
<p>型：<a href="../Concepts.htm#objects">Object</a></p>
<p>This method or function returns a Buffer object.</p>
<h4 id="Call_Remarks">備考</h4>
<p><em>ByteCount</em>が予想外に大きい場合や、システムの仮想メモリが不足している場合など、メモリを確保できなかった場合は<a href="Error.htm#MemoryError">MemoryError</a>がスローされます。</p>
<p>パラメータは<a href="#__New">__New</a>で定義します。</p>
</div>

<h2 id="Methods">メソッド</h2>
<div class="methodShort" id="__New"><h3>__New</h3>
<p>バッファの割り当てまたは再割り当てを行い、オプションでバッファを埋めます。</p>
<pre class="Syntax">BufferObj.<span class="func">__New</span>(<span class="optional">ByteCount, FillByte</span>)</pre>
<p>このメソッドは<a href="#Call">Call</a>をサポートするために存在し、通常、直接呼び出されることはありません。<a href="../Objects.htm#Custom_NewDelete">建設と破壊</a>をご覧ください。</p>
<p><em>ByteCount</em>を指定して、バッファの確保、再確保、解放を行う。これは、<a href="#Size">サイズ</a>を割り当てることと同じです。</p>
<p><em>FillByte</em>を指定すると、与えられた数値のバイト値でバッファを満たし、既存の内容を上書きします。</p>
<p>両方のパラメータが省略された場合、このメソッドは何の効果もない。</p>
</div>

<h2 id="Properties">属性</h2>
<div class="methodShort" id="Ptr"><h3>Ptr</h3>
<p>バッファの現在のメモリアドレスを取得します。</p>
<pre class="Syntax">CurrentPtr := BufferObj.<span class="func">Ptr</span></pre>
<p><em>CurrentPtr</em> is an <a href="../Concepts.htm#numbers">integer</a> representing the buffer's current memory address. This address becomes invalid when the buffer is freed or reallocated. 無効なアドレスは使用しないでください。The buffer is not freed until the Buffer object's <a href="../Objects.htm#Reference_Counting">reference count</a> reaches zero, but it is reallocated when its <a href="#Size">Size</a> is changed.</p>
</div>

<div class="methodShort" id="Size"><h3>Size</h3>
<p>バッファのサイズをバイト単位で取得または設定します。</p>
<pre class="Syntax">CurrentByteCount := BufferObj.<span class="func">Size</span></pre>
<pre class="Syntax">BufferObj.<span class="func">Size</span> := NewByteCount</pre>
<p><em>CurrentByteCount</em> and <em>NewByteCount</em> are an <a href="../Concepts.htm#numbers">integer</a> representing the buffer's size, in bytes. バッファのアドレスは通常、そのサイズが変更されるたびに変更されます。サイズが小さくなった場合、バッファ内のデータは切り捨てられますが、残りのバイトは保存されます。サイズが大きくなっても、すべてのデータは保存され、新しいバイトの値は任意です（パフォーマンス上の理由から、初期化されません）。</p>
<p>A <a href="Error.htm#MemoryError">MemoryError</a> is thrown if the memory could not be allocated, such as if <em>NewByteCount</em> is unexpectedly large or the system is low on virtual memory.</p>
<p><em>CurrentByteCount</em> is always the exact value it was given either by <a href="#__New">__New</a> or by a previous assignment.</p>
</div>

<h2 id="Related">関連</h2>
<p><a href="DllCall.htm">DllCall</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a>, <a href="StrPut.htm">StrPut</a>, <a href="StrGet.htm">StrGet</a>, <a href="File.htm#RawRead">File.RawRead</a>, <a href="File.htm#RawWrite">File.RawWrite</a>, <a href="ClipboardAll.htm">ClipboardAll</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExString">
<p><a class="ex_number" href="#ExString"></a> Uses a Buffer to receive a string from an external function via <a href="DllCall.htm">DllCall</a>.</p>
<pre>
max_chars := 11

<em>; Unicode 版 wsprintf で使用するためのバッファを確保します。</em>
bufW := Buffer(max_chars*2)

<em>; wsprintfW()でUTF-16文字列をバッファに出力します。</em>
DllCall("wsprintfW", "Ptr", bufW, "Str", "0x%08x", "UInt", 4919, "CDecl")

<em>; bufW から文字列を取り出し、表示します。</em>
MsgBox StrGet(bufW, "UTF-16")  <em>; あるいは、StrGet(bufW)だけです。</em>

<em>; ANSI 版 wsprintf で使用するためのバッファを確保します。</em>
bufA := Buffer(max_chars)

<em>; wsprintfA()でANSI文字列をバッファに出力します。</em>
DllCall("wsprintfA", "Ptr", bufA, "AStr", "0x%08x", "UInt", 4919, "CDecl")

<em>; bufA から文字列を取得し(ネイティブ形式に変換)、表示します。</em>
MsgBox StrGet(bufA, "CP0")
</pre>
</div>

</body>
</html>
