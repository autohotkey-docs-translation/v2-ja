<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>GetKeyState - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="The GetKeyState function returns 1 (true) or 0 (false) depending on whether the specified keyboard key or mouse/controller button is down or up. Also retrieves controller status." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState</h1>

<p>Returns 1 (true) or 0 (false) depending on whether the specified keyboard key or mouse/controller button is down or up. Also retrieves controller status.</p>

<pre class="Syntax">IsDown := <span class="func">GetKeyState</span>(KeyName <span class="optional">, Mode</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>This can be just about any single character from the keyboard or one of the key names from the <a href="../KeyList.htm">key list</a>, such as a mouse/controller button. 例：B、5、LWin、RControl、Alt、Enter、Escape、LButton、MButton、Joy1。</p>
      <p>また、vkFFのような明示的な仮想鍵コードを指定することも可能です。これは、キーに名前がないような稀なケースに有効です。このようなキーのコードは、<a href="../KeyList.htm#SpecialKeys">キー一覧ページ</a>下部の手順で判別することができます。なお、このコードは16進数である必要があります。</p>
      <p><b>既知の制限事項：</b>この機能は、LeftとNumpadLeftのように、同じ仮想キーコードを共有する2つのキーを区別することはできません。</p>
  </dd>

  <dt>Mode</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>This parameter is ignored when retrieving controller status.</p>
      <p>If omitted, it defaults to that which retrieves the logical state of the key. OSやアクティブウィンドウがキーがあると信じている状態であり、必ずしも物理的な状態と同じではありません。</p>
	  <p>そうでなければ、次の文字のうち、ひとつを指定してください：</p>
      <p><strong>P：</strong>物理的な状態（ユーザーが物理的に押さえているかどうか）を取得します。キーボードやマウスのボタンの物理的な状態は、キーボードやマウスのフックがインストールされていない限り、論理的な状態と同じになるのが普通で、その場合、ユーザーが物理的にキーやボタンを押し続けているかどうかを正確に反映します（スクリプトの実行中に押し続けている限りは）。スクリプトがフックを使用しているかどうかは、<a href="KeyHistory.htm">KeyHistory</a>関数またはメニュー項目で確認できます。<a href="InstallKeybdHook.htm">InstallKeybdHook</a>および/または<a href="InstallMouseHook.htm">InstallMouseHook</a>を呼び出すことで、フックを強制的にインストールすることができます。</p>
      <p><strong>T：</strong>トグル状態を取得します。<kbd>CapsLock</kbd>、<kbd>NumLock</kbd>、<kbd>ScrollLock</kbd>以外のキーについては、スクリプト起動時のトグル状態は一般に0であり、プロセス間で同期されることはない。</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#boolean">整数（ブーリアン）</a>、<a href="../Concepts.htm#numbers">浮動小数点数</a>、<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#nothing">文字列（空）</a></p>
<p>This function returns 1 (true) if the key is down (or toggled on) or 0 (false) if it is up (or toggled off).</p>
<p>When <em>KeyName</em> is a stick axis such as JoyX, this function returns a floating-point number between 0 and 100 to indicate the stick's position as a percentage of that axis's range of motion. This <a href="../scripts/index.htm#ControllerTest">test script</a> can be used to analyze your controller(s).</p>
<p><em>KeyName</em>がJoyPOVの場合、0～35900の整数を返す。The following approximate POV values are used by many controllers:</p>
<ul>
    <li>-1：触れない</li>
    <li>0：前方視線</li>
    <li>9000（つまり90度）：正視眼</li>
    <li>27000（つまり270度）：左視点</li>
    <li>18000（つまり180度）：後方視線</li>
</ul>
<p>When <em>KeyName</em> is JoyName, JoyButtons, JoyAxes or JoyInfo, the retrieved value will be the name, number of buttons, number of axes or capabilities of the controller. For details, see <a href="../KeyList.htm#Controller">Game Controller</a>.</p>
<p>When <em>KeyName</em> is a button or control of a controller that could not be detected, this function returns an empty string.</p>

<h2 id="Error_Handling">エラー処理</h2>
<p>A <a href="Error.htm#ValueError">ValueError</a> is thrown if invalid parameters are detected, e.g. when <em>KeyName</em> does not exist on the current keyboard layout.</p>

<h2 id="Remarks">備考</h2>
<p>To wait for a key or mouse/controller button to achieve a new state, it is usually easier to use <a href="KeyWait.htm">KeyWait</a> instead of a GetKeyState loop.</p>
<p>キーボードドライバが特殊なシステムでは、キーの状態、特に<kbd>CapsLock</kbd>のようなキーのトグル状態の更新に時間がかかることがあります。このような鍵の状態を変更直後に確認するスクリプトは、鍵の状態を更新する時間をシステムに与えるために、事前に<a href="Sleep.htm">Sleep</a>を使用することができます。</p>
<p>For examples of using GetKeyState with a controller, see the <a href="../misc/RemapController.htm">controller remapping page</a> and the <a href="../scripts/index.htm#ControllerMouse">Controller-To-Mouse script</a>.</p>
<h2 id="Related">関連</h2>
<p><a href="GetKeyVK.htm">GetKeyVK</a>, <a href="GetKeySC.htm">GetKeySC</a>, <a href="GetKeyName.htm">GetKeyName</a>, <a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Key List</a>, <a href="../misc/RemapController.htm">Controller remapping</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="InstallKeybdHook.htm">InstallKeybdHook</a>, <a href="InstallMouseHook.htm">InstallMouseHook</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> マウスの右ボタンの現在の状態を取得します。</p>
<pre>state := GetKeyState("RButton")</pre>
</div>

<div class="ex" id="ExBasic2">
<p><a class="ex_number" href="#ExBasic2"></a> Retrieves the current state of the first controller's second button.</p>
<pre>state := GetKeyState("Joy2")</pre>
</div>

<div class="ex" id="ExIfElse">
<p><a class="ex_number" href="#ExIfElse"></a> 少なくとも1つの<kbd>Shift</kbd>がダウンしているかどうかをチェックします。</p>
<pre>if GetKeyState("Shift")
    MsgBox "At least one Shift key is down."
else
    MsgBox "Neither Shift key is down."</pre>
</div>

<div class="ex" id="ExToggle">
<p><a class="ex_number" href="#ExToggle"></a> <kbd>CapsLock</kbd>の現在のトグル状態を取得します。</p>
<pre>state := GetKeyState("CapsLock", "T")</pre>
</div>

<div class="ex" id="ExRemap">
<p><a class="ex_number" href="#ExRemap"></a> リマッピングです。（<a href="../misc/Remap.htm">内蔵のリマッピング</a>機能を使った方が簡単なので、この例は説明のためだけです。）　次のホットキーでは、NumpadAddが押されている間、マウスボタンが押されたままになっており、NumpadAddが効果的にマウスボタンに変換されています。この方法は、ユーザーがキーやボタンを押しながら動作を繰り返す場合にも使用できます。</p>
<pre>*NumpadAdd::
{
    MouseClick "left",,, 1, 0, "D"  <em>; マウスの左ボタンを押したままにします。</em>
    Loop
    {
        Sleep 10
        if !GetKeyState("NumpadAdd", "P")  <em>; The key has been released, so break out of the loop.</em>
            break
        <em>; ...その他、繰り返したい動作があれば、ここに挿入してください。</em>
    }
    MouseClick "left",,, 1, 0, "U"  <em>; マウスボタンを離す。
</em>
}</pre>
</div>

<div class="ex" id="ExController">
<p><a class="ex_number" href="#ExController"></a> Makes controller button behavior depend on stick axis position.</p>
<pre>joy2::
{
    JoyX := GetKeyState("JoyX")
    if JoyX &gt; 75
        MsgBox "Action #1 (button pressed while stick was pushed to the right)."
    else if JoyX &lt; 25
        MsgBox "Action #2 (button pressed while stick was pushed to the left)."
    else
        MsgBox "Action #3 (button pressed while stick was centered horizontally)."
}</pre>
</div>

<p>See the <a href="../misc/RemapController.htm">controller remapping page</a> and the <a href="../scripts/index.htm#ControllerMouse">Controller-To-Mouse script</a> for other examples.</p>

</body>
</html>
