<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>GetKeyState - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="GetKeyState関数は、キーボードキーやマウス・ジョイスティックボタンがダウンしているかアップしているかをチェックします。ジョイスティックの状態も取得します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState</h1>

<p>キーボードキーやマウス・ジョイスティックボタンが下か上かをチェックします。ジョイスティックの状態も取得します。</p>

<pre class="Syntax">IsDown := <span class="func">GetKeyState</span>(KeyName <span class="optional">, Mode</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>これは、キーボードから任意の1文字、またはマウス/ジョイスティックボタンのような<a href="../KeyList.htm">キー</a>リストのキー名の1つであることができます。例：B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>また、vkFFのような明示的な仮想鍵コードを指定することも可能です。これは、キーに名前がないような稀なケースに有効です。このようなキーのコードは、<a href="../KeyList.htm#SpecialKeys">キー一覧ページ</a>下部の手順で判別することができます。なお、このコードは16進数である必要があります。</p>
      <p><b>既知の制限事項：</b>この機能は、LeftとNumpadLeftのように、同じ仮想キーコードを共有する2つのキーを区別することはできません。</p>
  </dd>

  <dt>Mode</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>ジョイスティックの状態を取得する場合、このパラメータは無視されます。</p>
      <p>省略した場合は、キーの論理状態を取得するモードがデフォルトとなる。OSやアクティブウィンドウがキーがあると信じている状態であり、必ずしも物理的な状態と同じではありません。</p>
	    <p>また、これらの文字のうち1つを指定することもできる：</p>
      <p><strong>P</strong>:物理的な状態（ユーザーが物理的に押さえているかどうか）を取得します。キーボードやマウスのボタンの物理的な状態は、キーボードやマウスのフックがインストールされていない限り、論理的な状態と同じになるのが普通で、その場合、ユーザーが物理的にキーやボタンを押し続けているかどうかを正確に反映します（スクリプトの実行中に押し続けている限りは）。スクリプトがフックを使用しているかどうかは、<a href="KeyHistory.htm">KeyHistory</a>関数またはメニュー項目で確認できます。<a href="InstallKeybdHook.htm">InstallKeybdHook</a>および/または<a href="InstallMouseHook.htm">InstallMouseHook</a>を呼び出すことで、フックを強制的にインストールすることができます。</p>
      <p><strong>T</strong>:トグル状態を取得します。<kbd>CapsLock</kbd>、<kbd>NumLock</kbd>、<kbd>ScrollLock</kbd>以外のキーについては、スクリプト起動時のトグル状態は一般に0であり、プロセス間で同期されることはない。</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#boolean">整数（ブーリアン</a>）、<a href="../Concepts.htm#numbers">浮動小数点</a>または<a href="../Concepts.htm#numbers">整数</a></p>
<p>キーボードキーとマウスボタンの場合、キーがダウン（またはトグルオン）している場合は1（真）、アップ（またはトグルオフ）している場合は0（偽）を返します。</p>
<p><em>KeyNameが</em>JoyXなどのジョイスティック軸の場合、ジョイスティックの位置をその軸の可動範囲に対する割合で示す0〜100の<a href="../Concepts.htm#numbers">浮動小数点数</a>を返す。この<a href="../scripts/index.htm#JoystickTest">テストスクリプト</a>を使用して、ジョイスティックを解析することができます。</p>
<p><em>KeyName</em>がJoyPOVの場合、0～35900の<a href="../Concepts.htm#numbers">整数</a>を返す。多くのジョイスティックでは、以下のようなPOV値の目安が使われています：</p>
<ul>
    <li>-1:触れない</li>
    <li>0:前方視線</li>
    <li>9000 (i.e. 90 degrees):正視眼</li>
    <li>27000 (i.e. 270 degrees):左視点</li>
    <li>18000 (i.e. 180 degrees):後方視線</li>
</ul>

<h2 id="Remarks">備考</h2>
<p>キーやマウス・ジョイスティックボタンが新しい状態になるのを待つには、通常、GetKeyStateループの代わりに<a href="KeyWait.htm">KeyWait</a>を使用するのが簡単です。</p>
<p>キーボードドライバが特殊なシステムでは、キーの状態、特に<kbd>CapsLock</kbd>のようなキーのトグル状態の更新に時間がかかることがあります。このような鍵の状態を変更直後に確認するスクリプトは、鍵の状態を更新する時間をシステムに与えるために、事前に<a href="Sleep.htm">Sleep</a>を使用することができます。</p>
<p>ジョイスティックでGetKeyStateを使う例については、<a href="../misc/RemapJoystick.htm">ジョイスティックのリマッピングページ</a>と <a href="../scripts/index.htm#JoystickMouse">Joystick-To-Mouseスクリプト</a>を参照してください。</p>
<h2 id="Related">関連</h2>
<p><a href="GetKeyVK.htm">GetKeyVK</a>, <a href="GetKeySC.htm">GetKeySC</a>, <a href="GetKeyName.htm">GetKeyName</a>, <a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">Key List</a>, <a href="../misc/RemapJoystick.htm">Joystick remapping</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="InstallKeybdHook.htm">InstallKeybdHook</a>, <a href="InstallMouseHook.htm">InstallMouseHook</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> マウスの右ボタンの現在の状態を取得します。</p>
<pre>state := GetKeyState("RButton")</pre>
</div>

<div class="ex" id="ExBasic2">
<p><a class="ex_number" href="#ExBasic2"></a> 第1ジョイスティックの第2ボタンの現在の状態を取得します。</p>
<pre>state := GetKeyState("Joy2")</pre>
</div>

<div class="ex" id="ExIfElse">
<p><a class="ex_number" href="#ExIfElse"></a> 少なくとも1つの<kbd>Shift</kbd>がダウンしているかどうかをチェックします。</p>
<pre>if GetKeyState("Shift")
    MsgBox "At least one Shift key is down."
else
    MsgBox "Neither Shift key is down."</pre>
</div>

<div class="ex" id="ExToggle">
<p><a class="ex_number" href="#ExToggle"></a> <kbd>CapsLock</kbd>の現在のトグル状態を取得します。</p>
<pre>state := GetKeyState("CapsLock", "T")</pre>
</div>

<div class="ex" id="ExRemap">
<p><a class="ex_number" href="#ExRemap"></a> リマッピングです。(<a href="../misc/Remap.htm">内蔵のリマッピング</a>機能を使った方が簡単なので、この例は説明のためだけです)。次のホットキーでは、NumpadAddが押されている間、マウスボタンが押されたままになっており、NumpadAddが効果的にマウスボタンに変換されています。この方法は、ユーザーがキーやボタンを押しながら動作を繰り返す場合にも使用できます。</p>
<pre>*NumpadAdd::
{
    MouseClick "left",,, 1, 0, "D"  <em>; Hold down the left mouse button.</em>
    Loop
    {
        Sleep 10
        if !GetKeyState("NumpadAdd", "P")  <em>; The key has been released, so break out of the loop.</em>
            break
        <em>; ... insert here any other actions you want repeated.</em>
    }
    MouseClick "left",,, 1, 0, "U"  <em>; Release the mouse button.</em>
}</pre>
</div>

<div class="ex" id="ExJoystick">
<p><a class="ex_number" href="#ExJoystick"></a> ジョイスティックボタンの動作をジョイスティック軸の位置に依存するようにします。</p>
<pre>joy2::
{
    JoyX := GetKeyState("JoyX")
    if JoyX &gt; 75
        MsgBox "Action #1 (button pressed while joystick was pushed to the right)."
    else if JoyX &lt; 25
        MsgBox "Action #2 (button pressed while joystick was pushed to the left)."
    else
        MsgBox "Action #3 (button pressed while joystick was centered horizontally)."
}</pre>
</div>

<p>他の例については、<a href="../misc/RemapJoystick.htm">ジョイスティックのリマッピングページ</a>と <a href="../scripts/index.htm#JoystickMouse">Joystick-To-Mouseスクリプト</a>を参照してください。</p>

</body>
</html>
