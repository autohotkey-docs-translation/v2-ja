<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Hotstring - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Hotstring機能は、スクリプトの実行中にHotstringを作成、変更、有効化、無効化する機能です。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotstring</h1>

<p>スクリプトの実行中に、<a href="../Hotstrings.htm">ホットストリング</a>を作成、変更、有効化、または無効化します。</p>

<pre class="Syntax"><span class="func">Hotstring</span> String <span class="optional">, Replacement, OnOffToggle</span>
<span class="func">Hotstring</span> <a href="#NewOptions">NewOptions</a>
<span class="func">Hotstring</span> <a href="#SubFunctions">SubFunction</a> <span class="optional">, Value1</span></pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>String</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>ホットストリングのトリガー文字列で、その前に<a href="../Hotstrings.htm">通常のコロン</a>と <a href="../Hotstrings.htm#Options">オプション文字</a>が入ります。例えば、<code>"::btw"</code>または<code>":*:]d"</code>です。</p>
    <p><em>文字列</em>は、<a href="../Hotstrings.htm#C">大文字小文字の区別（C）</a>、<a href="../Hotstrings.htm#Question">単語の区別（?）</a>、活性化基準（<a href="_HotIf.htm">#HotIf</a>または<a href="HotIf.htm">HotIf</a>で設定）、トリガー文字列を考慮して、既存のホットストリングと一致させることができます。例えば、<code>"::btw"</code>と<code>"::BTW"</code>は、デフォルトで大文字小文字を区別するモードが有効になっていなければ一致しますが、<code>":C:btw"</code>と<code>":C:BTW"</code>は決して一致しません。The <code>C</code> and <code>?</code> options may be included in <em>String</em> or set as defaults by the <a href="_Hotstring.htm">#Hotstring</a> directive or a previous use of <em>NewOptions</em>.</p>
    <p>hotstringが既に存在する場合、<em>String</em>で指定されたオプションは有効になり、それ以外のオプションはそのままになります。ただし、<code>C</code>や <code>?</code>が付いたホットストリングは他のホットストリングと区別して考えるため、これらのオプションを追加したり削除したりすることはできません。代わりに、既存のホットストリングをオフにして、新しいホットストリングを作成します。</p>
    <p>Hotstring関数またはスクリプトの<a href="../Hotstrings.htm">ダブルコロン構文</a>でホットストリングを最初に作成すると、そのトリガー文字列とオプション文字のシーケンスが、<a href="../Hotstrings.htm#ThisHotkey">ThisHotkey</a>に反映されるそのホットストリングの永久的な名前となります。この名前は、後にHotstring関数が異なるオプション文字でHotstringにアクセスしても、変更されることはありません。</p>
  </dd>

  <dt>Replacement</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../misc/Functor.htm">関数オブジェクト</a></p>
    <p>If omitted and <em>String</em> already exists as a hotstring, its replacement will not be changed. ホットストリングのオプションだけを変更したり、オン/オフを切り替えたりするのに便利です。Otherwise, specify the replacement string or a callback.</p>
    <p>If <em>Replacement</em> is a function, it is called (as a new <a href="../misc/Threads.htm">thread</a>) when the hotstring triggers.</p>
    <p>コールバックは 1 つのパラメーターを受け取り、次のように<a href="../Functions.htm#intro">定義</a>できます。</p>
    <pre class="NoIndent">MyCallback(HotstringName) { ...</pre>
    <p>Although the name you give the parameter does not matter, it is assigned the <a href="../Hotstrings.htm#ThisHotkey">hotstring name</a>.</p>
    <p>対応する情報が必要ないときはコールバックのパラメータを省略することができますが、その場合は<code>MyCallback(*)</code>のようにアスタリスクを指定する必要があります。</p>
    <p><a href="../Hotstrings.htm">ダブルコロン構文</a>で定義されたHotstringsは、自動的にパラメータ名<code>ThisHotkey</code>を使用します。Hotstringは、Hotstringの機能を使わずに、<a href="../Hotstrings.htm#Function">関数</a>名を割り当てることもできます。</p>
    <p>After reassigning the function of a hotstring, its original function can only be restored if it was <a href="../Hotstrings.htm#Function">given a name</a>.</p>
    <p class="note"><strong>注意：</strong>このパラメータを指定しても、以前にこの機能を使用したときにホットストリングが無効になっていた場合は、ホットストリングは無効のままとなります。To prevent this, specify <code>"On"</code> for <em>OnOffToggle</em>.</p>
  </dd>

  <dt>OnOffToggle</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p>以下のいずれかの値：</p>
    <p><strong>On</strong> または <strong>1</strong> (true)：ホットストリングを有効にします。</p>
    <p><strong>Off</strong> または <strong>0</strong> (false)：ホットストリングを無効化します。</p>
    <p><strong>Toggle</strong> または <strong>-1</strong>：ホットストリングを反対の状態（有効または無効）に設定します。</p>
  </dd>

  <dt>NewOptions</dt>
  <dd id="NewOptions">
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>その後に作成されるホットストリングに新しいデフォルトオプションを設定するには、Hotstring関数にオプションを先頭や末尾のコロンを付けずに渡します。事例：<code>Hotstring "T"</code>。</p>
    <p><a href="../Hotstrings.htm#C">大文字小文字の区別（C）</a>や<a href="../Hotstrings.htm#Question">単語の区別（？）</a>をオンにすると、それ以降にHotstring関数を呼び出したときに、どの既存のホットストリングが見つかるかにも影響します。例えば、<code>Hotstring ":T:btw"</code>はデフォルトで<code>::BTW</code>を検索しますが、<code>Hotstring "C"</code>または<code><a href="_Hotstring.htm">#Hotstring</a> C</code>が有効な場合は検索しません。これは、相互に排他的なオプションを渡すことによって、元に戻したり上書きしたりすることができます。例えば、<code>C0</code>と <code>C1</code>は<code>C</code>を上書きします。</p>
  </dd>

  <dt>SubFunction, Value1</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>These parameters are dependent upon each other and their usage is described below.</p>
  </dd>

</dl>

<h2 id="SubFunctions">Sub-functions</h2>
<p><em>SubFunction</em>には以下のいずれかを指定する：</p>
<ul>
  <li><a href="#EndChars">EndChars</a>: Retrieves or modifies the set of ending characters.</li>
  <li><a href="#MouseReset">MouseReset</a>: Controls whether mouse clicks reset the hotstring recognizer.</li>
  <li><a href="#Reset">Reset</a>：ホットストリングレコグナイザーを即座にリセットします。</li>
</ul>

<h3 id="EndChars">EndChars</h3>
<p>ホットストリングレコグナイザーで<a href="../Hotstrings.htm#EndChars">終端文字</a>として使用される文字のセットを取得または変更します。</p>
<pre class="Syntax">OldValue := <span class="func">Hotstring</span>("EndChars" <span class="optional">, NewValue</span>)</pre>
<p>事例：</p>
<pre>prev_chars := Hotstring("EndChars", "-()[]{}':;`"/\,.?!`n`s`t")
MsgBox "The previous value was: " prev_chars</pre>
<p><a href="#EndChars">#Hotstring EndChars</a>も、この設定に影響します。</p>
<p>現在、ホットストリングごとに異なる終了文字のセットを指定することはできません。</p>

<h3 id="MouseReset">MouseReset</h3>
<p>マウスクリックでホットストリング認識機能がリセットされるかどうかを制御するグローバル設定を取得または変更します（<a href="../Hotstrings.htm#NoMouse">ここ</a>で説明）。</p>
<pre class="Syntax">OldValue := <span class="func">Hotstring</span>("MouseReset" <span class="optional">, NewValue</span>)</pre>
<p><em>NewValue</em>は、マウスクリックの検出とホットストリング認識器のリセットを有効にする場合は 1 (true)、無効にする場合は 0 (false)を指定します。戻り値は、この関数が呼び出される前に有効であった設定値です。</p>
<p>本機能による変更で正当化される場合は、<a href="InstallMouseHook.htm">マウス</a>フックの取り付け、取り外しが可能です。</p>
<p><a href="_Hotstring.htm">#Hotstring NoMouse</a> も、この設定に影響し、<em>NewValue</em>に<code>false</code>を指定することと同じです。</p>

<h3 id="Reset">Reset</h3>
<p>ホットストリングレコグナイザーを即座にリセットします。</p>
<pre class="Syntax"><span class="func">Hotstring</span> "Reset"</pre>
<p>つまり、スクリプトは全く新しいホットストリングを待ち始め、以前に入力したものは考慮されなくなります。</p>

<h2 id="Errors">エラー</h2>
<p>パラメータが不正な場合、またはメモリ確保に失敗した場合は、例外を投げます。</p>
<p><em>Replacement</em>が省略され、<em>String</em>が有効であるが既存のホットストリングと一致しない場合、<a href="Error.htm#TargetError">TargetError</a>がスローされます。これは、ホットストリングの存在をテストするために利用することができます。事例：</p>
<pre>try
    Hotstring "::btw"
catch TargetError
    MsgBox "The hotstring does not exist or it has no variant for the current HotIf criteria."</pre>

<h2 id="Remarks">備考</h2>
<p><a href="HotIf.htm">現在のHotIf設定</a>は、Hotstring機能が動作するホットストリングの<a href="#variant">バリアント</a>を決定します。</p>
<p>スクリプトが<a href="Suspend.htm">中断</a>されると、新しく追加/有効になったホットストリングも中断が解除されるまで中断されます（<a href="Suspend.htm">中断</a>セクションで説明したように除外される場合を除きます）。</p>
<p><a href="InstallKeybdHook.htm">キーボード</a>や <a href="InstallMouseHook.htm">マウス</a>のフックは、本機能による変更で正当化される場合、取り付けまたは取り外しが可能です。</p>
<p>この機能は、自分以外のスクリプトのホットストリングを直接有効にしたり無効にしたりすることはできません。</p>
<p>Once a script has at least one hotstring, it becomes <a href="../Scripts.htm#persistent">persistent</a>, meaning that <a href="ExitApp.htm">ExitApp</a> rather than <a href="Exit.htm">Exit</a> should be used to terminate it.</p>

<h2 id="variant">バリアント（複製）ホットストリング</h2>
<p>各定義が異なる<a href="HotIf.htm">HotIf</a>基準、<a href="../Hotstrings.htm#C">大文字小文字</a>の区別（<code>C</code> vs. <code>C0</code>/<code>C1</code>）、または、<a href="../Hotstrings.htm#Question">単語の区別</a>（<code>?</code>）を持つ場合、特定のホットストリングを複数回作成することができます。これらは<em>ホットストリング・バリアント</em>と呼ばれています。事例：</p>
<pre>HotIfWinActive "ahk_group CarForums"
Hotstring "::btw", "behind the wheel"
HotIfWinActive "Inter-Office Chat"
Hotstring "::btw", "back to work"
HotIfWinActive
Hotstring "::btw", "by the way"</pre>
<p>ホットストリングの複数のバリアントが発火の対象となる場合、最も早く作成されたものだけが発火します。</p>
<p>詳しくは、<a href="HotIf.htm">HotIf</a>をご覧ください。</p>

<h2 id="Related">関連</h2>
<p><a href="../Hotstrings.htm">Hotstrings</a>, <a href="HotIf.htm">HotIf</a>, <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Suspend.htm">Suspend</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="Hotkey.htm">Hotkey function</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExHelper">
<p><a class="ex_number" href="#ExHelper"></a> Hotstring Helperです。ホットストリングのヘビーユーザーであれば、以下のスクリプトが便利かもしれません。Andreas Boruttaが作成したv1スクリプトをベースにしています。<kbd>Win</kbd>+<kbd>H</kbd>（または任意の他のホットキー）を押すことで、現在選択されているテキストをホットストリングに変換することができます。例えば、ワープロで「by the way」を選択している場合、<kbd>Win</kbd>+<kbd>H</kbd>を押すと、その省略形（例：btw）の入力を促し、新しいホットストリングをスクリプトに追加して有効にします。</p>
<pre>#h::  <em>; Win+H hotkey</em>
{
    <em>; 現在選択されているテキストを取得します。その代わりにクリップボードが使われます。
    ; EditGetSelectedTextは、より多くのエディターで動作するためです。
    ;（すなわちワープロ）。現在のクリップボードの内容を保存して
    ; 後日、復元されます。これはプレーンテキストしか扱えませんが、より良いようです。
    ; 何もしないよりは：</em>
    ClipboardOld := A_Clipboard
    A_Clipboard := "" <em>; Must start off blank for detection to work.</em>
    Send "^c"
    if !ClipWait(1)  <em>; ClipWait timed out.</em>
    {
        A_Clipboard := ClipboardOld <em>; Restore previous contents of clipboard before returning.</em>
        return
    }
    <em>; CRLFやLFを`nに置き換えて、「send-raw」ホットストリングで使用することができます：
    ; 他の文字も同様です。
    ; rawモードでは問題ありません：</em>
    ClipContent := StrReplace(A_Clipboard, "``", "````")  <em>;  以下の他の置換と干渉しないように、この置換を最初に行います。</em>
    ClipContent := StrReplace(ClipContent, "`r`n", "``n")
    ClipContent := StrReplace(ClipContent, "`n", "``n")
    ClipContent := StrReplace(ClipContent, "`t", "``t")
    ClipContent := StrReplace(ClipContent, "`;", "```;")
    A_Clipboard := ClipboardOld  <em>; クリップボードの以前の内容を復元します。</em>
    ShowInputBox(":T:::" ClipContent)
}

ShowInputBox(DefaultValue)
{
    <em>; 入力ボックスのキャレットを、より使いやすい位置に移動させます：</em>
    SetTimer MoveCaret, 10
    <em>; 入力ボックスを表示し、デフォルトのホットストリングを提供します：</em>
    IB := InputBox("
    (
    表示された挿入口に略号を入力してください。また、必要に応じて、置換テキストを編集することもできます。

    Example entry: :T:btw::by the way
    )", "New Hotstring",, DefaultValue)
    if IB.Result = "Cancel"  <em>; ユーザがキャンセルを押した。</em>
        return

    if RegExMatch(IB.Value, "(?P&lt;Label&gt;:.*?:(?P&lt;Abbreviation&gt;.*?))::(?P&lt;Replacement&gt;.*)", &amp;Entered)
    {
        if !Entered.Abbreviation
            MsgText := "You didn't provide an abbreviation"
        else if !Entered.Replacement
            MsgText := "You didn't provide a replacement"
        else
        {
            Hotstring Entered.Label, Entered.Replacement  <em>; 今すぐHotstringを有効にします。</em>
            FileAppend "`n" IB.Value, A_ScriptFullPath  <em>; 後で使うためにホットストリングを保存します。</em>
        }
    }
    else
        MsgText := "The hotstring appears to be improperly formatted"

    if IsSet(MsgText)
    {
        Result := MsgBox(MsgText ". Would you like to try again?",, 4)
        if Result = "Yes"
            ShowInputBox(DefaultValue)
    }
    
    MoveCaret()
    {
        WinWait "New Hotstring"
        <em>; そうでない場合は、入力ボックスの挿入点をユーザーが略語を入力する場所に移動させます。</em>
        Send "{Home}{Right 3}"
        SetTimer , 0
    }
}</pre>
</div>

</body>
</html>
