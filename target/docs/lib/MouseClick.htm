<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>MouseClick - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="MouseClick機能は、マウスボタンのクリックや長押し、マウスホイールの回転を行う機能です。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>MouseClick</h1>

<p>マウスのボタンをクリックまたは長押しするか、マウスのホイールを回転させます。注：一般的に<a href="Click.htm">クリック機能</a>の方が自由度が高く、使い勝手が良いとされています。</p>

<pre class="Syntax"><span class="func">MouseClick</span> <span class="optional">WhichButton, X, Y, ClickCount, Speed, DownOrUp, Relative</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>WhichButton</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p><u>クリックするボタン</u>です：左（デフォルト）、右、真ん中（またはそれぞれの最初の文字）、またはマウスの4番目か5番目のボタン（X1またはX2）です。事例：<code>MouseClick "X1"</code>. このパラメータは省略可能であり、その場合、デフォルトはLeftとなります。</p>
      <p>左はプライマリーボタン、右はセカンダリーボタンに対応します。ユーザーがシステム設定でボタンを入れ替えると、ボタンの物理的な位置は入れ替わりますが、効果は変わりません。</p>
      <p><u>Rotate the mouse wheel</u>:ホイールを上方向（自分から離れる方向）に回す場合はWheelUpまたはWUを、下方向（自分から近づく方向）に回す場合はWheelDownまたはWDを指定することで、ホイールを回すことができます。ホイールを左に押す場合はWheelLeft（またはWL）、右に押す場合はWheelRight（またはWR）をそれぞれ指定します。<em>ClickCount</em>は、ホイールを回すノッチの数です。</p>
  </dd>

  <dt>X, Y</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>クリックする前にマウスカーソルを移動させるx/y座標を指定します。座標は、<a href="CoordMode.htm">CoordMode</a>で変更されない限り、アクティブウィンドウからの相対座標となります。省略された場合は、カーソルの現在位置が使用されます。</p>
  </dd>

  <dt>ClickCount</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>マウスをクリックする回数を指定します。省略された場合、ボタンは1回クリックされます。</p>
  </dd>

  <dt>Speed</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>マウスを動かす速度を0（最速）～100（最遅）の範囲で指定します。</p>
    <p class="note"><strong>注意</strong>：スピードを0にすると、マウスが瞬時に動きます。</p>
    <p>省略された場合、デフォルトの速度（<a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>で設定されたもの、またはそれ以外の2）が使用されることになります。</p>
    <p><a href="SendMode.htm">SendInput/Playモード</a>では<em>Speed</em>は無視され、マウスは瞬時に移動します（ただし、<a href="SetMouseDelay.htm">SetMouseDelay</a>にはSendPlayに適用されるモードがあります）。観客のためにデモンストレーションを行うスクリプトのように、視覚的にゆっくりとマウスを動かすには、<code><a href="Send.htm#Click">SendEvent</a>"{Click 100 200}"</code>または<code><a href="SendMode.htm">SendMode</a>"Event"</code>（オプションで<a href="BlockInput.htm">BlockInput</a>と併用）を使用します。</p>
  </dd>

  <dt>DownOrUp</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>省略した場合、各クリックは "下 "イベントと "上 "イベントから構成されます。この動作を変更するには、次の文字のいずれかを指定します：</p>
    <p><strong>D：</strong>マウスボタンを押しながら離さない（ダウンイベントを発生させます）。</p>
    <p><strong>U:</strong>マウスボタンを離す（つまりアップイベントを発生させます）。</p>
  </dd>

  <dt>Relative</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>省略した場合、X、Y座標は絶対値として扱われます。この動作を変更するには、次の文字を指定します：</p>
    <p><strong>R：</strong>X、Y座標は、現在のマウス位置からのオフセットとして扱われます。つまり、カーソルは現在位置から右にXピクセル（負の場合は左）、下にYピクセル（負の場合は上）だけ移動します。</p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p><a href="SendMode.htm">SendModeで</a>設定された送信方式を使用します。</p>
<p>一般的に使いやすいので、MouseClickよりも<a href="Click.htm">Click関数</a>を推奨します。ただし、MouseClickは<em>Speed</em>パラメータをサポートしていますが、Clickによる移動速度の調整は<a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>を使用する必要があります。</p>
<p>シフトクリックやコントロールクリックを行うには、以下の例のように操作の前後に<a href="Send.htm">送信</a>機能を使用します：</p>
<pre><em>; Example #1: </em>
Send "{Control down}"
MouseClick "left", 55, 233
Send "{Control up}"</pre>
<pre>
<em>; Example #2:</em>
Send "{Shift down}"
MouseClick "left", 55, 233
Send "{Shift up}"</pre>
<p><a href="SendMode.htm">SendPlayモード</a>は、他のモードに比べ、より幅広いゲームにおいてマウスイベントを正常に発生させることができます。また、アプリケーションやゲームによっては、マウスの動きが速いと追従性が悪くなることがあります。<em>speed</em>パラメータまたは<a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>を使用すると、速度を下げることができます（デフォルトの<a href="SendMode.htm">SendEventモードのみ</a>）。</p>
<p>アプリケーションによっては、マウスホイールの<em>ClickCount</em>が1以上でないと従わないものがあります。それらには、以下のような<a href="Loop.htm">Loop</a>を使用します：</p>
<pre>Loop 5
    MouseClick "WheelUp"</pre>
<p><a href="BlockInput.htm">BlockInput</a>関数を使用すると、ユーザーによる物理的なマウス操作が、マウス関数によって生成されるシミュレーションマウスイベントを妨害することを防ぐことができます。ただし、<a href="SendMode.htm">SendInput/Play</a>モードでは、ユーザーの物理的なマウス操作を自動的に後回しにするため、一般にこの操作は必要ありません。</p>
<p>マウスのクリックダウンとクリックアップのたびに、自動的に遅延が発生します（<a href="SendMode.htm">SendInputモード</a>とマウスホイールを回す場合を除く）。ディレイの長さを変更する場合は、<a href="SetMouseDelay.htm">SetMouseDelay</a>を使用します。</p>
<h2 id="Related">関連</h2>
<p><a href="CoordMode.htm">CoordMode</a>, <a href="SendMode.htm">SendMode</a>, <a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="SetMouseDelay.htm">SetMouseDelay</a>, <a href="Click.htm">Click</a>, <a href="MouseClickDrag.htm">MouseClickDrag</a>, <a href="MouseGetPos.htm">MouseGetPos</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="ControlClick.htm">ControlClick</a>, <a href="BlockInput.htm">BlockInput</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExDoubleClick">
<p><a class="ex_number" href="#ExDoubleClick"></a> 現在のマウス位置でダブルクリックする。</p>
<pre>MouseClick "left"
MouseClick "left"</pre>
</div>

<div class="ex" id="ExDoubleClick2">
<p><a class="ex_number" href="#ExDoubleClick2"></a> Same as above.</p>
<pre>MouseClick "left",,, 2</pre>
</div>

<div class="ex" id="ExMove">
<p><a class="ex_number" href="#ExMove"></a> マウスカーソルを特定の位置に移動させ、右クリックを1回します。</p>
<pre>MouseClick "right", 200, 300</pre>
</div>

<div class="ex" id="ExWheel">
<p><a class="ex_number" href="#ExWheel"></a> マウスホイールの回転をシミュレートします。</p>
<pre>#up::MouseClick "WheelUp",,, 2  <em>; Turn it by two notches.</em>
#down::MouseClick "WheelDown",,, 2</pre>
</div>

</body>
</html>
