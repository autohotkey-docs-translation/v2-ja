<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>While Loop - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Whileループ文は、指定した式がfalseと評価されるまで、1つ以上の文を繰り返し実行する。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>While-loop</h1>

<p>Performs one or more <a href="../Concepts.htm#statement">statements</a> repeatedly until the specified <a href="../Variables.htm#Expressions">expression</a> evaluates to false.</p>

<pre class="Syntax"><span class="func">While</span> <i>Expression</i></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>式</dt>
  <dd><p>任意の有効な<a href="../Variables.htm#Expressions">式</a>。事例：<code>while x &lt; y</code>.</p></dd>

</dl>

<h2 id="Remarks">備考</h2>
<p><code>While</code> <code>(expression)</code>のように式が括弧で囲まれている場合、<code>While</code>の後のスペースやタブは省略可能である。</p>
<p>式は各反復の前に一度だけ評価される。この式がtrueと評価された場合（空文字列や数値0以外の結果）、ループの本体が実行され、そうでない場合はループの本体に続く行にジャンプする。</p>
<p>whileループの後には通常、ループ<em>本体</em>を形成するステートメントの集まりである<a href="Block.htm">ブロック</a>が続く。ただし、1つの文しかないループにはブロックは必要ありません（"if"とその "else"は、この目的のために1つの文としてカウントされます）。</p>
<p id="otb">オプションで、オープンブレースを下ではなく同じラインに表示させるOTB（One True Brace）スタイルを採用することも可能です。事例：<code>while x &lt; y {</code>.</p>
<p>組込変数<strong>A_Index</strong>には、現在のループの繰り返し回数が格納されます。ループの式と本体が最初に実行されるとき、この値には1が含まれる。2回目には2が入り、以下同様です。内側ループが外側ループで囲まれている場合、内側ループが優先されます。A_Indexは、すべての種類のループの内部で機能しますが、ループの外部では0を含みます。</p>
<p>すべてのループと同様に、<a href="Break.htm">Break</a>はループを早期に終了するために使われる。このときA_Indexが1増加し、whileループの式が再評価される。まだ真であれば、新しい反復を開始し、そうでなければループを終了する。</p>
<p>ループの後に<a href="Else.htm">Else</a>文が続くこともあり、ループの反復回数がゼロの場合に実行されます。</p>
<p>Specialized loops:ループを使用して、ファイル、フォルダー、レジストリ項目を（1つずつ）自動的に取得することができます。詳しくは<a href="LoopFiles.htm">file loopと</a> <a href="LoopReg.htm">registry loop</a>を参照のこと。また、<a href="LoopRead.htm">ファイル読み込みループ</a>は、ファイルの内容全体を1行ずつ操作することができます。最後に、<a href="LoopParse.htm">解析ループ</a>は、区切られた文字列の中に含まれる個々のフィールドを操作することができます。</p>

<h2 id="Related">関連</h2>
<p><a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="Loop.htm">Loop</a>, <a href="For.htm">For-loop</a>, <a href="LoopFiles.htm">Files-and-folders loop</a>, <a href="LoopReg.htm">Registry loop</a>, <a href="LoopRead.htm">File-reading loop</a>, <a href="LoopParse.htm">Parsing loop</a>, <a href="If.htm">If</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> ユーザーがマウスの左ボタンをドラッグすると、ドラッグ領域内の領域のサイズがツールチップに表示されます。</p>
<pre>CoordMode "Mouse", "Screen"

~LButton::
{
    MouseGetPos &amp;begin_x, &amp;begin_y
    while GetKeyState("LButton")
    {
        MouseGetPos &amp;x, &amp;y
        ToolTip begin_x ", " begin_y "`n" Abs(begin_x-x) " x " Abs(begin_y-y)
        Sleep 10
    }
    ToolTip
}</pre>
</div>

</body>
</html>
