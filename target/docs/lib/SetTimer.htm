<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>SetTimer - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="SetTimer関数は、指定された時間間隔で自動的に繰り返し関数を呼び出すものです。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>SetTimer</h1>

<p>指定した時間間隔で、自動的に繰り返し関数を呼び出します。</p>

<pre class="Syntax"><span class="func">SetTimer</span> <span class="optional">Function, Period, Priority</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt id="Function">機能</dt>
  <dd>
    <p>Type: <a href="../misc/Functor.htm">Function Object</a></p>
    <p>呼び出す関数オブジェクト。</p>
    <p>関数オブジェクトへの<a href="../Concepts.htm#references-to-objects">参照</a>は、スクリプトのタイマーリストに保持され、タイマーが削除されない限り解放されない。これは<a href="#once">ランワンスタイマー</a>では自動的に行われますが、SetTimerを<em>Period</em>を0にして呼び出すことによっても行うことができます。</p>
    <p id="OmitCallback"><em>Function</em>が省略された場合、SetTimerは現在のスレッドを起動したタイマーを操作します（もしあれば）。例えば、<code>SetTimer , 0</code>をタイマー関数内で使用すると、タイマーを削除するためにマークすることができ、<code>SetTimer , 1000</code>は現在のタイマーの<em>周期</em>を更新します。</p>
    <p class="warning"><strong>注：</strong>空の変数や空の値をもたらす式を渡すとエラーとみなされます。このパラメータには、空でない値を与えるか、完全に省略する必要があります。</p>
  </dd>

  <dt>Period</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If omitted and the timer does not exist, it will be created with a period of 250. If omitted and the timer already exists, it will be <a href="#reset">reset</a> at its former period unless <em>Priority</em> is specified. Otherwise, the absolute value of this parameter is used as the <a href="#Precision">approximate</a> number of milliseconds that must pass before the timer is executed. The timer will be automatically <a href="#reset">reset</a>. 自動で繰り返す設定や、1回だけ実行する設定も可能です：</p>
    <ul>
      <li><em>Period</em>が0より大きい場合、スクリプトによって明示的に無効にされるまで、タイマーは自動的に繰り返されます。</li>
      <li id="once"><em>Period</em>が0より小さい場合、タイマーは1回だけ実行されます。For example, specifying -100 would call <em>Function</em> 100&nbsp;ms from now then delete the timer as though <code>SetTimer <i>Function</i>, 0</code> had been used.</li>
      <li><em>Period</em>が0の場合、タイマーは削除の対象となります。このタイマーによって開始されたスレッドがまだ実行中であれば、スレッドの終了後にタイマーは削除され（再有効化されていない限り）、それ以外の場合は直ちに削除されます。いずれの場合も、タイマーの以前の<em>Period</em>と <em>Priority</em>は保持されない。</li>
    </ul>
    <p>The absolute value of <em>Period</em> must be no larger than 4294967295&nbsp;ms (49.7 days).</p>
  </dd>

  <dt>Priority</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>省略された場合、デフォルトは 0 です。Otherwise, specify an integer between -2147483648 and 2147483647 (or an <a href="../Variables.htm#Expressions">expression</a>) to indicate this timer's thread priority. 詳しくは「<a href="../misc/Threads.htm">スレッド</a>」をご覧ください。</p>
    <p>既存のタイマーの優先順位を変更する場合、他の方法で影響を与えることなく、<em>Period</em>を省略します。</p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p>タイマーは非同期で実行されるため、スクリプトがウィンドウを待っていたり、ダイアログを表示していたり、他のタスクで忙しかったりしても、指定した頻度（間隔）で実行されるため便利です。例えば、ユーザーがアイドル状態になったときに何らかのアクションを起こす（<a href="../Variables.htm#TimeIdle">A_TimeIdle</a>で反映される）、不要なウィンドウが表示されたらすぐに閉じるなど、さまざまな使い方があります。</p>
<p>タイマーは、スクリプトが同時に複数のタスクを実行しているように錯覚させるかもしれませんが、そうではありません。Instead, timed functions are treated just like other threads: they can interrupt or be interrupted by another thread, such as a <a href="../Hotkeys.htm">hotkey subroutine</a>. 詳しくは「<a href="../misc/Threads.htm">スレッド</a>」をご覧ください。</p>
<p>Whenever a timer is created or updated with a new period, its function will not be called right away; its time period must expire first. If you wish the timer's first execution to be immediate, call the timer's function directly (however, this will not start a new thread like the timer itself does; so settings such as <a href="SendMode.htm">SendMode</a> will not start off at their defaults).</p>
<p id="reset"><strong>Reset:</strong> If SetTimer is used on an existing timer, the timer is reset (unless <em>Priority</em> is specified and <em>Period</em> is omitted); in other words, the entirety of its period must elapse before its function will be called again.</p>
<p id="Precision"><strong>Timer precision:</strong> Due to the granularity of the OS's time-keeping system, <em>Period</em> is typically rounded up to the nearest multiple of 10 or 15.6 milliseconds (depending on the type of hardware and drivers installed). <a href="Sleep.htm#ExShorterSleep">DllCall+timeBeginPeriod+Sleep</a>のように、Loop+Sleepでより短い遅延を達成することもできる。</p>
<p id="Reliability"><strong>Reliability:</strong> A timer might not be able to run at the expected time under the following conditions:</p>
<ol>
  <li>他のアプリケーションがCPUに大きな負荷をかけている。</li>
  <li>再びタイマー期間が終了しても、タイマーの機能は作動しています。</li>
  <li>他に競合するタイマーが多すぎる。</li>
  <li>タイマーが他の<a href="../misc/Threads.htm">スレッド</a>、すなわち他のタイマー付き関数、<a href="../Hotkeys.htm">ホットキーサブルーチン</a>、または<a href="Menu.htm">カスタムメニュー項目</a>によって中断された（これは<a href="Critical.htm">Critical</a>によって回避することができます）。このとき、割り込みスレッドが終了するまでに長い時間がかかると、その間、割り込みタイマーは事実上無効となります。ただし、他のタイマーは、最初のタイマーを中断した<a href="../misc/Threads.htm">スレッド</a>に割り込んで実行し続ける。</li>
  <li>The script is uninterruptible as a result of <a href="Critical.htm">Critical</a> or <a href="Thread.htm">Thread Interrupt/Priority</a>. この間、タイマーは作動しません。その後、スクリプトが再び中断可能になると、期限を過ぎたタイマーはできるだけ早く1回実行し、その後通常のスケジュールを再開します。</li>
</ol>
<p>Although timers will operate when the script is <a href="Suspend.htm">suspended</a>, they will not run if the <a href="../misc/Threads.htm">current thread</a> has <a href="Thread.htm#NoTimers">Thread NoTimers</a> in effect or whenever any thread is <a href="Pause.htm">paused</a>. In addition, they do not operate when the user is navigating through one of the script's menus (such as the <a href="../Program.htm#tray-icon">tray icon</a> menu or a menu bar).</p>
<p>タイマーは、スクリプトの現在の活動を一時的に中断することで動作するため、長い中断が望ましくない場合は、タイマーの機能を短く保つ（すぐに終了するようにする）必要があります。</p>
<p id="otherremarks"><strong>Other remarks:</strong> A temporary timer might often be disabled by its own function (see examples at the bottom of this page).</p>
<p>タイマーから関数が呼び出されると、<a href="SendMode.htm">SendMode</a>などの設定は常にデフォルト値で新しくスタートします。これらのデフォルトは、<a href="../Scripts.htm#auto">スクリプト起動</a>時に変更することができます。</p>
<p>If <a href="../Hotkeys.htm">hotkey</a> response time is crucial (such as in games) and the script contains any timers whose functions take longer than about 5&nbsp;ms to execute, use the following function to avoid any chance of a 15&nbsp;ms delay. このような遅延は、タイマースレッドが中断しない期間にある瞬間にホットキーが押された場合に発生します：</p>
<pre><a href="Thread.htm">Thread</a> "Interrupt", 0  <em>; Make all threads always-interruptible.</em></pre>
<p>タイマーが機能実行中に無効化された場合、その機能は完了するまで継続されます。</p>
<p><a href="KeyHistory.htm">KeyHistory</a>機能は、タイマーの存在と現在有効なタイマーの数を表示します。</p>

<h2 id="Related">関連</h2>
<p><a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread (function)</a>, <a href="Critical.htm">Critical</a>, <a href="../misc/Functor.htm">Function Objects</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExampleClose">
<p><a class="ex_number" href="#ExampleClose"></a> 不要なウィンドウが表示されたら、その都度閉じる。</p>
<pre>SetTimer CloseMailWarnings, 250

CloseMailWarnings()
{
    WinClose "Microsoft Outlook", "A timeout occured while communicating"
    WinClose "Microsoft Outlook", "A connection to the server could not be established"
}</pre>
</div>

<div class="ex" id="ExampleWait">
<p><a class="ex_number" href="#ExampleWait"></a> 特定のウィンドウが表示されるのを待ち、ユーザーに警告を発する。</p>
<pre>SetTimer Alert1, 500

Alert1()
{
    if not WinExist("Video Conversion", "Process Complete")
        return
    <em>; それ以外の場合。</em>
    SetTimer , 0  <em>; i.e. the timer turns itself off here.</em>
    MsgBox "The video conversion is finished."
}</pre>
</div>

<div class="ex" id="ExampleCount">
<p><a class="ex_number" href="#ExampleCount"></a> ホットキーの単押し、二重押し、三重押しを検出します。これにより、ホットキーは押す回数によって異なる操作を行うことができます。</p>
<pre>#c::
KeyWinC(ThisHotkey)  <em>; This is a <a href="../Hotkeys.htm#Function">named function hotkey</a>.</em>
{
    static winc_presses := 0
    if winc_presses &gt; 0 <em>; SetTimer already started, so we log the keypress instead.</em>
    {
        winc_presses += 1
        return
    }
    <em>; Otherwise, this is the first press of a new series. Set count to 1 and start
    ; the timer:</em>
    winc_presses := 1
    SetTimer After400, -400 <em>; Wait for more presses within a 400 millisecond window.</em>

    After400()  <em>; This is a <a href="../Functions.htm#nested">nested function</a>.</em>
    {
        if winc_presses = 1 <em>; The key was pressed once.</em>
        {
            Run "m:\"  <em>; Open a folder.</em>
        }
        else if winc_presses = 2 <em>; The key was pressed twice.</em>
        {
            Run "m:\multimedia"  <em>; Open a different folder.</em>
        }
        else if winc_presses &gt; 2
        {
            MsgBox "Three or more clicks detected."
        }
        <em>; Regardless of which action above was triggered, reset the count to
        ; prepare for the next series of presses:</em>
        winc_presses := 0
    }
}
</pre>
</div>

<div class="ex" id="ExampleClass">
<p><a class="ex_number" href="#ExampleClass"></a> Uses a <a href="../Objects.htm#Custom_Classes_method">method</a> as the timer function.</p>
<pre>counter := SecondCounter()
counter.Start
Sleep 5000
counter.Stop
Sleep 2000

<em>; An example class for counting the seconds...</em>
class SecondCounter {
    __New() {
        this.interval := 1000
        this.count := 0
        <em>; Tick() has an implicit parameter "this" which is a reference to
        ; the object, so we need to create a function which encapsulates
        ; "this" and the method to call:</em>
        this.timer := ObjBindMethod(this, "Tick")
    }
    Start() {
        SetTimer this.timer, this.interval
        ToolTip "Counter started"
    }
    Stop() {
        <em>; To turn off the timer, we must pass the same object as before:</em>
        SetTimer this.timer, 0
        ToolTip "Counter stopped at " this.count
    }
    <em>; In this example, the timer calls this method:</em>
    Tick() {
        ToolTip ++this.count
    }
}</pre>
<p>上記の例に関連するヒント：</p>
<ul>
  <li>また、<code>this.timer := this.Tick.<a href="Func.htm#Bind">Bind</a>(this)</code>を使用することもできます。<code>this.timerが</code>呼び出されると、実質的に<code><i>tick_function</i>.<a href="Func.htm#Call">Call</a>(this)</code>が呼び出されます。<i>tick_functionは</i>そのメソッドを実装した関数オブジェクトです。これに対し、<a href="ObjBindMethod.htm">ObjBindMethodは</a> <code>this.Tick()</code>を呼び出すオブジェクトを生成します。</li>
  <li><em>Tick</em>を <em>Call</em>に改名すれば、<code>this.timerの</code>代わりに<code>これを</code>直接使用すればよいです。しかし、ObjBindMethodは、オブジェクトがホットキー、メニューアイテム、GUIコントロールなど、異なるイベントソースによって呼び出されるべき複数のメソッドを持つ場合に便利です。</li>
  <li>タイマーが呼び出された関数/メソッド内でタイマーを変更または削除する場合、<a href="#OmitCallback"><em>Function</em>パラメータを省略</a>する方が簡単な場合があります。場合によっては、SetTimerに渡された元のオブジェクトを保持する必要性を回避できます。</li>
</ul>
</div>

</body>
</html>
