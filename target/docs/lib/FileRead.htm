<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>FileRead - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="FileRead 関数は、ファイルの内容を取得します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>ファイルの内容を取得します。</p>

<pre class="Syntax">Text := <span class="func">FileRead</span>(Filename <span class="optional">, Options</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Filename</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>絶対パスが指定されていない場合は、<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>にあると仮定されます。</p>
  </dd>
  
  <dt>Options</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>以下の文字列のうち、0個以上。各オプションと次のオプションは、1つのスペースまたはタブで区切ってください。事例：<code>"`n m5000 UTF-8"</code></p>
    <p><strong>エンコード：</strong><a href="FileEncoding.htm">FileEncoding</a>が受け付けるエンコーディング名（空文字列を除く）を指定すると、ファイルに UTF-8 または UTF-16 のバイト順マークがない場合に、そのエンコーディングを使用します。省略された場合、デフォルトは<a href="../Variables.htm#FileEncoding">A_FileEncoding</a>となる。</p>
    <p><strong>RAW：</strong>RAW（大文字と小文字を区別しない）を指定すると、ファイルの内容を<a href="#Binary">生のバイナリデータ</a>として読み込み、文字列の代わりに<a href="Buffer.htm">Buffer</a>オブジェクトを返します。このオプションは、以前に指定されたエンコーディングを上書きし、その逆もまた然りです。</p>
    <p><strong>m1024：</strong>このオプションを省略すると、メモリ不足でない限りファイル全体が読み込まれ、その場合はエラーメッセージが表示されてスレッドが終了します（ただし、<a href="Try.htm">Try</a>を使用することでこれを回避できます）。それ以外の場合は、1024を10進数または16進数のバイト数に置き換えてください。これより大きなファイルの場合は、その先頭部分のみを読み込みます。</p>
    <p class="note"><strong>注意：</strong>その結果、最終行の末尾が `r`n ではなく、裸のキャリッジリターン（`r）になってしまうかもしれません。</p>
    <p><strong>`n</strong>（改行文字）：キャリッジリターンとラインフィード（`r`n）をラインフィード（`n）に置き換える。しかし、この翻訳はパフォーマンスを低下させるので、通常は必要ありません。例えば、`r`nを含むテキストは、<a href="StrReplace.htm">Gui Editコントロール</a>に追加するのに適したフォーマットになっています。以下の<a href="LoopParse.htm">解析ループ</a>は、各行の末尾が `r`n であろうと `n だけであろうと、正しく動作します：<code>Loop Parse, MyFileContents, "`n", "`r"</code>。</p>
  </dd>
  
</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#objects">オブジェクト</a></p>
<p>説明： 指定されたファイルの内容を返します。The return value is a <a href="Buffer.htm">Buffer object</a> if the RAW option is in effect and the file can be opened; otherwise, it is a string. ファイルが存在しないか、その他の理由でオープンできない場合は、空文字列が返されます。</p>

<h2 id="Error_Handling">エラー処理</h2>
<p>ファイルのオープンや読み取りに問題があった場合、<a href="Error.htm#OSError">OSError</a>がスローされます。</p>
<p>4GBを超えるサイズのファイルは、*mオプションが存在しない限り、<a href="Error.htm#MemoryError">MemoryError</a>が発生し、この場合、ファイルの先頭部分が読み込まれる。また、要求されたデータ量を格納するのに十分なメモリをプログラムが割り当てられない場合、MemoryErrorがスローされます。</p>
<p><a href="../Variables.htm#LastError">A_LastError</a>には、オペレーティングシステムのGetLastError()関数の結果が設定されます。</p>

<h2 id="Binary">バイナリデータの読み取り</h2>
<p><code>RAW</code>オプションを使用した場合、戻り値は、ファイルの未修正の内容を含む<a href="Buffer.htm">Buffer</a>オブジェクトとなる。オブジェクトの<a href="Buffer.htm#Size">Size</a>プロパティは、読み込んだバイト数を返します。<a href="NumGet.htm">NumGet</a>または<a href="StrGet.htm">StrGet</a>を使用して、バッファからデータを取得することができます。例：</p>
<pre>buf := FileRead(A_AhkPath, "RAW")
if StrGet(buf, 2, "cp0") == "MZ"  <em>; 実行ファイルのように見えるが...</em>
{
    <em>; COFF ファイルのヘッダーからマシンタイプを読み込みます。</em>
    machine := NumGet(buf, NumGet(buf, 0x3C, "uint") + 4, "ushort")
    machine := machine=0x8664 ? "x64" : machine=0x014C ? "x86" : "unknown"
    <em>; マシンの種類とファイルサイズを表示します。</em>
    MsgBox "This " machine " executable is " buf.Size " bytes."
}
buf := ""</pre>
<p>なぜなら、デフォルトでは、ファイルから読み込まれたバイトはテキストとして解釈され、ソースファイルのエンコーディング（オプションまたは<a href="../Variables.htm#FileEncoding">A_FileEncoding</a>で指定）からスクリプトの<a href="../Compat.htm#Format">ネイティブエンコーディング</a>であるUTF-16に変換されることがあるからです。データがUTF-16テキストでない場合、この変換は一般的に望ましくない方法でデータを変更します。</p>
<p>RAWオプションの他のデモについては、<a href="ClipboardAll.htm#ExFile">ClipboardAllの例 #2</a>を参照してください。</p>
<p>最後に、<a href="FileOpen.htm">FileOpen</a>と<a href="File.htm#RawRead">File.RawRead</a>または<a href="File.htm#ReadNum">File.<i>ReadNum</i></a>を使用すると、最初にファイル全体をメモリに読み込まずにバイナリデータを読み込むことができます。</p>

<h2 id="Remarks">備考</h2>
<p>ファイルの全部または大部分をメモリに読み込むことを目的とする場合、FileReadは<a href="LoopRead.htm">ファイル読み込みループ</a>を使用するよりもはるかに優れた性能を発揮します。</p>
<p>メモリの使いすぎが懸念される場合は、<a href="FileGetSize.htm">FileGetSize</a>で事前にファイルサイズを確認してください。</p>
<p><a href="FileOpen.htm">FileOpen</a>は、ファイル全体をメモリに読み込むことなく、ファイルの特定の位置でデータを読み書きするなど、FileReadより高度な機能を提供します。機能一覧は、「<a href="File.htm">ファイルオブジェクト</a>」を参照してください。</p>

<h2 id="Related">関連</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>、<a href="FileOpen.htm">FileOpen</a>/<a href="File.htm">Fileオブジェクト</a>、<a href="LoopRead.htm">ファイル読み込みループ</a>、<a href="FileGetSize.htm">FileGetSize</a>、<a href="FileAppend.htm">FileAppend</a>、<a href="IniRead.htm">IniRead</a>、<a href="Sort.htm">Sort</a>、<a href="Download.htm">Download</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> テキストファイルを<em>MyText</em>に読み込みます。</p>
<pre>MyText := FileRead("C:\My Documents\My File.txt")</pre>
</div>

<div class="ex" id="ExSort">
<p><a class="ex_number" href="#ExSort"></a> ファイルの中身を素早くソートします。</p>
<pre>
Contents := FileRead("C:\Address List.txt")
Contents := Sort(Contents)
FileDelete "C:\Address List (alphabetical).txt"
FileAppend Contents, "C:\Address List (alphabetical).txt"
Contents := "" <em>; メモリを解放します。</em>
</pre>
</div>

</body>
</html>
