<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>NumPut - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="NumPut関数は、指定されたアドレス+オフセットに1つ以上の数値をバイナリ形式で格納します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut</h1>
<p>指定されたアドレス＋オフセットに、1つ以上の数値をバイナリ形式で格納します。</p>
<pre class="Syntax"><span class="func">NumPut</span> Type, Number, <span class="optional">Type2, Number2, ...</span> Target <span class="optional">, Offset</span></pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Type</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>以下の文字列のいずれか1つ：UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr</p>
      <p>すべての整数型、または純粋な整数を渡す場合、符号付き整数を表現するために2の補数を使用するため、符号付きと符号無しは結果に影響しません。</p>
      <p>これらの型名をリテラル文字列として使用する場合は、引用符で囲む必要があります。</p>
      <p>詳しくは<a href="DllCall.htm#types">DllCallの種類</a>をご覧ください。</p>
    </dd>

  <dt>Number</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>保存する番号です。</p>
  </dd>

  <dt>Target</dt>
  <dd>
    <p>型：<a href="Buffer.htm">オブジェクト</a>または<a href="../Concepts.htm#numbers">整数</a></p>
		<p><a href="Buffer.htm">Buffer</a>のようなオブジェクトまたはメモリアドレス。</p>
    <p><a href="Buffer.htm#Ptr">Ptr</a>と<a href="Buffer.htm#Size">Size</a>プロパティを実装しているオブジェクトであれば何でも使用できますが、この関数はネイティブの<a href="Buffer.htm">Buffer</a>オブジェクトに最適化されています。これらのプロパティを持つオブジェクトを渡すことで、関数が無効なメモリ位置に書き込まないようにします。そうすると、クラッシュやその他の予測不可能な動作の原因になります。</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>If unset or omitted, it defaults to 0. Otherwise, specify an offset in bytes which is added to <em>Target</em> to determine the target address.</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#numbers">整数</a></p>
<p>この関数は、最後に書き込まれた項目の右側のアドレスを返します。<a href="DllCall.htm">DllCall</a>で使用する構造体のように、一部のフィールドが設定されていない、連続しない数値列を記述する場合に使用できます。しかし、多くの場合、代わりに複数の<em>Type</em>と<em>Number</em>のペアを指定する方がシンプルで効率的です。NumPutにアドレスを返すのは、<em>Offset</em>を更新したBufferのようなオブジェクトを渡すよりも安全性に欠けます。</p>

<h2 id="General_Remarks">総論</h2>
<p>最初の<em>Number</em>の後に<em>Type</em>と <em>Number</em>を任意の回数繰り返すことで、一連のNumberを記述することができます。各数値は、前の数値の次のバイトに、パディングなしで書き込まれます。<a href="DllCall.htm">DllCall</a>で使用する構造体を作成する場合、データ配列の要件により、フィールドによっては明示的にパディングを追加する必要があることに留意してください。</p>
<p>整数が大きすぎて指定した<em>Type</em>に収まらない場合、その最上位バイトは無視されます。例えば、<code>NumPut("Char", 257, buf)</code>は数値1を格納する。</p>
<p>ターゲットアドレスが無効な場合、例外が発生することがあります。しかし、無効なアドレスの中には、それを検出できないものもあり、予測できない挙動を引き起こす可能性があります。アドレスの代わりに<a href="Buffer.htm">Buffer</a>オブジェクトを渡すことで、ターゲットアドレスが常に検証できるようになります。</p>

<h2 id="Related">関連</h2>
<p><a href="NumGet.htm">NumGet</a>, <a href="DllCall.htm">DllCall</a>, <a href="Buffer.htm">Buffer object</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a></p>


</body>
</html>
