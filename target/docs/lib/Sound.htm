<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Sound Functions | AutoHotkey v2</title>
<meta name="description" content="SoundGet 関数と SoundSet 関数の使用法の詳細。" />
<meta name="ahk:equiv-v1" content="lib/SoundSet.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>サウンド機能</h1>

<p>適用：</p>
<ul>
  <li><a href="SoundGetVolume.htm">SoundGetVolume</a> / <a href="SoundSetVolume.htm">SoundSetVolume</a></li>
  <li><a href="SoundGetMute.htm">SoundGetMute</a> / <a href="SoundSetMute.htm">SoundSetMute</a></li>
  <li><a href="SoundGetName.htm">SoundGetName</a></li>
  <li><a href="SoundGetInterface.htm">SoundGetInterface</a></li>
</ul>
<p>Other sound-related functions:</p>
<ul>
  <li><a href="SoundBeep.htm">SoundBeep</a></li>
  <li><a href="SoundPlay.htm">SoundPlay</a></li>
</ul>

<h2 id="devices">Endpoint Devices</h2>
<p>SoundGet関数とSoundSet関数が参照する "デバイス"は、<em>オーディオエンドポイントデバイス</em>である。1つのデバイスドライバや物理デバイスが、異なるタイプの出力や入力など、複数のエンドポイントを持つことはよくある。事例：</p>
<table class="info">
  <tr><th>名前</th><th abbr="説明">説明</th></tr>
  <tr><td>Speakers (Example HD Audio)</td><td>本機の主なアナログ出力端子（サラウンド・サウンドの場合は複数の端子を使用）。</td></tr>
  <tr><td>デジタル出力（HDオーディオの例）</td><td>光または同軸デジタル出力。</td></tr>
  <tr><td>マイク（HDオーディオの例）</td><td>マイク端子から音声を取り込む。</td></tr>
  <tr><td>ステレオ・ミックス（HDオーディオの例）</td><td>Speakersエンドポイントに出力されている音声をキャプチャする。</td></tr>
</table>
<p>デバイス名は通常、"Speakers"のようなエンドポイント名と、括弧内のオーディオドライバ名で構成される。スクリプトは、完全な名前を使用することも、"Mic"や "Microphone"のように名前の先頭部分だけを使用することもできる。オーディオドライバの名前は固定されていますが、エンドポイント名は管理者がサウンドコントロールパネルからいつでも変更することができます。</p>
<p id="mmsys">デバイスはサウンドコントロールパネルに一覧表示され、コマンドラインから <code>mmsys.cpl&lt;//c0&gt; を実行するか、ファイル名を指定して実行ダイアログ (<kbd>Win</kbd>+<kbd>R</kbd>) または <a href="Run.htm">Run</a> 機能で開くことができます。。デフォルトでは、コントロールパネルは有効でプラグインされているデバイス（該当する場合）のみをリストアップしますが、これは右クリックメニューで変更できます。AutoHotkeyは、プラグインされていないデバイスは検出しますが、無効になっているデバイスは検出しません。</p>

<h2 id="components">コンポーネント</h2>
<p>コンポーネントは、サウンドデバイスのプロパティダイアログのLevelsタブに表示されている通りです。</p>
<img src="../static/sound_levels.png" alt="Levels" />
<p>この例では、マスターコントロールが一番上にあり、その後に最初の4つのコンポーネントが続きます：マイク、フロントマイク、ライン入力、サイド。第4のコンポーネントを除き、すべてにボリュームとミュートのコントロールがある。</p>
<p>サウンドデバイスのプロパティダイアログは、<a href="#mmsys">サウンドコントロールパネル</a>から開くことができます。</p>
<p>オーディオドライバーは、低音や高音など、他のコントロールを露出させることができる。しかし、一般的なオーディオ・ドライバーには、ボリュームとミュート・コントロールしかないか、コンポーネントがまったくないことが多い。ボリュームとミュートのコントロールは、<a href="SoundGetVolume.htm">SoundGetVolume</a>、<a href="SoundSetVolume.htm">SoundSetVolume</a>、<a href="SoundGetMute.htm">SoundGetMute</a>、<a href="SoundSetMute.htm">SoundSetMute</a>を通じて直接サポートされます。その他のコントロールは、<a href="SoundGetInterface.htm">SoundGetInterface</a>と <a href="ComCall.htm">ComCall</a>を通じて間接的にのみサポートされる。</p>

<h3 id="Advanced_Details">詳細</h3>
<p>コンポーネントは、<em>コネクター</em>と <em>サブユニット</em>のグラフを公開する<a href="https://learn.microsoft.com/windows/win32/coreaudio/devicetopology-api">DeviceTopology API</a>を通じて発見される。上に示した各コンポーネントにはConnectorがあり、コンポーネントの名前を定義するのはConnectorである。各コントロール（ボリュームやミュートなど）は、コネクタとエンドポイントの間に位置するサブユニットによって表される。データはコネクタから、またはコネクタへ「流れ」、各サブユニットを流れる際に、音量を調整したり、すべての音を抑制（ミュート）するなど、変更される。</p>
<p>SoundGet関数とSoundSet関数は、<em>デバイスのトポロジー</em>グラフをウォーキングし、指定された名前を持つコネクター（名前がない場合は全てのコネクター）をカウントすることでコンポーネントを特定します。一致する Connector が見つかると、Connector に最も近いところから、グラフのその特定のブランチ上の各 Subunit にクエリを実行して、コントロールインターフェース（IAudioVolumeLevel や IAudioMute など）を検索する。</p>
<p>マスターボリュームやミュートコントロールに対応するサブユニットなど、複数のコネクターに適用されるサブユニットは除外されます。コネクタは、それ自身のサブユニットが少なくとも1つあれば（ある場合のみ）、そのサブユニットが要求されたタイプでなくてもカウントされる。</p>
<p>実際には、最終的に利用可能なコンポーネントは、<a href="#components">「レベル」タブ</a>にリストされたとおりで、同じ順番となる。ただし、このプロセスは観察、試行錯誤に基づいているため、100％正確とは限らない。</p>

<h2 id="Common_Parameters">Common Parameters</h2>
<dl>

  <dt id="component">コンポーネント</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p>以下のいずれか：</p>
    <ul>
      <li><a href="#components">コンポーネント</a>のインデックスで、1が最初のコンポーネント。</li>
      <li>コンポーネントの完全な表示名（大文字と小文字は区別されない）。</li>
      <li>上記と同様だが、その後にコロンと整数が続き、1がその名前を持つコンポーネントの最初の出現となる。例えば、<code>"Line In:2"</code>は "Line In "という名前の2番目のコンポーネントを使う。これは、同じ名前のコンポーネントが複数存在する場合や、表示名が空、整数、コロンを含む場合など、<em>Component</em>がそうでなければ曖昧になる場合にのみ必要である。</li>
      <li>If blank or omitted, the function targets the master volume/mute controls or an interface that can be returned by <a href="https://learn.microsoft.com/windows/win32/api/mmdeviceapi/nf-mmdeviceapi-immdevice-activate">IMMDevice::Activate</a>.</li>
    </ul>
    <p>インデックスのみが指定された場合、表示名は無視される。例えば、<code>1</code>、<code>"1"</code>、<code>":1"</code>は、名前に関係なく最初のコンポーネントを使用するが、<code>""</code>はマスターコントロールを使用する。</p>
    <p>サウンドデバイスに指定された<em>コンポーネント</em>がない場合、<a href="Error.htm#TargetError">TargetError</a>がスローされます。</p>
  </dd>

  <dt id="device">Device</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p>以下のいずれか：</p>
    <ul>
      <li>1からサポートするデバイスの総数までの数値（整数）。</li>
      <li>デバイスの表示名。フルネームまたは先頭部分（大文字と小文字は区別されない）。例えば、<code>"Speakers"</code>または<code>"Speakers (Example HD Audio)"</code>です。</li>
      <li>上記と同様だが、コロンと整数が続き、1が一致する名前を持つ最初のデバイスとなる。例えば、<code>"Speakers:2"</code>は、"Speakers"で始まる名前を持つ2台目のデバイスを示す。これは、同じ名前のデバイスが複数存在する場合や、表示名にコロンが含まれる場合など、<em>Deviceが</em>曖昧になる場合にのみ必要です。</li>
      <li>If blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1).</li>
    </ul>
    <p><a href="#ExSoundcard">サウンドカード解析スクリプト</a>は、使用する名前や番号を決定するのに役立つかもしれません。</p>
  </dd>

</dl>

<h2 id="Examples">例</h2>
<div class="ex" id="ExSoundcard">
<p><a class="ex_number" href="#ExSoundcard"></a> サウンドカードの分析以下のスクリプトを使用して、使用可能なオーディオデバイスとコンポーネント名、および各デバイスまたはコンポーネントがボリュームおよび/またはミュートコントロールをサポートしているかどうかを検出します。結果はシンプルなListViewに表示されます。現在の音量とミュートの設定が取得できる場合は表示されますが、リアルタイムで更新されるわけではありません。</p>
<pre filename="soundcard.ahk">
scGui := Gui(, "Sound Components")
scLV := scGui.Add('ListView', "w600 h400"
    , ["Component", "#", "Device", "Volume", "Mute"])

devMap := Map()

loop
{
    <em>; For each loop iteration, try to get the corresponding device.</em>
    try
        devName := SoundGetName(, dev := A_Index)
    catch  <em>; No more devices.</em>
        break
    
<em>; Qualify names with ":index" where needed.</em>
    devName := Qualify(devName, devMap, dev)
    
<em>; Retrieve master volume and mute setting, if possible.</em>
    vol := mute := ""
    try vol := Round(SoundGetVolume( , dev), 2)
    try mute := SoundGetMute( , dev)
    
<em>; Display the master settings only if at least one was retrieved.</em>
    if vol != "" || mute != ""
        scLV.Add("", "", dev, devName, vol, mute)
    
<em>; For each component, first query its name.</em>
    cmpMap := Map()
    
loop
    {
        try
            cmpName := SoundGetName(cmp := A_Index, dev)
        catch
            break
        <em>; Retrieve this component's volume and mute setting, if possible.</em>
        vol := mute := ""
        try vol := Round(SoundGetVolume(cmp, dev), 2)
        try mute := SoundGetMute(cmp, dev)
        <em>; Display this component even if it does not support volume or mute,
        ; since it likely supports other controls via SoundGetInterface().</em>
        scLV.Add("", Qualify(cmpName, cmpMap, A_Index), dev, devName, vol, mute)
    }
}

loop 5
    scLV.ModifyCol(A_Index, 'AutoHdr Logical')
scGui.Show()

<em>; Qualifies full names with ":index" when needed.</em>
Qualify(name, names, overallIndex)
{
    if name = ''
        return overallIndex
    key := StrLower(name)
    index := names.Has(key) ? ++names[key] : (names[key] := 1)
    return (index &gt; 1 || InStr(name, ':') || IsInteger(name)) ? name ':' index : name
}</pre>
</div>

</body>
</html>
