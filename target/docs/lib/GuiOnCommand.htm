<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>OnCommand (GUI) - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="GuiControlオブジェクトのOnCommandメソッドは、WM_COMMANDメッセージで制御通知を受け取ったときに呼び出される関数やメソッドを登録します。" />
<meta name="ahk:equiv-v1" content="lib/GuiControl.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnCommand</h1>
<p><a href="#WM_COMMAND">WM_COMMAND</a>メッセージで制御通知を受信したときに呼び出される関数やメソッドを登録します。</p>
<pre class="Syntax"><a href="GuiControl.htm">GuiCtrl</a>.<span class="func">OnCommand</span>(NotifyCode, Callback <span class="optional">, AddRemove</span>)</pre>

<h2 id="Parameters">パラメータ</h2>
<dl>
  <dt>NotifyCode</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>監視する制御定義の通知コード。</p>
  </dd>
  
  <dt>Callback</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a> or <a href="../misc/Functor.htm">Function Object</a></p>
    <p>イベントが発生したときに呼び出す関数、メソッド、またはオブジェクトを指定します。</p>
    <p>GUIにイベントシンクがある場合（つまり<a href="Gui.htm#Call">Gui()</a>の<em>EventObj</em>パラメータが指定されている場合）、このパラメータはイベントシンクに属するメソッドの名前であってもよい。Otherwise, this parameter must be a <a href="../misc/Functor.htm">function object</a>.</p>
    <p id="Callback_Parameters">The callback accepts one parameter and can be <a href="../Functions.htm#intro">defined</a> as follows:</p>
    <pre class="NoIndent">MyCallback(GuiCtrl) { ...</pre>
    <p>Although the name you give the parameter does not matter, it is assigned the <a href="GuiControl.htm">GuiControl object</a> of the current GUI control.</p>
    <p>You can omit the callback's parameter if the corresponding information is not needed, but in this case an asterisk must be specified, e.g. <code>MyCallback(*)</code>.</p>
    <p><a href="GuiOnEvent.htm#Callback_Parameters">OnEventの注意事項</a>である、<code>この関数</code>とバインドされた関数に関する注意事項は、OnCommandにも適用されます。</p>
    <p id="Callback_Return_Value">イベントに対して複数のコールバックが登録されている場合、コールバックは空でない値を返し、残りのコールバックが呼ばれないようにすることができます。</p>
    <p>コールバックの戻り値は、GUIコントロールに無視されます。</p>
  </dd>
  
  <dt>AddRemove</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>省略されたときは、初期値は 1 です。それ以外の場合は、次のいずれかの番号を指定してください：</p>
    <ul>
      <li>1 = 以前に登録されたコールバックの後にコールバックを呼び出します。</li>
      <li>-1 = 以前に登録されたコールバックより先にコールバックを呼び出します。</li>
      <li>0 = コールバックを呼び出さない。</li>
    </ul>
  </dd>
</dl>

<h2 id="WM_COMMAND">WM_COMMAND</h2>
<p>ある種のコントロールは、興味深いイベントが発生するたびに<a href="https://learn.microsoft.com/windows/win32/menurc/wm-command">WM_COMMAND</a>メッセージを送信します。新しいコントロールはWM_NOTIFYメッセージ（<a href="GuiOnNotify.htm">OnNotify</a>参照）を使用するため、これらは通常、古くからあるWindows標準コントロールです。一般的に使用される通知コードはイベントに変換され、スクリプトは<a href="GuiOnEvent.htm">OnEvent</a>で監視することができます。</p>
<p>メッセージのパラメータには、コントロールID、HWND、通知コードが含まれ、AutoHotkeyはこれを使用して、適切なコールバックに通知をディスパッチします。追加のパラメータはありません。</p>
<p>どの通知が利用可能か（もしあれば）については、コントロールのマニュアルを参照してください。<a href="https://learn.microsoft.com/windows/win32/controls/individual-control-info">コントロールライブラリ（Microsoft Docs）</a>には、Windowsのコモンコントロールへのリンクが含まれています（ただし、WM_COMMANDを使用するものはごく一部です）。通知コード（数字）は、Windows SDK、またはインターネットで検索して確認できます。</p>

<h2 id="Related">関連</h2>
<p>These notes for <a href="GuiOnEvent.htm">OnEvent</a> also apply to OnCommand: <a href="GuiOnEvent.htm#Threads">Threads</a>, <a href="GuiOnEvent.htm#Destroying_the_GUI">Destroying the GUI</a>.</p>
<p><a href="GuiOnNotify.htm">OnNotify</a>は、WM_NOTIFYメッセージとして送信される通知に対して使用することができる。</p>

</body>
</html>
