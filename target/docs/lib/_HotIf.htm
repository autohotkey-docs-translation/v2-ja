<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>#HotIf - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="#HotIfディレクティブは、コンテキストに応じたホットキーとホットストリングを作成します。このようなホットキーは、任意の条件（式）に応じて異なるアクションを実行します（または全く実行されません）。" />
<meta name="ahk:equiv-v1" content="lib/_If.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>


<h1>#HotIf</h1>

<p>文脈依存の<a href="../Hotkeys.htm">ホットキー</a>と <a href="../Hotstrings.htm">ホットストリング</a>を作成します。このようなホットキーは、任意の条件（<a href="../Language.htm#expressions">式</a>）に応じて異なるアクションを実行します（または全く実行されません）。</p>

<pre class="Syntax"><span class="func">#HotIf</span> <span class="optional">Expression</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Expression</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
    <p>If omitted, subsequently-created hotkeys and hotstrings are not context-sensitive. Otherwise, specify any valid <a href="../Variables.htm#Expressions">expression</a>. これは、1つのパラメータ（<a href="../Hotkeys.htm#ThisHotkey">ThisHotkey</a>）を持つ暗黙の関数の戻り値になります。この関数はグローバル変数を直接変更することはできませんが（通常通り<a href="../Functions.htm#AssumeLocal">想定ローカル</a>であり、宣言を含むことができないため）、グローバル変数を変更する他の関数を呼び出すことができます。</p>
  </dd>

</dl>

<h2 id="howto">基本操作</h2>
<p>#HotIfディレクティブは、その後に作成されるホットキーが起動するかどうかを決定するために使用される式を設定します。この式は、キー、マウスボタン、またはその組み合わせが押されたとき、またはプログラムがホットキーが有効かどうかを知る必要があるその他のときに評価されます。</p>
<p>文脈依存の<a href="../Hotkeys.htm">ホットキー</a>や <a href="../Hotstrings.htm">ホットストリング</a>を作るには、単に#HotIfディレクティブを先行させればよい。事例：</p>
<pre>#HotIf WinActive("ahk_class Notepad") or WinActive(MyWindowTitle)
#Space::MsgBox "You pressed Win+Spacebar in Notepad or " MyWindowTitle</pre>
<p>#HotIf指令は位置指定：#HotIfは、次の#HotIfディレクティブまで、スクリプト内で物理的にその下にあるすべてのホットキーとホットストリングに影響を及ぼします。</p>
<p class="warning"><strong>注：</strong> <a href="If.htm">if文</a>とは異なり、中括弧は#HotIf指示文では効果がありません。</p>
<p>文脈依存性をオフにするには、#HotIfを無表現で指定します。事例：</p>
<pre>#HotIf</pre>
<p>他のディレクティブと同様に、#HotIfは条件付きで実行することはできません。</p>
<p>マウスやキーボードのホットキーが#HotIfによって無効化されると、本来の機能を発揮します。つまり、そのようなホットキーがないかのように、アクティブウィンドウに通過します。There is one exception: Controller hotkeys: although #HotIf works, it never prevents other programs from seeing the press of a button.</p>
<p>#HotIfは、<kbd>Enter</kbd>や <kbd>Space</kbd>などの通常のキーの動作を変更するためにも使用できます。これは、特定のウィンドウがそのキーを無視したり、好ましくない動作をする場合に有効です。事例：</p>
<pre>#HotIf WinActive("Reminders ahk_class #32770")  <em>; Outlookの "リマインダー "ウィンドウ。</em>
Enter::Send "!o"  <em>; Enterキーを押すと、選択したリマインダーをスヌーズするのではなく、開くようにします。</em>
#HotIf</pre>

<h2 id="variant">バリアント（複製）ホットキー</h2>
<p>特定の<a href="../Hotkeys.htm">ホットキー</a>や <a href="../Hotstrings.htm">ホットストリング</a>は、それぞれの定義が異なるHotIf基準であれば、スクリプト内で複数回定義することができます。これらは、<em>ホットキーバリアント</em>と呼ばれるものです。事例：</p>
<pre>#HotIf <a href="WinActive.htm">WinActive</a>("ahk_class Notepad")
^!c::MsgBox "You pressed Control+Alt+C in Notepad."
#HotIf WinActive("ahk_class WordPadClass")
^!c::MsgBox "You pressed Control+Alt+C in WordPad."
#HotIf
^!c::MsgBox "You pressed Control+Alt+C in a window other than Notepad/WordPad."</pre>
<p>複数のバリアントが発射対象となる場合、スクリプトの先頭に最も近いものだけが発射されます。ただし、グローバルバリアント（HotIfの基準がないもの）については例外です：常に最も低い優先順位を持つので、他の variant が適格でない場合にのみ発火します（この例外は<a href="../Hotstrings.htm">ホットストリング</a>には適用されません）。</p>
<p>重複するホットキーを作成する場合、<code>^!+#</code>などの<a href="../Hotkeys.htm#Symbols">修飾記号</a>の順番は関係ありません。例えば、<code>^!c</code>は<code>!^c</code>と同じです。ただし、キーは一貫したスペルで表記する必要があります。例えば、<em>Esc</em>はこの目的では<em>Escape</em>と同じではありません（ただし、ケースは重要ではありません）。また、<a href="../Hotkeys.htm#wildcard">ワイルドカード接頭辞(*)</a>を持つホットキーは、ワイルドカードでないものと全く別物です。例えば、<code>*F1</code>と<code>F1</code>は、それぞれ独自のバリアントセットを持っているでしょう。</p>

<p><a href="GroupAdd.htm">ウィンドウグループ</a>を使用すると、ウィンドウのグループに対してホットキーを実行させることができます。事例：
</p><pre>
GroupAdd "MyGroup", "ahk_class Notepad"
GroupAdd "MyGroup", "ahk_class WordPadClass"

#HotIf WinActive("ahk_group MyGroup")
#z::MsgBox "You pressed Win+Z in either Notepad or WordPad."
</pre>
</p>
<p>ホットキーのバリエーションを動的に（スクリプトの実行中に）作成するには、<a href="HotIf.htm">HotIf</a>を参照してください。</p>

<h2 id="expression-evaluation">式評価</h2>
<p>When the key, mouse or controller button combination which forms a hotkey is pressed, the #HotIf expression is evaluated to determine if the hotkey should activate.</p>
<p class="warning"><strong>注：</strong>スクリプトは、キーが押されたときだけ式が評価されることを想定してはいけません（下記参照）。</p>
<p>この式は、プログラムがホットキーが有効かどうかを知る必要があるときに評価されることもあります。例えば、<code>a &amp; b::</code> のようなカスタムの組み合わせの #HotIf 式は、プレフィックスキー（この例では<code>a</code>）が押されたときに評価され、カスタム修飾キーとして機能するかどうかを判断することができます。</p>
<p class="warning" id="lag"><strong>注：</strong>無反応のスクリプトで#HotIfを使用すると、入力ラグが発生したり、ホットキーが壊れたりすることがあります（下記参照）。</p>
<p>#HotIf指令には、さらにいくつかの注意事項があります：</p>
<ul>
  <li>キーボードやマウスの入力は、通常、式の評価が完了するか<a href="_HotIfTimeout.htm">タイムアウト</a>するまでバッファリング（遅延）されます。</li>
  <li>式の評価は、スクリプトのメインスレッド（OSレベルで、<a href="../misc/Threads.htm">準スレッド</a>ではない）でしか行えず、キーボード/マウスフックで直接行うことはできません。FileCopyの実行中など、スクリプトがビジー状態や無反応の場合、式の評価が遅れ、タイムアウトすることがあります。</li>
  <li><a href="_HotIfTimeout.htm#LowLevelHooksTimeout">システムで定義されたタイムアウト</a>に達すると、キーボードやマウスの入力をスクリプトに通知しなくなる場合があります（詳細は#HotIfTimeoutを参照）。</li>
  <li>式の評価中にキー操作やマウスクリックを行うと（式が呼び出す関数からなど）、操作が複雑になる可能性があるため、避けてください。</li>
</ul>
<p><a href="../Hotkeys.htm#ThisHotkey">ThisHotkey</a>、<a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a>、<a href="../Variables.htm#TimeSinceThisHotkey">A_TimeSinceThisHotkey</a>は、現在の#HotIf式が評価されているホットキーに基づき設定されます。</p>
<p><a href="../Variables.htm#PriorHotkey">A_PriorHotkey</a>、<a href="../Variables.htm#TimeSincePriorHotkey">A_TimeSincePriorHotkey</a>は、対応する "This"変数の以前の値を一時的に保持します。</p>

<h2 id="optimization">最適化</h2>
<p><a href="WinActive.htm">WinActive</a>や <a href="WinExist.htm">WinExist</a>の単純な呼び出しに対して、#HotIfは式の評価を避けるように最適化されており、そのような場合に<a href="#lag">ラグ</a>などの問題が発生する<a href="#lag">リスク</a>を低減することができます。具体的：</p>
<ul>
  <li>この式には、<a href="WinExist.htm">WinExist</a>または<a href="WinActive.htm">WinActive</a>を正確に1回呼び出す必要があります。</li>
  <li>各パラメータは1つの引用符で囲まれた文字列でなければならず、2つ以上のパラメータを使用することはできない。</li>
  <li><code>not</code>や <code>!</code>で結果を反転させることができるが、それ以外の演算子は使用できない。</li>
  <li>空白と括弧は、式がプリコンパイルされるときに完全に処理されるため、この最適化に影響しません。</li>
</ul>
<p>これらの条件を満たす式は、プログラムによって直接評価され、<a href="ListLines.htm">ListLines</a>には表示されません。</p>
<p><a href="Hotkey.htm">Hotkey</a>関数を使用して既存のホットキーバリアントを変更する前に、通常、<a href="HotIf.htm">HotIf</a>関数を元の表現テキストで使用する必要があります。ただし、所定の条件の組み合わせを持つ最初のユニークな表現は、その条件によって参照することも可能です。事例：</p>
<pre>
HotIfWinExist "ahk_class Notepad"
Hotkey "#n", "Off"  <em>; ホットキーをオフにします。</em>
HotIf 'WinExist("ahk_class Notepad")'
Hotkey "#n", "On"   <em>; 同じホットキーを再びオンにします。</em>

#HotIf WinExist("ahk_class Notepad")
#n::WinActivate
</pre>
<p>なお、変数を使用した場合は、表現として失格となる。ホットキー作成後に変数の値が変化しない場合、ラグなど#HotIf特有の問題のリスクを最小化するための戦略が2つあります：</p>
<ul>
  <li><code class="no-highlight"><a href="HotIf.htm#IfWin">HotIfWin...</a> MyTitleVar</code>で条件を設定し、<code><a href="Hotkey.htm">Hotkey</a> KeyName, Label</code>でホットキーのバリアントを作成します。</li>
  <li>定数式は<code>#HotIf WinActive("ahk_group MyGroup")</code>のようにし、スクリプト内の別の場所で<code><a href="GroupAdd.htm">GroupAdd</a> "MyGroup", MyTitleVar</code>でウィンドウグループを定義します。</li>
</ul>

<h2 id="general-remarks">総論</h2>
<p>また、#HotIfは、適切な場合、プレフィックスキーを本来の機能に戻します（<a href="../Hotkeys.htm#prefix">プレフィックスキー</a>は、<code>a &amp; b</code>のようなホットキーの<kbd>A</kbd>です）。この現象は、指定したプリフィクスに対して有効なホットキーがない場合に発生します。</p>
<p>ホットキーが#HotIfによって現在無効になっている場合、そのキーまたはマウスボタンは、<a href="KeyHistory.htm">KeyHistory</a>の「タイプ」列に"#"文字で表示されます。This can help <a href="../Scripts.htm#debug">debug a script</a>.</p>
<p><a href="../Hotkeys.htm#alttab">Alt-tabのホットキー</a>は、#HotIfの影響を受けません：これらはすべてのウィンドウで有効です。</p>
<p><a href="../misc/WinTitle.htm#LastFoundWindow">Last Found Window</a>は、#HotIfで設定することができます。事例：</p>
<pre>#HotIf <a href="WinExist.htm">WinExist</a>("ahk_class Notepad")
#n::<a href="WinActivate.htm">WinActivate</a>  <em>; WinExist()で見つかったウィンドウをアクティブにします。</em></pre>

<h2 id="Related">関連</h2>
<p><a href="_HotIfTimeout.htm">#HotIfTimeoutを</a>使用すると、デフォルトのタイムアウト値をオーバーライドすることができます。</p>
<p><a href="Hotkey.htm">Hotkey関数</a>、<a href="../Hotkeys.htm">ホットキー</a>、<a href="../Hotstrings.htm">ホットストリング</a>、<a href="Suspend.htm">Suspend</a>、<a href="WinActive.htm">WinActive</a>、<a href="WinExist.htm">WinExist</a>、<a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>、<a href="DetectHiddenWindows.htm">DetectHiddenWindows</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> メモ帳がアクティブなときにのみ機能する2つのホットキーと1つのホットストリング、およびメモ帳以外のウィンドウで機能する1つのホットキーを作成します。</p>
<pre>#HotIf WinActive("ahk_class Notepad")
^!a::MsgBox "You pressed Ctrl-Alt-A while Notepad is active."
#c::MsgBox "You pressed Win-C while Notepad is active."
::btw::This replacement text for "btw" will occur only in Notepad.
#HotIf
#c::MsgBox "You pressed Win-C in a window other than Notepad."</pre>
</div>

<div class="ex" id="ExVolume">
<p><a class="ex_number" href="#ExVolume"></a> タスクバー上でマウスホイールをスクロールして音量を調整できるようにします。</p>
<pre>
#HotIf MouseIsOver("ahk_class Shell_TrayWnd")
WheelUp::Send "{Volume_Up}"
WheelDown::Send "{Volume_Down}"

MouseIsOver(WinTitle) {
    MouseGetPos ,, &amp;Win
    return WinExist(WinTitle " ahk_id " Win)
}
</pre>
</div>

<div class="ex" id="ExWordDelete">
<p><a class="ex_number" href="#ExWordDelete"></a> すべてのEditコントロールに、シンプルな単語削除ショートカットを搭載。</p>
<pre>
#HotIf ActiveControlIsOfClass("Edit")
^BS::Send "^+{Left}{Del}"
^Del::Send "^+{Right}{Del}"

ActiveControlIsOfClass(Cls) {
    FocusedControl := 0
    try FocusedControl := ControlGetFocus("A")
    FocusedControlClass := ""
    try FocusedControlClass := WinGetClass(FocusedControl)
    return (FocusedControlClass=Cls)
}
</pre>
</div>

<div class="ex" id="ExContextInsens">
<p><a class="ex_number" href="#ExContextInsens"></a> 文脈依存のホットキー。</p>
<pre>
#HotIf
Esc::ExitApp
</pre>
</div>

<div class="ex" id="ExDynamic">
<p><a class="ex_number" href="#ExDynamic"></a> Dynamic Hotkeys. この例は、実行する前に<a href="#ExVolume">例#2</a>との組み合わせが必要です。</p>
<pre>
NumpadAdd::
{
    static toggle := false
    HotIf 'MouseIsOver("ahk_class Shell_TrayWnd")'
    if (toggle := !toggle)
        Hotkey "WheelUp", DoubleUp
    else
        Hotkey "WheelUp", "WheelUp"
    return
    ; ネストされた機能：	
    DoubleUp(ThisHotkey) =&gt; Send("{Volume_Up 2}")
}
</pre>
</div>

</body>
</html>
