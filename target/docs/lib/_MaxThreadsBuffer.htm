<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>#MaxThreadsBuffer - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="#MaxThreadsBuffer指令は、いくつかの、またはすべてのホットキーが、#MaxThreadsPerHotkeyの制限に達した場合、キー入力を無視するのではなく、バッファリングするようにします。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#MaxThreadsBuffer</h1>

<p><a href="../Hotkeys.htm">ホットキー</a>の一部または全部が、<a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>の制限に達した場合、キー入力を無視するのではなく、バッファリングするようになります。</p>

<pre class="Syntax"><span class="func">#MaxThreadsBuffer</span> <span class="optional">Setting</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Setting</dt>
  <dd>
    <p>省略したときの初期設定は<em>True</em>になります。そうでないときは、次のいずれかのリテラル値を指定します：</p>
    <p><strong>True</strong> または <strong>1</strong>：ここから次の<code>#MaxThreadsBuffer False</code>指令までのすべてのホットキーサブルーチンは、そのサブルーチンが<a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>の限界に達したときに、ホットキーの押下を無視するのではなく、バッファリングします。</p>
    <p><strong>False</strong> または <strong>0</strong>：ホットキーがすでに最大スレッド数（通常は1ですが、<a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>で変更可能）を実行している場合は、ホットキーを押しても無視されます。</p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p>このディレクティブがスクリプトで指定されていないときは、<em>False</em>に設定されているとみなされます。</p>
<p>通常、この種のバッファリングは良いことよりも悪いことの方が多いので、このディレクティブが使われることはほとんどありません。例えば、誤ってホットキーを2回押してしまった場合、この設定をONにすると、そのホットキーのサブルーチンは、最初の<a href="../misc/Threads.htm">スレッド</a>が1秒未満で終了した場合、自動的に2回目を実行します（このタイプのバッファは、設計上1秒後に終了します）。なお、AutoHotkeyは他にもいくつかの方法でホットキーをバッファリングしています（<a href="Thread.htm#Interrupt">Thread Interrupt</a>や<a href="Critical.htm">Critical</a>など）。ただ、この特殊な方法は有害であるため、デフォルトでオフになっています。</p>
<p>このディレクティブの主な用途は、キーボードのオートリピート機能の応答性を高めることです。たとえば、<a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>の設定が1（デフォルト）のホットキーを押し続けているとき、そのホットキーサブルーチンがすでに実行されていると、キー入力は無視されます。そのため、サブルーチンが終了すると、次のオートリピートキー入力が来るのを待たなければならず、オートリピートサイクルのキー入力の間に挟まれるため、50&nbsp;ms以上かかる場合があります。この50&nbsp;msの遅延は、自動リピート中に最良の応答時間を必要とするホットキーに対してこのディレクティブを有効にすることで回避することができます。</p>
<p>他の#ディレクティブと同様に、このディレクティブもスクリプト内で関数であるかのように位置づけるべきではありません（つまり、サブルーチンの中に含ませる必要はありません）。代わりに、その影響を受けさせたい最初のホットキーの直前に配置します。</p>
<p>他のディレクティブと同様に、#MaxThreadsBufferは条件付きで実行することはできません。</p>
<h2 id="Related">関連</h2>
<p><a href="_MaxThreads.htm">#MaxThreads</a>、<a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>、<a href="Critical.htm">Critical</a>、<a href="Thread.htm">Thread（関数）</a>、<a href="../misc/Threads.htm">スレッド</a>、<a href="Hotkey.htm">Hotkey</a>、<a href="A_MaxHotkeysPerInterval.htm">A_MaxHotkeysPerInterval</a>、<a href="ListHotkeys.htm">ListHotkeys</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 最初の2つのホットキーが#MaxThreadsPerHotkeyの制限に達した場合、キー入力を無視するのではなく、バッファリングするようにします。</p>
<pre>#MaxThreadsBuffer True
#x::MsgBox "This hotkey will use this type of buffering."
#y::MsgBox "And this one too."
#MaxThreadsBuffer False
#z::MsgBox "But not this one."</pre>
</div>

</body>
</html>
