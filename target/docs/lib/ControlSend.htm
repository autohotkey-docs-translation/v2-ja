<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>ControlSend / ControlSendText - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="ControlSendおよびControlSendText関数は、シミュレーションされたキーストロークまたはテキストをウィンドウまたはコントロールに送信します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ControlSend / ControlSendText</h1>

<p>キーストロークやテキストをシミュレーションして、ウィンドウやコントロールに送信します。</p>

<pre class="Syntax"><span class="func">ControlSend</span> Keys <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span>
<span class="func">ControlSendText</span> Keys <span class="optional">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Keys</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>送信するキーの並び（詳しくは<a href="Send.htm">送信</a>機能をご覧ください）。文字の送信速度は<a href="SetKeyDelay.htm">SetKeyDelay</a>で決定されます。</p>
    <p><a href="Send.htm">Send</a>機能とは異なり、ControlSendではマウスクリックを送信することはできません。その際は<a href="ControlClick.htm">ControlClick</a>を使用してください。</p>
  </dd>

  <dt>Control</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a>, <a href="../Concepts.htm#numbers">Integer</a> or <a href="../Concepts.htm#objects">Object</a></p>
    <p>If omitted, the keystrokes will be sent directly to the target window instead of one of its controls (see <a href="../misc/Winamp.htm">Automating Winamp</a> for an example). Otherwise, specify the control's ClassNN, text or HWND, or an object with a <code>Hwnd</code> property. For details, see <a href="Control.htm#Parameter">The Control Parameter</a>.</p>
  </dd>

  <dt>WinTitle、WinText、ExcludeTitle、ExcludeText</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a>, <a href="../Concepts.htm#numbers">Integer</a> or <a href="../Concepts.htm#objects">Object</a></p>
    <p>もしこれらの項目が未設定または省略されたときは、<a href="../misc/WinTitle.htm#LastFoundWindow">最後に見つかったウィンドウ</a>が使用されます。そうでないときは、<em>WinTitle</em>に <a href="../misc/WinTitle.htm">ウィンドウタイトルまたはターゲットウィンドウを識別するための他の基準</a>、および/または<em>WinText</em>にターゲットウィンドウの単一のテキスト要素からの部分文字列（付属のWindow Spyユーティリティを使えばわかります）を指定します。</p>
    <p><em>ExcludeTitle</em>と<em>ExcludeText</em>はウィンドウのタイトルまたはテキストで除外するために使用します。指定の仕方は<em>WinTitle</em>と<em>WinText</em>に似ていますが、<em>ExcludeTitle</em>はウィンドウのタイトル以外の基準（ウィンドウクラスやHWNDなど）を認識しません。</p>
    <p>ウィンドウのタイトルとテキストは大文字と小文字を区別します。<a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>関数 と <a href="DetectHiddenText.htm">DetectHiddenText</a>関数で変更しない限り、初期設定では非表示ウィンドウは検出されず、非表示テキストは検出されます。<a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>関数で変更しない限り、初期設定ではウィンドウのタイトルはその中のどこかに<em>WinTitle</em>または<em>ExcludeTitle</em>を含んでいれば一致します。</p>
  </dd>

</dl>

<h2 id="Error_Handling">エラー処理</h2>
<p>ウィンドウまたはコントロールが見つからないときは、<a href="Error.htm#TargetError">TargetError</a>がスローされます。</p>

<h2 id="Remarks">備考</h2>
<p>ControlSendTextは、<code>{Enter}を</code> <kbd>Enter</kbd>、<code>^cを</code> <kbd>Ctrl</kbd>+<kbd>C</kbd>などに</kbd>変換せずに、<em>Keys</em>パラメータの各文字を送信します。詳しくは、「<a href="Send.htm#SendText">テキストモード</a>」をご覧ください。ControlSendで<a href="Send.htm#Raw">{Raw}や</a> <a href="Send.htm#Text">{Text}を</a>使用することも有効です。</p>
<p><em>Control</em>パラメータが省略された場合、この関数はターゲットウィンドウの最上位にあるコントロール（正しいコントロールであることが多い）、またはコントロールがない場合はウィンドウ自体に送信することで、直接送信しようとします。これは、ウィンドウにコントロールが全くないように見える場合、またはどのコントロールに送信するかを気にする必要がない便利な機能です。</p>
<p>デフォルトでは、修飾キー操作（Ctrl、Alt、Shift、Win）は、Send機能によって通常と同じように送信されます。これにより、コマンドプロンプトなどのコンソールウィンドウで、大文字や制御文字などを適切に検出することができます。また、それ以外の方法で信頼性を向上させることもあります。</p>
<p>特に、ControlSend中にユーザーが積極的にタイピングしている場合や、<kbd>Alt</kbd>が送信されている場合（<kbd>Alt</kbd>はアクティブウィンドウのメニューバーをアクティブにするため）には、これらの修飾子イベントがアクティブウィンドウに干渉する場合があります。これは、この例のように、モディファイアのアップとダウンのイベントを明示的に送信することで回避することができます。</p>
<pre>ControlSend "{Alt down}f{Alt up}", "Edit1", "Untitled - Notepad".</pre>
<p>上記の方法では、ワークステーションがロックされている（ログオンプロンプトで保護されている）状態でも、修飾キーストローク（Ctrl、Alt、Shift、Win）を送信することができます。</p>
<p>コマンドプロンプトなどのコンソールウィンドウに対してControlSendを使用する場合は、<a href="BlockInput.htm">BlockInput</a>を使用しないようにしてください。大文字や<kbd>Ctrl</kbd>などの修飾キーが正しく機能しなくなる可能性があるためです。</p>
<p><a href="SetKeyDelay.htm">SetKeyDelay</a>の値によって、キーが送信される速度が決まります。ターゲットウィンドウが確実にキー入力を受け取れない場合は、以下の例のように<a href="SetKeyDelay.htm">SetKeyDelay</a>の第2パラメータで押下時間を長くしてみてください。</p>
<pre>SetKeyDelay 10, 10
SetKeyDelay 0, 10
SetKeyDelay -1, 0</pre>
<p>ターゲットコントロールがEditコントロール（またはそれに類するもの）である場合、通常ControlSendよりも以下の方が信頼性が高く高速です。</p>
<pre><a href="EditPaste.htm">EditPaste</a>("This text will be inserted at the caret position.", ControlName, WinTitle)</pre>
<pre><a href="ControlSetText.htm">ControlSetText</a>("This text will entirely replace any current text.", ControlName, WinTitle)</pre>
<p>ControlSendは、一般的にウィンドウのメニューバーを操作することはできません。これを回避するためには、<a href="MenuSelect.htm">MenuSelectを</a>使用します。メニューバーの性質上、それが不可能な場合は、<a href="../misc/SendMessage.htm">SendMessage Tutorial</a>に従って、目的のメニュー項目に対応するメッセージを発見することを試みることができます。</p>

<h2 id="Related">関連</h2>
<p><a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="../misc/EscapeChar.htm">Escape sequences (e.g. `n) </a>, <a href="Control.htm">Control functions</a>, <a href="Send.htm">Send</a>, <a href="../misc/Winamp.htm">Automating Winamp</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExNotepad">
<p><a class="ex_number" href="#ExNotepad"></a> メモ帳を最小化して開き、テキストを送信します。この例は、Windows 11以降では、クラシック版のメモ帳を必要とするため、失敗する可能性があります。</p>
<pre>Run "Notepad",, "Min", &amp;PID  <em>; Run Notepad minimized.</em>
WinWait "ahk_pid " PID  <em>; Wait for it to appear.</em>
<em>; Send the text to the inactive Notepad edit control.
; The third parameter is omitted so the last found window is used.</em>
ControlSend "This is a line of text in the notepad window.{Enter}", "Edit1"
ControlSendText "Notice that {Enter} is not sent as an Enter keystroke with ControlSendText.", "Edit1"

Msgbox "Press OK to activate the window to see the result."
WinActivate "ahk_pid " PID  <em>; Show the result.</em></pre>
</div>

<div class="ex" id="ExCmd">
<p><a class="ex_number" href="#ExCmd"></a> コマンドプロンプトを開き、テキストを送信します。この例は、Windows 11以降では、コマンドプロンプトのクラシックバージョンを必要とするため、失敗する可能性があります。</p>
<pre>SetTitleMatchMode 2
Run A_ComSpec,,, &amp;PID  <em>; Run command prompt.</em>
WinWait "ahk_pid " PID  <em>; Wait for it to appear.</em>
ControlSend "ipconfig{Enter}",, "cmd.exe"  <em>; Send directly to the command prompt window.</em></pre>
</div>
<div class="ex" id="ExGUI">
<p><a class="ex_number" href="#ExGUI"></a> エディットコントロールを持つ<a href="Gui.htm">GUIを</a>作成し、テキストを送信します。</p>
<pre>MyGui := Gui()
MyGui.Add("Edit", "r10 w500")
MyGui.Show()
ControlSend "This is a line of text in the edit control.{Enter}", "Edit1", MyGui
ControlSendText "Notice that {Enter} is not sent as an Enter keystroke with ControlSendText.", "Edit1", MyGui
</pre>
</div>

</body>
</html>
