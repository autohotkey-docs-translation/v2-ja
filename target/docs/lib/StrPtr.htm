<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>StrPtr - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="StrPtr関数は、文字列の現在のメモリー・アドレスを返す。" />
<meta name="ahk:equiv-v1" content="Variables.htm#amp" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StrPtr</h1>
<p>文字列の現在のメモリアドレスを返します。</p>
<pre class="Syntax">Address := <span class="func">StrPtr</span>(Value)</pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>値</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
	</dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#numbers">整数</a></p>
<p>この関数は、<em>Value</em>の現在のメモリアドレスを返す。</p>

<h2 id="Remarks">備考</h2>
<p>アドレスの寿命と、そのアドレスに対してどの操作が有効かは、<em>Value</em>がこの関数にどのように渡されたかに依存する。以下のコード例に示すように、3つのケースがある。In all cases, if the string will <u>not</u> be modified, the return value can be passed <em>directly</em> to a <a href="DllCall.htm">DllCall</a> function or <a href="SendMessage.htm">SendMessage</a>.</p>
<pre>Ptr := StrPtr(MyVar)</pre>
<p><em>Value</em>が <code>MyVar</code>のような変数参照（組み込み変数ではない）の場合、戻り値はその変数の内部文字列バッファのメモリアドレスとなる。<code><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>(&amp;MyVar)</code>は、終端のヌル文字を除いたバッファのサイズを<strong>文字数</strong>で返します。</p>
<p>このアドレスは、変数が解放される<em>のみ</em>か、<a href="../Variables.htm#AssignOp">代入演算子</a>によって再代入されるか、組み込み関数に渡されるまで有効であるとみなされるべきである。ローカル変数は自動的に解放されるため、関数の<a href="../Functions.htm#Local">ローカル</a>変数の内容のアドレスは、関数が戻った後は無効となる。</p>
<p>このアドレスは、<a href="DllCall.htm#struct">構造体</a>や他の変数に格納し、<a href="DllCall.htm">DllCall</a>や <a href="SendMessage.htm">SendMessage</a>に間接的に渡したり、他の方法で使用したりすることができる。</p>
<p>スクリプトは、<a href="NumPut.htm">NumPut</a>、<a href="DllCall.htm">DllCall</a>、または<a href="SendMessage.htm">SendMessage</a>にアドレスを渡すことで、間接的に文字列の値を変更することができる。If the length of the string is changed this way, the variable's internal length property must be updated by calling <code><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>(&amp;MyVar, -1)</code>.</p>
<pre>Ptr := StrPtr("literal string")</pre>
<p>リテラル文字列のアドレスは、プログラムが終了するまで有効である。スクリプトは文字列を変更しようとしてはならない。このアドレスは、<a href="DllCall.htm#struct">構造体</a>や他の変数に格納し、<a href="DllCall.htm">DllCall</a>や <a href="SendMessage.htm">SendMessage</a>に間接的に渡したり、他の方法で使用することができる。</p>
<pre>SendMessage 0x000C, 0, StrPtr(A_ScriptName " changed this title"),, "A"</pre>
<p>一時文字列のアドレスは、式全体または関数呼び出し文の評価が完了するまでのみ有効で、それ以降は使用してはならない。上の例では、アドレスはSendMessageが戻るまで有効である。以下はすべて、一時的な文字列が得られる：</p>
<ul>
  <li>連結。</li>
  <li><a href="../Variables.htm#ScriptName">A_ScriptName</a>のような組み込み変数。</li>
  <li>文字列を返す関数。</li>
  <li>オブジェクト、配列要素、マップ要素のプロパティへのアクセス。</li>
</ul>
<p>上記で明示的にカバーされていない場合、文字列は一時的なものだと考えて差し支えない。</p>

<h2 id="Related">関連</h2>
<p><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>, <a href="DllCall.htm">DllCall</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="Buffer.htm">Buffer object</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>


</body>
</html>
