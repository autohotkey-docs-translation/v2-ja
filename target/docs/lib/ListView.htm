<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>ListView (GUI) - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="リストビューコントロールは、行と列の表形式を表示するものである。このページでは、その修正方法をご紹介します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>ListView</h1>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#Intro">導入と簡単な例</a></li>
  <li><a href="#Options">Optionsパラメータのオプションとスタイル</a></li>
  <li><a href="#View">View Modes</a>:Report（デフォルト）、Icon、Tile、IconSmall、List。</li>
  <li><a href="#BuiltIn">ListViewの組み込みメソッド</a></li>
  <li><a href="#Events">イベント情報</a></li>
  <li><a href="#IL">ImageLists</a>（ListViewにアイコンを追加する手段）。</li>
  <li><a href="#Remarks">備考</a></li>
  <li><a href="#Examples">例</a></li>
</ul>
<h2 id="Intro">導入と簡単な例</h2>
<p>リストビューは、オペレーティングシステムが提供する最も精巧なコントロールの1つです。最も分かりやすい形としては、行と列の表形式で表示され、最も一般的な例としては、エクスプローラーのファイルやフォルダのリスト（詳細表示）があります。</p>
<p>ListViewは通常このような形をしています：</p>
<img src="../static/ctrl_listview.png" alt="ListView" />
<p>凝った作りになっていますが、ListViewの基本的な機能は簡単に使うことができます。ListViewを作成するための構文です：</p>
<pre class="Syntax" id="GuiAdd">LV := GuiObj.<span class="func">Add</span>("ListView", Options, ["ColumnTitle1","ColumnTitle2","..."])</pre>
<p>あるいは：</p>
<pre class="Syntax">LV := GuiObj.<span class="func">AddListView</span>(Options, ["ColumnTitle1","ColumnTitle2","..."])</pre>
<p>ここでは、ユーザーの「My Documents」フォルダ内のファイルのリストを含むListViewを作成し、表示するスクリプトを紹介します：</p>
<pre><em>; ウィンドウを作成します：</em>
MyGui := Gui()

<em>; NameとSizeの2つのカラムを持つListViewを作成します：</em>
LV := MyGui.Add("ListView", "r20 w700", ["Name","Size (KB)"])

<em>; ユーザーが行をダブルクリックするたびに、スクリプトに通知する：</em>
LV.OnEvent("DoubleClick", LV_DoubleClick)

<em>; フォルダからファイル名のリストを集め、ListViewに入れる：</em>
Loop Files, A_MyDocuments "\*.*"
    <a href="#Add">LV.Add</a>(, A_LoopFileName, A_LoopFileSizeKB)

<a href="#ModifyCol">LV.ModifyCol</a>  <em>; Auto-size each column to fit its contents.</em>
LV.ModifyCol(2, "Integer")  <em>; For sorting purposes, indicate that column 2 is an integer.</em>

<em>; Display the window:</em>
MyGui.Show

LV_DoubleClick(LV, RowNumber)
{
    RowText := <a href="#GetText">LV.GetText</a>(RowNumber)  <em>; Get the text from the row's first field.</em>
    ToolTip("You double-clicked row number " RowNumber ". Text:'" RowText "'")
}</pre>
<h2 id="Options">Optionsパラメータのオプションとスタイル</h2>
<p><strong>Background:</strong> Specify the word <em>Background</em> followed immediately by a color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value (the 0x prefix is optional). 例：<code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. このオプションがない場合、ListViewの初期値はシステムのデフォルトの背景色になります。Specifying <code>BackgroundDefault</code> or <code>-Background</code> applies the system's default background color (usually white). For example, a ListView can be restored to the default color via <code>LV.Opt("+BackgroundDefault")</code>.</p>
<p><strong>C:</strong> Text color. 文字Cの直後に、色名（<a href="../misc/Colors.htm">カラーチャート</a>参照）またはRGB値（接頭辞0xは任意）を指定します。例：<code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>チェック付き：</strong>各行の左側にチェックボックスを提供します。行を<a href="#Add">追加</a>する際、そのオプションに<em>Check</em>という単語を指定すると、スタートするボックスがチェックされていない状態ではなく、チェックされた状態になります。ユーザーは、チェックボックスをクリックするか、スペースバーを押して、行のチェックを入れたり外したりすることができます。</p>
<p id="Count"><strong>Count:</strong> Specify the word <em>Count</em> followed immediately by the total number of rows that the ListView will ultimately contain. これは制限ではありません：を超える行を追加することができます。その代わり、このオプションはコントロールへのヒントとして機能し、行を追加するたびにメモリを確保するのではなく、一度だけメモリを確保することができます。To improve performance even more, use <code>LV.Opt("-Redraw")</code> prior to adding a large number of rows and <code>LV.Opt("+Redraw")</code> afterward. See <a href="GuiControl.htm#redraw-remarks">Redraw</a> for more details.</p>
<p><strong>グリッド（Grid）：</strong>行と列の境界を視覚的に示すための水平線と垂直線を提供します。</p>
<p><strong>Hdr：</strong>ヘッダー（列のタイトルを含む特別な最上段）を省略する場合は、<code>-Hdr</code>（マイナスHdr）を指定します。後から見えるようにするには、<code>LV.Opt("+Hdr")</code>を使用します。</p>
<p id="LVS_EX"><strong>LV:</strong> Specify the string <em>LV</em> followed immediately by the number of an <a href="../misc/Styles.htm#LVS_EX">extended ListView style</a>. これらのスタイルは、一般的な拡張スタイルとは全く別のものです。For example, specifying <code>-E0x200</code> would remove the generic extended style WS_EX_CLIENTEDGE to eliminate the control's default border. By contrast, specifying <code>-LV0x20</code> would remove <a href="#frs">LVS_EX_FULLROWSELECT</a>.</p>
<p><strong>LV0x10:</strong> Specify <code>-LV0x10</code> to prevent the user from dragging column headers to the left or right to reorder them. しかし、列の物理的な並び替えは、スクリプトが見る列の順序に影響を与えないので、通常はこれを行う必要はありません。例えば、ユーザーが物理的に他の列の右に移動させたとしても、スクリプトから見て最初の列は常に列1です。</p>
<p id="frs"><strong>LV0x20:</strong> Specify <code>-LV0x20</code> to require that a row be clicked at its first field to select it (normally, a click on <em>any</em> field will select it). この利点は、ユーザーが行のグループを選択するために矩形をドラッグすることが容易になることです。</p>
<p><strong>Multi:</strong> <code>-Multi</code>(minus Multi)を指定すると、一度に複数の行を選択できないようにすることができます。</p>
<p id="NoSortHdr"><strong>NoSortHdr：</strong>ヘッダーがクリックできないようにする。通常のボタンのような外観ではなく、平らな外観になります。他の多くのListViewスタイルと異なり、このスタイルはListViewの作成後に変更することができない。</p>
<p id="NoSort"><strong>NoSort：</strong>ユーザーがカラムヘッダをクリックしたときに発生する自動ソートをオフにします。However, the header will still behave visually like a button (unless the <a href="#NoSortHdr">NoSortHdr</a> option above has been specified). In addition, the <a href="GuiOnEvent.htm#ColClick">ColClick</a> event is still raised, so the script can respond with a custom sort or other action.</p>
<p id="ReadOnly"><strong>ReadOnly：</strong>を指定します。各行の1列目のテキストの編集を許可する場合は、<code>-ReadOnly</code>（マイナスリードオンリー）を指定します。行を編集するには、行を選択してから<kbd>F2</kbd>キーを押します（下記の<a href="#WantF2">WantF2</a>オプションを参照してください）。また、行を一度クリックして選択し、半秒以上待ってから同じ行をもう一度クリックすると、編集することができます。</p>
<p><strong>R:</strong> Rows of height (upon creation). Rの文字の後に、コントロール内のスペースを確保するための行数を指定します。例えば、<code>R10</code>とすると、コントロールは10列の高さになります。レポートビュー以外の<a href="#View">ビューモード</a>でListViewを作成した場合、コントロールはテキストの列ではなく、アイコンの列に合うようにサイズ調整されます。注：ListViewの行に<a href="#IL">アイコン</a>を追加すると、各行の高さが高くなるため、このオプションは不正確となります。</p>
<p id="Sort"><strong>ソート：</strong>コントロールは、最初のカラムの内容に従ってアルファベット順にソートされた状態で保持されます。</p>
<p id="SortDesc"><strong>SortDesc:</strong>降順以外は上記と同じ。</p>
<p id="WantF2"><strong>WantF2:</strong> Specify <code>-WantF2</code> (minus WantF2) to prevent <kbd>F2</kbd> from <a href="#ReadOnly">editing</a> the currently focused row. This setting is ignored unless <a href="#ReadOnly">-ReadOnly</a> is also in effect.</p>
<p><strong>(無名数字スタイル）：</strong>上記以外のスタイルはほとんど使用されないため、名称を付けない。一覧は<a href="../misc/Styles.htm#ListView">ListViewのスタイルの表</a>を参照してください。</p>
<h2 id="View">View Modes</h2>
<p>ListViewには5つの表示モードがあり、その中で最も一般的なのはレポートビュー（これがデフォルト）です。他のビューを使用する場合は、オプションリストでその名前を指定します。また、ビューはコントロール作成後に変更することも可能です：<code>LV.Opt("+IconSmall")</code>.</p>
<p><strong>アイコン：</strong>大きなアイコンで表示されます。このビューおよび<em>レポート</em>以外のビューでは、最初の列以外の列のテキストは表示されません。このモードでアイコンを表示するには、ListViewに大きなアイコンの<a href="#IL">ImageListが割り当てられて</a>いる必要があります。</p>
<p><strong>Tile:</strong> Shows a large-icon view but with ergonomic differences such as displaying each item's text to the right of the icon rather than underneath it. このビューでは、<a href="#Checked">チェックボックス</a>は機能しません。</p>
<p><strong>IconSmall：</strong>小さなアイコンで表示します。</p>
<p><strong>一覧表示：</strong>アイコンを列挙して表示するリスト形式のスモールアイコンビューを表示します。列の数は、コントロールの幅と、その中で最も幅の広いテキストアイテムの幅に依存します。</p>
<p><strong>レポート</strong>初期設定のレポートビューに切り替わります。事例：<code>LV.Opt("+Report")</code>.</p>
<h2 id="BuiltIn">ListViewの組み込みメソッド</h2>
<p><a href="GuiControl.htm">GUIコントロールのデフォルトのメソッド/プロパティに加えて</a>、ListViewコントロールは以下のメソッドを持ちます（Gui.ListViewクラスで定義）。</p>
<p id="RowNumber">本ページで「行番号」と表記しているのは、ListView内の行の現在位置のことです。一番上の列が1、2番目の列が2、といった具合です。行が追加された後、他の行のソート、削除、挿入により、その行番号は変化する傾向があります。そのため、特定の行を内容から探すには、通常、ループ内で<a href="#GetText">GetTextメソッド</a>を使用するのが最適です。</p>
<p><strong>列の方法：</strong></p>
<ul>
  <li><a href="#Add">Add</a>:リストの一番下に新しい行を追加します。</li>
  <li><a href="#Insert">Insert</a>:指定された行番号に新しい行を挿入する。</li>
  <li><a href="#Modify">Modify</a>:行の属性やテキストを変更する。</li>
  <li><a href="#Delete">Delete</a>:指定された行またはすべての行を削除する。</li>
</ul>
<p><strong>Column methods:</strong></p>
<ul>
  <li><a href="#ModifyCol">ModifyCol</a>:指定されたカラムとそのヘッダーの属性とテキストを変更します。</li>
  <li><a href="#InsertCol">InsertCol</a>:指定されたカラム番号に新しいカラムを挿入します。</li>
  <li><a href="#DeleteCol">DeleteCol</a>:指定された列とその下にあるすべてのコンテンツを削除する。</li>
</ul>
<p><strong>Retrieval methods:</strong></p>
<ul>
  <li><a href="#GetCount">GetCount</a>:行または列の合計数を返します。</li>
  <li><a href="#GetNext">GetNext</a>:次に選択、チェック、またはフォーカスされた行の行番号を返します。</li>
  <li><a href="#GetText">GetText</a>:指定された行と列のテキストを取得する。</li>
</ul>
<p><strong>Other methods:</strong></p>
<ul>
  <li><a href="#SetImageList">SetImageList</a>:アイコンを表示するための ImageList を設定または置き換える。</li>
</ul>

  <div class="methodShort" id="Add">
    <h3>Add</h3>
    <p>リストの一番下に新しい行を追加し、新しい<a href="#RowNumber">行番号</a>を返します。この行番号は、ListViewが<a href="#Sort">Sort</a>または<a href="#SortDesc">SortDesc</a>スタイルを持つ場合、必ずしも最後の行とは限りません。</p>
    <pre class="Syntax">NewRowNumber := LV.<span class="func">Add</span>(<span class="optional">Options, Col1, Col2, ...</span>)</pre>
    <dl>
      <dt id="RowOptions">Options</dt>
      <dd>
<p>型：<a href="../Concepts.htm#strings">文字列</a></p>
<p>A string containing zero or more options from the list below (not case-sensitive). Separate each option from the next with a space or tab. オプションを削除する場合は、オプションの前にマイナス記号を付けます。オプションを追加する場合は、プラス記号を使用することができますが、必須ではありません。</p>
<p id="Check"><strong>Check:</strong> Shows a checkmark in the row (if the ListView has <a href="#Checked">checkboxes</a>). 後でチェックを外すには、<code>LV.Modify(RowNumber, "-Check")</code>を使用します。</p>
<p id="ColN"><strong>Col:</strong> Specify the word <em>Col</em> followed immediately by the column number at which to begin applying the parameters <em>Col1</em> and beyond. This is most commonly used with the <a href="#Modify">Modify method</a> to alter individual fields in a row without affecting those that lie to their left.</p>
<p id="Focus"><strong>Focus:</strong> Sets keyboard focus to the row (often used in conjunction with the <a href="#Select">Select</a> option below). To later de-focus it, use <code>LV.Modify(RowNumber, "-Focus")</code>.</p>
<p><strong>Icon:</strong> Specify the word <em>Icon</em> followed immediately by the number of this row's icon, which is displayed in the left side of the first column. If this option is absent, the first icon in the <a href="#IL">ImageList</a> is used. 空白のアイコンを表示する場合は、-1またはImageListのアイコンの数より大きい数を指定する。If the control lacks a small-icon ImageList, no icon is displayed nor is any space reserved for one in <a href="#View">report view</a>.</p>
<p>このオプションは1ベースのアイコン番号を受け付けるが、これは内部的に0ベースのインデックスに変換される。したがって、<code>アイコン0</code>は定数<a href="https://learn.microsoft.com/windows/win32/controls/list-view-controls-overview#callback-items-and-the-callback-mask">I_IMAGECALLBACK</a>（通常は-1として定義される）に対応し、<code class="no-highlight">アイコン-1</code>はI_IMAGENONEに対応する。その他の範囲外の値でも、アイコンがあるはずの場所に空白ができることがあります。</p>
<p id="Select"><strong>Select:</strong> Selects the row. 後で選択を解除するには、<code>LV.Modify(RowNumber, "-Select")</code>を使用します。行を選択する場合、少なくとも1つの行が常に<a href="#Focus">フォーカス</a>を持つようにしておくと、Appsキーがフォーカスを持つ行の近くに<a href="GuiOnEvent.htm#ContextMenu">コンテキストメニュー</a>を表示できるようになるからです。<em>Select</em>の後に、オプションとして、開始状態を示す0または1が続く場合がある。つまり、<code>"Select"</code>も<code>"Select"<strong>.</strong>VarContainingOne</code>は同じです（ここで使われているピリオドは<a href="../Variables.htm#concat">連結演算子</a>です）。This technique also works with the <a href="#Focus">Focus</a> and <a href="#Check">Check</a> options above.</p>
<p id="Vis"><strong>Vis:</strong> Ensures that the specified row is completely visible by scrolling the ListView, if necessary. これはLV.Modifyにのみ効果があり、例えば以下のようなものがあります：<code>LV.Modify(RowNumber, "Vis")</code>.</p>
      </dd>
      <dt>Col1, Col2, ...</dt>
      <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>新しい行の列で、テキストまたは数値（数値<a href="../Variables.htm#Expressions">式</a>の結果を含む）を指定することができます。To make any field blank, specify <code>""</code> or the equivalent. フィールドが少なすぎてすべての列を埋めることができない場合、末尾の列は空白になります。フィールドが多すぎる場合、末尾のフィールドは完全に無視されます。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Insert">
    <h3>Insert</h3>
    <p>指定された行番号に新しい行を挿入し、その新しい<a href="#RowNumber">行</a>番号を返す。</p>
    <pre class="Syntax">NewRowNumber := LV.<span class="func">Insert</span>(RowNumber <span class="optional">, Options, Col1, Col2, ...</span>)</pre>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>新たに挿入された行の行番号。<em>RowNumber</em>以下の行は、新しい行のためのスペースを確保するために下方にシフトされます。<em>RowNumberが</em>リストの行数より大きい場合（2147483647でも）、新しい行はリストの末尾に追加されます。</p>
      </dd>
      <dt>Options</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>See <a href="#RowOptions">row options</a>.</p>
      </dd>
      <dt>Col1, Col2, ...</dt>
      <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>新しい行の列で、テキストまたは数値（数値<a href="../Variables.htm#Expressions">式</a>の結果を含む）を指定することができます。任意のフィールドを空白にする場合は、""または同等のものを指定します。フィールドが少なすぎてすべての列を埋めることができない場合、末尾の列は空白になります。フィールドが多すぎる場合、末尾のフィールドは完全に無視されます。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Modify">
    <h3>Modify</h3>
    <p>行の属性やテキストを変更する。</p>
    <pre class="Syntax">LV.<span class="func">Modify</span>(RowNumber <span class="optional">, Options, NewCol1, NewCol2, ...</span>)</pre>
    <p>注：最初の2つのパラメータのみが存在する場合、行の属性のみが変更され、テキストは変更されない。</p>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>修正する行を指定します。<em>RowNumber</em>が 0 の場合、コントロール内の<u>すべて</u>の行が変更される（この場合、戻り値は完全な成功で 1、操作の一部が失敗した場合は 0 となる）。</p>
      </dd>
      <dt>Options</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p><a href="#ColN">ColNオプション</a>は、他の列に影響を与えずに特定の列を更新するために使用することができます。その他のオプションについては、「<a href="#RowOptions">行のオプション</a>」を参照してください。</p>
      </dd>
      <dt>NewCol1, NewCol2, ...</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>指定された行の新しい列。テキストまたは数値（数値<a href="../Variables.htm#Expressions">式</a>の結果を含む）を指定することができる。任意のフィールドを空白にする場合は、""または同等のものを指定します。パラメータが少なすぎてすべての列をカバーできない場合、末尾の列は変更されません。フィールドが多すぎる場合、末尾のフィールドは完全に無視されます。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="Delete">
    <h3>Delete</h3>
    <p>指定された行またはすべての行を削除する。</p>
    <pre class="Syntax">LV.<span class="func">Delete</span>(<span class="optional">RowNumber</span>)</pre>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>削除する行を指定します。If this parameter is omitted, <u>all</u> rows in the ListView are deleted.</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="ModifyCol">
    <h3>ModifyCol</h3>
    <p>指定されたカラムとそのヘッダーの属性とテキストを変更します。</p>
    <pre class="Syntax">LV.<span class="func">ModifyCol</span>(<span class="optional">ColumnNumber, Options, ColumnTitle</span>)</pre>
    <p>注：すべてのパラメータが省略された場合、各列の幅は行の内容に合うように調整されます。第1パラメータのみが存在する場合、指定されたカラムのみがオートサイズ化されます。Auto-sizing has no effect when not in <a href="#View">Report (Details) view</a>.</p>
    <dl>
      <dt>ColumnNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>修正する列です。1列目は1（0ではない）です。</p>
      </dd>
      <dt id="ColOptions">Options</dt>
      <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>A string containing zero or more options from the list below (not case-sensitive). Separate each option from the next with a space or tab. オプションを削除する場合は、オプションの前にマイナス記号を付けます。オプションを追加する場合は、プラス記号を使用することができますが、必須ではありません。</p>
    <hr>
    <p><strong><em>一般的なオプションです：</em></strong></p>
    <p><strong>N:</strong> Specify for <em>N</em> the new width of the column, in pixels. この数字は、唯一の選択肢であるならば、引用されないことも可能です。例えば、以下はどちらも有効です：<code>LV.ModifyCol(1, 50)</code> and <code>LV.ModifyCol(1, "50 Integer")</code>.</p>
    <p><strong>Auto:</strong> Adjusts the column's width to fit its contents. This has no effect when not in <a href="#View">Report (Details) view</a>.</p>
    <p><strong>AutoHdr:</strong> Adjusts the column's width to fit its contents and the column's header text, whichever is wider. 最後のカラムに適用すると、ListViewの残りのスペースと同じ幅になるようにします。この設定は、行が追加された後に適用するのが一般的です。そうすることで、新たに到着した垂直スクロールバーを考慮して、最後の列のサイズを設定することができるからです。This option has no effect when not in <a href="#View">Report (Details) view</a>.</p>
    <p><strong>Icon:</strong> Specify the word <em>Icon</em> followed immediately by the number of the <a href="#IL">ImageList</a>'s icon to display next to the column header's text. Specify <code>-Icon</code> (minus icon) to remove any existing icon.</p>
    <p><strong>IconRight:</strong> Puts the icon on the right side of the column rather than the left.</p>
    <hr>
    <p><strong><em>データ型オプション：</em></strong></p>
    <p><strong>Float:</strong> For sorting purposes, indicates that this column contains floating point numbers (hexadecimal format is not supported). FloatとTextカラムのソート性能は、整数の場合と比べて最大25倍遅くなります。</p>
    <p id="Integer"><strong>Integer:</strong> For sorting purposes, indicates that this column contains integers. 正しくソートするためには、各整数は32ビット、つまり-2147483648から2147483647の範囲内でなければなりません。値のいずれかが整数でない場合、ソート時にゼロとみなされます（ただし、数値で始まる場合は、その数値が使用されます）。数値は10進数または16進数（例：<code>0xF9E0</code>）で表示することができます。</p>
    <p id="Text"><strong>Text:</strong> Changes the column back to text-mode sorting, which is the initial default for every column. Only the first 8190 characters of text are significant for sorting purposes (except for the <a href="#Logical">Logical</a> option, in which case the limit is 4094).</p>
    <hr>
    <p><strong><em>アライメントオプションです：</em></strong></p>
    <p><strong>Center:</strong> Centers the text in the column. To center an Integer or Float column, specify the word <em>Center</em> after the word <em>Integer</em> or <em>Float</em>.</p>
    <p><strong>Left:</strong> Left-aligns the column's text, which is the initial default for every column. 古いOSでは、1列目が強制的に左寄せになる場合があります。</p>
    <p><strong>Right:</strong> Right-aligns the column's text. IntegerおよびFloatカラムはデフォルトで右寄せになっているため、この属性を指定する必要はありません。このデフォルトは、<code>"Integer Left"</code>や<code>"Float Center"</code>などの指定で上書きすることができます。</p>
    <hr>
    <p><strong><em>ソートオプション：</em></strong></p>
    <p id="Case"><strong>Case:</strong> The sorting of the column is case-sensitive (affects only <a href="#Text">text</a> columns). <em>Case</em>、<em>CaseLocale</em>、<em>Logical</em>の各オプションが省略された場合、大文字のA〜Zは小文字と同一とみなされ、ソートが行われます。</p>
    <p><strong>CaseLocale:</strong> The sorting of the column is case-insensitive based on the current user's locale (affects only <a href="#Text">text</a> columns). 例えば、ほとんどの英語と西ヨーロッパのロケールでは、A-Zの文字とÄやÜなどのANSI文字が小文字と同じように扱われます。また、この方法では、「coop」と「co-op」のような単語が一緒になるようにハイフンやアポストロフィーを処理する「ワードソート」を使用しています。</p>
    <p id="Desc"><strong>Desc:</strong> Descending order. ユーザーが初めてソートするときは、列は降順で始まります。</p>
    <p id="Logical"><strong>Logical:</strong> Same as <em>CaseLocale</em> except that any sequences of digits in the text are treated as true numbers rather than mere characters. 例えば、文字列 "T33"は "T4"よりも大きいと判断されるでしょう。<em>Logical</em>と <em>Case</em>は現在相互排他的です：直近で指定されたものだけが有効になります。</p>
    <p><strong>NoSort:</strong> Prevents a user's click on this column from having any automatic sorting effect. しかし、<a href="GuiOnEvent.htm#ColClick">ColClick</a>イベントはまだ発生するので、スクリプトはカスタムソートなどのアクションで応答することができます。一部の列だけでなく、すべての列のソートを無効にするには、リストビューのオプションに<a href="#NoSort">NoSort</a>を含めます。</p>
    <p><strong>Sort:</strong> Immediately sorts the column in ascending order (even if it has the <a href="#Desc">Desc</a> option).</p>
    <p><strong>SortDesc:</strong> Immediately sorts the column in descending order.</p>
    <p><strong>Uni:</strong> Unidirectional sort. これにより、同じ列を2回目にクリックしても、ソートの方向が逆になることを防ぐことができます。</p>
      </dd>
      <dt>ColumnTitle</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>新しいカラムヘッダーです。このパラメータを省略すると、変更されないままとなります。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="InsertCol">
    <h3>InsertCol</h3>
    <p>指定された列番号に新しい列を挿入し、新しい列の位置番号を返す。</p>
    <pre class="Syntax">NewColumnNumber := LV.<span class="func">InsertCol</span>(ColumnNumber <span class="optional">, Options, ColumnTitle</span>)</pre>
    <dl>
      <dt>ColumnNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>新しく挿入された列の列番号。<em>ColumnNumber</em>の右側にある列は、新しい列のために右側にシフトされます。1列目は1（0ではない）です。ListViewの最大列数は200列です。<em>ColumnNumber</em>が現在コントロール内にある列の数より大きい場合、新しい列は右側の最後の列の隣に追加されます。新しく挿入された列は、それが最初の列でない限り、その下に何もない状態で始まり、その場合、古い最初の列の内容を引き継ぎ、古い最初の列は空白の内容を獲得する。</p>
      </dd>
      <dt>Options</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>新しいカラムの属性 (<a href="#Integer">integer sorting</a> を使用するかどうかなど) は、<em><a href="#ColOptions">Options</a></em>で変更しない限り、常にデフォルト値で始まります。</p>
      </dd>
      <dt>ColumnTitle</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>新しいカラムヘッダーです。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="DeleteCol">
    <h3>DeleteCol</h3>
    <p>指定された列とその下にあるすべてのコンテンツを削除する。</p>
    <pre class="Syntax">LV.<span class="func">DeleteCol</span>(ColumnNumber)</pre>
    <dl>
      <dt>ColumnNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>削除する列を指定します。列が削除されると、その右側にある列の列番号は1つ減らされます。その結果、<code>LV.DeleteCol(2)</code>を2回呼び出すと、2列目と3列目が削除されます。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="GetCount">
    <h3>GetCount</h3>
    <p>コントロールの行数または列数を返します。</p>
    <pre class="Syntax">CountNumber := LV.<span class="func">GetCount</span>(<span class="optional">Mode</span>)</pre>
    <dl>
      <dt>Mode</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>本パラメータが省略された場合は、コントロールの総行数を返します。When this parameter is <code>"S"</code> or <code>"Selected"</code>, the count includes only the selected/highlighted rows. When this parameter is <code>"Col"</code> or <code>"Column"</code>, it returns the number of columns in the control. コントロールがこれらのカウントを記録しているため、戻り値は即座に取得されます。</p>
      </dd>
    </dl>
    <p>This method is often used in the top line of a <a href="Loop.htm">Loop</a>, in which case the method would get called only once (prior to the first iteration). 事例：</p>
    <pre>Loop LV.GetCount()
{
    RetrievedText := LV.GetText(A_Index)
    if InStr(RetrievedText, "some filter text")
        LV.Modify(A_Index, "Select")  <em>; 最初のフィールドがフィルターテキストを含む各行を選択します。</em>
}</pre>
    <p>ListViewのカラムの幅を取得し、INIファイルに保存してセッション間で記憶させるなどの使い方をする場合は、次のようにします：</p>
    <pre>
Loop LV.GetCount("Column")
{
    ColWidth := SendMessage(0x101D, A_Index - 1, 0, LV)  <em>; 0x101D is LVM_GETCOLUMNWIDTH.</em>
    MsgBox("Column " A_Index "'s width is " ColWidth ".")
}</pre>
  </div>
  <div class="methodShort" id="GetNext">
    <h3>GetNext</h3>
    <p>次に選択、チェック、フォーカスされた行の行番号を返し、それ以外の場合は0を返します。</p>
    <pre class="Syntax">RowNumber := LV.<span class="func">GetNext</span>(<span class="optional">StartingRowNumber, RowType</span>)</pre>
    <dl>
      <dt>StartingRowNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>省略された場合、または1未満の場合は、リストの先頭から検索を開始します。そうでない場合は、<em>StartingRowNumber</em>の後の行から検索を開始します。</p>
      </dd>
      <dt>RowType</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
        <p>省略された場合は、次に選択／強調表示された行を検索します。Otherwise, specify <code>"C"</code> or <code>"Checked"</code> to find the next checked row; or <code>"F"</code> or <code>"Focused"</code> to find the focused row (there is never more than one focused row in the entire list, and sometimes there is none at all).</p>
      </dd>
    </dl>
    <p>次の例では、ListViewで選択されたすべての行をレポートします：</p>
    <pre>RowNumber := 0  <em>; This causes the first loop iteration to start the search at the top of the list.</em>
Loop
{
    RowNumber := LV.GetNext(RowNumber)  <em>; 前の反復で見つかった行の次の行から検索を再開する。</em>
    if not RowNumber  <em>; 上記は0を返したので、もう選択された行はない。</em>
        break
    Text := LV.GetText(RowNumber)
    MsgBox('The next selected row is #' RowNumber ', whose first field is "' Text '".')
}</pre>
    <p>特定の行番号にチェックが入っているかどうかを調べる別の方法として、次のようなものがあります：</p>
    <pre>
ItemState := SendMessage(0x102C, RowNumber - 1, 0xF000, LV)  <em>; 0x102C は LVM_GETITEMSTATE です。0xF000はLVIS_STATEIMAGEMASKです。</em>
IsChecked := (ItemState &gt;&gt; 12) - 1　　<em>;<i>RowNumber</i>がチェックされていればIsCheckedをtrueに、そうでなければfalseに設定します。</em></pre>
  </div>
  <div class="methodShort" id="GetText">
    <h3>GetText</h3>
    <p>指定された行番号と列番号のテキストを取得する。</p>
    <pre class="Syntax">RetrievedText := LV.<span class="func">GetText</span>(RowNumber <span class="optional">, ColumnNumber</span>)</pre>
    <dl>
      <dt>RowNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>テキストを取得する行の番号。このパラメータが 0 の場合、カラムヘッダーテキストが取得されます。<em>RetrievedText</em>の長さは最大8191です。</p>
      </dd>
      <dt>ColumnNumber</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>指定された行が位置する列の番号。省略された場合、デフォルトは1（1列目のテキスト）です。スクリプトが見る列番号は、ユーザーが行った列のドラッグ＆ドロップによって変更されることはありません。例えば、ユーザーが他の列の右側にドラッグしても、元の1列目は1番のままです。</p>
      </dd>
    </dl>
  </div>
  <div class="methodShort" id="SetImageList">
    <h3>SetImageList</h3>
    <p>アイコンを表示するための<a href="#IL">ImageList</a>を設定または置換し、このコントロールに以前関連付けられていた ImageListID を返します（ない場合は 0）。</p>
    <pre class="Syntax">PrevImageListID := LV.<span class="func">SetImageList</span>(ImageListID <span class="optional">, IconType</span>)</pre>
    <dl>
      <dt>ImageListID</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>以前に<a href="ListView.htm#IL_Create">IL_Create</a>を呼び出した際に返された番号。</p>
      </dd>
      <dt>IconType</dt>
      <dd>
        <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
        <p>第2パラメータを省略した場合、ImageListに含まれるアイコンの種類を自動的に大小判別します。それ以外の場合は、大きいアイコンは0、小さいアイコンは1、状態アイコンは2を指定します（状態アイコンはまだ直接サポートされていませんが、<a href="SendMessage.htm">SendMessage</a>を介して使用することができます）。</p>
      </dd>
    </dl>
<p>このメソッドは通常、ListViewに行を追加する前に呼び出されます。</p>
    <p>ListViewは、最大2つのImageListを持つことができます：small-iconおよびlarge-iconのいずれか、または両方を使用します。スクリプトでラージアイコン表示との切り替えが可能な場合に有効です。ListViewに複数のImageListを追加するには、2つ目のリストのImageListIDを指定して、SetImageListメソッドを2回呼び出します。大アイコンと小アイコンのImageListを持つListViewは、両方のリストに同じ順序でアイコンを含むことを保証する必要があります。これは、あるアイコンの大きいバージョンと小さいバージョンの両方を参照するために、同じID番号が使用されるためです。</p>
<p>アイコンとタイルを除くすべての<a href="#View">表示モード</a>では、小さなアイコンを表示するのが伝統的ですが、SetImageListメソッドに大きなアイコンリストを渡し、第2パラメータに1（小さなアイコン）を指定することでこれをオーバーライドすることができます。また、ListViewの各行の高さを大きくして、大きなアイコンに合わせます。</p>
    <p>
      このような切り離されたImageListは、通常<a href="ListView.htm#IL_Destroy">IL_Destroy</a>で破棄する必要があります。</p>
  </div>

<h2 id="Events">イベント情報</h2>
<p><a href="GuiOnEvent.htm">OnEvent</a>を呼び出してコールバック関数やメソッドを登録することで、以下のイベントを検出することができます：</p>
<table class="info">
  <tr><th>Event</th><th>育てたのは...</th></tr>
  <tr><td><a href="GuiOnEvent.htm#Click">Click</a></td><td>コントロールがクリックされます。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a></td><td>コントロールがダブルクリックされます。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ColClick">ColClick</a></td><td>カラムヘッダがクリックされます。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a></td><td>コントロールにキーボードフォーカスがある状態で、ユーザーがコントロールを右クリックするか、<kbd>メニュー</kbd>または<kbd>Shift</kbd>+<kbd>F10</kbd>を押した場合。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#Focus">Focus</a></td><td>コントロールがキーボードフォーカスを獲得します。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#LoseFocus">LoseFocus</a></td><td>コントロールはキーボードフォーカスを失います。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemCheck">ItemCheck</a></td><td>項目がチェックされているか、チェックされていないかの状態です。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemEdit">ItemEdit</a></td><td>アイテムのラベルは、ユーザーが編集します。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemFocus">ItemFocus</a></td><td>フォーカスされる項目が変わります。</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemSelect">ItemSelect</a></td><td>項目が選択または非選択になる。</td></tr>
</table>
<p><a href="GuiOnNotify.htm">OnNotify</a>を使用することで、追加の（ほとんど使用されない）通知を検出することができます。これらの通知については、<a href="https://learn.microsoft.com/windows/win32/controls/bumper-list-view-control-reference-notifications">Microsoft Docsで文書化</a>されています。Microsoft Docsには、各通知コードの数値は掲載されていませんので、Windows SDKやインターネットで検索してご確認ください。</p>

<h2 id="IL">ImageLists</h2>
<p>イメージリストは、メモリ上に保存された同一サイズのアイコンのグループです。作成時、各 ImageList は空である。スクリプトはIL_Addを繰り返し呼び出してアイコンをリストに追加し、各アイコンには1から始まる連番が割り当てられています。行や列のヘッダーに特定のアイコンを表示する際に、スクリプトが参照する番号です。ここでは、ListViewの行にアイコンを配置する方法を示す動作例を示します：</p>
<pre>MyGui := Gui()  <em>; MyGuiのウィンドウを作成します。</em>
LV := MyGui.Add("ListView", "h200 w180", ["Icon &amp; Number", "Description"])  <em>; ListViewを作成します。</em>
ImageListID :=<a href="#IL_Create">IL_Create</a>(10)  <em>; 小さなアイコンを10個保持するImageListを作成します。</em>
LV<a href="#SetImageList">.SetImageList</a>(ImageListID)  <em>;上記ImageListを現在のListViewに割り当てる</em>。
Loop 10  <em>;DLLから一連のアイコンをImageListに読み込ませる。</em>
    <a href="#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
Loop 10  <em>; ListViewに行を追加する（デモのため、各アイコンに1つずつ）。</em>
    LV.Add("Icon" . A_Index, A_Index, "n/a")
LV.ModifyCol("Hdr")  <em>; 列幅を自動調整する。</em>
MyGui.Show</pre>
<h3 id="IL_Create">IL_Create</h3>
  <p>新しい ImageList を作成し、最初は空で、ImageList の固有 ID を返します（失敗した場合は 0）。</p>
  <pre class="Syntax">ImageListID := <span class="func">IL_Create</span>(<span class="optional">InitialCount, GrowCount, LargeIcons</span>)</pre>
  <dl>
    <dt>InitialCount</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
      <p>すぐにリストに入れることを想定したアイコンの数（省略された場合、デフォルトは2です）。</p>
    </dd>
    <dt>GrowCount</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
      <p>リストが現在のリスト容量を超えるたびに増加するアイコンの数（省略された場合、デフォルトは5）。</p>
    </dd>
    <dt>LargeIcons</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
      <p>このパラメータが1（true）の場合、ImageListには大きなアイコンが含まれるようになります。0（false）を指定すると、小さなアイコンを含むようになります（省略時のデフォルトはこれ）。リストに追加されたアイコンは、大小のアイコンについてシステムの寸法に合わせて自動的に拡大縮小されます。</p>
    </dd>
  </dl>
<h3 id="IL_Add">IL_Add</h3>
  <p>指定された ImageList にアイコンまたは画像を追加し、新しいアイコンのインデックスを返します（1 は最初のアイコン、2 は 2 番目のアイコン、といった具合に）。</p>
  <pre class="Syntax">IconIndex := <span class="func">IL_Add</span>(ImageListID, Filename <span class="optional">, IconNumber, ResizeNonIcon</span>)</pre>
  <dl>
    <dt>ImageListID</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
      <p><a href="#IL_Create">IL_Create</a>で作成された ImageList の ID。</p>
    </dd>
    <dt>Filename</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>アイコン（.ICO）、カーソル（.CUR）、アニメーションカーソル（.ANI）ファイル（アニメーションカーソルはリストビューに表示しても実際にはアニメーションしません）、または<code>"HBITMAP: "ハンドル</code>などの<a href="../misc/ImageHandles.htm">ビットマップまたはアイコンハンドル</a>の名前です。その他、アイコンのソースとして、以下のような種類のファイルがあります：EXE、DLL、CPL、SCRなど、アイコンリソースを含むタイプ。</p>
    </dd>
    <dt>IconNumber</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
      <p>ファイルの先頭以外のアイコングループを使用する場合は、<em>IconNumber</em>にその番号を指定します。<em>IconNumber</em>が負の場合、その絶対値は実行ファイル内のアイコンのリソース ID とみなされます。次の例では、2番目のアイコングループのデフォルトアイコンが使用されることになります：<code>IL_Add(ImageListID, "C:\My Application.exe", 2)</code>.</p>
    </dd>
    <dt>ResizeNonIcon</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
      <p>BMP、GIF、JPGなどの非アイコン画像も読み込むことができます。ただし、この場合、正しい動作を保証するために、最後の2つのパラメータを指定する必要があります：<em>IconNumber</em>には、マスク/透明度の色番号（0xFFFFFF [白]がほとんどの画像に最適かもしれません）を指定し、<em>ResizeNonIcon</em>には、画像を1つのアイコンになるように拡大縮小する場合は0以外、画像を実際の幅に収まる数のアイコンに分割する場合は0を指定します。</p>
      <p>対応する画像形式は、ANI、BMP、CUR、EMF、Exif、GIF、ICO、JPG、PNG、TIF、WMFです。</p>
    </dd>
  </dl>
<h3 id="IL_Destroy">IL_Destroy</h3>
  <p>指定された ImageList を削除します。</p>
  <pre class="Syntax">Success := <span class="func">IL_Destroy</span>(ImageListID)</pre>
  <dl>
    <dt>ImageListID</dt>
    <dd>
      <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
      <p><a href="#IL_Create">IL_Create</a>で作成された ImageList の ID。</p>
    </dd>
  </dl>
  <p>
    注：ImageListはListViewに装着されると、ListViewまたはその親ウィンドウが破壊されたときに自動的に破壊されるため、通常は破壊する必要はない。However, if the ListView shares ImageLists with other ListViews (by having 0x40 in its options), the script should explicitly destroy the ImageList after destroying all the ListViews that use it. 同様に、スクリプトがListViewの古いImageListの1つを新しいものに置き換える場合、古いものを明示的に破棄する必要があります。</p>
<h2 id="Remarks">備考</h2>
<p><a href="Gui.htm#Submit">Gui.Submit</a>は、ListViewコントロールには効果がありません。</p>
<p>カラムがソートされた後（ユーザーがヘッダーをクリックするか、スクリプトが<code>LV.<a href="#ModifyCol">ModifyCol</a>(1, "Sort") </code>を呼び出す）、その後に追加された行は、ソート順序に従わずにリストの一番下に表示されます。ただし、<a href="#Sort">Sort</a>と <a href="#SortDesc">SortDesc</a>は例外で、新しく追加された行を正しい位置に移動させるスタイルです。</p>
<p id="Enter">ListViewにフォーカスがある状態でユーザーが<kbd>Enter</kbd>を押したことを検出するには、<a href="GuiControls.htm#DefaultButton">デフォルトのボタン</a>を使用します（必要に応じて非表示にすることができます）。事例：</p>
<pre>MyGui.Add("Button", "Hidden Default", "OK").OnEvent("Click", LV_Enter)
...
LV_Enter(*) {
    global
    if MyGui.FocusedCtrl != LV
        return
    MsgBox("Enter was pressed. The focused row number is " LV.GetNext(0, "Focused"))
}</pre>
<p>キーボードによる行から行への移動に加えて、ユーザーは最初の列の項目の最初の数文字を入力することによって、インクリメンタルサーチを行うこともできます。これにより、選択範囲は最も近い一致する行にジャンプします。</p>
<p>リストビューの各フィールドには任意の長さのテキストを格納することができますが、最初の260文字だけが表示されます。</p>
<p>ListViewの最大行数は利用可能なシステムメモリによってのみ制限されますが、<a href="#Count">Count</a>オプションで説明するように、行追加のパフォーマンスを大幅に向上させることができます。</p>
<p>画像は、ListViewの周囲の背景として使用することができます（つまり、ListViewをフレーム化する）。To do this, create the <a href="GuiControls.htm#Picture">picture control</a> after the ListView and include 0x4000000 (which is WS_CLIPSIBLINGS) in the picture's <em>Options</em>.</p>
<p>スクリプトは、1つのウィンドウに1つ以上のListViewを作成することができます。</p>
<p><a href="SendMessage.htm">SendMessage</a>で直接カラムの挿入や削除を行わない方がよいでしょう。これは、プログラムが各カラムの<a href="#Integer">ソート環境</a>設定のコレクションを保持するためで、そうすると同期が取れなくなります。代わりに、<a href="#BuiltIn">組み込みのカラムメソッド</a>を使用します。</p>
<p>リストビューのサイズ変更、非表示、フォント変更などの操作を行うには、<a href="GuiControl.htm">GuiControlオブジェクト</a>を参照してください。</p>
<p>外部のListView（スクリプトが所有していないもの）からテキストを抽出するには、<a href="ListViewGetContent.htm">ListViewGetContent</a>を使用します。</p>
<h2 id="Related">関連</h2>
<p><a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm">Other Control Types</a>, <a href="Gui.htm#Call">Gui()</a>, <a href="GuiOnEvent.htm#ContextMenu">ContextMenu event</a>, <a href="Gui.htm">Gui object</a>, <a href="GuiControl.htm">GuiControl object</a>, <a href="../misc/Styles.htm#ListView">ListView styles table</a></p>
<h2 id="Examples">例</h2>

<div class="ex" id="ExAllRows">
<p><a class="ex_number" href="#ExAllRows"></a> 行番号に0を指定して、すべての行を選択または非選択にします。</p>
<pre><em>; 行番号に0を指定して、すべての行を選択または非選択する：</em>
LV<a href="#Modify">.Modify</a>(0, "Select")  <em>; すべてを選択する。</em>
LV.Modify(0, "-Select")  <em>; 全選択を解除する。</em>。
LV.Modify(0, "-Check")  <em>; すべての<a href="#Checked">チェックボックス</a>のチェックをはずす。</em></pre>
</div>

<div class="ex" id="ExAutoSize">
<p><a class="ex_number" href="#ExAutoSize"></a> すべてのカラムを、その内容に合わせて自動サイズ調整します。</p>
<pre>LV<a href="#ModifyCol">.ModifyCol</a>  <em>; このモードではパラメータはありません。</em></pre>
</div>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> 以下は、このページのトップ付近にあるスクリプトよりも、より精巧に作られたワーキングスクリプトです。ユーザーが選択したフォルダー内のファイルを表示し、各ファイルにはその種類に関連するアイコンが割り当てられます。ユーザーは、ファイルをダブルクリックするか、1つまたは複数のファイルを右クリックしてコンテキストメニューを表示することができます。</p>
<pre><em>; GUIウィンドウを作成する：</em>
MyGui := Gui("+Resize")  <em>; ウィンドウの最大化、ドラッグリサイズができるようにする。</em>

<em>; いくつかのボタンを作成します：</em>
B1 := MyGui.Add("Button", "Default", "Load a folder")
B2 := MyGui.Add("Button", "x+20", "Clear List")
B3 := MyGui.Add("Button", "x+20", "Switch View")

<em>; <a href="#GuiAdd">MyGui.Addで</a>ListViewとそのカラムを作成します：</em>
LV := MyGui.Add("ListView", "xm r20 w700", ["Name","In Folder","Size (KB)","Type"])
<a href="#ModifyCol">LV.ModifyCol</a>(3, "Integer")  <em>; ソートのため、Size列が整数であることを示す。</em>

<em>; ListViewにアイコンを表示できるように、ImageListを作成する：</em>
ImageListID1 := <a href="#IL_Create">IL_Create</a>(10)
ImageListID2 := IL_Create(10, 10, true)  <em>; 小さいアイコンと一緒に大きいアイコンのリストです。</em>。

<em>; ListViewにImageListを貼り付けて、後でアイコンを表示できるようにする：</em>
<a href="#SetImageList">LV.SetImageList</a>(ImageListID1)
LV.SetImageList(ImageListID2)

<em>; コントロールイベントを適用する：</em>
LV.OnEvent("<a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a>", RunFile)
LV.OnEvent("<a href="GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a>", ShowContextMenu)
B1.OnEvent("Click", LoadFolder)
B2.OnEvent("Click", (*) =&gt; <a href="#Delete">LV.Delete</a>())
B3.OnEvent("Click", SwitchView)

<em>; ウィンドウイベントを適用する：</em>
MyGui.OnEvent("Size", Gui_Size)

<em>; Create the popup menu to be used as the context menu:</em>
ContextMenu := Menu()
ContextMenu.Add("Open", ContextOpenOrProperties)
ContextMenu.Add("Properties", ContextOpenOrProperties)
ContextMenu.Add("Clear from ListView", ContextClearRows)
ContextMenu.Default := "Open"  <em>; Make "Open" a bold font to indicate that double-click does the same thing.</em>

<em>; Display the window:</em>
MyGui.Show()

LoadFolder(*)
{
    static IconMap := Map()
    MyGui.Opt("+OwnDialogs")  <em>; Forces user to dismiss the following dialog before using main window.</em>
    Folder := DirSelect(, 3, "Select a folder to read:")
    if not Folder  <em>; The user canceled the dialog.</em>
        return

<em>; Check if the last character of the folder name is a backslash, which happens for root
    ; C:⇄などのディレクトリがあります。If it is, remove it to prevent a double-backslash later on.</em>
    if SubStr(Folder, -1, 1) = "\"
        Folder := SubStr(Folder, 1, -1)  <em>; Remove the trailing backslash.</em>

<em>; Calculate buffer size required for SHFILEINFO structure.</em>
    sfi_size := A_PtrSize + 688
    sfi := Buffer(sfi_size)

<em>; Gather a list of file names from the selected folder and append them to the ListView:</em>
    LV.Opt("-Redraw")  <em>; Improve performance by disabling redrawing during load.</em>
    Loop Files, Folder "\*.*"
    {
        FileName := A_LoopFilePath  <em>; Must save it to a writable variable for use below.</em>

<em>; Build a unique extension ID to avoid characters that are illegal in variable names,
        ; ダッシュのようなまた、このユニークID方式は、アイテムを探す際に
        ; in the array does not require search-loop.</em>
        SplitPath(FileName,,, &amp;FileExt)  <em>; Get the file's extension.</em>
        if FileExt ~= "i)\A(EXE|ICO|ANI|CUR)\z"
        {
            ExtID := FileExt  <em>; Special ID as a placeholder.</em>
            IconNumber := 0  <em>; Flag it as not found so that these types can each have a unique icon.</em>
        }
        else  <em>; Some other extension/file-type, so calculate its unique ID.</em>
        {
            ExtID := 0  <em>; Initialize to handle extensions that are shorter than others.</em>
            Loop 7     <em>; Limit the extension to 7 characters so that it fits in a 64-bit value.</em>
            {
                ExtChar := SubStr(FileExt, A_Index, 1)
                if not ExtChar  <em>; No more characters.</em>
                    break
                <em>; Derive a Unique ID by assigning a different bit position to each character:</em>
                ExtID := ExtID | (Ord(ExtChar) &lt;&lt; (8 * (A_Index - 1)))
            }
            <em>; Check if this file extension already has an icon in the ImageLists. If it does,
            ; 何度も呼び出す必要がなく、ロードのパフォーマンスが大幅に向上します、
            ; especially for a folder containing hundreds of files:</em>
            IconNumber := IconMap.Has(ExtID) ? IconMap[ExtID] : 0
        }
        if not IconNumber  <em>; There is not yet any icon for this extension, so load it.</em>
        {
            <em>; Get the high-quality small-icon associated with this file extension:</em>
            if not DllCall("Shell32\SHGetFileInfoW", "Str", FileName
            , "Uint", 0, "Ptr", sfi, "UInt", sfi_size, "UInt", 0x101)  <em>; 0x101 is SHGFI_ICON+SHGFI_SMALLICON</em>
                IconNumber := 9999999  <em>; Set it out of bounds to display a blank icon.</em>
            else <em>; Icon successfully loaded.</em>
            {
                <em>; Extract the hIcon member from the structure:</em>
                hIcon := NumGet(sfi, 0, "Ptr")
                <em>; Add the HICON directly to the small-icon and large-icon lists.
; Below uses +1 to convert the returned index from zero-based to one-based:</em>
                IconNumber := DllCall("ImageList_ReplaceIcon", "Ptr", ImageListID1, "Int", -1, "Ptr", hIcon) + 1
                DllCall("ImageList_ReplaceIcon", "Ptr", ImageListID2, "Int", -1, "Ptr", hIcon)
                <em>; Now that it's been copied into the ImageLists, the original should be destroyed:</em>
                DllCall("DestroyIcon", "Ptr", hIcon)
                <em>; Cache the icon to save memory and improve loading performance:</em>
                IconMap[ExtID] := IconNumber
            }
        }

<em>; Create the new row in the ListView and assign it the icon number determined above:</em>
        <a href="#Add">LV.Add</a>("Icon" . IconNumber, A_LoopFileName, A_LoopFileDir, A_LoopFileSizeKB, FileExt)
    }
    LV.Opt("+Redraw")  <em>; Re-enable redrawing (it was disabled above).</em>
    LV.ModifyCol()  <em>; Auto-size each column to fit its contents.</em>
    LV.ModifyCol(3, 60)  <em>; Make the Size column at little wider to reveal its header.</em>
}

SwitchView(*)
{
    static IconView := false
    if not IconView
        LV.Opt("+Icon")        <em>; Switch to icon view.</em>
    else
        LV.Opt("+Report")      <em>; Switch back to details view.</em>
    IconView := not IconView   <em>; Invert in preparation for next time.</em>
}

RunFile(LV, RowNumber)
{
    FileName := LV.GetText(RowNumber, 1) <em>; Get the text of the first field.</em>
    FileDir := LV.GetText(RowNumber, 2)  <em>; Get the text of the second field.</em>
    try
        Run(FileDir "\" FileName)
    catch
        MsgBox("Could not open " FileDir "\" FileName ".")
}

ShowContextMenu(LV, Item, IsRightClick, X, Y)  <em>; In response to right-click or Apps key.</em>
{
    <em>; Show the menu at the provided coordinates, X and Y.  These should be used
    ; because they provide correct coordinates even if the user pressed the Apps key:</em>
    ContextMenu.Show(X, Y)
}

ContextOpenOrProperties(ItemName, *)  <em>; The user selected "Open" or "Properties" in the context menu.</em>
{
    <em>; For simplicitly, operate upon only the focused row rather than all selected rows:</em>
    FocusedRowNumber := LV.GetNext(0, "F")  <em>; Find the focused row.</em>
    if not FocusedRowNumber  <em>; No row is focused.</em>
        return
    FileName := LV.GetText(FocusedRowNumber, 1) <em>; Get the text of the first field.</em>
    FileDir := LV.GetText(FocusedRowNumber, 2)  <em>; Get the text of the second field.</em>
    try
    {
        if (ItemName = "Open")  <em>; User selected "Open" from the context menu.</em>
            Run(FileDir "\" FileName)
        else
            Run("properties " FileDir "\" FileName)
    }
    catch
        MsgBox("Could not perform requested action on " FileDir "\" FileName ".")
}

ContextClearRows(*)  <em>; The user selected "Clear" in the context menu.</em>
{
    RowNumber := 0  <em>; This causes the first iteration to start the search at the top.</em>
    Loop
    {
        <em>; Since deleting a row reduces the RowNumber of all other rows beneath it,
        ; 検索対象が、以前と同じ行番号になるように、1を引きます。
        ; found (in case adjacent rows are selected):</em>
        RowNumber := LV.GetNext(RowNumber - 1)
        if not RowNumber  <em>; The above returned zero, so there are no more selected rows.</em>
            break
        LV.Delete(RowNumber)  <em>; Clear the row from the ListView.</em>
    }
}

Gui_Size(thisGui, MinMax, Width, Height)  <em>; Expand/Shrink ListView in response to the user's resizing.</em>
{
    if MinMax = -1  <em>; The window has been minimized. No action needed.</em>
        return
    <em>; Otherwise, the window has been resized or maximized. Resize the ListView to match.</em>
    LV.Move(,, Width - 20, Height - 40)
}</pre>

</div>
</body>
</html>
