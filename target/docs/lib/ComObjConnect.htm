<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>ComObjConnect - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="ComObjConnect関数は、COMオブジェクトのイベントソースをスクリプトに接続し、イベントを処理することを可能にします。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjConnect</h1>
<p>COMオブジェクトのイベントソースをスクリプトに接続し、イベントを処理できるようにします。</p>
<pre class="Syntax"><span class="func">ComObjConnect</span> ComObj <span class="optional">, PrefixOrSink</span></pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>ComObj</dt>
  <dd>
    <p>型：<a href="ComObject.htm">ComObject</a></p>
    <p>イベントを発生させるオブジェクトです。</p>
    <p>オブジェクトが IConnectionPointContainer インターフェースをサポートしていない場合、またはオブジェクトのクラスに関する型情報を取得できない場合は、エラーメッセージを表示します。これを抑制したり、<a href="Try.htm">try</a><a href="Catch.htm">/</a><a href="Try.htm">catch</a>で処理することができる。</p>
    <p>IProvideClassInfo インターフェースは、オブジェクトがクラスをサポートしている場合、そのクラスに関する型情報を取得するために使用されます。そうでない場合、ComObjConnectはオブジェクトのIDispatchインターフェースを介して型情報を取得しようとしますが、これは信頼性に欠ける可能性があります。</p>
  </dd>

  <dt>PrefixOrSink</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#objects">オブジェクト</a></p>
      <p>省略された場合、オブジェクトは「切断」されます。つまり、スクリプトはそのイベントの通知を受けなくなります。Otherwise, specify a string to prefix to the event name to determine which global function to call when an event occurs, or an <a href="#event-sink">event sink object</a> defining a static method for each event to be handled.</p>
      <p class="warning"><strong>注：</strong>ネストされた関数は、現在の関数が戻った後に名前が解決される可能性があるため、このモードではサポートされていません。ネストされた関数やクロージャを使用するには、以下のようにオブジェクトにアタッチしてオブジェクトを渡します。</p>
    </dd>

</dl>

<h2 id="Usage">使用方法</h2>
<p>ComObjConnectを有効に活用するためには、まずスクリプトに関数を記述し、対象となるイベントを処理する必要があります。このような関数（「イベントハンドラ」）は、次のような構造を持っています。</p>
<pre class="Syntax Short NoIndent"><i>Prefix</i><b>EventName</b>([<i>Params...</i>, ComObj])
{
    <i class="dull">... イベント処理コード...</i>
    return <i>ReturnValue</i>
}</pre>
<p><i>Prefix</i>は、文字列の場合は<em>PrefixOrSink</em>パラメータと同じでなければならず、それ以外の場合は省略します。<b>EventName</b>は、その関数が処理すべきイベントの名前に置き換える必要があります。</p>
<p><i>Params</i>は、イベントが持つあらゆるパラメータに対応します。イベントにパラメータがない場合、<i>Params</i>は完全に省略されるべきです。<i>ComObj</i>は、ComObjConnectに渡されたオリジナルのラッパー・オブジェクトへの参照を含む追加パラメータです。"ComObj"は、スクリプトの文脈でより意味のある名前に置き換えてください。</p>
<p>なお、イベントハンドラには戻り値がある場合があります。To return a COM-specific type of value, use <a href="ComValue.htm">ComValue</a>. 例えば、<code>return ComValue(0,0)</code>はVT_EMPTY型のバリアントを返し、これはJavaScriptの関数から<code>undefinedを</code>返す（あるいは返さない）ことと同じです。</p>
<p><code>ComObjConnect(yourObject, "<i>Prefix</i>")</code>を呼び出し、イベントハンドリングを有効にします。</p>
<p><code>ComObjConnect(yourObject)</code>を呼び出し、オブジェクトの接続を解除する（イベントの処理を停止する）。</p>
<p>パラメータの数がわからない場合は、<a href="../Functions.htm#Variadic">変分関数</a>を使用することができます。</p>

<h3 id="event-sink">イベント同期</h3>
<p><em>PrefixOrSink</em>がオブジェクトの場合、イベントが発生するたびに、そのオブジェクトの対応するメソッドが呼び出されます。オブジェクトは動的に構築することができますが、<em>PrefixOrSink</em>はクラスまたはクラスのインスタンスを参照するのが一般的です。その場合、メソッドは上記のように定義されるが、<em>Prefix</em>は含まれない。</p>
<p>メソッドの呼び出しと同様に、メソッドの（通常は非表示の）<code>this</code>パラメータは、メソッドが呼び出されたオブジェクトへの参照を含んでいます；すなわち、COMオブジェクトではなく、イベントシンクオブジェクトです。イベントハンドラにコンテキストを提供したり、イベントハンドラ間で値を共有するために使用することができます。</p>
<p>イベントごとにメソッドを定義することなく、すべてのイベントをキャッチするには、<a href="../Objects.htm#Meta_Functions">__Callメタファンクション</a>を定義します。</p>
<p><em>COMオブジェクト</em>が接続を解放すると、<em>PrefixOrSink</em>への参照は自動的に解放されます。例えば、Internet Explorerは終了時にこのような動作をします。スクリプトが<em>PrefixOrSink</em>への参照を保持しない場合、<a href="../Objects.htm#Custom_NewDelete">__Delete</a>を使用することでその発生を検出することができます。オブジェクトがリモートプロセスによってホストされており、そのプロセスが予期せず終了した場合、システムが接続を解除するまでに数分かかることがあります。</p>

<h2 id="Remarks">備考</h2>
<p>スクリプトは<em>ComObj</em>への参照を保持する必要があります。そうしないと、自動的に解放され、COMオブジェクトから切断され、それ以降のイベントが検出されなくなるからです。接続が不要になったことを検出する標準的な方法はないため、スクリプトはComObjConnectを呼び出して手動で接続を切断する必要があります。</p>
<p><a href="Persistent.htm">Persistent</a>関数は、スクリプトがイベントをリッスンしている間、実行し続けるために必要な場合があります。</p>
<p>失敗した場合は例外が発生します。</p>

<h2 id="Related">関連</h2>
<p><a href="ComObject.htm">ComObject</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="https://learn.microsoft.com/previous-versions/ccxe1xe6(v=vs.85)">WScript.ConnectObject (Microsoft Docs)</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExIE">
<p><a class="ex_number" href="#ExIE"></a> Internet Explorerのインスタンスを起動し、接頭辞 "IE_"を持つ対応するスクリプト関数にイベントを接続します。以下で使用するCOMオブジェクトとDocumentCompleteイベントの詳細は、<a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752084(v=vs.85)">InternetExplorerオブジェクト（Microsoft Docs）</a>を参照してください。</p>
<pre>ie := ComObject("InternetExplorer.Application")

<em>; イベントと対応するスクリプト関数を "IE_"という接頭辞で接続します。</em>
ComObjConnect(ie, "IE_")

ie.Visible := true  <em>; IE7では正しく動作しないことが確認されています。</em>
ie.Navigate("https://www.autohotkey.com/")
Persistent

IE_DocumentComplete(ieEventParam, &amp;url, ieFinalParam) {
    <em>; IEはurlをVARIANTへの参照として渡すため、上記では&amp;urlが使用されています。</em>
    <em>; 以下のコードで%url%としてではなく、自然に参照できるようにするためです。</em>
    s := ""
    if (ie != ieEventParam)
        s .= "First parameter is a new wrapper object.`n"
    if (ie == ieFinalParam)
        s .= "Final parameter is the original wrapper object.`n"
    if (<a href="ComObjValue.htm">ComObjValue</a>(ieEventParam) == ComObjValue(ieFinalParam))
        s .= "Both wrapper objects refer to the same IDispatch instance.`n"
    MsgBox s . "Finished loading " ie.Document.title " @ " url
    ie.Quit()
    ExitApp
}
</pre>
</div>

</body>
</html>
