<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>RegExReplace - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The RegExReplace function replaces occurrences of a pattern (regular expression) inside a string." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegExReplace</h1>

<p>文字列の中にあるパターン（正規表現）の出現箇所を置き換えます。</p>

<pre class="Syntax">NewStr := <span class="func">RegExReplace</span>(Haystack, NeedleRegEx <span class="optional">, Replacement, &amp;OutputVarCount, Limit, StartingPos</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Haystack</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>The string whose content is searched and replaced. バイナリーゼロを含む場合があります。</p>
  </dd>

  <dt>NeedleRegEx</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>検索するパターンで、Perl互換正規表現（PCRE）です。パターンの<a href="../misc/RegEx-QuickRef.htm#Options">オプション</a>がある場合は、文字列の先頭に含める必要があり、その後に閉じ括弧が続きます。例えば、<span class="regex"><span class="red">i)</span>abc.*123</span>というパターンは、大文字小文字を区別しないオプションをオンにし、"abc "の後に任意の文字が0回以上出現し、その後に "123 "が続くものを検索対象とします。オプションがない場合、")"はオプションです。例えば、<span class="regex">)abcは</span> <span class="regex">abcと</span>同等です。</p>
    <p><em>NeedleRegEx</em>はバイナリーゼロを含むことができませんが、<em>Haystack</em>内のバイナリーゼロに一致させるために、パターン<code>\x00</code>を使用することができます。</p>
  </dd>

  <dt>置換</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p id="BackRef">The string to be substituted for each match, which is plain text (not a regular expression). It may include backreferences like $1, which brings in the substring from <em>Haystack</em> that matched the first <a href="../misc/RegEx-QuickRef.htm#subpat">subpattern</a>. The simplest backreferences are $0 through $9, where $0 is the substring that matched the entire pattern, $1 is the substring that matched the first subpattern, $2 is the second, and so on. For backreferences above 9 (and optionally those below 9), enclose the number in braces; e.g. ${10}, ${11}, and so on. For <a href="RegExMatch.htm#NamedSubPat">named subpatterns</a>, enclose the name in braces; e.g. ${SubpatternName}. To specify a literal $, use $$ (this is the only character that needs such special treatment; backslashes are never needed to escape anything).</p>
    <p>To convert the case of a subpattern, follow the $ with one of the following characters: U or u (uppercase), L or l (lowercase), T or t (title case, in which the first letter of each word is capitalized but all others are made lowercase). For example, both $U1 and $U{1} transcribe an uppercase version of the first subpattern.</p>
    <p>Nonexistent backreferences and those that did not match anything in <em>Haystack</em> -- such as one of the subpatterns in <span class="regex">(abc)|(xyz)</span> -- are transcribed as empty strings.</p>
  </dd>

  <dt>&amp;OutputVarCount</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Specify a reference to a output variable in which to store the number of replacements that occurred (0 if none).</p>
  </dd>

  <dt>Limit</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>If <em>Limit</em> is omitted, it defaults to -1, which replaces <strong>all</strong> occurrences of the pattern found in <em>Haystack</em>. Otherwise, specify the maximum number of replacements to allow. The part of <em>Haystack</em> to the right of the last replacement is left unchanged.</p>
  </dd>

  <dt>StartingPos</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p><em>StartingPos</em>が省略された場合、デフォルトは 1（<em>Haystack</em>の先頭）です。それ以外の場合は、2文字目から始める場合は2、3文字目から始める場合は3、といった具合に指定します。If <em>StartingPos</em> is beyond the length of <em>Haystack</em>, the search starts at the empty string that lies at the end of <em>Haystack</em> (which typically results in no replacements).</p>
    <p>負の<em>StartingPos</em>を指定すると、その位置で右からスタートする。例えば、-1は最後の文字から、-2はその次の文字から始まります。<em>StartingPos</em>が <em>Haystack</em>の左端を越えようとした場合、<em>Haystack</em>の全てが検索される。</p>
    <p>0を指定すると、<em>Haystack</em>の末尾、つまり最後の文字の右側の位置から開始します。これは、<code>(?&lt;=a)</code>のようなゼロ幅のアサーションで使用することができます。</p>
    <p>Regardless of the value of <em>StartingPos</em>, the return value is always a complete copy of <em>Haystack</em> -- the only difference is that more of its left side might be unaltered compared to what would have happened with a <em>StartingPos</em> of 1.</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#strings">文字列</a></p>
<p>This function returns a version of <em>Haystack</em> whose contents have been replaced by the operation. If no replacements are needed, <em>Haystack</em> is returned unaltered.</p>

<h2 id="Errors">エラー</h2>
<p>An <a href="Error.htm">Error</a> is thrown if:</p>
<ul>
  <li>the pattern contains a syntax error; or</li>
  <li>an error occurred during the <em>execution</em> of the regular expression.</li>
</ul>
<p>For details, see <a href="RegExMatch.htm#Errors">RegExMatch</a>.</p>

<h2 id="Options">Options</h2>
<p>パターン "abc "の大文字小文字を区別しない<span class="regex"><span class="red">i)</span>abc</span>などの修飾語については、<a href="../misc/RegEx-QuickRef.htm#Options">オプション</a>を参照してください。</p>
<h2 id="Performance">パフォーマンス</h2>
<p>To replace simple substrings, use <a href="StrReplace.htm">StrReplace</a> because it is faster than RegExReplace.</p>
<p>If you know what the maximum number of replacements will be, specifying that for the <em>Limit</em> parameter improves performance because the search can be stopped early (this might also reduce the memory load on the system during the operation). For example, if you know there can be only one match near the beginning of a large string, specify a limit of 1.</p>
<p>パフォーマンスを向上させるため、最近使用された100個の正規表現をメモリ上にキャッシュしておきます（コンパイルされた状態）。</p>
<p><a href="../misc/RegEx-QuickRef.htm#Study">学習オプション(S)</a>は、（ループ内などで）何度も使用される正規表現のパフォーマンスを向上させることができる場合があります。</p>
<h2 id="Remarks">備考</h2>
<p>abc123 のようなほとんどの文字は、正規表現の中で文字通り使用することができます。ただし、<strong>\.*?+[{|()^$</strong>の前にバックスラッシュがないとリテラルとみなされない。例えば、<strong>.</strong>はリテラルピリオド、<strong>.</strong>はリテラルバックスラッシュです。エスケープを回避するには、\Q...\E.を使用します。事例：<span class="regex">\QLiteral Text\E</span>.</p>
<p>正規表現の中で、タブや改行などの特殊文字は、アクセント記号(`)またはバックスラッシュ(\)でエスケープすることができます。For example, `t is the same as \t.</p>
<p>正規表現の基本を学ぶ（またはパターン構文の記憶を取り戻す）には、<a href="../misc/RegEx-QuickRef.htm">RegExクイックリファレンス</a>をご覧ください。</p>
<h2 id="Related">関連</h2>
<p><a href="RegExMatch.htm">RegExMatch</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>, <a href="../misc/RegExCallout.htm">Regular Expression Callouts</a>, <a href="StrReplace.htm">StrReplace</a>, <a href="InStr.htm">InStr</a></p>
<p>テキストデータの一般的なソース：<a href="FileRead.htm">FileRead</a>, <a href="Download.htm">Download</a>, <a href="A_Clipboard.htm">A_Clipboard</a>, <a href="GuiControls.htm#Edit">GUI Edit controls</a></p>
<h2 id="Examples">例</h2>
<p>一般的なRegExの例については、<a href="../misc/RegEx-QuickRef.htm">RegExクイックリファレンス</a>を参照してください。</p>
<div class="ex" id="ExDollar">
<p><a class="ex_number" href="#ExDollar"></a> Reports "abc123xyz" because the $ allows a match only at the end.</p>
<pre>MsgBox RegExReplace("abc123123", "123$", "xyz")</pre>
</div>

<div class="ex" id="ExCaseInsens">
<p><a class="ex_number" href="#ExCaseInsens"></a> Reports "123" because a match was achieved via the case-insensitive option.</p>
<pre>MsgBox RegExReplace("abc123", "i)^ABC")</pre>
</div>

<div class="ex" id="ExBackref">
<p><a class="ex_number" href="#ExBackref"></a> Reports "aaaXYZzzz" by means of the $1 <a href="#BackRef">backreference</a>.</p>
<pre>MsgBox RegExReplace("abcXYZ123", "abc(.*)123", "aaa$1zzz")</pre>
</div>

<div class="ex" id="ExOutputVarCount">
<p><a class="ex_number" href="#ExOutputVarCount"></a> Reports an empty string and stores 2 in <var>ReplacementCount</var>.</p>
<pre>MsgBox RegExReplace("abc123abc456", "abc\d+", "", &amp;ReplacementCount)</pre>
</div>

</body>
</html>
