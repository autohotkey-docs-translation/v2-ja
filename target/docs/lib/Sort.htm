<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Sort - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Sort関数は、変数の内容をアルファベット順、数値順、ランダム順に並べる（オプションで重複を削除）。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Sort</h1>

<p>変数の内容をアルファベット順、数値順、ランダム順に並べます（オプションで重複を削除します）。</p>

<pre class="Syntax">SortedString := <span class="func">Sort</span>(String <span class="optional">, Options, Callback</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>String</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>The string to sort.</p>
  </dd>

  <dt>Options</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>If blank or omitted, <em>String</em> will be sorted in ascending alphabetical order (case-insensitive), using a linefeed (`n) as separator. それ以外の場合は、以下の<a href="#Options">「オプション」セクション</a>から1つ以上のオプション文字列を指定する（任意の順序で、間に任意のスペースを入れる）。</p>
  </dd>
  
  <dt id="callback">Callback</dt>
  <dd>
    <p>型：<a href="../misc/Functor.htm">機能オブジェクト</a></p>
    <p>If omitted, no custom sorting will be performed. そうでない場合は、リスト内の任意の2つの項目を比較する関数を呼び出すように指定する。</p>
    <p>コールバックは3つのパラメーターを受け取り、以下のように<a href="../Functions.htm#intro">定義</a>できる：</p>
    <pre class="NoIndent">MyCallback(First, Second, Offset) { ...</pre>
    <p>パラメータに与える名前は重要ではないが、以下の値が順次割り当てられる：</p>
    <ol>
      <li>最初の項目。</li>
      <li>２つ目の項目。</li>
      <li>元の/ソートされていないリストで見た、最初の項目から2番目の項目のオフセット（文字数）（例を参照）。</li>
    </ol>
    <p>対応する情報が不要な場合、コールバックのパラメータリストの最後から1つ以上のパラメータを省略することができますが、この場合、<code>MyCallback(Param1, *)</code>のように、最後のパラメータとしてアスタリスクを指定する必要があります。</p>
    <p>2つのパラメータが等しいと判断した場合は、0、""、または何も返さず、そうでない場合は負の整数を返します。返される値に小数点がある場合、その部分は無視されます（つまり0.8は0と同じ）。</p>
    <p>コールバックは、それを呼び出したSort関数と同じグローバルな（あるいはスレッド固有の）設定を使用します。</p>
    <p class="note"><strong>注：</strong> <em>Callback</em>を指定したときは、D、Z、U以外のすべてのオプションは無視されます。ただし、N、C、CLは<a href="#unique">重複の</a>検出方法にも影響します。</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#strings">文字列</a></p>
<p>この関数は、指定された文字列をソートして返します。</p>

<h2 id="Options">Options</h2>
<p><strong>C</strong>、<strong>C1</strong>または<strong>COn</strong>：大文字小文字を区別してソートします（Nオプションがある場合は無視されます）。</p>
<p><strong>C0</strong>または<strong>COff</strong>：大文字小文字を区別しないソート。大文字のA-Zは、小文字のA-Zと同じとみなされます。これは、他の大文字小文字の区別オプションが使われていない場合のデフォルト・モードです。</p>
<p><strong>CL</strong>または<strong>CLocale</strong>：現在のユーザーのロケールに基づき、大文字小文字を区別せずにソートします。例えば、ほとんどの英語と西ヨーロッパのロケールでは、A-Zの文字とÄやÜなどのANSI文字が小文字と同じように扱われます。また、この方法では、「coop」と「co-op」のような単語が一緒になるようにハイフンやアポストロフィーを処理する「ワードソート」を使用しています。ソートされる項目の内容にもよるが、デフォルトの不感症の方法よりも1倍から8倍パフォーマンスが悪くなります。</p>
<p><strong>CLogical：</strong> <em>CLocaleと似て</em>いるが、文字列中の数字はテキストではなく数値の内容とみなされます。例えば、"A2 "は "A10 "よりも小さいとみなされる。しかし、2つの数値が先頭のゼロの有無によってのみ異なる場合、先頭のゼロがある文字列は、もう一方の文字列よりも<em>小さい</em>とみなされることがある。正確な動作はOSのバージョンによって異なる場合があります。</p>
<p><strong>D</strong><em>x</em>：区切り文字として<em>x</em>を指定し、各項目の始まりと終わりを決定する。区切り文字は常に大文字と小文字を区別します。このオプションがない場合、<em>x</em>のデフォルトは改行（`n）です。ほとんどの場合、行末がCR+LF（`r`n）であっても機能するが、キャリッジリターン（`r）は比較に含まれるため、ソートの順番に影響します。例えば、<code>"B`r`nA"</code>は期待通りにソートされるが、<code>"A`r`nA`t`r`nB"</code>は<code>A`t`r</code>を <code>A`r</code>の前に置く。</p>
<p><strong>N：</strong>数値ソート。各項目は文字列ではなく数値であるとみなされます（たとえば、このオプションがない場合、アルファベット順のため、文字列233は文字列40より小さいとみなされます）。10進数および16進数の文字列（例えば0xF1）はいずれも数値とみなされます。数字で始まらない文字列は、ソートの目的上ゼロとみなされます。数値は64ビットの浮動小数点値として扱われ、各数値の10進数部分（もしあれば）が考慮されます。</p>
<p><strong>P</strong><em>n</em>：文字位置<em>n</em>に基づいて項目をソートする（<em>n</em>には 16 進数を使用しない）。このオプションがない場合、<em>n</em>のデフォルトは1で、これは最初の文字の位置である。ソートは各文字列を<em>n</em>文字目から他の文字列と比較する。<em>n</em>が文字列の長さより大きい場合、その文字列はソートの目的のために空白であるとみなされる。オプションN（数値ソート）と併用する場合、文字列の文字位置が使われるが、これは必ずしも数値の桁位置と同じではない。</p>
<p><strong>R：</strong>逆順に並べ替える（アルファベット順か数字順かは他のオプションによる）。</p>
<p><strong>Random：</strong>ランダムな順序でソートする。このオプションは、D、Z、U以外のすべてのオプションを無視する（ただし、N、C、CLは重複の検出方法に影響を与える）。例：</p>
<pre>MyVar := Sort(MyVar, "Random")
MyVar := Sort(MyVar, "Random Z D|")</pre>
<p id="unique"><strong>U：</strong>リストから重複する項目を削除し、すべての項目が一意になるようにします。Cオプションが有効な場合、同一とみなされるためには、項目の大文字と小文字が一致しなければならない。Nオプションが有効な場合、2のような項目は2.0と重複しているとみなされる。Pオプションまたは(バックスラッシュ)オプションのいずれかが有効な場合、ソートに使用される部分文字列だけでなく、項目全体が重複していなければなりません。ランダム・オプションまたは<a href="#callback">カスタム・ソート</a>が有効な場合、重複は、ソートの結果、隣接して表示された場合にのみ削除される。例えば、<code>"A|B|A"</code>がランダムにソートされた場合、結果には1つまたは2つのAが含まれる可能性があります。</p>
<p><strong>Z：</strong>このオプションを理解するために、<code>"RED`nGREEN`nBLUE`n"</code>を含む変数を考えてみよう。Zオプションがない場合、最後の改行(`n)は最後の項目の一部とみなされるため、項目は3つしかありません。しかし、Zを指定することで、最後の`n（存在する場合）はリストの最後にある空白の項目を区切るとみなされるため、4つの項目（最後の項目は空白）が存在することになります。</p>
<p><strong>\：</strong>各項目の最後のバックスラッシュに続く部分文字列に基づいて項目をソートします。項目にバックスラッシュがない場合は、項目全体が部分文字列として使われる。このオプションは、以下の例のように、（パスを除いた）素のファイル名をソートするのに便利です。この例では、AAA.txt行がBBB.txt行の上にソートされるが、これはソートの目的上、これらのディレクトリが無視されるからです：</p>
<pre>C:\BBB\AAA.txt
C:\AAA\BBB.txt</pre>
<p class="note"><strong>注：</strong>NとPのオプションは、N(バックスラッシュ)オプションがある場合は無視されます。</p>

<h2 id="Remarks">備考</h2>
<p>この関数は通常、行末が改行文字（`n）で終わる行のリストを含む変数をソートするために使われる。行のリストを変数に取り込む1つの方法は、<a href="FileRead.htm">FileRead</a>でファイル全体を読み込むことである。</p>
<p>大きな変数がソートされ、後でその内容が不要になった場合、例えば<code>MyVar := ""</code>のように空白にすることでメモリを解放することができます。</p>

<h2 id="Related">関連</h2>
<p><a href="FileRead.htm">FileRead</a>、<a href="LoopRead.htm">ファイル読み込みループ</a>、<a href="LoopParse.htm">解析ループ</a>、<a href="StrSplit.htm">StrSplit</a>、<a href="CallbackCreate.htm">CallbackCreate</a>、<a href="A_Clipboard.htm">A_Clipboard</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExNumbers">
<p><a class="ex_number" href="#ExNumbers"></a> コンマで区切られた数値のリストをソートする。</p>
<pre>MyVar := "5,3,7,9,1,13,999,-4"
MyVar := Sort(MyVar, "N D,")  <em>; Sort numerically, use comma as delimiter.</em>
MsgBox MyVar   <em>; The result is -4,1,3,5,7,9,13,999</em></pre>
</div>

<div class="ex" id="ExFileContents">
<p><a class="ex_number" href="#ExFileContents"></a> ファイルの内容をソートする。</p>
<pre>Contents := <a href="FileRead.htm">FileRead</a>("C:\Address List.txt")
FileDelete "C:\Address List (alphabetical).txt"
FileAppend Sort(Contents), "C:\Address List (alphabetical).txt"
Contents := "" <em>; メモリを解放します。</em></pre>
</div>

<div class="ex" id="ExFilenames">
<p><a class="ex_number" href="#ExFilenames"></a> 開いているエクスプローラーウィンドウからファイルをコピーし、ソートされたファイル名をクリップボードに置くホットキーを作成します。</p>
<pre>#c:: <em>; Win+C</em>
{
    A_Clipboard := "" <em>; Must be blank for detection to work.</em>
    Send "^c"
    if !ClipWait(2)
        return
    MsgBox "Ready to be pasted:`n" Sort(A_Clipboard)
}</pre>
</div>

<div class="ex" id="ExCustom">
<p><a class="ex_number" href="#ExCustom"></a> コールバック関数によるカスタム・ソートのデモンストレーション。</p>
<pre>MyVar := "This`nis`nan`nexample`nstring`nto`nbe`nsorted"
MsgBox Sort(MyVar,, LengthSort)
LengthSort(a1, a2, *)
{
    a1 := StrLen(a1), a2 := StrLen(a2)
    return a1 &gt; a2 ? 1 : a1 &lt; a2 ? -1 : 0  <em>; Sorts according to the lengths determined above.</em>
}

MyVar := "5,3,7,9,1,13,999,-4"
MsgBox Sort(MyVar, "D,", IntegerSort)
IntegerSort(a1, a2, *)
{
    return a1 - a2  <em>; Sorts in ascending numeric order. This method works only if the difference is never so large as to overflow a signed 64-bit integer.</em>
}

MyVar := "1,2,3,4"
MsgBox Sort(MyVar, "D,", ReverseDirection)  <em>; Reverses the list so that it contains 4,3,2,1</em>
ReverseDirection(a1, a2, offset)
{
    return offset  <em>; Offset is positive if a2 came after a1 in the original list; negative otherwise.</em>
}

MyVar := "a bbb cc"
<em>; Sorts in ascending length order; uses a <a href="../Variables.htm#fat-arrow">fat arrow function</a>:</em>
MsgBox Sort(MyVar, "D ", (a,b,*) =&gt; StrLen(a) - StrLen(b))
</pre>
</div>

</body>
</html>
