<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>SendMessage - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="SendMessage関数は、ウィンドウまたはコントロールにメッセージを送信し、確認応答を待ちます。" />
<meta name="ahk:equiv-v1" content="lib/PostMessage.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>SendMessage</h1>

<p>ウィンドウまたはコントロールにメッセージを送信し、応答を待ちます。</p>

<pre class="Syntax">Result := <span class="func">SendMessage</span>(MsgNumber <span class="optional">, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText, Timeout</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>MsgNumber</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>送信するメッセージ番号です。<a href="../misc/SendMessageList.htm">メッセージリスト</a>を参照して番号を決定してください。</p>
  </dd>

  <dt>wParam, lParam</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#objects">オブジェクト</a></p>
    <p>どちらかを省略したときは、0を送信します。そうでなければ、メッセージの1番目と2番目のコンポーネントを指定します。</p>
    <p>各パラメータは、<a href="../Concepts.htm#numbers">整数</a>または<a href="Buffer.htm">Buffer</a>などの<a href="Buffer.htm#Ptr">Ptr</a>プロパティを持つオブジェクトでなければなりません。文字列へのポインタが必要なメッセージには、Bufferまたは<a href="StrPtr.htm">StrPtr</a>関数を使用します。SendMessageに変数のアドレスを渡して変数が含む文字列を変更した場合、その後<a href="VarSetStrCapacity.htm#neg1">VarSetStrCapacity(&amp;MyVar, -1)</a>を呼び出して変数の長さを更新する必要があります。</p>
    <p>AutoHotkeyまたはターゲットウィンドウが32ビットの場合、パラメータの下位32ビットのみが使用されます。つまり、符号付き値の場合は-2147483648～2147483647（-0x80000000～0x7FFFFFFF）、符号なし値の場合は0～4294967295（0xFFFFFF）範囲外の場合は値が切り捨てられます。AutoHotkeyとターゲットウィンドウの両方が64ビットである場合、<a href="../Concepts.htm#pure-numbers">AutoHotkeyがサポートする</a>任意の整数値を使用することができます。</p>
  </dd>

  <dt>Control</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>、<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#objects">オブジェクト</a></p>
    <p>省略したときは、メッセージはターゲットウィンドウのコントロールにではなく、ウィンドウそのものに送信されます。そうでなければ、コントロールのClassNN、テキストまたはHWNDか、<code>Hwnd</code>プロパティを持つオブジェクトを指定します。詳しくは<a href="Control.htm#Parameter">Controlパラメータ</a>をご覧ください。</p>
    <p>本パラメータでHWND（整数またはオブジェクト）を指定する場合、コントロール（子ウィンドウ）のHWNDであることは必須ではありません。つまり、トップレベルウィンドウのHWNDにもなり得るのです。</p>
  </dd>

  <dt>WinTitle, WinText, ExcludeTitle, ExcludeText</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>、<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#objects">オブジェクト</a></p>
    <p>もしこれらの項目が未設定または省略されたときは、<a href="../misc/WinTitle.htm#LastFoundWindow">最後に見つかったウィンドウ</a>が使用されます。そうでないときは、<em>WinTitle</em>に <a href="../misc/WinTitle.htm">ウィンドウタイトルまたはターゲットウィンドウを識別するための他の基準</a>、および/または<em>WinText</em>にターゲットウィンドウの単一のテキスト要素からの部分文字列（付属のWindow Spyユーティリティを使えばわかります）を指定します。</p>
    <p><em>ExcludeTitle</em>と<em>ExcludeText</em>はウィンドウのタイトルまたはテキストで除外するために使用します。指定の仕方は<em>WinTitle</em>と<em>WinText</em>に似ていますが、<em>ExcludeTitle</em>はウィンドウのタイトル以外の基準（ウィンドウクラスやHWNDなど）を認識しません。</p>
    <p>ウィンドウのタイトルとテキストは大文字と小文字を区別します。<a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>関数と<a href="DetectHiddenText.htm">DetectHiddenText</a>関数で変更しない限り、初期設定では非表示ウィンドウは検出されず、非表示テキストは検出されます。<a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>関数で変更しない限り、初期設定ではウィンドウのタイトルはその中のどこかに<em>WinTitle</em>または<em>ExcludeTitle</em>を含んでいれば一致します。</p>
  </dd>

  <dt>Timeout</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>省略したときの初期値は5000です。Otherwise, specify the maximum number of milliseconds to wait for the target window to process the message. この時間内にメッセージが処理されない場合、<a href="Error.htm#TimeoutError">TimeoutError</a>が投げられます。Specify 0 to wait indefinitely. A negative number causes SendMessage to time out immediately.</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>この関数はメッセージの結果を返します。メッセージの性質やターゲットウィンドウによっては、「返信」となる場合があります。</p>
<p>設定可能な値の範囲は、ターゲットウィンドウと実行中のAutoHotkeyのバージョンに依存します。32ビット版のAutoHotkeyを使用している場合、またはターゲットウィンドウが32ビットの場合、結果は0～4294967295の32ビット符号なし整数になります。64ビット版AutoHotkeyを64ビットウィンドウで使用する場合、結果は-9223372036854775808から9223372036854775807の間の64ビット符号付き整数となります。</p>
<p>結果が32ビット符号付き整数（-2147483648から2147483648までの値）を意図している場合、次のように32ビットに切り捨てて符号付き値に変換することができます：</p>
<pre>MsgReply := MsgReply &lt;&lt; 32 &gt;&gt; 32</pre>
<p>AutoHotkeyの64bit版でも、32bitウィンドウの結果はゼロ拡張されるため、この変換が必要な場合があります。例えば、32ビットウィンドウからの-1の結果は、どのバージョンのAutoHotkeyでも0xFFFFFFとして表示されますが、64ビットウィンドウからの-1の結果は、AutoHotkey 32ビットでは0xFFFFFF、AutoHotkey 64ビットでは-1として表示されます。</p>

<h2 id="Error_Handling">エラー処理</h2>
<p>ウィンドウまたはコントロールが見つからないときは、<a href="Error.htm#TargetError">TargetError</a>がスローされます。</p>
<p>メッセージがタイムアウトした場合、<a href="Error.htm#TimeoutError">TimeoutError</a>が投げられます。</p>
<p>メッセージが送信できなかったときは、<a href="Error.htm#OSError">OSError</a>がスローされます。例えば、ターゲットウィンドウがスクリプトよりも高い整合性レベルで実行されている場合（スクリプトは管理者として実行されているが、スクリプトはそうではない）、メッセージがブロックされることがあります。</p>

<h2 id="Remarks">備考</h2>
<p>誤ったウィンドウにメッセージを送信したり、無効なメッセージを送信したりすると、予期せぬ動作が発生したり、ターゲットアプリケーションがクラッシュしたりする可能性があるため、この関数は慎重に使用しなければなりません。これは、ほとんどのアプリケーションが、外部ソースからのある種のメッセージを期待するように設計されていないためです。</p>
<p>SendMessageは、ターゲットウィンドウがメッセージを処理するのを、タイムアウト時間まで待ちます。一方、<a href="PostMessage.htm">PostMessage</a>は、確認や返信を待たずに、ターゲットウィンドウに関連するメッセージキューにメッセージを配置します。</p>
<p>文字列パラメータは、<a href="StrPtr.htm">アドレス</a>で渡す必要があります。事例：</p>
<pre>ListVars
WinWaitActive "ahk_class AutoHotkey"
SendMessage 0x000C, 0, StrPtr("New Title")  <em>; 0X000CはWM_SETTEXTです。</em></pre>
<p>非表示や無効になっているものも含め、システム内のすべてのウィンドウにメッセージを送るには、<em>WinTitle</em>に <code>0xFFFF</code>を指定します（0xFFFFはHWND_BROADCAST）。この手法は、次の例のように、放送を目的としたメッセージにのみ使用する必要があります：</p>
<pre>SendMessage 0x001A,,,, 0xFFFF  <em>; 0x001AはWM_SETTINGCHANGEです。</em></pre>
<p>スクリプトにメッセージを受信させるには、<a href="OnMessage.htm">OnMessage</a>を使用します。</p>
<p>この機能の使い方については、「<a href="../misc/SendMessage.htm">メッセージチュートリアル</a>」をご覧ください。</p>

<h2 id="Related">関連</h2>
<p><a href="PostMessage.htm">PostMessage</a>、<a href="../misc/SendMessageList.htm">メッセージリスト</a>、<a href="../misc/SendMessage.htm">メッセージチュートリアル</a>、<a href="OnMessage.htm">OnMessage</a>、<a href="../misc/Winamp.htm">Winampの自動化</a>、<a href="DllCall.htm">DllCall</a>、<a href="ControlSend.htm">ControlSend</a>、<a href="MenuSelect.htm">MenuSelect</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExMonitorPower">
<p><a class="ex_number" href="#ExMonitorPower"></a> ホットキーでモニターをオフにします。SendMessage行で、モニターの電源をオンにする場合は数字の2を-1に、モニターの低電力モードを有効にする場合は数字を1に置き換えてください。</p>
<pre>#o::  <em>; Win+O</em>
{
    Sleep 1000  <em>; Give user a chance to release keys (in case their release would wake up the monitor again).
    ; Turn Monitor Off:</em>
    SendMessage 0x0112, 0xF170, 2,, "Program Manager"  <em>; 0x0112 is WM_SYSCOMMAND, 0xF170 is SC_MONITORPOWER.</em>
}</pre>
</div>

<div class="ex" id="ExScreenSave">
<p><a class="ex_number" href="#ExScreenSave"></a> ユーザーが選択したスクリーンセーバーを起動します。</p>
<pre>SendMessage 0x0112, 0xF140, 0,, "Program Manager"  <em>; 0x0112 is WM_SYSCOMMAND, and 0xF140 is SC_SCREENSAVE.</em></pre>
</div>

<div class="ex" id="ExVScrollUp">
<p><a class="ex_number" href="#ExVScrollUp"></a> 1行分スクロールアップします（垂直スクロールバーを持つコントロールの場合）。</p>
<pre>SendMessage 0x0115, 0, 0, ControlGetFocus("A")</pre>
</div>

<div class="ex" id="ExVScrollDown">
<p><a class="ex_number" href="#ExVScrollDown"></a> 1行分スクロールダウンします（垂直スクロールバーを持つコントロールの場合）。</p>
<pre>SendMessage 0x0115, 1, 0, ControlGetFocus("A")</pre>
</div>

<div class="ex" id="ExWinamp">
<p><a class="ex_number" href="#ExWinamp"></a> Winampに、現在アクティブなトラック番号を問い合わせます（詳しくは「<a href="../misc/Winamp.htm">Winampの自動化</a>」を参照）。</p>
<pre>SetTitleMatchMode 2
TrackNumber := SendMessage(0x0400, 0, 120,, "- Winamp")
TrackNumber++  <em>; Winamp's count starts at 0, so adjust by 1.</em>
MsgBox "Track #" TrackNumber " is active or playing."
</pre>
</div>

<div class="ex" id="ExPID">
<p><a class="ex_number" href="#ExPID"></a> AHKスクリプトのプロセスIDを検索します（<a href="WinGetPID.htm">WinGetPID</a>の代わりとなるもの）。</p>
<pre>SetTitleMatchMode 2
DetectHiddenWindows true
PID := SendMessage(0x0044, 0x405, 0, , "SomeOtherScript.ahk - AutoHotkey v")
MsgBox PID " is the process id."</pre>
</div>

</body>
</html>
