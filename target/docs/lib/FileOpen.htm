<!DOCTYPE HTML>
<html lang="jac">
<head>
<title>FileOpen - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="FileOpen 関数は、ファイルを開いて特定のコンテンツを読み込んだり、新しいコンテンツを書き込んだりすることができます。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<style type="text/css">
.sized {
  width: 3em;
}
</style>
</head>
<body>

<h1>FileOpen</h1>

<p>ファイルを開いて、特定のコンテンツを読み込んだり、新しいコンテンツを書き込んだりします。</p>
<pre class="Syntax">FileObj := <span class="func">FileOpen</span>(Filename, Flags <span class="optional">, Encoding</span>)</pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Filename</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>開くファイルのパス。絶対パスが指定されていない場合は、<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>にあると仮定されます。</p>
    <p>以下のようにアスタリスク（または2つ）を指定すると、標準入力／出力／エラーストリームを開くことができます：</p>
    <pre>
FileOpen("*", "r")   <em>; 標準入力用</em>
FileOpen("*", "w")   <em>; 標準出力用</em>
FileOpen("**", "w")  <em>; 標準エラー用</em></pre>
  </dd>

  <dt>フラグ</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p>希望するアクセスモードを示す文字列の後に他のオプション（オプションで空白またはタブを挟む）が続くか、または数値フラグの組み合わせ（合計）です。サポートされる値は、以下の表のとおりです。</p>
  </dd>

  <dt>Encoding</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
    <p>If omitted, the default encoding (as set by <a href="FileEncoding.htm">FileEncoding</a> or CP0 otherwise) will be used. If blank, it defaults to CP0 (the system default ANSI code page). Otherwise, specify the encoding or code page to use for text I/O, e.g. <code>"UTF-8"</code>, <code>"UTF-16"</code>, <code>"CP936"</code> or <code>936</code>.</p>
    <p>If the file contains a UTF-8 or UTF-16 byte order mark (BOM), or if the <code>h</code> (handle) flag is used, this parameter and the default encoding will be ignored, unless the file is being opened with write-only access (i.e. the previous contents of the file are being discarded).</p>
  </dd>

</dl>

<h2 id="Flags">フラグ</h2>

<h3 id="Access_modes">アクセスモード（相互排他的）</h3>
<table class="info">
  <tr>
    <th class="sized center">フラグ</th>
    <th class="sized right">十進法</th>
    <th class="sized right">十六進法</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td class="center">r</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td><i>Read：</i>ファイルが存在しない場合、失敗します。</td>
  </tr>
  <tr>
    <td class="center">w</td>
    <td class="right">1</td>
    <td class="right">0x1</td>
    <td><i>Write：</i>新しいファイルを作成し、<b style="color:red">既存のファイルを上書き</b>します。</td>
  </tr>
  <tr>
    <td class="center">a</td>
    <td class="right">2</td>
    <td class="right">0x2</td>
    <td><i>Append：</i>ファイルが存在しない場合は新しいファイルを作成し、それ以外の場合はファイルポインタをファイルの末尾に移動します。</td>
  </tr>
  <tr>
    <td class="center">rw</td>
    <td class="right">3</td>
    <td class="right">0x3</td>
    <td><i>Read/Write：</i>ファイルが存在しなかった場合、新しいファイルを作成します。</td>
  </tr>
  <tr>
    <td class="center">h</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td><i>Filename</i>がオブジェクトにラップするためのファイルハンドルであることを示します。共有モードフラグは無視され、ハンドルが表すファイルまたはストリームはバイトオーダーマークをチェックしない。ファイルオブジェクトが破棄されても、ファイルハンドルは自動的にクローズさ<u>れず</u>、<a href="File.htm#Close">File.Close</a>を呼び出しても何の効果もない。なお、<i>Filename</i>がパイプや通信機器などの非シーキングデバイスへのハンドルである場合は、<a href="File.htm#Seek">File.Seek</a>、<a href="File.htm#Pos">File.Pos</a>、<a href="File.htm#Length">File.Length</a>は使用しないこと。</td>
  </tr>
</table>

<h3 id="Sharing_mode_flags">Sharing mode flags</h3>
<table class="info">
  <tr>
    <th class="sized center">フラグ</th>
    <th class="sized right">十進法</th>
    <th class="sized right">十六進法</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td class="center">-rwd</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>読み取り、書き込み、および削除のアクセスに対してファイルをロックします。<code>r</code>、<code>w</code>、<code>d</code>の組み合わせは自由です。<code>-</code>を指定することは、<code>-rwd</code>を指定することと同じです。完全に省略された場合、デフォルトはすべてのアクセスを共有します。</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td><i>Flags</i>が数値の場合、共有モードフラグがない場合は、ファイルがロックされます。</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">256</td>
    <td class="right">0x100</td>
    <td><i>読み取り</i>アクセスを共有します。</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">512</td>
    <td class="right">0x200</td>
    <td><i>書き込み</i>アクセスを共有します。</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">1024</td>
    <td class="right">0x400</td>
    <td><i>削除</i>アクセスを共有します。</td>
  </tr>
</table>

<h3 id="EOL_options">End of line (EOL) options</h3>
<table class="info">
  <tr>
    <th class="sized center">フラグ</th>
    <th class="sized right">十進法</th>
    <th class="sized right">十六進法</th>
    <th abbr="説明">説明</th>
  </tr>
  <tr>
    <td class="center">`n</td>
    <td class="right">4</td>
    <td class="right">0x4</td>
    <td>読むときは<code>`r`n</code>を<code>`n</code>に、書くときは<code>`n</code>を<code>`r`n</code>に置き換えてください。</td>
  </tr>
  <tr>
    <td class="center">`r</td>
    <td class="right">8</td>
    <td class="right">0x8</td>
    <td>読み取り時にスタンドアロンの<code>`r</code>を<code>`n</code>に置き換える。</td>
  </tr>
</table>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#objects">オブジェクト</a></p>
<p>戻り値は、ファイルへのオープンハンドルをカプセル化した新しい<a href="File.htm">Fileオブジェクト</a>です。このオブジェクトのメソッドとプロパティを使用して、ファイルのコンテンツにアクセスします。</p>

<h2 id="Errors">エラー</h2>
<p>ファイルを開くことができない場合は、<a href="Error.htm#OSError">OSError</a>が投げられる。</p>

<h2 id="Remarks">備考</h2>
<p><a href="File.htm#ReadLine">File.ReadLine</a>は、<code>`n</code>、<code>`r`n</code>、<code>`r</code>を常に行末としてサポートし、<code>`r</code>または<code>`n</code>オプションが使用されているかどうかにかかわらず、その戻り値にそれらを含めないようにします。このオプションは、<a href="File.htm#Read">File.Read</a>によって返されたテキスト、<a href="File.htm#Write">File.Write</a>または<a href="File.htm#WriteLine">File.WriteLine</a>によって書き込まれたテキスト内の行末の変換にのみ影響します。</p>
<p>When a UTF-8 or UTF-16 file is created, a byte order mark (BOM) is written to the file <u>unless</u> <em>Encoding</em> or the default encoding (as set by <a href="FileEncoding.htm">FileEncoding</a>) is <code>"UTF-8-RAW"</code> or <code>"UTF-16-RAW"</code>.</p>
<p>UTF-8またはUTF-16のバイトオーダーマーク（BOM）を含むファイルを読み込みアクセスで開いた場合、ファイルポインタをBOMの後に配置することで出力から除外されるようにしました。そのため、<a href="File.htm#Pos">File.Pos</a>では、ファイルを開いた直後に3や2を報告することがあります。</p>
<p>If necessary, the write buffer can be flushed using <a href="File.htm#Read">File.Read</a> such as <code>FileObj.Read(0)</code>. See <a href="#ExStreams">example #3</a> below.</p>

<h2 id="Related">関連</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>、<a href="File.htm">Fileオブジェクト</a>、<a href="FileRead.htm">FileRead</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExWriteRead">
<p><a class="ex_number" href="#ExWriteRead"></a> ファイルにテキストを書き込み、それをメモリに読み戻します（<a href="DllCall.htm#ExFile">このDllCallの例</a>と同じ機能を提供します）。</p>
<pre>FileName := FileSelect("S16",, "Create a new file:")
if (FileName = "")
    return
try
    FileObj := FileOpen(FileName, "w")
catch as Err
{
    MsgBox "Can't open '" FileName "' for writing."
        . "`n`n" Type(Err) ": " Err.Message
    return
}
TestString := "This is a test string.`r`n"  <em>; この方法でファイルを書く場合、改行には `n ではなく `r`n を使用します。</em>
FileObj.Write(TestString)
FileObj.Close()

<em>; ファイルが書き込まれたので、その内容をメモリに読み返してください。</em>
try
    FileObj := FileOpen(FileName, "r-d") <em>; ファイルを読み込み（r）は、削除（-d）を除くすべてのアクセスを共有します。</em>
catch as Err
{
    MsgBox "Can't open '" FileName "' for reading."
        . "`n`n" Type(Err) ": " Err.Message
    return
}
CharsToRead := StrLen(TestString)
TestString := FileObj.Read(CharsToRead)
FileObj.Close()
MsgBox "The following string was read from the file: " TestString</pre>
</div>

<div class="ex" id="ExReadLine">
<p><a class="ex_number" href="#ExReadLine"></a> スクリプトを読み取り専用で開き、その1行目を読み取る。</p>
<pre>Script := FileOpen(A_ScriptFullPath, "r")
MsgBox Script.ReadLine()</pre>
</div>

<div class="ex" id="ExStreams">
<p><a class="ex_number" href="#ExStreams"></a> 標準入出力ストリームの使い方を説明します。</p>
<pre><em>; このデモのためにコンソールウィンドウを開いてください：</em>
DllCall("AllocConsole")
<em>; アプリケーションのstdin/stdoutストリームをオープンします。</em>
stdin  := FileOpen("*", "r")
stdout := FileOpen("*", "w")
stdout.Write("Enter your query.`n\&gt; ")
stdout.Read(0) <em>; 書き込みバッファをフラッシュします。</em>
query := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Your query was '" query "'. Have a nice day.")
stdout.Read(0) <em>; 書き込みバッファをフラッシュします。</em>
Sleep 5000
</pre>
</div>
</body>
</html>
