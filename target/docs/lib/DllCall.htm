<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>DllCall - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="DllCall関数は、Windows標準のAPI関数など、DLL内部の関数を呼び出します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>DllCall</h1>

<p>Windows標準のAPI関数など、DLL内部の関数を呼び出します。</p>

<pre class="Syntax">Result := <span class="func">DllCall</span>("<span class="optional">DllFile\</span>Function" <span class="optional">, Type1, Arg1, Type2, Arg2, "Cdecl ReturnType"</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>[DllFile\]Function</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
      <p>DLLまたはEXEのファイル名の後にバックスラッシュを付け、関数名を指定します。事例：<code>"MyDLL\MyFunction"</code>（ファイル拡張子".dll "は省略時のデフォルトです）。絶対パスが指定されない場合、<em>DllFile</em>はシステムのPATHまたは<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>にあるとみなされます。なお、DllCallはバックスラッシュを含むパスを想定しています(\)。フォワードスラッシュ（/）はサポートされていません。</p>
      <p id="std">User32.dll、Kernel32.dll、ComCtl32.dll、Gdi32.dllに存在する関数を呼び出す場合、<em>DllFile</em>を省略することができます。例えば、<code>"User32IsWindowVisible"</code>は<code>"IsWindowVisible"</code>と同じ結果を得ることができる。</p>
      <p>指定された名前の関数が見つからない場合は、自動的に "W"（ユニコード）の接尾辞が付加されます。例えば、<code>"MessageBox"</code>は<code>"MessageBoxW"</code>と同じです。</p>
      <p>DLLを<em>繰り返し</em>呼び出す場合、<a href="#load">あらかじめロードして</a>おくことでパフォーマンスを飛躍的に向上させることができます。</p>
      <p>このパラメータは、呼び出す関数のアドレスとして解釈される整数値のみからなることもあります。このようなアドレスのソースには、<a href="#COM">COM</a>と <a href="CallbackCreate.htm">CallbackCreate</a>があります。</p>
      <p>このパラメータがオブジェクトである場合、オブジェクトの<code>Ptr</code>プロパティの値が使用されます。そのようなプロパティが存在しない場合、<a href="Error.htm#PropertyError">PropertyError</a>が投げられる。</p>
  </dd>

  <dt>Type1, Arg1</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p>これらのペアはそれぞれ、関数に渡される1つのパラメータを表しています。組数は無制限です。<em>タイプ</em>については、以下の<a href="#types">タイプ表</a>をご参照ください。<em>Arg</em>の場合、関数に渡す値を指定します。</p>
  </dd>

  <dt>Cdecl ReturnType</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
      <p id="cdecl">ほとんどの関数は「C」呼び出し規約ではなく、標準呼び出し規約を使用しているため、<em>Cdecl</em>という言葉は通常省略されます（wsprintfのように様々な数の引数を受け付ける関数は例外です）。なお、オブジェクト指向のC++関数の多くは<i>thiscall</i>の規約を使用していますが、これはサポートされていません。</p>
      <p>存在する場合、<em>Cdecl</em>という単語は、（もしあれば）戻り値の型の前に記載されるべきです。単語と単語の間は、スペースまたはタブで区切る。事例：<code>"Cdecl Str"</code>.</p>
      <p>64ビットコードには個別の "C" 呼び出し規約が存在しないため、<i>Cdecl</i>を指定することができますが、AutoHotkeyの64ビットビルドには何の効果もありません。</p>
      <p><em>ReturnType</em>:関数が32ビット符号付き整数（Int）、BOOL、または何も返さない場合は、<em>ReturnType</em>を省略することができる。それ以外の場合は、以下の<a href="#types">型式表</a>からいずれかの引数型を指定します。<a href="#asterisk">接尾辞のアスタリスク</a>にも対応しています。</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#numbers">整数</a></p>
<p>DllCallは、<em>Function</em>が返す実際の値を返します。<em>Function</em>が値を返さない型の場合、結果は指定された戻り値の型（デフォルトでは整数）の未定義値です。</p>

<h2 id="types">引数の種類と戻り値</h2>
<table class="info">
<tr>
<th>Type</th>
<th abbr="説明">説明</th>
</tr>
<tr id="str">
<td>Str</td>
<td>
  <p><code>Blue"</code>などの文字列や<code>MyVar</code>、あるいは<code>&amp;MyVar</code>などの<a href="../Concepts.htm#variable-references">VarRef</a>を指定します。呼び出された関数が文字列を変更し、引数が裸の変数または VarRef である場合、その内容が更新されます。例えば、次のように呼び出すと、<em>MyVar</em>の中身を大文字に変換します：<code>DllCall("CharUpper", "Str", <i>MyVar</i>)</code>.</p>
  <p>関数がパラメータの入力値よりも長い文字列を保存するように設計されている場合（またはパラメータが出力のみの場合）、推奨される方法は、<a href="#ExWsprintf">wsprintfの例</a>のように、<a href="Buffer.htm">Buffer</a>を作成し、<a href="#ptr">Ptr</a>型を使ってそれを渡し、関数が戻った後に<a href="StrGet.htm">StrGet</a>を使って文字列を取得する方法です。</p>
  <p>そうでない場合は、関数を呼び出す前に、変数が十分な大きさであることを確認します。ここで、123は<em>MyVar</em>が保持しなければならない16ビット単位（緩やかに文字と呼ばれる）の数である、<code><a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>(MyVar, 123)</code>を呼び出すことで実現できる。戻り時に変数がヌル終端でない場合は、バッファオーバーランによりメモリが破壊された可能性が高いので、エラーメッセージを表示してプログラムを終了します。これは通常、変数の容量が不足していることを意味します。</p>
  <p><em>Str</em>引数は、数値（<code>i+1</code>など）に評価される<a href="../Variables.htm#Expressions">式</a>であってはならない。もしそうであれば、関数は呼び出されず、<a href="Error.htm#TypeError">TypeError</a>が投げられる。</p>
  <p id="strp">めったに使われない<a href="#asterisk">Str*</a>arg型は、文字列のアドレスを含む一時変数のアドレスを渡します。関数が一時変数に新しいアドレスを書き込むと、<a href="../Concepts.htm#variable-references">VarRef</a>が渡された場合、新しい文字列はスクリプトの変数にコピーされます。これは、"TCHAR **"や "LPTSTR *"のようなものを期待する関数で使用することができます。しかし、関数がメモリを確保し、呼び出し側がそれを解放することを期待する場合（<a href="https://learn.microsoft.com/windows/win32/api/combaseapi/nf-combaseapi-cotaskmemfree">CoTaskMemFree</a>を呼び出すなど）、代わりに<code>Ptr*</code>arg型を使用する必要があります。</p>
  <p class="note"><strong>注意</strong>：関数に文字列を渡すときは、その関数がどの<a href="../Compat.htm#DllCall"><i>型</i></a>の<a href="../Compat.htm#DllCall">文字列</a>を期待しているかを意識してください。</p></td>
</tr>
<tr>
  <td><span id="wstr"></span>WStr</td>
  <td>AutoHotkeyはUTF-16をネイティブで使用するため、WStr（ワイド文字列）はStrと同等です。</td>
</tr>
<tr>
  <td><span id="astr"></span>AStr</td>
  <td>
    <p>AStr を指定すると、入力値が自動的に ANSI に変換されます。この変換に使用される一時メモリは、変換された入力文字列分の大きさしかないため、関数によって書き込まれた値は破棄されます。出力パラメータとしてANSI文字列を受け取るには、次の例に従います：</p>
<pre>buf := Buffer(<i>length</i>)  <em>; 一時的なバッファを確保します。</em>
DllCall("<i>Function</i>", "ptr", buf)  <em>; バッファを関数に渡す。</em>
str := StrGet(buf, "cp0")  <em>; バッファからANSI文字列を取得します。</em>
</pre>
    <p>まれに使われる<a href="#asterisk">AStr*</a>arg型もサポートされており、新しい文字列がANSIからネイティブフォーマットであるUTF-16に変換される以外は<a href="#strp">Str*</a>型と同様の動作をします。</p>
    <p>同等のWin32型などについては、「<a href="../Compat.htm#DllCall">バイナリ互換性</a>」を参照してください。</p>
  </td>
</tr>
<tr>
  <td>Int64</td>
  <td>64ビット整数で、範囲は-9223372036854775808（-0x800000000000）～9223372036854775807（0x7FFFFFFFFFFFF）です。</td>
</tr>
<tr id="Int">
  <td>Int</td>
  <td><p>32ビット整数（最も一般的な整数型）で、その範囲は-2147483648（-0x80000000）～2147483647（0x7FFFFFFFF）です。Intは "Long "と呼ばれることもあります。</p>
    <p>また、関数が期待するBOOL引数（BOOL値は1か0のどちらかでなければならない）には、Intを使用しなければならない。</p>
    <p>また、<a href="#unsigned">符号なし</a>Int（UInt）はDWORDなど、かなり頻繁に使用されます。</p></td>
</tr>
<tr>
  <td>Short</td>
  <td>16ビットの整数で、範囲は-32768（-0x8000）～32767（0x7FFF）です。<a href="#unsigned">符号なし</a>ショート（UShort）は、WORDを期待する関数で使用することができます。</td>
</tr>
<tr>
  <td>Char</td>
  <td>8ビットの整数で、範囲は-128（-0x80）～127（0x7F）です。<a href="#unsigned">符号なし</a>文字（UChar）は、BYTEを期待する関数で使用することができます。</td>
</tr>
<tr>
  <td>Float</td>
  <td>32ビット浮動小数点数で、6桁の精度を持つ。</td>
</tr>
<tr>
  <td>Double</td>
  <td>64ビットの浮動小数点数で、15桁の精度を持つ。</td>
</tr>
<tr id="ptr">
  <td>Ptr</td>
  <td><p><a href="../Variables.htm#PtrSize">ポインタサイズ</a>の整数で、スクリプトを実行するexeが32ビットか64ビットかに応じて、IntまたはInt64に相当します。<i>Ptr</i>は、配列や構造体へのポインタ（RECT*やLPPOINTなど）や、ほとんどすべてのハンドル（HWND、HBRUSH、HBITMAPなど）に使用する必要があります。パラメータがLPDWORDやint*のような単一の数値へのポインタの場合、一般に "Ptr"の代わりに*またはP接尾辞を使用する必要があります。</p>
  <p>Ptrパラメータにオブジェクトが渡された場合、そのオブジェクトの<code>Ptr</code>プロパティの値が使用されます。そのようなプロパティが存在しない場合、<a href="Error.htm#PropertyError">PropertyError</a>が投げられる。通常、オブジェクトは<a href="Buffer.htm">Buffer</a>となります。</p>
  <p>Ptr*パラメータにオブジェクトが渡された場合、呼び出し前にオブジェクトの<code>Ptr</code>プロパティの値が取得され、この値を含む一時変数のアドレスが関数に渡されます。関数が戻った後、新しい値はオブジェクトの<code>Ptr</code>プロパティに再び割り当てられます。</p>
  <p><i>Ptr</i>は接尾辞に*やPを付けて使うこともできます。LPVOID*などを使ってポインタを出力する関数と一緒に使う必要があります。</p>
  <p><i>UPtr</i>も有効ですが、AutoHotkeyは符号なし64ビット整数をサポートしていないため、32ビットビルドでは符号なしのみです。</p>
  <p class="note"><strong>注意</strong>：<strong>NULL</strong>ハンドルまたはポインタを渡す場合は、整数0を渡します。</p></td>
</tr>
<tr id="asterisk">
  <td>* or P<br>
    (suffix)</td>
  <td><p>上記の型のいずれかにアスタリスク（オプションでその前にスペース）を付けると、値そのものではなく、引数のアドレスが渡されます（呼び出された関数は、それを受け入れるように設計されていなければなりません）。このような引数の値は関数によって変更される可能性があるため、引数として<a href="../Concepts.htm#variable-references">VarRef</a>を渡すと、関数が戻った後にその変数の内容が更新されます。例えば、次の呼び出しでは、MyVarの内容をアドレスでMyFunctionに渡しますが、MyFunctionによる変更を反映してMyVarも更新されます：<code>DllCall("MyDll\MyFunction", "Int*", &amp;MyVar)</code>.</p>
    <p>一般に、関数が "LP "で始まる引数型や戻り値を持つ場合、アスタリスクが使用されます。最も一般的な例はLPDWORDで、これはDWORDへのポインタです。DWORDは符号なし32ビット整数なので、LPDWORDを表すには "UInt*"または "UIntP "を使用します。LPTSTRのような文字列型、LPRECTのような構造体へのポインタ、配列にはアスタリスクを使うべきではありません。これらには、文字列、アドレス、<a href="Buffer.htm">Bufferの</a>どれを渡すかによって、<a href="#str">"Str"</a>または<a href="#ptr">"Ptr"</a>を使うべきです。</p>
    <p class="note"><strong>注意</strong>："Char*"は<a href="#str">"Str"</a>と同じではありません。"Char*"は8ビット数値のアドレスを渡すのに対し、<a href="#str">"Str"</a>は一連の文字のアドレスを渡しますが、これはAutoHotkeyのバージョンによって16ビット（ユニコード）または8ビット（"AStr"の場合）であることがあります。同様に、"UInt*"は32ビット数値のアドレスを渡すので、関数が値の配列や32ビットより大きな構造体を期待する場合は使用しないでください。</p>
    <p>AutoHotkeyの変数には固定型がないため、関数に渡されるアドレスは、呼び出し元の変数ではなく、一時メモリを指しています。</p>
    </td>
</tr>
<tr id="unsigned">
  <td>U (prefix)</td>
  <td><p>上記の整数型の前にUを付けると、符号なし整数（UInt64、UInt、UShort、UChar）として解釈されます。厳密には、valueで渡される引数がunsignedかsignedかは関係ないので、戻り値や<a href="#asterisk">アスタリスク変数</a>にのみ必要です（Int64を除く）。</p>
    <p>符号なし引数に負の整数を指定した場合、整数は符号なし領域へ回り込みます。例えば、-1をUIntとして送信した場合、0xFFFFFFFとなります。</p>
    <p>関数で生成される<em>符号なし</em>64ビット整数はサポートされていません。したがって、0x800000000000以上の数値を扱う場合は、U接頭辞を省略し、関数から受け取った負の値を大きな整数として解釈してください。例えば、Int64として-1を返す関数は、UInt64を返すように設計されている場合、実際には0xFFFFFFFFFFFFを返すことになります。</p>
    </td>
</tr>
<tr id="HRESULT">
  <td>HRESULT</td>
  <td>
    <p>32ビット整数です。これは一般にCOM関数で使用され、接頭辞や接尾辞のない戻り値型としてのみ有効です。エラー値（<a href="https://learn.microsoft.com/windows/win32/api/winerror/nf-winerror-failed">FAILED マクロ</a>で定義される）は決して返されず、代わりに<a href="Error.htm#OSError">OSError</a>が投げられる。したがって、戻り値は0～2147483647の範囲の成功コードとなります。</p>
    <p>HRESULTは、<a href="ComCall.htm">ComCall</a>のデフォルトの戻り値タイプです。</p>
  </td>
</tr>
</table>

<h2 id="error">エラー</h2>
<p>DllCallは、以下のいずれかの条件下で<a href="Error.htm">Error</a>を投げる：</p>
<ul>
  <li><a href="Error.htm#OSError">OSError</a>:<a href="#HRESULT">HRESULT</a>戻り値が使用され、関数がエラー値（<a href="https://learn.microsoft.com/windows/win32/api/winerror/nf-winerror-failed">FAILED マクロ</a>で定義）を返しました。<code>Exception.Extraには</code>、16進数のエラーコードが含まれます。</li>
  <li><a href="Error.htm#TypeError">TypeError</a>:<em>[DllFile\]Function</em>パラメータは、浮動小数点数です。文字列または正の整数が必要です。</li>
  <li><a href="Error.htm#ValueError">ValueError</a>:<a href="#types">戻り値の型</a>、または指定された<a href="#types">argの型</a>のいずれかが無効です。</li>
  <li><a href="Error.htm#TypeError">TypeError</a>:引数に予期せぬ型の値が渡された。例えば、文字列（<a href="#str">str</a>）引数に数値として評価される<a href="../Variables.htm#Expressions">式</a>が渡された、数値引数に数値以外の文字列が渡された、<a href="#ptr">Ptr</a>型で<em>ない</em>引数にオブジェクトが渡された、などです。</li>
  <li><a href="Error.htm">Error</a>:指定された<em>DllFile</em>は、アクセスまたはロードできませんでした。<em>DllFile</em>に明示的なパスが指定されていない場合、そのファイルはシステムのPATHまたは<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>に存在する必要があります。このエラーは、ユーザーがファイルにアクセスする権限がない場合、またはAutoHotkeyが32ビットでDLLが64ビットの場合、またはその逆の場合にも発生することがあります。</li>
  <li><a href="Error.htm">Error</a>:指定された関数はDLL内に見つかりませんでした。</li>
  <li><a href="Error.htm">Error</a>:関数は呼び出されましたが、致命的な例外が発生して異常終了しました。<code>Exception.Extra</code>は例外コードを含む。例えば、0xC0000005は "アクセス違反"を意味します。このような場合、スレッドは（<a href="Try.htm">try</a>が使用されていない場合）中止されますが、<a href="#asterisk">アスタリスク</a>変数はまだ更新されます。致命的な例外の例としては、NULL（0）のような無効なポインタを再参照することが挙げられます。<a href="#cdecl">Cdecl</a>関数は、次の段落で説明するようなエラーを発生させることはないので、引数が少なすぎる場合に例外を発生させることがあります。</li>
  <li><a href="Error.htm">Error</a>:関数を呼び出したが、渡された引数が多すぎたり少なすぎたりした。<code>Exception.Extra</code>には、引数リストが不正確であったバイト数が格納されます。正の値の場合、引数が多すぎる（または引数が大きすぎる）か、<a href="#cdecl">CDecl</a>が必要な呼び出しです。負の値であれば、渡された引数が少なすぎる。このような状況は、機能の確実な動作のために修正する必要があります。このエラーの存在は、例外が発生したことを示す場合もあります。なお、x64の呼び出し規約により、64ビットビルドではこのエラーは発生しない。</li>
</ul>

<h2 id="except">ネイティブの例外とA_LastError</h2>
<p>内蔵の例外処理にもかかわらず、DllCallでスクリプトをクラッシュさせることは可能です。これは、関数が直接例外を発生させないが、不正なポインタや終端していない文字列など、不適切なものを生成する場合に起こる可能性がある。これは、スクリプトが不正なポインタや容量不足の<a href="#str">"str"</a>のような不適切な値を渡した場合、関数の責任ではないかもしれません。また、関数が返す普通の整数を<a href="#asterisk">アスタリスク変数</a>や <a href="#str">str</a>と主張するなど、不適切な引数型や戻り値を指定した場合にも、スクリプトがクラッシュすることがあります。</p>
<p>組込変数<a href="../Variables.htm#LastError">A_LastError</a>には、オペレーティングシステムのGetLastError()関数の結果が格納されます。</p>

<h2 id="load">パフォーマンス</h2>
<p>DLLを繰り返し呼び出す場合、明示的にロードすることでパフォーマンスを飛躍的に向上させることができます（<em>User32などの<a href="#std">標準的なDLL</a>は常に常駐しているため必要ありません</em>）。この方法によって、DllCallが内部でLoadLibraryとFreeLibraryを毎回呼び出す必要を回避することができます。事例：</p>
<pre>hModule := DllCall("<strong>LoadLibrary</strong>", "Str", "MyFunctions.dll", "Ptr")  <em>; ループ内でDllCallしてライブラリを読み込む必要を回避。</em>
Loop Files, "C:\My Documents\*.*", "R"
    result := DllCall("MyFunctions\BackupFile", "Str", A_LoopFilePath)
DllCall("<strong>FreeLibrary</strong>", "Ptr", hModule)  <em>; メモリ節約のため、使用後はDLLをアンロードすることがあります。</em></pre>
<p>; 関数のアドレスをあらかじめ調べておくことで、さらに高速なパフォーマンスを実現することができます。事例：</p>
<pre><em>; 次の例では、DLLがまだロードされていない場合、GetModuleHandleの代わりにLoadLibraryを使用してください。</em>
<strong>MulDivProc</strong> := DllCall("GetProcAddress", "Ptr", DllCall("GetModuleHandle", "Str", "<strong>kernel32</strong>", "Ptr"), "AStr", "<strong>MulDiv</strong>", "Ptr")
Loop 500
    DllCall(<strong>MulDivProc</strong>, "Int", 3, "Int", 4, "Int", 3)</pre>
<p>DllCallの第1パラメータが<code>"MulDiv"</code>などのリテラル文字列で、その関数を含むDLLがスクリプトの開始前に通常ロードされているか、<a href="_DllLoad.htm">#DllLoad</a>で正常にロードされていれば、文字列は自動的に関数アドレスに解決されます。このビルトイン最適化は、上に示した例よりも効果的です。</p>
<p>最後に、文字列の長さを変えない関数に文字列変数を渡す場合、変数を"<a href="#str">str</a>"としてではなく、<a href="StrPtr.htm">アドレス</a>で渡す（例：<code>StrPtr（MyVar）</code>）ことでパフォーマンスが向上します（特に文字列が非常に長い場合）。次の例は、文字列を大文字に変換するものです：<code>DllCall("CharUpper", "<strong>Ptr</strong>", StrPtr(MyVar), "Ptr")</code>.</p>

<h2 id="struct">構造体・配列</h2>
<p>構造体とは、メモリ上に隣接して格納された<em>メンバー</em>（フィールド）の集合体です。ほとんどのメンバーが整数になる傾向があります。</p>
<p>構造体（またはメモリブロック配列）のアドレスを受け取る関数は、何らかの方法でメモリを確保し、そのメモリアドレスを関数に渡すことで呼び出すことができます。この目的には、<a href="Buffer.htm">Buffer</a>オブジェクトが推奨されます。一般的には以下の手順で行われます：</p>
<p>1)<code>MyStruct := Buffer(123, 0)</code>を呼び出して、構造体のデータを保持するバッファを確保します。<code>123</code>を構造体のサイズと同じ大きさ以上の数値（バイト数）に置き換えてください。最後のパラメータにゼロを指定することはオプションです。これは、すべてのメンバーを2進数のゼロに初期化し、次のステップでNumPutを頻繁に呼び出すのを避けるために通常使用します。</p>
<p>2)ターゲット関数が構造体の初期値を使用する場合は、<code><a href="NumPut.htm">NumPut</a>("UInt", 123, MyStruct, 4)</code>を呼び出して、0 以外の値を持つべきメンバーを初期化します。<code>123</code>をターゲットメンバに入れる整数に置き換えます（文字列のアドレスを格納する場合は<code>StrPtr(Var)</code>を指定します）。<code>4</code>を対象部材のオフセットに置き換える（「オフセット」の説明については手順4参照）。<code>"UInt"</code>を適切な型（メンバーがポインタまたはハンドルの場合は<code>"Ptr"</code>など）に置き換える。</p>
<p>3)<em>MyStruct</em>をPtr引数として、ターゲット関数を呼び出す。例えば、<code>DllCall("MyDllMyFunc", "Ptr", MyStruct)</code>となります。この機能は、メンバーの一部を検査したり、変更したりするものです。DllCallは自動的にバッファのアドレスを使用しますが、これは通常<code>MyStruct.Ptr</code>を使用して取得されます。</p>
<p>4)<code>MyInteger :=<a href="NumGet.htm">NumGet</a>(MyStruct, 4, "UInt")</code>を使って、構造体から任意の整数を取得します。<code>4</code>を構造体内の対象メンバーのオフセットに置き換える。最初のメンバーは常にオフセット0にあります。第2部材は、オフセット0に第1部材の大きさ（通常4）を加えた位置にある。2番目以降のメンバーは、前のメンバーのオフセットにサイズを足したものになります。DWORD、Int<a href="#Int">などの32ビット整数</a>のようなほとんどのメンバーは、4バイトのサイズです。<code>"UInt"</code>を適切な型に置き換えるか、メンバーがポインタまたはハンドルである場合は省略します。</p>
<p>実際の使用方法については、「<a href="#ExStruct">構造例</a>」を参照してください。</p>

<h2 id="limits">既知の制限事項</h2>
<p>変数の文字列アドレス（<code>StrPtr(MyVar)</code>など）が関数に渡され、その関数が変数の内容の長さを変更した場合、その変数のその後の使用が正しく動作しないことがあります。この問題を解決するには、次のいずれかを行ってください：1)<em>MyVar</em>をPtr/アドレスとしてではなく、<a href="#str">"Str"</a>引数として渡す。2) DllCallを呼び出した後、<code><a href="VarSetStrCapacity.htm#neg1">VarSetStrCapacity</a>(MyVar, -1)</code>を呼んで変数の内部に保存された長さを更新します。</p>
<p>関数によって変数に格納された2進数のゼロは、ターミネーターとして機能し、ほとんどの組み込み関数によってゼロの右側のすべてのデータがアクセスまたは変更されるのを防ぐことができます。しかし、このようなデータは、<a href="StrPtr.htm">StrPtr</a>で文字列のアドレスを取得し、<a href="NumPut.htm">NumPut</a>、<a href="NumGet.htm">NumGet</a>、<a href="StrGet.htm">StrGet</a>、<a href="StrPut.htm">StrPut</a>、DllCall自身など他の関数に渡すことで操作することができます。</p>
<p>渡された文字列のアドレスを返す関数が、期待とは異なるメモリーアドレスに同一の文字列を返すことがあります。例えば、プログラミング言語で<code>CharLower(CharUpper(MyVar))</code>を呼び出すと、<em>MyVar</em>の内容が小文字に変換されます。しかし、DllCallで同じことをすると、CharLowerが<em>MyVar</em>と同じ内容の別の/一時的な文字列を操作したため、次の呼び出しの後、<em>MyVar</em>は大文字になります：</p>
<pre>MyVar := "ABC"
result := DllCall("CharLower", "<strong><u>Str</u></strong>", DllCall("CharUpper", "Str", MyVar, "<strong><u>Str</u></strong>"), "Str")</pre>
<p>これを回避するには、上記の下線部の2つの "Str"の値をPtrに変更します。これは、CharUpperの戻り値を、CharLowerに整数として渡される純粋なアドレスと解釈します。</p>
<p>文字列を扱う場合、一定の制限が発生する場合があります。詳しくは、「<a href="../Compat.htm#DllCall">バイナリ互換性</a>」をご覧ください。</p>

<h2 id="COM">Component Object Model (COM)</h2>
<p>VBScriptや同様の言語でアクセス可能なCOMオブジェクトは、通常、<a href="ComObject.htm">ComObject</a>、<a href="ComObjGet.htm">ComObjGet</a>、<a href="ComObjActive.htm">ComObjActive</a>および組み込み<a href="../Objects.htm#Usage_Objects">オブジェクト構文</a>によってAutoHotkeyでもアクセスできます。</p>
<p><a href="https://learn.microsoft.com/windows/win32/api/oaidl/nn-oaidl-idispatch">IDispatch</a>をサポートしていないCOMオブジェクトは、オブジェクトのインターフェースの仮想関数テーブルから関数のアドレスを取得することで、DllCallで使用できます。詳しくは、さらに下の<a href="#ExTaskbar">例</a>をご覧ください。しかし、通常はこのプロセスを合理化する<a href="ComCall.htm">ComCall</a>を使用するのがよいでしょう。</p>

<h2 id="dotnet">.NET Framework</h2>
<p>.NET Frameworkのライブラリは、Common Language Runtime（CLR）と呼ばれる「仮想マシン」によって実行されます。そのため、.NET DLLファイルは通常のDLLファイルとは異なるフォーマットになっており、一般的にDllCallが呼び出せるような関数は含まれていません。</p>
<p>しかし、AutoHotkeyは、<a href="https://learn.microsoft.com/dotnet/standard/native-interop/com-callable-wrapper">COM呼び出し可能なラッパー</a>を通してCLRを利用することができます。ライブラリが一般的なCOMコンポーネントとしても登録されていない限り、まずCLR自体をDllCallで手動で初期化する必要があります。詳しくは、<a href="https://www.autohotkey.com/forum/topic26191.html">.NET Framework Interop</a>（現在DllCallを利用しており、AutoHotkey v2とは互換性がありません）をご覧ください。</p>

<h2 id="Related">関連</h2>
<p><a href="../Compat.htm#DllCall">Binary Compatibility</a>, <a href="Buffer.htm">Buffer object</a>, <a href="ComCall.htm">ComCall</a>, <a href="PostMessage.htm">PostMessage</a>, <a href="OnMessage.htm">OnMessage</a>, <a href="CallbackCreate.htm">CallbackCreate</a>, <a href="Run.htm">Run</a>, <a href="VarSetStrCapacity.htm">VarSetStrCapacity</a>, <a href="../Functions.htm">Functions</a>, <a href="SysGet.htm">SysGet</a>, <a href="_DllLoad.htm">#DllLoad</a>, <a href="https://learn.microsoft.com/windows/win32/apiindex/windows-api-list">Windows API Index</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExMessageBox">
<p><a class="ex_number" href="#ExMessageBox"></a> Windows API関数 "MessageBox"を呼び出し、ユーザーがどのボタンを押したかを報告します。</p>
<pre>WhichButton := DllCall("MessageBox", "Int", 0, "Str", "Press Yes or No", "Str", "Title of box", "Int", 4)
MsgBox "You pressed button #" WhichButton</pre>
</div>

<div class="ex" id="ExWallpaper">
<p><a class="ex_number" href="#ExWallpaper"></a> デスクトップの壁紙を、指定したビットマップ（.bmp）ファイルに変更します。</p>
<pre>DllCall("SystemParametersInfo", "UInt", 0x14, "UInt", 0, "Str", A_WinDir <strong>.</strong> "\winnt.bmp", "UInt", 1)</pre>
</div>

<div class="ex" id="ExIsWindowVisible">
<p><a class="ex_number" href="#ExIsWindowVisible"></a> API関数 "IsWindowVisible"を呼び出し、メモ帳ウィンドウが表示されているかどうかを調べる。</p>
<pre>DetectHiddenWindows True
if not DllCall("IsWindowVisible", "Ptr", WinExist("Untitled - Notepad"))  <em>; WinExistはHWNDを返す。</em>
    MsgBox "The window is not visible."</pre>
</div>

<div class="ex" id="ExWsprintf">
<p><a class="ex_number" href="#ExWsprintf"></a> APIのwsprintf()を呼び出し、数字432に先頭のゼロをパッドして10文字幅(0000000432)にします。</p>
<pre>ZeroPaddedNumber := Buffer(20)  <em>; バッファが新しい文字列を受け入れるのに十分な大きさであることを確認します。</em>
DllCall("wsprintf", "Ptr", ZeroPaddedNumber, "Str", "%010d", "Int", 432, "Cdecl")  <em>; Cdecl の呼び出し規約を必要とします。</em>
MsgBox StrGet(ZeroPaddedNumber)

<em>; または、<a href="Format.htm">Format</a>関数とゼロフラグを組み合わせて使用します：</em>
MsgBox Format("{:010}", 432)
</pre>
</div>

<div class="ex" id="ExQPC">
<p><a class="ex_number" href="#ExQPC"></a> <a href="../Variables.htm#TickCount">A_TickCount</a>の10msより精度の高いQueryPerformanceCounter()のデモを行います。</p>
<pre>DllCall("QueryPerformanceFrequency", "Int64*", &amp;freq := 0)
DllCall("QueryPerformanceCounter", "Int64*", &amp;CounterBefore := 0)
Sleep 1000
DllCall("QueryPerformanceCounter", "Int64*", &amp;CounterAfter := 0)
MsgBox "Elapsed QPC time is " . (CounterAfter - CounterBefore) / freq * 1000 " ms"</pre>
</div>

<div class="ex" id="ExMouseSpeed">
<p><a class="ex_number" href="#ExMouseSpeed"></a> ホットキーを押すと、マウスカーソルの速度が一時的に低下し、正確な位置決めがしやすくなります。<kbd>F1</kbd>を押し続けると、カーソルが遅くなる。離すと元の速度に戻ります。</p>

<pre>
F1::
F1 up::
{
    static SPI_GETMOUSESPEED := 0x70
    static SPI_SETMOUSESPEED := 0x71
    static OrigMouseSpeed := 0
    
switch ThisHotkey
    {
    case "F1":
        <em>; 現在の速度を取得し、後で復元できるようにする：</em>
        DllCall("SystemParametersInfo", "UInt", SPI_GETMOUSESPEED, "UInt", 0, "Ptr*", OrigMouseSpeed, "UInt", 0)
        <em>; ここで、マウスの速度を、最後から2番目のパラメータで指定された遅い速度に設定します（範囲は1～20、10がデフォルト）：</em>
        DllCall("SystemParametersInfo", "UInt", SPI_SETMOUSESPEED, "UInt", 0, "Ptr", 3, "UInt", 0)
        KeyWait "F1"  <em>; キーボードのオートリピートがDllCallを繰り返し実行するのを防ぐことができます。</em>
        
case "F1 up":
DllCall("SystemParametersInfo", "UInt", SPI_SETMOUSESPEED, "UInt", 0, "Ptr", OrigMouseSpeed, "UInt", 0)  <em>; 元の速度に戻す。</em>
    }
}</pre>
</div>

<div class="ex" id="ExWatchScrollBar">
<p><a class="ex_number" href="#ExWatchScrollBar"></a> アクティブなウィンドウを監視し、その垂直スクロールバーの位置をフォーカスコントロールに表示します（リアルタイムに更新されます）。</p>
<pre>SetTimer WatchScrollBar, 100

WatchScrollBar()
{
    FocusedHwnd := 0
    try FocusedHwnd := ControlGetFocus("A")
    if !FocusedHwnd  <em>; フォーカスされたコントロールがない。</em>
        return
    <em>; 縦または横スクロールバーの位置をツールチップに表示する：</em>
    ToolTip DllCall("GetScrollPos", "Ptr", FocusedHwnd, "Int", 1)  <em>; SB_VERTの場合は1、SB_HORZの場合は0になります。</em>
}</pre>
</div>

<div class="ex" id="ExFile">
<p><a class="ex_number" href="#ExFile"></a> ファイルにテキストを書き、それをメモリに読み戻す。この方法は、複数のファイルを同時に読み書きするような場合に、パフォーマンスを向上させるために使用することができます。また、<a href="FileOpen.htm">FileOpenを</a>使用しても<a href="FileOpen.htm#ExWriteRead">同様の</a>効果を得ることができます。</p>
<pre>
FileName := FileSelect("S16",, "Create a new file:")
if FileName = ""
    return
GENERIC_WRITE := 0x40000000  <em>; 読み出しではなく、書き込みのためにファイルを開く。</em>
CREATE_ALWAYS := 2  <em>; 新規ファイルを作成します（既存のファイルを上書きします）。</em>
hFile := DllCall("CreateFile", "Str", FileName, "UInt", GENERIC_WRITE, "UInt", 0, "Ptr", 0, "UInt", CREATE_ALWAYS, "UInt", 0, "Ptr", 0, "Ptr")
if !hFile
{
    MsgBox "Can't open '" FileName "' for writing."
    return
}
TestString := "This is a test string.`r`n"  <em>; この方法でファイルを書く場合、改行には `n ではなく `r`n を使用します。</em>
StrSize := StrLen(TestString) * 2
DllCall("WriteFile", "Ptr", hFile, "Str", TestString, "UInt", StrSize, "UIntP", &amp;BytesActuallyWritten := 0, "Ptr", 0)
DllCall("CloseHandle", "Ptr", hFile)  <em>; ファイルを閉じる。</em>

<em>; ファイルが書き込まれたので、その内容をメモリに読み返してください。</em>
GENERIC_READ := 0x80000000  <em>; 書き込みではなく、読み込みのためにファイルを開く。</em>
OPEN_EXISTING := 3  <em>; このモードは、オープンするファイルが既に存在することを示します。</em>
FILE_SHARE_READ := 0x1 <em>; こちらがファイルを開いている間に、他のプロセスがファイルを開くことができるかどうかです。</em>
FILE_SHARE_WRITE := 0x2
hFile := DllCall("CreateFile", "Str", FileName, "UInt", GENERIC_READ, "UInt", FILE_SHARE_READ|FILE_SHARE_WRITE, "Ptr", 0, "UInt", OPEN_EXISTING, "UInt", 0, "Ptr", 0)
if !hFile
{
    MsgBox "Can't open '" FileName "' for reading."
    return
}
<em>; 文字列を読み込むためのメモリブロックを確保する：</em>
Buf := Buffer(StrSize)
DllCall("ReadFile", "Ptr", hFile, "Ptr", Buf, "UInt", Buf.Size, "UIntP", &amp;BytesActuallyRead := 0, "Ptr", 0)
DllCall("CloseHandle", "Ptr", hFile)  <em>; ファイルを閉じる。</em>
MsgBox "The following string was read from the file:" StrGet(Buf)</pre>
</div>

<div class="ex" id="ExHideCursor">
<p><a class="ex_number" href="#ExHideCursor"></a> <kbd>Win</kbd>+<kbd>C</kbd>を押したときに、マウスカーソルを隠す。後でカーソルを表示させるには、このホットキーをもう一度押してください。</p>
<pre>OnExit (*) =&gt; SystemCursor("Show")  <em>; スクリプト終了時にカーソルが表示されるようにします。</em>

#c::SystemCursor("Toggle")  <em>; Win+CホットキーでカーソルのON/OFFを切り替えられます。</em>

SystemCursor(cmd)  <em>; cmd = "Show|Hide|Toggle|Reload"</em>
{
    static visible := true, c := Map()
    static sys_cursors := [32512, 32513, 32514, 32515, 32516, 32642
                         , 32643, 32644, 32645, 32646, 32648, 32649, 32650]
    if (cmd = "Reload" or !c.Count)  <em>; リクエスト時またはファーストコール時にリロードします。</em>
    {
        for i, id in sys_cursors
        {
            h_cursor  := DllCall("LoadCursor", "Ptr", 0, "Ptr", id)
            h_default := DllCall("CopyImage", "Ptr", h_cursor, "UInt", 2
                , "Int", 0, "Int", 0, "UInt", 0)
            h_blank   := DllCall("CreateCursor", "Ptr", 0, "Int", 0, "Int", 0
                , "Int", 32, "Int", 32
                , "Ptr", Buffer(32*4, 0xFF)
                , "Ptr", Buffer(32*4, 0))
            c[id] := {default:h_default, blank:h_blank}
        }
    }
    switch cmd
    {
    case "Show":visible := true
    case "Hide":visible := false
    case "Toggle":visible := !visible
    default:return
    }
    for id, handles in c
    {
        h_cursor := DllCall("CopyImage"
            , "Ptr", visible ? handles.default : handles.blank
            , "UInt", 2, "Int", 0, "Int", 0, "UInt", 0)
        DllCall("SetSystemCursor", "Ptr", h_cursor, "UInt", id)
    }
}</pre>
</div>

<div class="ex" id="ExStruct">
<p><a class="ex_number" href="#ExStruct"></a> 構造例です。RECT構造体のアドレスをGetWindowRect()に渡すと、構造体のメンバーにウィンドウの左、上、右、下辺の位置（画面に対する相対位置）が設定されます。</p>
<pre>Run "Notepad"
WinWait "無題-メモ帳"  <em>; これは、以下のWinExistで使用するための<a href="../misc/WinTitle.htm#LastFoundWindow">"last found window</a>"も設定します。</em>
Rect := Buffer(16)  <em>; RECTは，4つの32ビット整数（4*4=16）からなる構造体である．</em>
DllCall("GetWindowRect", "Ptr", WinExist(), "Ptr", Rect)  <em>; WinExistはHWNDを返す。</em>
L := NumGet(Rect, 0, "Int"), T := NumGet(Rect, 4, "Int")
R := NumGet(Rect, 8, "Int"), B := NumGet(Rect, 12, "Int")
MsgBox Format("Left {1} Top {2} Right {3} Bottom {4}", L, T, R, B)</pre>
</div>

<div class="ex" id="ExStructRect">
<p><a class="ex_number" href="#ExStructRect"></a> 構造例です。FillRect()に、一時的に赤く塗る画面の一部を示すRECT構造体のアドレスを渡す。</p>
<pre>Rect := Buffer(16)  <em>; 4バイトの整数を4つ保持する容量を設定します。</em>
<a href="NumPut.htm">NumPut</a>( "Int", 0                  <em>; 左</em>
      , "Int", 0                  <em>; top</em>
      , "Int", A_ScreenWidth//2   <em>; right</em>
      , "Int", A_ScreenHeight//2  <em>; bottom</em>
      , Rect)
hDC := DllCall("GetDC", "Ptr", 0, "Ptr")  <em>;デスクトップのデバイスコンテキストを取得する場合は、0を渡す。</em>
hBrush := DllCall("CreateSolidBrush", "UInt", 0x0000FF, "Ptr")  <em>; 赤のブラシ（0x0000FFはBGR形式）を作成します。</em>
DllCall("FillRect", "Ptr", hDC, "Ptr", Rect, "Ptr", hBrush)  <em>; 指定された矩形を上記のブラシで塗りつぶす。</em>
DllCall("ReleaseDC", "Ptr", 0, "Ptr", hDC)  <em>; クリーンアップ。</em>
DllCall("DeleteObject", "Ptr", hBrush)  <em>; クリーンアップ。</em></pre>
</div>

<div class="ex" id="ExSystemTime">
<p><a class="ex_number" href="#ExSystemTime"></a> 構造例です。システムの時計を指定した日付と時刻に変更します。未来の日付に変更すると、スケジュールされたタスクが早期に実行される可能性があるため、注意が必要です！</p>
<pre>SetSystemTime("20051008142211")  <em>; <a href="FileSetTime.htm#YYYYMMDD">タイムスタンプ</a>を渡す（UTCではなくローカル）。</em>

SetSystemTime(YYYYMMDDHHMISS)
<em>; システムクロックを指定した日付と時刻に設定します。
; 呼び出し側は、入力されるパラメータが有効な日付-時間スタンプであることを確認する必要があります。
; (UTCではなく現地時間)。成功すれば0以外を、そうでなければ0を返す。</em>
{
    <em>; SetSystemTime()で使用するため、パラメータをローカル時間からUTCに変換します。</em>
    UTC_Delta := DateDiff(A_Now, A_NowUTC, "Seconds")  <em>; 四捨五入の関係で、「秒」の方が正確です。</em>
    UTC_Delta := Round(-UTC_Delta/60)  <em>; 正確を期すため、分単位に丸めて表示します。</em>
    YYYYMMDDHHMISS := DateAdd(YYYYMMDDHHMISS, UTC_Delta, "Minutes")  <em>; UTC に変換するためのオフセットを適用します。</em>

SystemTime := Buffer(16)  <em>; この構造体は8個のUShortで構成されています。</em>

<a href="NumPut.htm">NumPut</a>( "UShort", SubStr(YYYYMMDDHHMISS, 1, 4)  <em>; YYYY (year)</em>
          , "UShort", SubStr(YYYYMMDDHHMISS, 5, 2)  <em>; MM (month of year, 1-12)</em>
          , "UShort", 0                             <em>; Unused (day of week)</em>
          , "UShort", SubStr(YYYYMMDDHHMISS, 7, 2)  <em>; DD (day of month)</em>
          , "UShort", SubStr(YYYYMMDDHHMISS, 9, 2)  <em>; HH (hour in 24-hour time)</em>
          , "UShort", SubStr(YYYYMMDDHHMISS, 11, 2) <em>; MI (minute)</em>
          , "UShort", SubStr(YYYYMMDDHHMISS, 13, 2) <em>; SS (second)</em>
          , "UShort", 0                             <em>; Unused (millisecond)</em>
          , SystemTime)

return DllCall("SetSystemTime", "Ptr", SystemTime)
}</pre>
<p>その他の構造例</p>
<ul>
  <li>DllCallを使用してTCP/IPサーバーにネットワーク接続し、そこからデータを受信する方法のデモについては、<a href="../scripts/index.htm#WinLIRC">WinLIRCクライアントスクリプト</a>を参照してください。</li>
  <li>オペレーティングシステムには、フォントや色、アイコンを選択するダイアログボックスが標準装備されています。これらのダイアログは構造体を使用しており、<a href="https://github.com/majkinetor/mm-autohotkey/tree/master/Dlg">GitHub</a>でデモが行われています。</li>
</ul>
</div>

<div class="ex" id="ExTaskbar">
<p><a class="ex_number" href="#ExTaskbar"></a> アクティブなウィンドウを3秒間、タスクバーから削除します。<a href="ComCall.htm#ExTaskbar">同等のComCallの例</a>と比較してみてください。</p>
<pre><em>/*
  <a href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nn-shobjidl_core-itaskbarlist">ITaskbarListの</a>VTableにあるメソッドです：
IUnknown:
0 QueryInterface  -- <a href="ComObjQuery.htm">ComObjQuery</a>の代わりに使用
      1 AddRef          -- <a href="ObjAddRef.htm">ObjAddRef</a> の代わりに使用
      2 Release         -- <a href="ObjAddRef.htm">ObjRelease</a>の代わりに使用
    ITaskbarList:
3 HrInit
      4 AddTab
      5 DeleteTab
      6 ActivateTab
      7 SetActiveAlt
*/</em>
IID_ITaskbarList  := "{56FDF342-FD6D-11d0-958A-006097C9A090}"
CLSID_TaskbarList := "{56FDF344-FD6D-11d0-958A-006097C9A090}"

<em>; TaskbarListオブジェクトを作成します。</em>
tbl := ComObject(CLSID_TaskbarList, IID_ITaskbarList)

activeHwnd := WinExist("A")

DllCall(vtable(tbl.ptr,3), "ptr", tbl)                     <em>; tbl.<a href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-itaskbarlist-hrinit">HrInit</a>()</em>
DllCall(vtable(tbl.ptr,5), "ptr", tbl, "ptr", activeHwnd)  <em>; tbl.<a href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-itaskbarlist-deletetab">DeleteTab</a>(activeHwnd)</em>
Sleep 3000
DllCall(vtable(tbl.ptr,4), "ptr", tbl, "ptr", activeHwnd)  <em>; tbl.<a href="https://learn.microsoft.com/windows/win32/api/shobjidl_core/nf-shobjidl_core-itaskbarlist-addtab">AddTab</a>(activeHwnd)</em>

<em>; ラップされていないインターフェイスポインタは、手動で解放する必要があります。</em>
ObjRelease(tbl.ptr)

vtable(ptr, n) {
    <em>; NumGet(ptr, "ptr") は、オブジェクトの仮想関数のアドレスを返します。
    ; テーブル（略してvtable）。この式の残りの部分は
    ; vtableからn番目の関数のアドレスを取得します。</em>
    return NumGet(NumGet(ptr, "ptr"), n*A_PtrSize, "ptr")
}
</pre>
</div>

</body>
</html>
