<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Switch - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Switch文は、相互に排他的な候補のリストから1つのケースを実行する。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Switch</h1>

<p>相互に排他的な候補のリストから1つのケースを実行します。</p>

<pre class="Syntax"><span class="func">Switch</span> <span class="optional">SwitchValue, CaseSense</span>
{
<span class="func">Case</span> CaseValue1:
<i>Statements1</i>
<span class="func">Case</span> CaseValue2a, CaseValue2b:
<i>Statements2</i>
<span class="func">Default</span>:
<i>Statements3</i>
}</pre>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>SwitchValue, CaseValue...</dt>
  <dd>
    <p>以下の<a href="#Remarks">備考に</a>あるように、比較する値。</p>
  </dd>

  <dt>CaseSense</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a>または<a href="../Concepts.htm#strings">文字列</a></p>
    <p>オプションで以下の値のいずれかを指定すると、すべての値が文字列として比較される：</p>
    <p><code>"On"</code> または <code>1</code> (<code>True</code>):各比較は大文字と小文字を区別する。</p>
    <p><code>"Off"</code> または <code>0</code> (<code>False</code>):A～Zは小文字と同一視されます。</p>
    <p id="Locale"><code>"Locale"</code>:各比較は、現在のユーザーのロケールの規則に従って大文字と小文字を区別しない。詳細は<a href="StrCompare.htm">StrCompare</a>を参照。</p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p>存在する場合、<em>SwitchValue</em>は一度評価され、一致するものが見つかるまで各ケース値と比較され、そのケースが実行される。そうでない場合は、最初に<a href="../Concepts.htm#boolean">真</a>（ゼロでなく、空でない）と評価されたケースが実行される。一致するケースがなく、<code>デフォルト</code>が存在する場合、そのケースが実行される。</p>
<p>演算子<code>=</code>や <code>==</code>と同様に、<em>CaseSense</em>が省略された場合、<em>SwitchValue</em>とケース値が両方とも純粋な数値である場合、または一方が純粋な数値で他方が数値文字列である場合に数値比較が実行されます。各ケース値は個別に検討され、他のケース値で使用される比較のタイプには影響しない。</p>
<p><em>CaseSense</em>パラメータが存在する場合、すべての値は数値ではなく文字列として比較され、<em>SwitchValue</em>または<em>CaseValue</em>がオブジェクトとして評価されると<a href="Error.htm#TypeError">TypeError</a>がスローされる。</p>
<p><em>CaseSense</em>パラメータが省略された場合、文字列比較はデフォルトで大文字と小文字を区別する。</p>
<p>各ケースは最大20の値をリストすることができる。各値は<a href="../Language.htm#expressions">式</a>でなければならないが、リテラル数値、引用符で囲まれた文字列、変数などの単純なものでもよい。<code>Case</code>と <code>Defaultは</code>コロン<code>:</code>で終了しなければならない。</p>
<p>各ケースの最初の文は、<code>Case</code>の下か、コロンに続く同じ行に書くことができる。各ケースは、次の<code>ケース</code><code>/</code> <code>デフォルト</code>または閉じ中括弧で暗黙のうちに終了する。他のいくつかの言語で見られるswitch文とは異なり、暗黙のフォールスルーはなく、<a href="Break.htm">Break</a>は（ループを囲むループから抜け出す場合を除き）使用されない。</p>
<p>すべてのケースは同じブロックで囲まれているため、あるケースで定義されたラベルは、別のケースからの<a href="Goto.htm">Goto</a>のターゲットになることができる。しかし、ラベルが<code>Case</code>または<code>Default</code>のすぐ上に置かれた場合、次のケースの始まりではなく、前のケースの終わりをターゲットとする。</p>
<p><code>デフォルト</code>は最後に表示される必要はない。</p>

<h2 id="Related">関連</h2>
<p><a href="If.htm">If</a>, <a href="Else.htm">Else</a>, <a href="Block.htm">Blocks</a></p>

<h2 id="examples">例</h2>
<div class="ex" id="ExInput">
<p><a class="ex_number" href="#ExInput"></a> この例をテストするには、<kbd>[</kbd>の後に以下の略語の1つ、その他の5文字、または Enter/Esc/Tab/<kbd>.</kbd>を入力するか、4秒間待つ。</p>
<pre>~[::
{
    ih := InputHook("V T5 L4 C", "{enter}.{esc}{tab}", "btw,otoh,fl,ahk,ca")
    ih.Start()
    ih.Wait()
    switch ih.EndReason
    {
    case "Max":
MsgBox 'You entered "' ih.Input '", which is the maximum length of text'
    case "Timeout":
MsgBox 'You entered "' ih.Input '" at which time the input timed out'
    case "EndKey":
MsgBox 'You entered "' ih.Input '" and terminated it with ' ih.EndKey
    default:  <em>; Match</em>
        switch ih.Input
        {
        case "btw":Send "{backspace 3}by the way"
        case "otoh":Send "{backspace 4}on the other hand"
        case "fl":Send "{backspace 2}Florida"
        case "ca":Send "{backspace 2}California"
        case "ahk":
Send "{backspace 3}"
            Run "https://www.autohotkey.com"
        }
    }
}</pre>
</div>

</body>
</html>
