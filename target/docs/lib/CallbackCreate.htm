<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>CallbackCreate - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="CallbackCreate関数は、呼び出されたときにスクリプト内の関数に呼び出しをリダイレクトするマシンコードアドレスを作成します。" />
<meta name="ahk:equiv-v1" content="lib/RegisterCallback.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>CallbackCreate</h1>

<p>呼び出すと、スクリプト内の<a href="../Functions.htm">関数に</a>リダイレクトされるマシンコードアドレスを作成します。</p>

<pre class="Syntax">Address := <span class="func">CallbackCreate</span>(Function <span class="optional">, Options, ParamCount</span>)</pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Function</dt>
  <dd>
    <p>型：<a href="../misc/Functor.htm">機能オブジェクト</a></p>
    <p><em>Address</em>が呼び出されるたびに自動的に呼び出される関数オブジェクトです。また、この関数は<em>Address</em>に渡されたパラメータを受け取ります。</p>
    <p><a href="../Functions.htm#closures">クロージャ</a>または<a href="../misc/Functor.htm#BoundFunc">バウンド関数</a>は、同じスクリプト関数をすべて呼び出す複数のコールバックを区別するために使用することができます。</p>
    <p>コールバックは関数オブジェクトへの参照を保持し、スクリプトが<a href="#CallbackFree">CallbackFree</a>を呼び出すとその参照を解放します。</p>
  </dd>

  <dt>オプション</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>次の単語または文字のうち、0個以上を指定する。各オプションと次のオプションはスペースで区切ってください（例：<code>"C Fast"</code>）。</p>
    <p id="Fast"><strong>Fast</strong> or <strong>F</strong>:<em>Function</em>が呼び出されるたびに新しい<a href="../misc/Threads.htm">スレッド</a>を開始するのを避けることができます。この方が性能は良いのですが、<em>Address</em>が呼び出されるスレッドが変化する場合（例えば、コールバックが着信メッセージによってトリガーされる場合）には、この方法は避けなければなりません。これは、<em>Function</em>が呼び出された時にたまたま実行されていたスレッドの<a href="../Variables.htm#LastError">A_LastError</a>や <a href="../misc/WinTitle.htm#LastFoundWindow">last-found window</a>などのグローバル設定を変更することができるようになるためです。詳しくは、「<a href="#Threads">備考</a>」をご覧ください。</p>
    <p><strong>CDecl</strong> or <strong>C</strong>:<em>Addressを</em>"C "呼び出し規則に準拠させる。コールバックでは標準の呼び出し規約の方がはるかに一般的なので、これは通常省略される。このオプションは、x64呼び出し規約を使用するAutoHotkeyの64ビットバージョンでは無視されます。</p>
    <p><strong>&amp;</strong>:個々のパラメータではなく、パラメータリストのアドレス（1つの整数）を<em>Function</em>に渡すようにします。パラメータ値は、<a href="NumGet.htm">NumGet</a>を用いて取得することができる。標準の32ビット呼び出し規約を使用する場合、<em>ParamCount</em>はパラメータリストのサイズをDWORD（バイト数を4で割った値）で指定する必要があります。</p>
  </dd>

  <dt>ParamCount</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p><em>Address</em>の呼び出し元がAddressに渡すパラメータの数。省略された場合、デフォルトは<a href="Func.htm#MinParams"><i>Function</i>.MinParams</a>で、これは通常<em>Function</em><a href="../Functions.htm#define">の定義に</a>ある必須パラメータの数である。いずれの場合も、呼び出し元が正確にこの数のパラメータを渡すことを確認する。</p>
  </dd>

</dl>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#numbers">整数</a></p>
<p>CallbackCreate returns a machine-code address. このアドレスは通常、<a href="DllCall.htm">DllCall</a>で外部関数に渡されるか、<a href="NumPut.htm">NumPut</a>で構造体に入れられるが、DllCallで直接呼び出すことも可能である。<a href="#CallbackFree">CallbackFree</a>にアドレスを渡すと、コールバックが削除されます。</p>

<h2 id="Error_Handling">エラー処理</h2>
<p>以下のいずれかの条件下で、この関数は失敗し、例外をスローします。</p>
<ul>
  <li><em>Function</em>がオブジェクトでない、または<code>MinParams</code>プロパティも<code>Call</code>メソッドも持っていない。</li>
  <li><em>関数</em>には <code>MinParams</code>プロパティがあり、コールバックが供給するパラメータの数を超えています。</li>
  <li><em>ParamCount</em>は否定的です。</li>
  <li><em>ParamCountは</em>省略され、更に1)<em>Function</em>に <code>MinParams</code>プロパティがない、または2)<code>&amp;</code>オプションが標準32ビット呼び出し規約で使用されている。</li>
</ul>

<h2 id="The_Callback_Functions_Parameters">コールバック関数のパラメータ</h2>
<p>コールバックアドレスに割り当てられた<a href="../Functions.htm">関数</a>は、最大31個のパラメータを受け取ることができます。<a href="../Functions.htm#optional">オプションのパラメータ</a>を使用することができ、複数の呼び出し元から関数を呼び出す場合に便利です。</p>
<p>パラメータを正しく解釈するには、x86の呼び出し規約がどのように機能するかをある程度理解する必要があります。AutoHotkeyには型付きパラメータがないため、コールバックのパラメータリストは整数で構成されていると仮定され、いくつかの再解釈が必要となる場合があります。</p>

<p><strong>AutoHotkey 32ビット：</strong>入力されるパラメータはすべて符号なし32ビット整数です。小さな型は32ビットにパディングされ、大きな型は32ビットの一連のパラメータに分割されます。</p>
<p>入力されるパラメータが符号付き整数であることを意図している場合、以下の例のいずれかに従って、負の数を明らかにすることができます。</p>
<pre><em>; Method #1</em>
if (wParam &gt; 0x7FFFFFFF)
    wParam := -(~wParam) - 1

<em>; 方法2：AutoHotkeyがネイティブに符号付き64ビット整数を使用することに依存します。</em>
wParam := wParam &lt;&lt; 32 &gt;&gt; 32</pre>

<p><strong>AutoHotkey 64ビット：</strong>入力されるパラメータはすべて符号付き64ビット整数です。AutoHotkeyは、符号なし64ビット整数をネイティブでサポートしていません。小さい型は64ビットにパディングされ、大きい型は常にアドレスで渡されます。</p>

<p><strong>AutoHotkey 32ビット/64ビット：</strong>入力されるパラメータが8ビットまたは16ビット（x64では32ビット）の場合、値の上位ビットに「ゴミ」が含まれることがありますが、次の例のようにビットワイズアンドを使用することでフィルタリングすることができます。</p>
<pre>Callback(UCharParam, UShortParam, UIntParam) {
    UCharParam &amp;= 0xFF
    UShortParam &amp;= 0xFFFF
    UIntParam &amp;= 0xFFFFFFFF
    <em>;...</em>
}</pre>
<p>入力されるパラメータが、呼び出し元によって文字列であることが意図されている場合、実際に受け取るのは文字列のアドレスである。文字列そのものを取得するには、<a href="StrGet.htm">StrGet</a>を使用します。</p>
<pre>MyString := StrGet(MyParameter)</pre>
<p>入力されたパラメータが構造体のアドレスである場合、<a href="DllCall.htm#struct">DllCall構造</a>体の手順に従って、個々のメンバーを抽出することができます。</p>

<p id="Indirect"><strong>アドレスでパラメータを受信：</strong>もし<code>&amp;</code>オプションが使用された場合、関数は最初のコールバックパラメータの<i>アドレスを</i>受け取ります。事例：</p>
<pre>
callback := CallbackCreate(TheFunc, "F&amp;", 3)<em>; パラメータリストのサイズは32ビットで指定する必要があります。</em>
DllCall(callback, "float", 10.5, "int64", 42)
TheFunc(params) {
    MsgBox <a href="NumGet.htm">NumGet</a>(params, 0, "float") ", " NumGet(params, A_PtrSize, "int64")
}</pre>
<p>32ビットプログラムのほとんどのコールバックは、固定数のパラメータを必要とする<em>stdcall</em>呼び出し規約を使用しています。その場合、<em>ParamCount</em>には、Int64とDoubleを2つの32ビットパラメータとしてカウントするパラメータリストのサイズを設定する必要があります。<em>Cdecl</em>または64ビット呼び出し規約では、<em>ParamCount</em>は何の効果もない。</p>

<h2 id="What_the_Function_Should_Return">関数が<em>返すべき</em>もの</h2>
<p>関数がパラメータなしで<a href="Return.htm">Return</a>を使用した場合、または "" などの空白の値を指定した場合（あるいは Return を全く使用しなかった場合）、コールバックの呼び出し元には 0 が返されます。そうでない場合は、この関数は整数を返し、その整数は呼び出し元に返される必要があります。AutoHotkey 32bitは戻り値を32bitに切り捨て、AutoHotkey 64bitは64bitの戻り値をサポートします。これより大きな構造体を（値で）返すことはサポートされていません。</p>

<h2 id="Threads">高速と低速の比較</h2>
<p>デフォルト/スローモードでは、<a href="SendMode.htm">SendMode</a>や <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>などの設定のデフォルト値で、関数が新たにスタートすることになります。これらのデフォルトは、<a href="../Scripts.htm#auto">スクリプト起動</a>時に変更することができます。</p>
<p>一方、<a href="#Fast">高速モード</a>では、関数が呼び出された時点でたまたま実行されていた<a href="../misc/Threads.htm">スレッド</a>からグローバル設定を継承します。さらに、この関数がグローバル設定（<a href="../misc/WinTitle.htm#LastFoundWindow">最終発見ウィンドウ</a>を含む）に加えた変更は、<a href="../misc/Threads.htm">現在のスレッド</a>に適用されることになります。したがって、高速モードは、その関数がどのスレッドから呼び出されるかが正確に分かっている場合にのみ使用する必要があります。</p>
<p>自分自身（あるいは他のスレッド）によって中断されるのを避けるために、コールバックはその最初の行として<a href="Critical.htm">Critical</a>を使用することができます。ただし、0x0312未満のメッセージの到着を経由して間接的にこの関数が呼び出された場合には、完全には効果がありません（Criticalの<a href="Critical.htm#Interval">間隔</a>を広げると効果があるかもしれません）。さらに、<a href="Critical.htm">Critical</a>は、<a href="SendMessage.htm">SendMessage</a>や <a href="DllCall.htm">DllCall</a>を呼び出すなど、間接的に自分自身への呼び出しとなるようなことを関数が行うことを妨げるものではありません。</p>

<h2 id="CallbackFree">CallbackFree</h2>
<p>コールバックを削除し、関数オブジェクトへの参照を解放します。</p>
<pre class="Syntax"><span class="func">CallbackFree</span>(Address)</pre>
<p>CallbackCreateを使用するたびに、少量のメモリ（32または48バイトとシステム・オーバーヘッド）が割り当てられる。OSはスクリプトの終了時にこのメモリを自動的に解放するので、少量の<em>固定</em>数のコールバックを割り当てるスクリプトであれば、明示的にメモリを解放しなくても大丈夫です。</p>
<p>しかし、コールバックが保持する関数オブジェクトが動的な性質を持つ場合（<a href="../Functions.htm#closures">クロージャ</a>や <a href="../misc/Functor.htm#BoundFunc">バインド関数</a>など）、コールバックが不要になったときに解放することが特に重要になる場合があります。</p>

<h2 id="Related">関連</h2>
<p><a href="DllCall.htm">DllCall</a>, <a href="OnMessage.htm">OnMessage</a>, <a href="OnExit.htm">OnExit</a>, <a href="OnClipboardChange.htm">OnClipboardChange</a>, <a href="Sort.htm#callback">Sort's callback</a>, <a href="Critical.htm">Critical</a>, <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, <a href="../Functions.htm">Functions</a>, <a href="../misc/SendMessageList.htm">List of Windows Messages</a>, <a href="../misc/Threads.htm">Threads</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExWinList">
<p><a class="ex_number" href="#ExWinList"></a> すべてのトップレベルウィンドウのサマリーを表示します。</p>
<pre>EnumAddress := CallbackCreate(EnumWindowsProc, "Fast")<em>; Fast-modeはこのスレッドからしか呼ばれないので大丈夫です。</em>

DetectHiddenWindows True<em>; 高速モードのため、この設定はコールバックにも有効になります。</em>

<em>; コールバックを繰り返し呼び出すEnumWindows()に制御を渡す。</em>
DllCall("EnumWindows", "Ptr", EnumAddress, "Ptr", 0)
MsgBox Output<em>; コールバックで蓄積された情報を表示する。</em>
    
EnumWindowsProc(hwnd, lParam)
{
    global Output
    win_title := WinGetTitle(hwnd)
    win_class := WinGetClass(hwnd)
    if win_title
        Output .= "HWND:" hwnd "`tTitle:" win_title "`tClass:" win_class "`n"
    return true<em>; EnumWindows() に、すべてのウィンドウが列挙されるまで続けるように指示する。</em>
}</pre>
</div>

<div class="ex" id="ExSubclassGUI">
<p><a class="ex_number" href="#ExSubclassGUI"></a> GUIウィンドウのWindowProcをスクリプト内の新しいWindowProcにリダイレクトして、サブクラス化する方法を示すものです。この場合、テキストコントロールの背景色はカスタムカラーに変更されます。</p>
<pre>TextBackgroundColor := 0xFFBBBB<em>; BGR 形式のカスタムカラー。</em>
TextBackgroundBrush := DllCall("CreateSolidBrush", "UInt", TextBackgroundColor)

MyGui := Gui()
Text := MyGui.Add("Text",, "Here is some text that is given`na custom background color.")

<em>; 64ビットスクリプトでは、SetWindowLongの代わりにSetWindowLongPtrを呼び出す必要があります。</em>
SetWindowLong := A_PtrSize=8 ? "SetWindowLongPtr" : "SetWindowLong"

WindowProcNew := CallbackCreate(WindowProc)<em>; サブクラス作成時のfast-modeは避けてください。</em>
WindowProcOld := DllCall(SetWindowLong, "Ptr", MyGui.Hwnd, "Int", -4<em>; -4 is GWL_WNDPROC</em>
    , "Ptr", WindowProcNew, "Ptr")<em>; 戻り値は "Ptr "または "UPtr "対 "Int "に設定する必要があります。</em>

MyGui.Show

WindowProc(hwnd, uMsg, wParam, lParam)
{
    Critical
    if (uMsg = 0x0138 &amp;&amp; lParam = Text.Hwnd)<em>; 0x0138 is WM_CTLCOLORSTATIC.</em>
    {
        DllCall("SetBkColor", "Ptr", wParam, "UInt", TextBackgroundColor)
        return TextBackgroundBrush<em>; HDCを変更したことをOSに通知するため、HBRUSHを返す。</em>
    }
    <em>; そうでない場合は（上記が返らなかったので）、処理されなかったすべてのイベントを元のWindowProcに渡します。</em>
    return DllCall("CallWindowProc", "Ptr", WindowProcOld, "Ptr", hwnd, "UInt", uMsg, "Ptr", wParam, "Ptr", lParam)
}</pre>

</div>
</body>
</html>
