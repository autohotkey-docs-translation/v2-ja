<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Gui Object - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="Guiオブジェクトは、GUIウィンドウが新しいコントロールを追加するなどのアクションを実行したり、色などの値を取得または設定するためのインターフェースを提供します。" />
<meta name="ahk:equiv-v1" content="lib/Gui.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Gui Object</h1>
<pre class="NoIndent">class Gui extends Object</pre>

<p>ウィンドウの作成と管理、コントロールの作成のためのインターフェイスを提供する。このようなウィンドウは、データ入力フォームやカスタムユーザーインターフェイスとして使用することができます。</p>
<p>Guiオブジェクトは<a href="Gui.htm#Call">Gui()</a>で作成し、<a href="GuiFromHwnd.htm">GuiFromHwnd</a>で取得することができます。</p>

<p>"Gui"はクラスそのものなので、以下ではあらゆるGuiオブジェクトのプレースホルダー（例では変数名）として "MyGui"を使用します。</p>
<p>Guiオブジェクトは、<a href="Object.htm">Object</a>から継承されたメソッドやプロパティに加え、以下のような定義済みのメソッドやプロパティを持ちます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#Static_Methods">静的メソッド</a>です。
    <ul>
      <li><a href="#Call">Call</a>:新しいGuiオブジェクトを作成します。</li>
    </ul>
  </li>
  <li><a href="#Methods">Methods</a>:
    
    <ul>
      <li><a href="#Add">Add</a>:テキスト、ボタン、チェックボックスなどのコントロールを作成します。</li>
      <li><a href="#Destroy">Destroy</a>:ウィンドウを削除します。</li>
      <li><a href="#Flash">Flash</a>:ウィンドウとそのタスクバーボタンを点滅させます。</li>
      <li><a href="#GetClientPos">GetClientPos</a>:ウィンドウのクライアントエリアの位置とサイズを取得します。</li>
      <li><a href="#GetPos">GetPos</a>:ウィンドウの位置と大きさを取得します。</li>
      <li><a href="#Hide">Hide</a>:ウィンドウを隠します。</li>
      <li><a href="#Maximize">Maximize</a>:ウィンドウの非表示と最大化を解除します。</li>
      <li><a href="#Minimize">Minimize</a>:ウィンドウの非表示と最小化を行います。</li>
      <li><a href="#Move">Move</a>:GUIウィンドウを移動またはサイズ変更します。</li>
      <li><a href="#OnEvent">OnEvent</a>:与えられたイベントが発生したときに呼び出される関数またはメソッドを登録します。</li>
      <li><a href="#Opt">Opt</a>:ウィンドウの外観や動作に関するさまざまなオプションやスタイルを設定します。</li>
      <li><a href="#Restore">Restore</a>:ウィンドウがあらかじめ最小化または最大化されている場合は、非表示にしたり元に戻したりします。</li>
      <li><a href="#SetFont">SetFont</a>:続いて作成されるコントロールの書体、サイズ、スタイル、テキストカラーを設定します。</li>
      <li><a href="#Show">Show</a>:ウィンドウを表示します。また、ウィンドウの最小化、最大化、移動も可能です。</li>
      <li><a href="#Submit">Submit</a>:名前付きコントロールから値を収集し、<a href="Object.htm">オブジェクトに</a>合成する。オプションでウィンドウを非表示にすることができます。</li>
      <li><a href="#__Enum">__Enum</a>:GUIのコントロールを繰り返し使用できるようにします。</li>
      <li><a href="#__New">__New</a>:新しいGuiインスタンスを構築します。</li>
    </ul>
  </li>
  <li><a href="#Properties">Properties</a>:
    
    <ul>
      <li><a href="#BackColor">BackColor</a>:ウィンドウの背景色を取得または設定します。</li>
      <li><a href="#FocusedCtrl">FocusedCtrl</a>:GUI のフォーカスされているコントロールの<a href="GuiControl.htm">GuiControl オブジェクト</a>を取得します。</li>
      <li><a href="#Hwnd">Hwnd</a>:GUIウィンドウのウィンドウハンドル（HWND）を取得する。</li>
      <li><a href="#MarginX">MarginX</a>:側面とその後に作成されるコントロールの間の水平マージンのサイズを取得または設定します。</li>
      <li><a href="#MarginY">MarginY</a>:側面とその後に作成されるコントロールの間の垂直マージンのサイズを取得または設定します。</li>
      <li><a href="#MenuBar">MenuBar</a>:ウィンドウのメニューバーを取得または設定する。</li>
      <li><a href="#Name">Name</a>:GUIウィンドウのカスタムネームを取得または設定します。</li>
      <li><a href="#Title">Title</a>:GUI のタイトルを取得または設定します。</li>
      <li><a href="#__Item">__Item</a>:指定された名前、テキスト、ClassNN、HWND に関連する<a href="GuiControl.htm">GuiControl オブジェクト</a>を取得します。</li>
    </ul>
  </li>
  <li>General:
    
    <ul>
      <li><a href="#Navigate">Keyboard Navigation</a></li>
      <li><a href="#Appear">Window Appearance</a></li>
      <li><a href="#GenRemarks">総論</a></li>
      <li><a href="#Related">関連</a></li>
      <li><a href="#Examples">例</a></li>
    </ul>
  </li>
</ul>

<h2 id="Static_Methods">静的メソッド</h2>
<div class="methodShort" id="Call">
<h3>Call</h3>
<p>新しいGuiオブジェクトを作成し、返します。</p>
<pre class="Syntax">MyGui := <span class="func">Gui</span>(<span class="optional">Options, Title, EventObj</span>)</pre>
<dl>
  <dt>オプション</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>このパラメータには、<a href="#Opt">Gui.Opt</a>がサポートする任意のオプションを含めることができます。</p>
  </dd>
  <dt>Title</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>ウィンドウのタイトルです。省略された場合、<a href="../Variables.htm#ScriptName">A_ScriptName</a>の現在の値がデフォルトとなる。</p>
  </dd>
  <dt id="EventObj">EventObj</dt><dd>
    <p>型：<a href="../Concepts.htm#objects">Object</a></p>
    <p>「イベントシンク」、つまりイベントをバインドするためのオブジェクトです。<em>EventObj</em>を指定した場合、<a href="GuiOnEvent.htm">OnEvent</a>、<a href="GuiOnNotify.htm">OnNotify</a>、<a href="GuiOnCommand.htm">OnCommand</a>を使用して、イベントが発生したときに呼び出される<em>EventObj</em>のメソッドを登録することができる。省略または空の場合、OnEventの<em>Function</em>パラメータに渡された文字列は、関数名として解釈される。</p>
  </dd>
</dl>
</div>

<h2 id="Methods">メソッド</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>GUIウィンドウにコントロールを追加し、<a href="GuiControl.htm">GuiControlオブジェクト</a>を返します。</p>
<pre class="Syntax">MyGui.<span class="func">Add</span>(ControlType <span class="optional">, Options, Text</span>)
MyGui.<span class="func">Add</span>ControlType(<span class="optional">Options, Text</span>)</pre>
<dl>
  <dt>ControlType</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>これは、以下のいずれかとなります：<a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Picture">Picture (or Pic)</a>, <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#DropDownList">DropDownList (or DDL)</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a>, <a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Tab">Tab, Tab2, Tab3</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>, <a href="GuiControls.htm#ActiveX">ActiveX</a>, <a href="GuiControls.htm#Custom">Custom</a></p>
  <p>事例：</p>
  <pre>MyGui := Gui()
MyGui.Add("Text",, "Please enter your name:")
MyGui.AddEdit("vName")
MyGui.Show</pre></dd>
  <dt>オプション</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p id="PosSize"><strong>コントロールの位置づけとサイズ</strong></p>
  <p><em>オプション</em>で寸法や座標が省略された場合、コントロールはその性質や内容に応じて、前のコントロールとの相対的な位置関係や大きさを自動的に決定します。</p>
  <p>以下のオプションに対応しています：</p>
  <p id="R"><strong>R</strong>:テキストの行（R2.5のような浮動小数点数を含むことができます）。<strong>H</strong>（高さ）を指定するよりも、<strong>R</strong>を指定した方が好ましい場合が多い。<strong>R</strong>と <strong>H</strong>の両方のオプションがある場合、<strong>R</strong>が優先されます。グループボックスの場合、ボックス内のスペースを確保するコントロールの数を設定します。<a href="GuiControls.htm#DropDownList">DropDownList</a>、<a href="GuiControls.htm#ComboBox">ComboBox</a>、<a href="GuiControls.htm#ListBox">ListBox</a>の場合、コントロールのリスト部分で一度に表示できる項目の数です（ただし、DropDownListとComboBoxでは、ポップアップリストが自動的にユーザーのデスクトップの利用可能な高さを利用するため、<strong>R</strong>と <strong>H</strong>オプションの両方を省略することが望ましい場合があります）。その他のコントロールタイプの場合、<strong>R</strong>はコントロール内に視覚的に収まるテキストの行数です。</p>
  <p><strong>W</strong>:幅をピクセル単位で指定します。タブコントロールのデフォルトは、現在のフォントサイズの30倍と<a href="#MarginX">Xマージン</a>の3倍、垂直プログレスバーのデフォルトは現在のフォントサイズの2倍、水平プログレスバー、水平スライダー、ドロップダウンリスト、コンボボックス、リストボックス、グループボックス、エディット、ホットキーは現在のフォントサイズの15倍（ただしグループボックスはマージンのために内部にスペースを確保する18倍）となっています）、省略するとコントロールタイプによってはその内容から自動的に幅を計算します。</p>
  <p><strong>H</strong>:高さをピクセル単位で指定します。<strong>H</strong>と <strong>R</strong>の両方のオプションがない場合、DropDownList、ComboBox、ListBox、空の複数行編集コントロールのデフォルトは3行、GroupBoxのデフォルトは2行、垂直スライダーとプログレスバーのデフォルトは5行、水平スライダーのデフォルトは30ピクセル（太さが指定されている場合は除く）、水平プログレッサーは現在のフォントサイズの2倍、ホットキーコントロールは1行、タブコントロールは10行になります。その他のコントロールタイプについては、その内容に基づいて高さが自動的に計算されます。なお、DropDownListとComboBoxの場合、<strong>H</strong>はコントロールの常時表示部分とリスト部分の高さを合わせた値です（ただし、高さを低く設定しても、少なくとも1つのアイテムは常にリスト内に表示されます）。また、すべてのタイプのコントロールにおいて、<strong>R</strong>オプションで行数を指定すると、テキストの部分的な行や不完全な行が表示されるのを防ぐことができるため、通常は<strong>H</strong>を使用するよりも好ましいとされています。</p>
  <p><strong>wp+n</strong>、<strong>hp+n</strong>、<strong>wp-n</strong>、<strong>hp-n</strong>（<strong>n</strong>は任意の数値）は、コントロールの幅や高さを、先に追加したコントロールの幅や高さと同じにするために使用し、オプションでプラスまたはマイナスを調整することができます。例えば、<code>wp</code>はコントロールの幅を前のコントロールの幅に設定し、<code>wp-50</code>は前のコントロールの幅より50小さい幅に設定します。</p>
  <p id="XY"><strong>X</strong>, <strong>Y</strong>:X-position, Y-position. 例えば、<code>x0 y0</code>を指定すると、コントロールはウィンドウのクライアント領域（タイトルバーとメニューバーがある場合はその下の領域）の左上隅に配置されます。</p>
  <p id="PosPlus"><strong>x+n</strong>、<strong>y+n</strong>（<strong>n</strong>は任意の数）：オプションのプラス記号は、先に追加されたコントロールの右端または下端（それぞれ）に対して相対的にコントロールを配置するために含めることができます。例えば、<code>Y+10</code>を指定すると、標準的なパディング距離ではなく、前のコントロールの下10ピクセルに位置します。同様に、<code>X+10</code>を指定すると、コントロールは前のコントロールの右端から10ピクセル右に位置します。<code>X-10</code>のような負の数は絶対位置決め用に予約されているため、負のオフセットを使用する場合は、その前にプラス記号を含めます。事例：<code>X+-10</code>.</p>
  <p id="PosPlusMargin"><strong>X+、</strong> <strong>Y+</strong>の場合、ウィンドウの現在の<a href="#MarginX">マージン</a>の代用として<strong>M</strong>という文字が使えます。例えば、<code>x+m</code>は、前のコントロールの右端に標準的なパディング距離を加えたものを使用します。<code>xp y+m</code>は、コントロールが前のコントロールの下に位置する。一方、相対的なX座標を単独で（xpまたはx+で）指定すると、通常はデフォルトで<code>yp</code>が指定される。</p>
  <p id="xp"><strong>xp+n</strong>、<strong>yp+n</strong>、<strong>xp-n</strong>、<strong>yp-n</strong>（<strong>n</strong>は任意の数値）は、前のコントロールの左上隅を基準としてコントロールを配置するために使用でき、これは<a href="GuiControls.htm#GroupBox">GroupBox</a>でコントロールを囲む場合によく使用されます。</p>
  <p id="xm"><strong>xm</strong>と <strong>ym</strong>は、それぞれウィンドウの左端と上端の<a href="#MarginX">マージン</a>にコントロールを配置するために使用します（この2つの後にプラス/マイナス記号と数字を付けることもできます）。</p>
  <p id="xs"><strong>xs</strong>と <strong>ys</strong>：これらは<strong>xm</strong>と <strong>ym</strong>に似ていますが、オプションに<a href="#Section">Section</a>という単語を持つコントロールを事前に追加して保存した座標を参照する点が異なります（ウィンドウの最初のコントロールは、オプションにその単語が指定されていなくても、常に新しいセクションを開始します）。事例：</p>
  <pre>MyGui := Gui()
MyGui.Add("Edit", "w600")  <em>;ウィンドウの上部にかなり広いエディットコントロールを追加します。</em>
MyGui.Add("Text",<strong>"section</strong>", "First Name:")  <em>; このコントロールの位置を保存し、新しいセクションを開始します。</em>
MyGui.Add("Text",, "Last Name:")
MyGui.Add("Edit",<strong>"ys</strong>")  <em>; このセクション内で新しいカラムを開始</em>します。
MyGui.Add("Edit")
MyGui.Show</pre>
  <p><strong>xs</strong>と<strong>ys</strong>の後には、オプションでプラス・マイナス記号と数字を付けることができます。また、コントロールのオプションに<a href="#Section">Section</a>という単語とxs/ysの両方を指定することも可能です。この場合、それ自身は前のセクションを使用しますが、後続のコントロールには新しいセクションを確立します。</p>
  <p><strong>X</strong>、<strong>Y</strong>、またはその両方を省略すると、将来コントロールやフォントのサイズを変更したときに、GUIレイアウトを自動的に調整するのに便利です。一方、すべてのコントロールに絶対位置を指定すると、拡大・縮小するコントロールの下や右側にあるすべてのコントロールの位置を手動で移動させる必要がある場合があります。</p>
  <p><strong>X</strong>と <strong>Y</strong>の両方が省略された場合、コントロールは標準的なパディング距離（現在の<a href="#MarginX">マージン</a>）を使用して前のコントロールの下に配置されます。連続するテキストコントロールやリンクコントロールには垂直方向のパディングが追加され、編集、DDL、または同様のサイズのコントロールの列がその右に追加された場合に、通常より整列するようになります。標準の垂直マージンのみを使用する場合は、<code>Y+M</code>またはXに任意の値を指定してください。</p>
  <p>片方のコンポーネントだけが省略された場合、そのデフォルト値は、もう片方のコンポーネントを指定するためにどのオプションが使用されたかに依存します：</p>
  <table class="info">
    <tr><th>指定されたX</th><th>Yのデフォルト</th></tr>
    <tr><td>x<em>n</em> または xm</td><td>以前のすべてのコントロールの下（最大Y範囲＋マージン）。</td></tr>
    <tr><td>xs</td><td><a href="#Section">セクション</a>オプションの直近の使用以降、以前のすべてのコントロールの下にある。</td></tr>
    <tr><td>x+<em>n</em> または xp+<em>nonzero</em></td><td>前コントロールのトップエッジ（<a href="#xp">yp</a>）と同じです。</td></tr>
    <tr><td>xp または xp+0</td><td>前のコントロールの下（下端＋マージン）。</td></tr>
    <tr><th>指定されたY</th><th>Xのデフォルト</th></tr>
    <tr><td>y<em>n</em> または ym</td><td>以前のすべてのコントロールの右側（最大X範囲＋マージン）。</td></tr>
    <tr><td>ys</td><td><a href="#Section">セクション</a>オプションの直近の使用以降、以前のすべてのコントロールの右側にある。</td></tr>
    <tr><td>y+<em>n</em> または yp+<em>nonzero</em></td><td>前のコントロールの左端（<a href="#xp">xp</a>）と同じです。</td></tr>
    <tr><td>yp または yp+0</td><td>前のコントロールの右側（右端＋マージン）。</td></tr>
  </table>
  
  <p id="Events"><strong>ユーザー入力の保存と対応</strong></p>
  <p id="var"><strong>V</strong>:コントロールの<a href="GuiControl.htm#Name">Name</a>を設定します。名前に含まれない文字「V」の直後を指定します。例えば、<code><strong>v</strong>MyEdit</code>を指定すると、コントロールに「MyEdit」という名前が付けられます。</p>
  <p id="label"><strong>Events</strong>:イベントハンドラ（ユーザーがコントロールをクリックまたは変更したときに自動的に呼び出される関数など）は、コントロールの<em>オプションで</em>設定することはできません。代わりに、<a href="#OnEvent">OnEvent</a>を使用して、関心のあるイベントごとにコールバック関数またはメソッドを登録することができます。</p>
  
  <p id="OtherOptions"><strong>Controls:一般的なスタイルとその他のオプション</strong></p>
  <p>注：先行する記号がない場合、プラス記号とみなされます。例えば、<code>Wrap</code>は <code>+Wrap</code>と同じです。これに対して、<code>-Wrap</code>は、単語の折り返し特性を削除する。</p>
  <p id="AltSubmit"><strong>AltSubmit</strong>:別の送信方法を使用する。DropDownList、ComboBox、ListBox、Tabの場合、<a href="#Submit">Gui.Submit</a>に選択項目のテキストではなく、その位置が保存されるようになるためです。項目が選択されていない場合でも、コンボボックスはその編集フィールドのテキストを保存します。</p>
  <p><strong>C</strong>:テキストの色（<a href="GuiControls.htm#Button">ボタン</a>には影響しません）。文字Cの直後に、色名（<a href="../misc/Colors.htm">カラーチャート</a>参照）またはRGB値（接頭辞0xは任意）を指定します。例：<code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled</strong>:入力可能なコントロールを無効な状態で表示させ、ユーザーがその内容に注目したり、変更したりすることを防ぎます。後から有効にする場合は、<a href="GuiControl.htm#Enabled">GuiCtrl.Enabled</a>を使用します。注：Editコントロールを読み取り専用にするには、代わりに文字列<code>ReadOnly</code>を指定します。また、Disabledの直後に0または1を付加して、開始状態（0が有効、1が無効）を示すことも任意に可能である。つまり、<code>Disabled</code>と <code>"Disabled" VarContainingOne</code>は同じです。</p>
  <p><strong>Hidden</strong>:コントロールは、初期状態では不可視です。後で表示する場合は<a href="GuiControl.htm#Visible">GuiCtrl.Visible</a>を使用します。Hiddenの直後に0または1を付加して、開始時の状態を示すこともできる（0は可視、1は非表示）。つまり、<code>Hidden</code>と <code>「Hidden」VarContainingOne</code>は同じです。</p>
  <p><strong>Left</strong>:コントロールのテキストを使用可能な幅の範囲内で左寄せにする。このオプションは、以下のコントロールに影響します：Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right</strong>:コントロールのテキストを使用可能な幅の範囲内で右寄せにします。チェックボックスやラジオボタンの場合、ボックス自体もコントロールの左側ではなく、右側に配置されます。このオプションは、以下のコントロールに影響します：Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center</strong>:コントロールのテキストを使用可能な幅の範囲内でセンタリングします。このオプションは、以下のコントロールに影響します：Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section</strong>:新しいセクションを開始し、このコントロールの位置を保存して、後で<a href="#xs">上記</a>の<em>xs</em>と<em>ys </em>の位置決めオプションで使用できるようにします。</p>
  <p id="Tabstop"><strong>Tabstop</strong>:ユーザーが<kbd>Tab</kbd>キーを押して移動する際に、入力可能なコントロールがスキップされるようにするには、<code>-Tabstop</code>（すなわちマイナスTabstop）を使用します。</p>
  <p id="Wrap"><strong>Wrap</strong>:コントロールの内容を使用可能な幅の範囲内でワードラッピングすることができるようにする。ほぼすべての制御タイプは、最初にワードラッピングが有効になっているので、ワードラッピングを無効にするには、<code>-Wrap</code>を使用します。</p>
  <p><strong>VScroll</strong>:このタイプのコントロールに適している場合、垂直スクロールバーを提供する。</p>
  <p><strong>HScroll</strong>:このタイプのコントロールに適している場合、水平スクロールバーを提供する。この段落の続きは、<a href="GuiControls.htm#ListBox">ListBox</a>のみに適用されます。水平スクロールの幅は、デフォルトでListBoxの幅の3倍になっています。異なるスクロール幅を指定する場合は、HScrollという文字の直後に数字を含めてください。例えば、<code>HScroll500</code>を指定すると、ListBox内で500ピクセルのスクロールが可能になります。ただし、指定したスクロール幅がListBoxの幅より小さい場合は、スクロールバーは表示されません（ただし、<em>HScroll</em>が存在するだけで、<code>MyScrollBar.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code>によって水平スクロールバーを後から追加することは可能ですが、他の方法では不可能です）。</p>
  
  <p><strong>Controls:一般的でないスタイルとオプション</strong></p>
  <p id="BackgroundTrans"><strong>BackgroundTrans</strong>:透明な背景を使用し、Text、Picture、GroupBox コントロールの後ろにあるコントロールが透けて見えるようにします。例えば、ピクチャコントロールの上に透明なテキストコントロールを表示すると、テキストがピクチャの一部に見えるようになります。このオプションを後で削除するには、<code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code>を使用します。透過画像については、<a href="GuiControls.htm#PicAltSubmit">ピクチャーコントロールのAltSubmitの項</a>を参照してください。既知の制限：<a href="ListView.htm">ListView</a>を含む<a href="GuiControls.htm#Tab">Tabコントロール</a>内のコントロールで、BackgroundTransが正しく動作しない場合がある。制御型がこのオプションをサポートしていない場合、エラーが発生します。</p>
  <p id="Background"><strong>Background</strong><em>Color</em>:コントロールの背景色を変更します。<em>Color</em>を色名（<a href="../misc/Colors.htm">カラーチャート</a>参照）またはRGB値（0x接頭辞は任意）に置き換える。例：<code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. このオプションがない場合、<a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Picture">Picture</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Checkbox">CheckBox</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Tab">Tab</a> または <a href="GuiControls.htm#Link">Link</a>コントロールは、<a href="#BackColor">Gui.BackColor</a>で設定された背景色（またはnoneや他のコントロールタイプの場合は、システムのデフォルト背景色）が最初のデフォルトとなります。<code>BackgroundDefault</code>または<code>-Background</code>を指定すると、システムのデフォルトの背景色が適用されます。例えば、<code>LV.Opt("+BackgroundDefault")</code>でコントロールをデフォルトの色に戻すことができます。色を指定せずに<code>+Background</code>を使用すると、<code>-Background</code>に戻ります。制御型がこのオプションをサポートしていない場合、エラーが発生します。</p>
  <p><strong>Border</strong>:コントロールの周囲に細い線のボーダーを提供します。ほとんどのコントロールは、すでにタイプ固有のボーダーを持っているため、これは必要ありません。<em>既存</em>のコントロールにボーダーを追加する場合、コントロールの幅と高さを1ピクセルずつ大きくする必要がある場合があります。</p>
  <p id="Redraw"><strong>Redraw</strong>:<a href="GuiControl.htm#Opt">Opt</a>と併用することで、<a href="https://learn.microsoft.com/windows/win32/gdi/wm-setredraw">WM_SETREDRAW</a>メッセージを送信してコントロールの再描画（ビジュアルアップデート）を有効または無効にすることができます。詳しくは「<a href="GuiControl.htm#redraw-remarks">再描画</a>」をご覧ください。</p>
  <p><strong>Theme</strong>:このオプションを使用すると、ウィンドウの現在のテーマ設定を、新しく作成されたコントロールに上書きすることができます。既存のコントロールに使用しても効果はありませんが、将来のバージョンで変更される可能性があります。詳しくはGUIの<a href="#Theme">+/-Theme</a>オプションをご覧ください。</p>
  <p><strong>(Unnamed Style）</strong>：プラス記号またはマイナス記号の直後に、10進数または16進数の<a href="../misc/Styles.htm">スタイル番号</a>を指定します。符号を省略した場合は、プラス符号とする。</p>
  <p><strong>(Unnamed ExStyle)</strong>:プラス記号またはマイナス記号の直後に文字Eと10進数または16進数の拡張スタイル番号を指定します。符号を省略した場合は、プラス符号とする。例えば、<code>E0x200</code>では、WS_EX_CLIENTEDGE スタイルが追加され、画像やその他のコントロールに適した、縁がくぼんだボーダーを提供します。ここに書かれていない他の拡張スタイル（ほとんど使用されないため）については、「<a href="https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles">拡張ウィンドウスタイル｜Microsoft Docs</a>」を参照し、完全なリストを入手してください。</p></dd>
  <dt>Text</dt><dd>指定された制御タイプに応じて、文字列、数値、配列のいずれかを指定する。</dd>
</dl>
</div>

<div class="methodShort" id="Destroy">
<h3>Destroy</h3>
<p>ウィンドウとそのすべてのコントロールを削除し、対応するメモリとシステムリソースを解放します。</p>
<pre class="Syntax">MyGui.<span class="func">Destroy</span>()</pre>
<p><code>MyGui.Destroy()</code>を使用しない場合、Guiオブジェクトが削除されるとウィンドウは自動的に破棄されます（詳細は「<a href="#deleted">一般備考</a>」を参照）。スクリプトが終了すると、すべてのGUIウィンドウは自動的に破棄されます。</p>
</div>

<div class="methodShort" id="Flash">
<h3>Flash</h3>
<p>タスクバーのウィンドウのボタンを点滅させます。</p>
<pre class="Syntax">MyGui.<span class="func">Flash</span>(<span class="optional">Blink</span>)</pre>
<dl>
  <dt>Blink</dt><dd>
    <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
    <p>このパラメータが省略された場合、または1（true）の場合、タスクバーのウィンドウのボタンが点滅します。これは、ウィンドウのタイトルバーやタスクバーボタン（ある場合）の色を反転させることによって行われます。0（false）を指定すると、タイトルバーやタスクバーボタンの色が元に戻ります（ただし、実際の動作はOSのバージョンによって異なる場合があります）。</p>
  </dd>
</dl>
<p>下の例では、ウィンドウが3回点滅していますが、これは1回の点滅が反転して元に戻るからです：</p>
<pre>Loop 6
{
    MyGui.Flash
    Sleep 500  <em>;この値にはかなり敏感で、変更すると予期せぬ形で動作が変化する可能性があります。</em>
}</pre>
</div>

<div class="methodShort" id="GetClientPos">
<h3>GetClientPos</h3>
<p>ウィンドウのクライアントエリアの位置とサイズを取得します。</p>
<pre class="Syntax">MyGui.<span class="func">GetClientPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<p>各パラメータは、それぞれの座標を格納する変数への<a href="../Concepts.htm#variable-references">参照</a>とする。座標は、ウィンドウのクライアント領域（タイトルバー、メニューバー、ボーダーを含まない領域）の左上隅になります。X、Yはスクリーン座標で表示されます。widthはクライアントエリアの左右の水平距離、heightは上下の垂直距離です（単位：ピクセル）。</p>
<p><a href="WinGetClientPos.htm">WinGetClientPos</a>とは異なり、このメソッドは<em>Width</em>と <em>Height</em>に <a href="#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>ウィンドウの位置と大きさを取得します。</p>
<pre class="Syntax">MyGui.<span class="func">GetPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Width, &amp;Height</span>)</pre>
<p>各パラメータは、それぞれの座標を格納する変数への<a href="../Concepts.htm#variable-references">参照</a>とする。座標はウィンドウの左上隅です。X、Yはスクリーン座標で表示されます。widthはウィンドウの左右の水平距離、heightは上下の垂直距離です（単位：ピクセル）。</p>
<p><a href="WinGetPos.htm">WinGetPos</a>とは異なり、このメソッドは<em>Width</em>と <em>Height</em>に <a href="#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
</div>

<div class="methodShort" id="Hide">
<h3>Hide</h3>
<p>ウィンドウを隠します。</p>
<pre class="Syntax">MyGui.<span class="func">Hide</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h3>Maximize</h3>
<p>ウィンドウの非表示を解除し（必要な場合）、最大化します。</p>
<pre class="Syntax">MyGui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Minimize">
<h3>Minimize</h3>
<p>ウィンドウの非表示を解除し（必要な場合）、最小化します。</p>
<pre class="Syntax">MyGui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>GUIウィンドウを移動またはサイズ変更します。</p>
<pre class="Syntax">MyGui.<span class="func">Move</span>(<span class="optional">X, Y, Width, Height</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>新しい位置（スクリーン座標）。</p></dd>
  <dt>Width, Height</dt><dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>新しいサイズです。</p></dd>
</dl>
<p><a href="WinMove.htm">WinMove</a>とは異なり、この方法では<em>Width</em>と <em>Height</em>に <a href="Gui.htm#DPIScale">DPIスケーリング</a>を適用します（<code>-DPIScale</code>オプションが使用されていない場合）。</p>
<p>例：</p>
<pre>MyGui.Move(10, 20, 200, 100)
MyGui.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)

<em>; 左右を10ピクセルずつ拡大する。</em>
MyGui.GetPos(&amp;x,, &amp;w)
MyGui.Move(x-10,, w+20)</pre>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>与えられたイベントが発生したときに呼び出される関数またはメソッドを登録します。</p>
<pre class="Syntax">MyGui.<span class="func">OnEvent</span>(EventName, Callback <span class="optional">, AddRemove</span>)</pre>
<p>詳しくは<a href="GuiOnEvent.htm">OnEvent</a>を参照してください。</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>GUIウィンドウのオプションを1つまたは複数設定します。</p>
<pre class="Syntax">MyGui.<span class="func">Opt</span>(Options)</pre>
<dl>
  <dt>オプション</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
  <p>パフォーマンス上の理由から、すべてのオプションを1行で設定し、ウィンドウを作成する前に（つまり、<a href="#Add">Gui.Add</a>などの他のメソッドを使用する前に）設定することをお勧めします。</p>
  <p>このパラメータの効果は累積的である。つまり、明示的に指定された設定のみを変更し、他の設定はすべて変更されないままである。</p>
  <p>オプションを追加する場合はプラス記号を、削除する場合はマイナス記号を指定します。事例：<code>MyGui.Opt("+Resize -MaximizeBox")</code>.</p>
  <p><strong>AlwaysOnTop</strong>:<a href="WinSetAlwaysOnTop.htm">WinSetAlwaysOnTop</a>と同じ効果で、ウィンドウが他のすべてのウィンドウより上にあるようにします。</p>
  <p><strong>Border</strong>: Provides a thin-line border around the window. This is not common.</p>
  <p><strong>Caption</strong> (present by default): Provides a title bar and a thick window border/edge. When removing the caption from a window that will use <a href="WinSetTransColor.htm">WinSetTransColor</a>, remove it only after setting the TransColor.</p>
  <p><strong>Disabled</strong>: Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see <a href="#Owner">Owner</a>).</p>
  <p id="DPIScale"><strong>DPIScale</strong>: Use <code>MyGui.Opt("-DPIScale")</code> to disable <a href="../misc/DPIScaling.htm">DPI scaling</a>, which is enabled by default. If DPI scaling is enabled, coordinates and sizes passed to or retrieved from the Gui and <a href="GuiControl.htm">GuiControl</a> methods/properties are automatically scaled based on <a href="../Variables.htm#ScreenDPI">screen DPI</a>. For example, with a DPI of 144 (150%), <code>MyGui.Show("w100")</code> would make the Gui 150 (100 * 1.5) pixels wide, and resizing the window to 200 pixels wide via the mouse or <a href="WinMove.htm">WinMove</a> would cause <code>MyGui.GetClientPos(,,&amp;W)</code> to set <em>W</em> to 133 (200 // 1.5). <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> contains the system's current DPI.</p>
  <p>DPI scaling only applies to the Gui and <a href="GuiControl.htm">GuiControl</a> methods/properties, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work. There are a number of ways to deal with this:</p>
  <ul>
    <li>Avoid using hard-coded coordinates wherever possible.  For example, use the <a href="#xp">xp</a>, <a href="#xs">xs</a>, <a href="#xm">xm</a> and <a href="#PosPlusMargin">x+m</a> options for positioning controls and specify height in <a href="#R">rows of text</a> instead of pixels.</li>
    <li>Enable (<code>MyGui.Opt("+DPIScale")</code>) and disable (<code>MyGui.Opt("-DPIScale")</code>) scaling on the fly, as needed. Changing the setting does not affect positions or sizes which have already been set.</li>
    <li>Manually scale the coordinates. For example, <code>x*(A_ScreenDPI/96)</code> converts x from logical/GUI coordinates to physical/non-GUI coordinates.</li>
  </ul>
  <p id="LastFound"><strong>LastFound</strong>:Sets the window to be the <a href="../misc/WinTitle.htm#LastFoundWindow">last found window</a> (though this is unnecessary in a <a href="GuiOnEvent.htm#Threads">GUI thread</a> because it is done automatically), which allows functions such as <a href="WinGetStyle.htm">WinGetStyle</a> and <a href="WinSetTransparent.htm">WinSetTransparent</a> to operate on it even if it is hidden (that is, <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is not necessary). This is especially useful for changing the properties of the window before showing it. 事例：</p>
  <pre>MyGui.Opt("+LastFound")
WinSetTransColor(CustomColor " 150", MyGui)
MyGui.Show()</pre>
  <p id="MaximizeBox"><strong>MaximizeBox</strong>: Enables the maximize button in the title bar. This is also included as part of <em>Resize</em> below.</p>
  <p id="MinimizeBox"><strong>MinimizeBox</strong> (present by default): Enables the minimize button in the title bar.</p>
  <p id="MinSize"><strong>MinSize</strong> and <strong>MaxSize</strong>: Determines the minimum and/or maximum size of the window, such as when the user drags its edges to resize it. Specify the word <em>MinSize</em> and/or <em>MaxSize</em> with no suffix to use the window's current size as the limit (if the window has no current size, it will use the size from the first use of <a href="#Show">Gui.Show</a>). Alternatively, append the width, followed by an X, followed by the height; for example: <code>MyGui.Opt("+Resize +MinSize640x480")</code>. The dimensions are in pixels, and they specify the size of the window's client area (which excludes borders, title bar, and <a href="#MenuBar">menu bar</a>). Specify each number as decimal, not hexadecimal.</p>
  <p>Either the width or the height may be omitted to leave it unchanged (e.g. <code>+MinSize640x</code> or <code>+MinSizex480</code>). Furthermore, Min/MaxSize can be specified more than once to use the window's current size for one dimension and an explicit size for the other. For example, <code>+MinSize +MinSize640x</code> would use the window's current size for the height and 640 for the width.</p>
  <p>If <em>MinSize</em> and <em>MaxSize</em> are never used, the operating system's defaults are used (similarly, <code>MyGui.Opt("-MinSize -MaxSize")</code> can be used to return to the defaults). 注：the window must have <a href="#Resize">+Resize</a> to allow resizing by the user.</p>
  <p id="OwnDialogs"><strong>OwnDialogs</strong>: <code>MyGui.Opt("+OwnDialogs")</code> should be specified in each <a href="../misc/Threads.htm">thread</a> (such as a event handling function of a Button control) for which subsequently displayed <a href="MsgBox.htm">MsgBox</a>, <a href="InputBox.htm">InputBox</a>, <a href="FileSelect.htm">FileSelect</a>, and <a href="DirSelect.htm">DirSelect</a> dialogs should be owned by the window. Such dialogs are modal, meaning that the user cannot interact with the GUI window until dismissing the dialog. By contrast, <a href="ToolTip.htm">ToolTip</a> do not become modal even though they become owned; they will merely stay always on top of their owner. In either case, any owned dialog or window is automatically destroyed when its GUI window is <a href="#Destroy">destroyed</a>.</p>
  <p>There is typically no need to turn this setting back off because it does not affect other <a href="../misc/Threads.htm">threads</a>. However, if a thread needs to display both owned and unowned dialogs, it may turn off this setting via <code>MyGui.Opt("-OwnDialogs")</code>.</p>
  <p id="Owner"><strong>Owner</strong>: Use <em>+Owner</em> to make the window owned by another. An owned window has no taskbar button by default, and when visible it is always on top of its owner. It is also automatically destroyed when its owner is destroyed. <em>+Owner</em> can be used before or after the owned window is created. There are two ways to use <em>+Owner</em>, as shown below:</p>
  <pre>MyGui.Opt("+Owner" OtherGui.Hwnd)  <em>; Make the GUI owned by <i>OtherGui</i>.</em>
MyGui.Opt("+Owner")  <em>; Make the GUI owned by <a href="../Variables.htm#ScriptHwnd">the script's main window</a> to prevent display of a taskbar button.</em></pre>
  <p><code>+Owner</code> can be immediately followed by the <a href="#Hwnd">HWND</a> of any top-level window.</p>
  <p>To prevent the user from interacting with the owner while one of its owned window is visible, disable the owner via <code>MyGui.Opt("+Disabled")</code>. Later (when the time comes to cancel or destroy the owned window), re-enable the owner via <code>MyGui.Opt("-Disabled")</code>. Do this prior to cancel/destroy so that the owner will be reactivated automatically.</p>
  <p id="Parent"><strong>Parent</strong>: Use <code>+Parent</code> immediately followed by the <a href="#Hwnd">HWND</a> of any window or control to use it as the parent of this window. To convert the GUI back into a top-level window, use <code>-Parent</code>. This option works even after the window is created.</p>
  <p>既知の制限：<a href="../Program.htm#Installer_uiAccess">Running with UI access</a> prevents the <code>+Parent</code> option from working on an existing window if the new parent is always-on-top and the child window is not.</p>
  <p id="Resize"><strong>Resize</strong>: Makes the window resizable and enables its maximize button in the title bar. To avoid enabling the maximize button, specify <code>+Resize -MaximizeBox</code>.</p>
  <p><strong>SysMenu</strong> (present by default): Specify <code>-SysMenu</code> (minus SysMenu) to omit the system menu and icon in the window's upper left corner. This will also omit the minimize, maximize, and close buttons in the title bar.</p>
  <p id="Theme"><strong>Theme</strong>:By specifying <code>-Theme</code>, all subsequently created controls in the window will have the Classic Theme appearance. To later create additional controls that obey the current theme, turn it back on via <code>+Theme</code>. 注：This option has no effect if the Classic Theme is in effect. Finally, this setting may be changed for an individual control by specifying <code>+Theme</code> or <code>-Theme</code> in its options when it is created.</p>
  <p><strong>ToolWindow</strong>: Provides a narrower title bar but the window will have no taskbar button. This always hides the maximize and minimize buttons, regardless of whether the <a href="../misc/Styles.htm#WS_MAXIMIZEBOX">WS_MAXIMIZEBOX</a> and <a href="../misc/Styles.htm#WS_MINIMIZEBOX">WS_MINIMIZEBOX</a> styles are present.</p>
  <p><strong>(Unnamed Style）</strong>：プラス記号またはマイナス記号の直後に、10進数または16進数の<a href="../misc/Styles.htm">スタイル番号</a>を指定します。</p>
  <p><strong>(Unnamed ExStyle)</strong>:プラス記号またはマイナス記号の直後に文字Eと10進数または16進数の拡張スタイル番号を指定します。For example, <code>+E0x40000</code> would add the WS_EX_APPWINDOW style, which provides a taskbar button for a window that would otherwise lack one. ここに書かれていない他の拡張スタイル（ほとんど使用されないため）については、「<a href="https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles">拡張ウィンドウスタイル｜Microsoft Docs</a>」を参照し、完全なリストを入手してください。</p></dd>
</dl>
</div>

<div class="methodShort" id="Restore">
<h3>Restore</h3>
<p>Unhides the window (if necessary) and restores it, if it was minimized or maximized beforehand.</p>
<pre class="Syntax">MyGui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>Sets the font typeface, size, style, and/or color for controls added to the window from this point onward.</p>
<p>注：Omit both parameters to restore the font to the system's default GUI typeface, size, and color. Otherwise, any font attributes which are not specified will be copied from the previous font.</p>
<pre class="Syntax">MyGui.<span class="func">SetFont</span>(<span class="optional">Options, FontName</span>)</pre>
<dl>
  <dt>オプション</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>Zero or more options. Each option is either a single letter immediately followed by a value, or a single word. To specify more than one option, include a space between each. 事例：<code>cBlue s12 bold</code>.</p>
  <p>The following words are supported: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u>, and norm. <em>Norm</em> returns the font to normal weight/boldness and  turns off italic, strike, and underline (but it retains the existing color and size). It is possible to use norm to turn off all attributes and then selectively turn on others. For example, specifying <code>norm italic</code> would set the font to normal then to italic.</p>
  <p><strong>C</strong>:Color name (see <a href="../misc/Colors.htm">color chart</a>) or RGB value -- or specify the word Default to return to the system's default color (black on most systems). Example values:<code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. 注：<a href="GuiControls.htm#Button">Buttons</a> do not obey custom colors. Also, an individual control can be created with a font color other than the current one by including the C option. 事例：<code>MyGui.Add("Text", "cRed", "My Text")</code>.</p>
  <p><strong>S</strong>:Size (in points). 事例：<code>s12</code> (specify decimal, not hexadecimal)</p>
  <p><strong>W</strong>:Weight (boldness), which is a number between 1 and 1000 (400 is normal and 700 is bold). 事例：<code>w600</code> (specify decimal, not hexadecimal)</p>
  <p id="fontq"><strong>Q</strong>:Text rendering quality. 事例：<code>q3</code>. Q should be followed by a number from the following table:</p>
  <table class="info">
    <tr>
      <th>番号</th>
      <th abbr="Constant">Windows Constant</th>
      <th abbr="説明">説明</th>
    </tr>
    <tr>
      <td>0</td>
      <td>DEFAULT_QUALITY</td>
      <td>Appearance of the font does not matter.</td>
    </tr>
    <tr>
      <td>1</td>
      <td>DRAFT_QUALITY</td>
      <td>Appearance of the font is less important than when the PROOF_QUALITY value is used.</td>
    </tr>
    <tr>
      <td>2</td>
      <td>PROOF_QUALITY</td>
      <td>Character quality of the font is more important than exact matching of the logical-font attributes.</td>
    </tr>
    <tr>
      <td>3</td>
      <td>NONANTIALIASED_QUALITY</td>
      <td>Font is never antialiased, that is, font smoothing is not done.</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ANTIALIASED_QUALITY</td>
      <td>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>CLEARTYPE_QUALITY</td>
      <td>If set, text is rendered (when possible) using ClearType antialiasing method.</td>
    </tr>
  </table>
  <p>For more details of what these values mean, see <a href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createfonta">Microsoft Docs: CreateFont</a>.</p>
  <p>Since the highest quality setting is usually the default, this feature is more typically used to disable anti-aliasing in specific cases where doing so makes the text clearer.</p></dd>
  <dt>FontName</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p><em>FontName</em> may be the name of any font, such as one from the <a href="../misc/FontsStandard.htm">font table</a>. If <em>FontName</em> is omitted or does not exist on the system, the previous font's typeface will be used (or if none, the system's default GUI typeface). This behavior is useful to make a GUI window have a similar font on multiple systems, even if some of those systems lack the preferred font. For example, by using the following methods in order, Verdana will be given preference over Arial, which in turn is given preference over MS sans serif:</p>
  <pre>MyGui.SetFont(, "MS sans serif")
MyGui.SetFont(, "Arial")
MyGui.SetFont(, "Verdana")  <em>; Preferred font.</em></pre></dd>
</dl>
<p>On a related note, the operating system offers standard dialog boxes that prompt the user to pick a font, color, or icon. これらのダイアログは、<a href="https://github.com/majkinetor/mm-autohotkey/tree/master/Dlg">GitHub</a>でデモされているように、<a href="DllCall.htm">DllCall</a>を介して表示することができます。</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>By default, this makes the window visible, unminimizes it (if necessary) and <a href="WinActivate.htm">activates</a> it.</p>
<pre class="Syntax">MyGui.<span class="func">Show</span>(<span class="optional">Options</span>)</pre>
<dl>
  <dt>オプション</dt><dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>Omit the X, Y, W, and H options below to have the window retain its previous size and position. If there is no previous position, the window will be auto-centered in one or both dimensions if the X and/or Y options mentioned below are absent. If there is no previous size, the window will be auto-sized according to the size and positions of the controls it contains.</p>
  <p>Zero or more of the following strings may be present in <em>Options</em> (specify each number as decimal, not hexadecimal):</p>
  <p><strong>Wn</strong>: Specify for <strong>n</strong> the width (in pixels) of the window's client area (the client area excludes the window's borders, title bar, and <a href="#MenuBar">menu bar</a>).</p>
  <p><strong>Hn</strong>: Specify for <strong>n</strong> the height of the window's client area, in pixels.</p>
  <p><strong>Xn</strong>: Specify for <strong>n</strong> the window's X-position on the screen, in pixels. Position 0 is the leftmost column of pixels visible on the screen.</p>
  <p><strong>Yn</strong>: Specify for <strong>n</strong> the window's Y-position on the screen, in pixels. Position 0 is the topmost row of pixels visible on the screen.</p>
  <p><strong>Center</strong>: Centers the window horizontally and vertically on the screen.</p>
  <p><strong>xCenter</strong>:Centers the window horizontally on the screen. 事例：<code>MyGui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter</strong>: Centers the window vertically on the screen.</p>
  <p id="AutoSize"><strong>AutoSize</strong>:Resizes the window to accommodate only its currently visible controls. This is useful to resize the window after new controls are added, or existing controls are resized, hidden, or unhidden. 事例：<code>MyGui.Show("AutoSize Center")</code>.</p>
  <p><em><strong>One of the following may also be present:</strong></em></p>
  <p><strong>Minimize</strong>: Minimizes the window and activates the one beneath it.</p>
  <p><strong>Maximize</strong>: Maximizes and activates the window.</p>
  <p><strong>Restore</strong>: Unminimizes or unmaximizes the window, if necessary. The window is also shown and activated, if necessary.</p>
  <p><strong>NoActivate</strong>: Unminimizes or unmaximizes the window, if necessary. The window is also shown without activating it.</p>
  <p><strong>NA</strong>: Shows the window without activating it. If the window is minimized, it will stay that way but will probably rise higher in the z-order (which is the order seen in the alt-tab selector). If the window was previously hidden, this will probably cause it to appear on top of the active window even though the active window is not deactivated.</p>
  <p><strong>Hide</strong>:Hides the window and activates the one beneath it. This is identical in function to <a href="#Hide">Gui.Hide</a> except that it allows a hidden window to be moved or resized without showing it. 事例：<code>MyGui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h3>Submit</h3>
<p>Collects the values from named controls and composes them into an <a href="Object.htm">Object</a>. オプションでウィンドウを非表示にすることができます。</p>
<pre class="Syntax">NamedCtrlContents := MyGui.<span class="func">Submit</span>(<span class="optional">Hide</span>)</pre>
<dl>
  <dt>Hide</dt><dd>
    <p>型：<a href="../Concepts.htm#boolean">論理値</a></p>
    <p>If omitted or 1 (true), the window will be hidden. If 0 (false), the window will not be hidden.</p>
  </dd>
</dl>
<p>The returned object contains one own property per named control, like <code>NamedCtrlContents.%GuiCtrl.<a href="GuiControl.htm#Name">Name</a>% := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, with the exceptions noted below. Only input-capable controls which support <a href="GuiControl.htm#Value">GuiCtrl.Value</a> and have been given a name are included. Use <code>NamedCtrlContents.NameOfControl</code> to retrieve an individual value or <a href="Object.htm#OwnProps">OwnProps</a> to enumerate them all.</p>
<p>For <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a> and <a href="GuiControls.htm#Tab">Tab</a>, the text of the selected item/tab is stored instead of its position number if the control <strong>lacks</strong> the <a href="#AltSubmit">AltSubmit</a> option, or if the ComboBox's text does not match a list item. Otherwise, <a href="GuiControl.htm#Value">Value</a> (the item's position number) is stored.</p>
<p id="submit-radio">If only one <a href="GuiControls.htm#Radio">Radio</a> button in a radio group has a name, Submit stores the number of the currently selected button instead of the control's <a href="GuiControl.htm#Value">Value</a>. 1 is the first radio button (according to original creation order), 2 is the second, and so on. If there is no button selected, 0 is stored.</p>
<p>Excluded because they are not input-capable: <a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Pic">Pic</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>Also excluded: <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm#ActiveX">ActiveX</a>, <a href="GuiControls.htm#Custom">Custom</a>.</p>
</div>

<div class="methodShort" id="__Enum">
<h3>__Enum</h3>
<p>Enumerates the GUI's controls.</p>
<pre class="Syntax">For Ctrl in MyGui
For Hwnd, Ctrl in MyGui</pre>
<p>新しい<a href="Enumerator.htm">列挙者</a>を返します。このメソッドは通常、直接呼び出されることはない。Instead, the Gui object is passed directly to a <a href="For.htm">for-loop</a>, which calls __Enum once and then calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next control. forループの変数は、列挙者のパラメータに対応しており、次のようになっています。</p>
<dl>
  <dt>Hwnd</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>The control's HWND. 2パラメータモード時のみ存在します。</p>
  </dd>
  <dt>Ctrl</dt>
  <dd>
    <p>型：<a href="GuiControl.htm">GuiControl</a></p>
    <p>The control's object.</p>
  </dd>
</dl>
<p>事例：</p>
<pre>For Hwnd, GuiCtrlObj in MyGui
    MsgBox "Control #" A_Index " is " GuiCtrlObj.ClassNN</pre>
</div>

<div class="methodShort" id="__New">
<h3>__New</h3>
<p>新しいGuiインスタンスを構築します。</p>
<pre class="Syntax">MyGui.<span class="func">__New</span>(<span class="optional">Options, Title, EventObj</span>)</pre>
<p>A Gui subclass may override __New and call <code>super.__New(Options, Title, this)</code> to handle its own events. In such cases, events for the main window (such as Close) do not pass an explicit Gui parameter, as <code>this</code> already contains a reference to the Gui.</p>
<p>An exception is thrown if the window has already been constructed or destroyed.</p>
</div>

<h2 id="Properties">属性</h2>
<div class="methodShort" id="BackColor">
<h3>BackColor</h3>
<p>ウィンドウの背景色を取得または設定します。</p>
<pre class="Syntax">RetrievedColor := MyGui.BackColor</pre>
<pre class="Syntax">MyGui.BackColor := NewColor</pre>
<p><em>RetrievedColor</em> is a 6-digit RGB value of the current color previously set by this property, or an empty string if the default color is being used.</p>
<p><em>NewColor</em> is one of the 16 primary <a href="../misc/Colors.htm">HTML color names</a>, a hexadecimal RGB color value (the 0x prefix is optional), a pure numeric RGB color value, or the word Default (or an empty string) for its default color. Example values: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>, <code>""</code>.</p>
<p>By default, the window's background color is the system's color for the face of buttons.</p>
<p>The color of the <a href="#MenuBar">menu bar</a> and its submenus can be changed as in this example: <code>MyMenuBar.<a href="Menu.htm#SetColor">SetColor</a> "White"</code>.</p>
<p>To make the background transparent, use <a href="WinSetTransColor.htm">WinSetTransColor</a>. However, if you do this without first having assigned a custom window via <a href="#BackColor">Gui.BackColor</a>, buttons will also become transparent. To prevent this, first assign a custom color and then make that color transparent. 事例：</p>
<pre>MyGui.BackColor := "EEAA99"
WinSetTransColor("EEAA99", MyGui)</pre>
<p>To additionally remove the border and title bar from a window with a transparent background, use the following: <code>MyGui.Opt("-Caption")</code></p>
<p>To illustrate the above, there is an example of an on-screen display (OSD) near the bottom of this page.</p>
</div>

<div class="methodShort" id="FocusedCtrl">
<h3>FocusedCtrl</h3>
<p>Retrieves the <a href="GuiControl.htm">GuiControl object</a> of the GUI's focused control.</p>
<pre class="Syntax">GuiCtrlObj := MyGui.FocusedCtrl</pre>
<p>注：To be effective, the window generally must not be minimized or hidden.</p>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>GUIウィンドウのウィンドウハンドル（HWND）を取得する。</p>
<pre class="Syntax">CurrentHwnd := MyGui.Hwnd</pre>
<p>A GUI's HWND is often used with <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a>, and <a href="DllCall.htm">DllCall</a>. It can also be used directly in a <a href="../misc/WinTitle.htm#ahk_id">WinTitle parameter</a>.</p></div>

<div class="methodShort" id="MarginX">
<h3>MarginX</h3>
<p>側面とその後に作成されるコントロールの間の水平マージンのサイズを取得または設定します。</p>
<pre class="Syntax">RetrievedValue := MyGui.MarginX</pre>
<pre class="Syntax">MyGui.MarginX := NewValue</pre>
<p><em>RetrievedValue</em> is the number of pixels of the current horizontal margin.</p>
<p><em>NewValue</em> is the number of pixels of space to leave at the left and right side of the window when auto-positioning any control that lacks an explicit <a href="#XY">X coordinate</a>. Also, the margin is used to determine the horizontal distance that separates auto-positioned controls from each other. Finally, the margin is taken into account by the first use of <a href="#Show">Gui.Show</a> to calculate the window's size (when no explicit size is specified).</p>
<p>By default, this margin is proportional to the size of the currently selected <a href="#SetFont">font</a> (1.25 times font-height for left &amp; right).</p>
</div>

<div class="methodShort" id="MarginY">
<h3>MarginY</h3>
<p>側面とその後に作成されるコントロールの間の垂直マージンのサイズを取得または設定します。</p>
<pre class="Syntax">RetrievedValue := MyGui.MarginY</pre>
<pre class="Syntax">MyGui.MarginY := NewValue</pre>
<p><em>RetrievedValue</em> is the number of pixels of the current vertical margin.</p>
<p><em>NewValue</em> is the number of pixels of space to leave at the top and bottom side of the window when auto-positioning any control that lacks an explicit <a href="#XY">Y coordinate</a>. Also, the margin is used to determine the vertical distance that separates auto-positioned controls from each other. Finally, the margin is taken into account by the first use of <a href="#Show">Gui.Show</a> to calculate the window's size (when no explicit size is specified).</p>
<p>By default, this margin is proportional to the size of the currently selected <a href="#SetFont">font</a> (0.75 times font-height for top &amp; bottom).</p>
</div>

<div class="methodShort" id="MenuBar">
<h3>MenuBar</h3>
<p>ウィンドウのメニューバーを取得または設定する。</p>
<pre class="Syntax">MyGui.MenuBar := Bar</pre>
<pre class="Syntax">Bar := MyGui.MenuBar</pre>
<p><em>Bar</em> is a <a href="Menu.htm">MenuBar object</a> created by <a href="Menu.htm#Call">MenuBar()</a>. 事例：</p>
<pre>FileMenu := Menu()
FileMenu.Add "&amp;Open`tCtrl+O", (*) =&gt; FileSelect()  <em>; See remarks below about Ctrl+O.</em>
FileMenu.Add "E&amp;xit", (*) =&gt; ExitApp()
HelpMenu := Menu()
HelpMenu.Add "&amp;About", (*) =&gt; MsgBox("Not implemented")
Menus := MenuBar()
Menus.Add "&amp;File", FileMenu  <em>; Attach the two submenus that were created above.</em>
Menus.Add "&amp;Help", HelpMenu
MyGui := Gui()
MyGui.MenuBar := Menus
MyGui.Show "w300 h200"</pre>
<p>In the first line above, notice that <code>&amp;Open</code> is followed by <code>Ctrl+O</code> (with a tab character in between). This indicates a keyboard shortcut that the user may press instead of selecting the menu item. If the shortcut uses only the standard modifier key names Ctrl, Alt and Shift, it is automatically registered as a <em>keyboard accelerator</em> for the GUI. Single-character accelerators with no modifiers are case-sensitive and can be triggered by unusual means such as IME or <kbd>Alt</kbd>+NNNN.</p>
<p>If a particular key combination does not work automatically, the use of a <a href="_HotIf.htm">context-sensitive hotkey</a> may be required. However, such hotkeys typically cannot be triggered by <a href="Send.htm">Send</a> and are more likely to interfere with other scripts than a standard keyboard accelerator.</p>
<p>To remove a window's current menu bar, use <code>MyGui.MenuBar := ""</code> (that is, assign an empty string).</p>
</div>

<div class="methodShort" id="Name">
<h3>名前</h3>
<p>GUIウィンドウのカスタムネームを取得または設定します。</p>
<pre class="Syntax">RetrievedName := MyGui.Name</pre>
<pre class="Syntax">MyGui.Name := NewName</pre>
</div>

<div class="methodShort" id="Title">
<h3>Title</h3>
<p>GUI のタイトルを取得または設定します。</p>
<pre class="Syntax">RetrievedTitle := MyGui.Title</pre>
<pre class="Syntax">MyGui.Title := NewTitle</pre>
</div>

<div class="methodShort" id="__Item">
<h3>__Item</h3>
<p>Retrieves the <a href="GuiControl.htm">GuiControl object</a> associated with the specified name, text, ClassNN or HWND.</p>
<pre class="Syntax">GuiCtrlObj := Gui[Name]</pre>
</div>

<h2 id="Navigate">Keyboard Navigation</h2>
<p>A GUI window may be navigated via <kbd>Tab</kbd>, which moves keyboard focus to the next input-capable control (controls from which the <a href="#Tabstop">Tabstop</a> style has been removed are skipped). The order of navigation is determined by the order in which the controls were originally added. When the window is shown for the first time, the first input-capable control that has the Tabstop style (which most control types have by default) will have keyboard focus, unless that control is a Button and there is a Default button, in which case the latter is focused instead.</p>
<p id="ShortcutKey">Certain controls may contain an ampersand (&amp;) to create a keyboard shortcut, which might be displayed in the control's text as an underlined character (depending on system settings). A user activates the shortcut by holding down <kbd>Alt</kbd> then typing the corresponding character. For buttons, checkboxes,  and radio buttons, pressing the shortcut is the same as clicking the control. For GroupBoxes and Text controls, pressing the shortcut causes keyboard focus to jump to the first input-capable <a href="#Tabstop">tabstop</a> control that was created after it. However, if more than one control has the same shortcut key, pressing the shortcut will alternate keyboard focus among all controls with the same shortcut.</p>
<p>To display a literal ampersand inside the control types mentioned above, specify two consecutive ampersands as in this example: <code>MyGui.Add("Button",, "Save &amp;&amp; Exit")</code>.</p>

<h2 id="Appear">Window Appearance</h2>
<p>For its icon, a GUI window uses the tray icon that was in effect at the time the window was created. Thus, to have a different icon, change the tray icon before creating the window. 事例：<code><a href="TraySetIcon.htm">TraySetIcon</a>("MyIcon.ico")</code>. It is also possible to have a different large icon for a window than its small icon (the large icon is displayed in the alt-tab task switcher). This can be done via <a href="LoadPicture.htm">LoadPicture</a> and <a href="SendMessage.htm">SendMessage</a>; for example:</p>
<pre>iconsize := 32  <em>; Ideal size for alt-tab varies between systems and OS versions.</em>
hIcon := LoadPicture("My Icon.ico", "Icon1 w" iconsize " h" iconsize, &amp;imgtype)
MyGui := Gui()
SendMessage(0x0080, 1, hIcon, MyGui)  <em>; 0x0080 is WM_SETICON; and 1 means ICON_BIG (vs. 0 for ICON_SMALL).</em>
MyGui.Show()</pre>
<p>Due to OS limitations, Checkboxes, Radio buttons, and GroupBoxes for which a non-default text color was specified will take on the Classic Theme appearance.</p>
<p>関連トピック<a href="#MarginX">window's margin</a>.</p>

<h2 id="GenRemarks">総論</h2>
<p>Use the <a href="GuiControl.htm">GuiControl object</a> to operate upon individual controls in a GUI window.</p>
<p>Each GUI window may have up to 11,000 controls. However, use caution when creating more than 5000 controls because system instability may occur for certain control types.</p>
<p id="deleted">The GUI window is automatically <a href="#Destroy">destroyed</a> when the Gui object is deleted, which occurs when its <a href="../Objects.htm#Reference_Counting">reference count</a> reaches zero. However, this does not typically occur while the window is visible, as <a href="#Show">Show</a> automatically increments the reference count. While the window is visible, the user can interact with it and raise events which are handled by the script. When the user closes the window or it is hidden by <a href="#Hide">Hide</a>, <a href="#Show">Show</a> or <a href="#Submit">Submit</a>, this extra reference is released.</p>
<p>To keep a GUI window "alive" without calling <a href="#Show">Show</a> or retaining a reference to its Gui object, the script can increment the object's reference count with <a href="ObjAddRef.htm">ObjAddRef</a> (in which case <a href="ObjAddRef.htm">ObjRelease</a> must be called when the window is no longer needed). For example, this might be done when using a hidden GUI window to <a href="OnMessage.htm">receive messages</a>, or if the window is shown by "external" means such as <a href="WinShow.htm">WinShow</a> (by this script or any other).</p>
<p>If the script is not <a href="../Scripts.htm#persistent">persistent</a> for any other reason, it will exit after the last visible GUI is closed; either when the last thread completes or immediately if no threads are running.</p>

<h2 id="Related">関連</h2>
<p><a href="GuiControl.htm">GuiControl object</a>, <a href="GuiFromHwnd.htm">GuiFromHwnd</a>, <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>, <a href="GuiControls.htm">Control Types</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Menu.htm">Menu object</a>, <a href="Control.htm">Control functions</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelect.htm">FileSelect</a>, <a href="DirSelect.htm">DirSelect</a></p>

<h2 id="Examples">例</h2>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a>  Creates a popup window.</p>
<pre>MyGui := Gui(, "Title of Window")
MyGui.Opt("+AlwaysOnTop +Disabled -SysMenu +Owner")  <em>; +Owner avoids a taskbar button.</em>
MyGui.Add("Text",, "Some text to display.")
MyGui.Show("NoActivate")  <em>; NoActivate avoids deactivating the currently active window.</em></pre>
</div>

<div class="ex" id="ExInputBox">
<p><a class="ex_number" href="#ExInputBox"></a>  Creates a simple input-box that asks for the first and last name.</p>
<pre>MyGui := Gui(, "Simple Input Example")
MyGui.Add("Text",, "First name:")
MyGui.Add("Text",, "Last name:")
MyGui.Add("Edit", "vFirstName ym")  <em>; The ym option starts a new column of controls.</em>
MyGui.Add("Edit", "vLastName")
MyGui.Add("Button", "default", "OK").OnEvent("Click", ProcessUserInput)
MyGui.OnEvent("Close", ProcessUserInput)
MyGui.Show()

ProcessUserInput(*)
{
    Saved := MyGui.Submit()  <em>; Save the contents of named controls into an object.</em>
    MsgBox("You entered '" Saved.FirstName " " Saved.LastName "'.")
}</pre>
</div>

<div class="ex" id="ExTab">
<p><a class="ex_number" href="#ExTab"></a>  Creates a tab control with multiple tabs, each containing different controls to interact with.</p>
<pre>MyGui := Gui()
Tab := MyGui.Add("Tab3",, ["First Tab","Second Tab","Third Tab"])
MyGui.Add("Checkbox", "vMyCheckbox", "Sample checkbox")
Tab.UseTab(2)
MyGui.Add("Radio", "vMyRadio", "Sample radio1")
MyGui.Add("Radio",, "Sample radio2")
Tab.UseTab(3)
MyGui.Add("Edit", "vMyEdit r5")  <em>; r5 means 5 rows tall.</em>
Tab.UseTab()  <em>; i.e. subsequently-added controls will not belong to the tab control.</em>
Btn := MyGui.Add("Button", "default xm", "OK")  <em>; xm puts it at the bottom left corner.</em>
Btn.OnEvent("Click", ProcessUserInput)
MyGui.OnEvent("Close", ProcessUserInput)
MyGui.OnEvent("Escape", ProcessUserInput)
MyGui.Show()

ProcessUserInput(*)
{
    Saved := MyGui.Submit()  <em>; Save the contents of named controls into an object.</em>
    MsgBox("You entered:`n" Saved.MyCheckbox "`n" Saved.MyRadio "`n" Saved.MyEdit)
}</pre>
</div>

<div class="ex" id="ExListBox">
<p><a class="ex_number" href="#ExListBox"></a>  Creates a ListBox control containing files in a directory.</p>
<pre>MyGui := Gui()
MyGui.Add("Text",, "Pick a file to launch from the list below.")
LB := MyGui.Add("ListBox", "w640 r10")
LB.OnEvent("DoubleClick", LaunchFile)
Loop Files, "C:\*.*"  <em>; Change this folder and wildcard pattern to suit your preferences.</em>
    LB.Add([A_LoopFilePath])
MyGui.Add("Button", "Default", "OK").OnEvent("Click", LaunchFile)
MyGui.Show()

LaunchFile(*)
{
    if MsgBox("Would you like to launch the file or document below?`n`n" LB.Text,, 4) = "No"
        return
    <em>; Otherwise, try to launch it:</em>
    try Run(LB.Text)
    if A_LastError
        MsgBox("Could not launch the specified file. Perhaps it is not associated with anything.")
}</pre>
</div>

<div class="ex" id="ExToolTip">
<p><a class="ex_number" href="#ExToolTip"></a>  Displays a context-sensitive help (via ToolTip) whenever the user moves the mouse over a particular control.</p>
<pre>
MyGui := Gui()
MyEdit := MyGui.Add("Edit")
<em>; Store the tooltip text in a custom property:</em>
MyEdit.ToolTip := "This is a tooltip for the control whose name is MyEdit."
MyDDL := MyGui.Add("DropDownList",, ["Red","Green","Blue"])
MyDDL.ToolTip := "Choose a color from the drop-down list."
MyGui.Add("Checkbox",, "This control has no tooltip.")
MyGui.Show()
OnMessage(0x0200, On_WM_MOUSEMOVE)

On_WM_MOUSEMOVE(wParam, lParam, msg, Hwnd)
{
    static PrevHwnd := 0
    if (Hwnd != PrevHwnd)
    {
        Text := "", ToolTip() <em>; Turn off any previous tooltip.</em>
        CurrControl := GuiCtrlFromHwnd(Hwnd)
        if CurrControl
        {
            if !CurrControl.HasProp("ToolTip")
                return <em>; No tooltip for this control.</em>
            Text := CurrControl.ToolTip
            SetTimer () =&gt; ToolTip(Text), -1000
            SetTimer () =&gt; ToolTip(), -4000 <em>; Remove the tooltip.</em>
        }
        PrevHwnd := Hwnd
    }
}</pre>
</div>

<div class="ex" id="ExOSD">
<p><a class="ex_number" href="#ExOSD"></a>  Creates an On-screen display (OSD) via transparent window.</p>
<pre>MyGui := Gui()
MyGui.Opt("+AlwaysOnTop -Caption +ToolWindow")  <em>; +ToolWindow avoids a taskbar button and an alt-tab menu item.</em>
MyGui.BackColor := "EEAA99"  <em>; Can be any RGB color (it will be made transparent below).</em>
MyGui.SetFont("s32")  <em>; Set a large font size (32-point).</em>
CoordText := MyGui.Add("Text", "cLime", "XXXXX YYYYY")  <em>; XX &amp; YY serve to auto-size the window.
; Make all pixels of this color transparent and make the text itself translucent (150):</em>
WinSetTransColor(MyGui.BackColor " 150", MyGui)
SetTimer(UpdateOSD, 200)
UpdateOSD()  <em>; Make the first update immediate rather than waiting for the timer.</em>
MyGui.Show("x0 y400 NoActivate")  <em>; NoActivate avoids deactivating the currently active window.</em>

UpdateOSD(*)
{
    MouseGetPos &amp;MouseX, &amp;MouseY
    CoordText.Value := "X" MouseX ", Y" MouseY
}</pre>
</div>

<div class="ex" id="ExProgressBar">
<p><a class="ex_number" href="#ExProgressBar"></a>  Creates a moving progress bar overlayed on a background image.</p>
<pre>MyGui := Gui()
MyGui.BackColor := "White"
MyGui.Add("Picture", "x0 y0 h350 w450", A_WinDir "\Web\Wallpaper\Windows\img0.jpg")
MyBtn := MyGui.Add("Button", "Default xp+20 yp+250", "Start the Bar Moving")
MyBtn.OnEvent("Click", MoveBar)
MyProgress := MyGui.Add("Progress", "w416")
MyText := MyGui.Add("Text", "wp")  <em>; wp means "use width of previous".</em>
MyGui.Show()

MoveBar(*)
{
    Loop Files, A_WinDir "\*.*"
    {
        if (A_Index &gt; 100)
            break
        MyProgress.Value := A_Index
        MyText.Value := A_LoopFileName
        Sleep 50
    }
    MyText.Value := "Bar finished."
}</pre>
</div>

<div class="ex" id="ExImageViewer">
<p><a class="ex_number" href="#ExImageViewer"></a>  Creates a simple image viewer.</p>
<pre>MyGui := Gui("+Resize")
MyBtn := MyGui.Add("Button", "default", "&amp;Load New Image")
MyBtn.OnEvent("Click", LoadNewImage)
MyRadio := MyGui.Add("Radio", "ym+5 x+10 checked", "Load &amp;actual size")
MyGui.Add("Radio", "ym+5 x+10", "Load to &amp;fit screen")
MyPic := MyGui.Add("Pic", "xm")
MyGui.Show()

LoadNewImage(*)
{
    Image := FileSelect(,, "Select an image:", "Images (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)")
    if Image = ""
        return
    if (MyRadio.Value)  <em>; Display image at its actual size.</em>
    {
        Width := 0
        Height := 0
    }
    else <em>; Second radio is selected: Resize the image to fit the screen.</em>
    {
        Width := A_ScreenWidth - 28  <em>; Minus 28 to allow room for borders and margins inside.</em>
        Height := -1  <em>; "Keep aspect ratio" seems best.</em>
    }
    MyPic.Value := Format("*w{1} *h{2} {3}", Width, Height, Image)  <em>; Load the image.</em>
    MyGui.Title := Image
    MyGui.Show("xCenter y0 AutoSize")  <em>; Resize the window to match the picture size.</em>
}</pre>
</div>

<div class="ex" id="ExEditor">
<p><a class="ex_number" href="#ExEditor"></a>  Creates a simple text editor with menu bar.</p>
<pre>
<em>; Create the MyGui window:</em>
MyGui := Gui("+Resize", "Untitled")  <em>; Make the window resizable.</em>

<em>; Create the submenus for the menu bar:</em>
FileMenu := Menu()
FileMenu.Add("&amp;New", MenuFileNew)
FileMenu.Add("&amp;Open", MenuFileOpen)
FileMenu.Add("&amp;Save", MenuFileSave)
FileMenu.Add("Save &amp;As", MenuFileSaveAs)
FileMenu.Add() <em>; Separator line.</em>
FileMenu.Add("E&amp;xit", MenuFileExit)
HelpMenu := Menu()
HelpMenu.Add("&amp;About", MenuHelpAbout)

<em>; Create the menu bar by attaching the submenus to it:</em>
MyMenuBar := MenuBar()
MyMenuBar.Add("&amp;File", FileMenu)
MyMenuBar.Add("&amp;Help", HelpMenu)

<em>; Attach the menu bar to the window:</em>
MyGui.MenuBar := MyMenuBar

<em>; Create the main Edit control:</em>
MainEdit := MyGui.Add("Edit", "WantTab W600 R20")

<em>; Apply events:</em>
MyGui.OnEvent("DropFiles", Gui_DropFiles)
MyGui.OnEvent("Size", Gui_Size)

MenuFileNew()  <em>; Apply default settings.</em>
MyGui.Show()  <em>; Display the window.</em>

MenuFileNew(*)
{
    MainEdit.Value := ""  <em>; Clear the Edit control.</em>
    FileMenu.Disable("3&amp;")  <em>; Gray out &amp;Save.</em>
    MyGui.Title := "Untitled"
}

MenuFileOpen(*)
{
    MyGui.Opt("+OwnDialogs")  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
    SelectedFileName := FileSelect(3,, "Open File", "Text Documents (*.txt)")
    if SelectedFileName = "" <em>; No file selected.</em>
        return
    global CurrentFileName := readContent(SelectedFileName)
}

MenuFileSave(*)
{
    saveContent(CurrentFileName)
}

MenuFileSaveAs(*)
{
    MyGui.Opt("+OwnDialogs")  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
    SelectedFileName := FileSelect("S16",, "Save File", "Text Documents (*.txt)")
    if SelectedFileName = "" <em>; No file selected.</em>
        return
    global CurrentFileName := saveContent(SelectedFileName)
}

MenuFileExit(*)  <em>; User chose "Exit" from the File menu.</em>
{
    WinClose()
}

MenuHelpAbout(*)
{
    About := Gui("+owner" MyGui.Hwnd)  <em>; Make the main window the owner of the "about box".</em>
    MyGui.Opt("+Disabled")  <em>; Disable main window.</em>
    About.Add("Text",, "Text for about box.")
    About.Add("Button", "Default", "OK").OnEvent("Click", About_Close)
    About.OnEvent("Close", About_Close)
    About.OnEvent("Escape", About_Close)
    About.Show()

About_Close(*)
    {
        MyGui.Opt("-Disabled")  <em>; Re-enable the main window (must be done prior to the next step).</em>
        About.Destroy()  <em>; Destroy the about box.</em>
    }
}

readContent(FileName)
{
    try
        FileContent := FileRead(FileName)  <em>; Read the file's contents into the variable.</em>
    catch
    {
        MsgBox("Could not open '" FileName "'.")
        return
    }
    MainEdit.Value := FileContent  <em>; Put the text into the control.</em>
    FileMenu.Enable("3&amp;")  <em>; Re-enable &amp;Save.</em>
    MyGui.Title := FileName  <em>; Show file name in title bar.</em>
    return FileName
}

saveContent(FileName)
{
    try
    {
        if FileExist(FileName)
            FileDelete(FileName)
        FileAppend(MainEdit.Value, FileName)  <em>; Save the contents to the file.</em>
    }
    catch
    {
        MsgBox("The attempt to overwrite '" FileName "' failed.")
        return
    }
    <em>; Upon success, Show file name in title bar (in case we were called by MenuFileSaveAs):</em>
    MyGui.Title := FileName
    return FileName
}

Gui_DropFiles(thisGui, Ctrl, FileArray, *)  <em>; Support drag &amp; drop.</em>
{
    CurrentFileName := readContent(FileArray[1])  <em>; Read the first file only (in case there's more than one).</em>
}

Gui_Size(thisGui, MinMax, Width, Height)
{
    if MinMax = -1  <em>; The window has been minimized. No action needed.</em>
        return
    <em>; Otherwise, the window has been resized or maximized. Resize the Edit control to match.</em>
    MainEdit.Move(,, Width-20, Height-20)
}</pre>
</div>
</body>
</html>
