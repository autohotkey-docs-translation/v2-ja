<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Loop Read - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Loop Read文は、テキストファイルの行を1行ずつ取得します。" />
<meta name="ahk:equiv-v1" content="lib/LoopReadFile.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop Read</h1>

<p>テキストファイルの行を1行ずつ取得します。</p>

<pre class="Syntax"><span class="func">Loop Read</span> InputFile <span class="optional">, OutputFile</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>InputFile</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">String</a></p>
    <p>絶対パスが指定されていない場合は、<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>にあると仮定されます。ファイルの行末は、キャリッジリターンとラインフィード（`r`n）、ラインフィード（`n）だけ、またはキャリッジリターン（`r）だけであることができます。</p>
  </dd>

  <dt id="OutputFile">OutputFile</dt>
  <dd>
      <p>型：<a href="../Concepts.htm#strings">String</a></p>
      <p>(Optional) The name of the file to be kept open for the duration of the loop, which is assumed to be in <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> if an absolute path isn't specified.</p>
      <p>ループのボディ内で、<a href="FileAppend.htm">FileAppend</a>関数を<em>Filename</em>パラメータなしで（つまり省略）使用し、この特別なファイルに追記します。この方法は、2パラメータモードの<a href="FileAppend.htm">FileAppend</a>を使用するよりも、操作のたびにファイルを閉じて開き直す必要がないため、より優れたパフォーマンスを発揮します。必要であれば、テキストの後にラインフィード（`n）またはキャリッジリターンとラインフィード（`r`n）を含めることを忘れないようにしてください。</p>
      <p>何も書き込まれない場合は、ファイルは開かれません。This happens if the loop performs zero iterations or if it never calls <a href="FileAppend.htm">FileAppend</a>.</p>
      <p><strong>Options:</strong> The end of line (EOL) translation mode and output file encoding depend on which options are passed in the opening call to <a href="FileAppend.htm">FileAppend</a> (i.e. the first call which omits <em>Filename</em>). それ以降の呼び出しでは、<em>Options</em>パラメータは無視されます。つまり、<code>"`n"</code>オプションがない限り、改行文字(`n)はそのまま書き込まれます。</p>
      <p><strong>Standard Output (stdout):</strong> Specifying an asterisk (*) for <em>OutputFile</em> sends any text written by <a href="FileAppend.htm">FileAppend</a> to standard output (stdout). このようなテキストは、ファイルにリダイレクトしたり、別のEXEにパイプしたり、<a href="_ErrorStdOut.htm">おしゃれなテキストエディター</a>でキャプチャしたりすることができます。ただし、stdoutに送られたテキストは、起動したコマンドプロンプトには表示されません。これは、1）<a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe ConsoleAppディレクティブ</a>でスクリプトをコンパイルする、または2）スクリプトの出力を他のコマンドやプログラムにパイプすることで回避することができます。See <a href="FileAppend.htm">FileAppend</a> for more details.</p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p>ファイル読み込みループは、テキストファイルに含まれる行を1行ずつ操作したいときに便利です。次の行を探すために毎回再スキャンする必要がないように、操作中はファイルを開いたままにしておきます。</p>
<p id="LoopReadLine">組み込み変数<strong>A_LoopReadLine</strong>は、任意のファイル読み込みループ内に存在します。行末を示すキャリッジリターンとラインフィード（`r`n）を除いた、現在の行の内容が含まれます。内側のファイル読み込みループが外側のファイル読み込みループに囲まれている場合、一番内側のループのファイル行が優先されます。</p>
<p>最大65,534文字までの行を読み取ることができます。行の長さがこれを超える場合は、次のループの繰り返しで残りの文字が読み取られます。</p>
<p><a href="StrSplit.htm">StrSplit</a>や <a href="LoopParse.htm">構文解析ループ</a>は、ファイル読み込みループの中で、<em>InputFile</em>から取得した各行の内容を構文解析するためによく使われます。例えば、<em>InputFile</em>の行がそれぞれタブ区切りのフィールドの列である場合、この例のようにフィールドを個別に取得することができます：</p>
<pre>Loop read, "C:\Database Export.txt"
{
    Loop parse, A_LoopReadLine, A_Tab
    {
        MsgBox "Field number " A_Index " is " A_LoopField "."
    }
}</pre>
<p>ファイル全体を変数に読み込むには、ループよりもはるかに性能が良い（特に大きなファイルの場合）ので、<a href="FileRead.htm">FileRead</a>を使用します。</p>
<p>複数のファイルを同時に開くには、<a href="FileOpen.htm">FileOpen</a>を使用します。</p>
<p id="otb">オプションで、オープンブレースを下ではなく同じラインに表示させるOTB（One True Brace）スタイルを採用することも可能です。事例：<code>Loop Read InputFile, OutputFile {</code>.</p>
<p><a href="Block.htm">Blocks</a>、<a href="Break.htm">Break</a>、<a href="Continue.htm">Continue</a>、A_Index変数（どのタイプのループにも存在する）については、「<a href="Loop.htm">Loop</a>」をご覧ください。</p>
<p>バイトオーダーマークが存在しない場合のファイルのデコード方法を制御するには、<a href="FileEncoding.htm">FileEncoding</a>を使用します。</p>
<p>ループの後には、入力ファイルが空であったり、見つからなかったりした場合に実行される<a href="Else.htm">Else</a>文がオプションで付いていることがあります。<em>OutputFile</em>が指定された場合、<em>Else</em>文の本体内では、<a href="#OutputFile">上記</a>の <a href="FileAppend.htm">FileAppend</a>の特殊モードも使用することができます。<em>Else</em>がない場合、ファイルが見つからなかった場合は<a href="Error.htm#OSError">OSError</a>が投げられる。</p>

<h2 id="Related">関連</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="File.htm">File Object</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="Sort.htm">Sort</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExFileAppend">
<p><a class="ex_number" href="#ExFileAppend"></a> 1つ目のファイルのうち、FAMILYという単語を含む行だけが、2つ目のファイルに書き込まれます。1行目のコメントを外すと、既存のファイルに追記するのではなく、上書きされます。</p>
<pre><em>;FileDelete "C:\Docs\Family Addresses.txt"</em>

Loop read, "C:\Docs\Address List.txt", "C:\Docs\Family Addresses.txt"
{
    if InStr(A_LoopReadLine, "family")
        FileAppend(A_LoopReadLine "`n")
}
else
    MsgBox "Address List.txt was completely empty or not found."</pre>
</div>

<div class="ex" id="ExLastLine">
<p><a class="ex_number" href="#ExLastLine"></a> テキストファイルから最終行を取得する。</p>
<pre>Loop read, "C:\Log File.txt"
    last_line := A_LoopReadLine  <em>; ループ終了時、最終行を保持します。</em></pre>
</div>

<div class="ex" id="ExURL">
<p><a class="ex_number" href="#ExURL"></a> テキストファイルまたはHTMLファイルから、すべてのFTPおよびHTTP URLの抽出を試みます。</p>
<pre>
SourceFile := FileSelect(3,, "Pick a text or HTML file to analyze.")
if SourceFile = ""
    return  <em>; この場合、終了します。</em>

SplitPath SourceFile,, &amp;SourceFilePath,, &amp;SourceFileNoExt
DestFile := SourceFilePath "\" SourceFileNoExt " Extracted Links.txt"

if FileExist(DestFile)
{
    Result := MsgBox("Overwrite the existing links file?Press No to append to it.`n`nFILE:" DestFile,, 4)
    if Result = "Yes"
        FileDelete DestFile
}

LinkCount := 0
Loop read, SourceFile, DestFile
{
    URLSearch(A_LoopReadLine)
}
MsgBox LinkCount ' links were found and written to "' DestFile '".'
return


URLSearch(URLSearchString)
{
    <em>; URLの中には、他のURLが埋め込まれているものがあるため、このような特殊な方法になっています：
; 一番左のスタートポジションを探す：</em>
    URLStart := 0  <em>; 開始時のデフォルトを設定する。</em>
    for URLPrefix in ["https://", "http://", "ftp://", "www."]
    {
        ThisPos := InStr(URLSearchString, URLPrefix)
        if !ThisPos  <em>; このプリフィクスは失格である。</em>
            continue
        if !URLStart
            URLStart := ThisPos
        else <em>; URLStartには有効な位置が含まれているので、ThisPosと比較します。</em>
        {
            if ThisPos &amp;&amp; ThisPos &lt; URLStart
                URLStart := ThisPos
        }
    }

if !URLStart  <em>; No URLs exist in URLSearchString.</em>
        return

<em>; そうでない場合は、このURLを抽出します：</em>
    URL := SubStr(URLSearchString, URLStart)  <em>;先頭/関係ない部分を省略します。</em>
    Loop parse, URL, " `t&lt;&gt;"  <em>; 最初のスペース、タブ、角括弧（もしあれば）を見つける</em>。
    {
        URL := A_LoopField
        break  <em>; つまり、最初の "フィールド "を取得するために1回だけループを反復します。</em>
    }
    <em>; もし、上記のループが、終了文字が見つからなかったために、繰り返し回数が0回だった場合、
    ; URL varの中身はそのままにしておく。

; URLの末尾がダブルクォートで終わっている場合は、それを削除する。今のところ、StrReplaceが使用されていますが
    ; 二重引用符はURLの中に合法的に存在できるようなので、この
    ; 破損する可能性があります：</em>
    URLCleansed := StrReplace(URL, '"')
    FileAppend URLCleansed "`n"
    global LinkCount += 1

<em>; この行の中に他のURLがあるかどうかを確認する：</em>
    CharactersToOmit := StrLen(URL)
    CharactersToOmit += URLStart
    URLSearchString := SubStr(URLSearchString, CharactersToOmit)
    
<em>; selfを再帰的に呼び出す：</em>
    URLSearch(URLSearchString)
}
</pre>
</div>

</body>
</html>
