<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>A_HotkeyModifierTimeout - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="A_HotkeyModifierTimeout is a built-in variable that affects the behavior of the Send function with the hotkey modifiers CTRL, ALT, WIN, and SHIFT." />
<meta name="ahk:equiv-v1" content="lib/_HotkeyModifierTimeout.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>A_HotkeyModifierTimeout</h1>

<p><em>A_HotkeyModifierTimeout</em> is a <a href="../Concepts.htm#built-in-variables">built-in variable</a> that affects the behavior of <a href="Send.htm">Send</a> with <a href="../Hotkeys.htm">hotkey</a> modifiers <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, <kbd>Win</kbd>, and <kbd>Shift</kbd>. Specifically, it defines how long after a hotkey is pressed that its modifier keys are assumed to still be held down. This is used by <a href="Send.htm">Send</a> to determine whether to push the modifier keys back down after having temporarily released them.</p>
<p><em>A_HotkeyModifierTimeout</em> can be used to get or set an <a href="../Concepts.htm#numbers">integer</a> representing the length of the interval in milliseconds. If -1, it never times out (modifier keys are always pushed back down after the Send). If 0, it always times out (modifier keys are never pushed back down).</p>
<p>The default setting is 50 (ms).</p>

<h2 id="Remarks">備考</h2>
<p>この変数は、以下の場合に効果がありません。</p>
<ul>
  <li>ホットキーは、<a href="Send.htm#SendInput">SendInput</a>または<a href="Send.htm#SendPlay">SendPlay</a>メソッドでキーストロークを送信します。これは、ユーザーがキーを押したり離したりする操作を、送信完了後まで延期するためです。</li>
  <li>The script has the keyboard hook installed (you can see if your script uses the hook via the "View-&gt;Key history" menu item in the <a href="../Program.htm#main-window">main window</a>, or via the <a href="KeyHistory.htm">KeyHistory</a> function). This is because the hook can keep track of which modifier keys (<kbd>Alt</kbd>/<kbd>Ctrl</kbd>/<kbd>Win</kbd>/<kbd>Shift</kbd>) the user is physically holding down and doesn't need to use the timeout.</li>
</ul>
<p>To illustrate the effect of this variable, consider this example: <code>^!a::Send "abc"</code>.</p>
<p><a href="Send.htm">Send</a>関数が実行されると、まず<kbd>Ctrl</kbd>と <kbd>Alt</kbd>を解除して、文字が正しく送信されるようにします。すべてのキーを送信した後、関数は<kbd>Ctrl</kbd>と <kbd>Alt</kbd>を安全に押し戻せるかどうか（ユーザーがまだ押し続けているかどうかを確認するため）わからない。しかし、指定されたミリ秒未満しか経過していない場合は、ユーザーがまだキーを離す機会がなかったと判断し、物理的な状態に合わせてキーを押し戻します。そうしないと、修飾キーが押し戻されず、同じキーや別のキーを修飾させるために、ユーザーは一旦キーを離して再度押す必要があります。</p>
<p>タイムアウトは、ユーザーが通常ホットキーの修飾子を押したまま離す時間よりも短い値に設定する必要があります。そうでないと、ユーザーが物理的に押さえていなくても、モディファイアがダウンポジションに復元される（ダウンで動かなくなる）可能性があります。</p>
<p>以下のいずれかで、この変数の必要性を低減または排除することができます。</p>
<ul>
  <li><a href="InstallKeybdHook.htm">InstallKeybdHook</a>を呼び出して、キーボードフックをインストールします。</li>
  <li>従来の<a href="Send.htm#SendEvent">SendEvent</a>メソッドではなく、<a href="Send.htm#SendInput">SendInput</a>または<a href="Send.htm#SendPlay">SendPlay</a>メソッドを使用します。</li>
  <li>従来の<a href="Send.htm#SendEvent">SendEvent</a>メソッドを使用する場合、<a href="SetKeyDelay.htm">SetKeyDelay</a>を0または-1にすると、より早くキーストロークが送信されるため、効果があるはずです。</li>
</ul>

<h2 id="Related">関連</h2>
<p><a href="GetKeyState.htm">GetKeyState</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Sets the hotkey modifier timeout to 100&nbsp;ms instead of 50&nbsp;ms.</p>
<pre>A_HotkeyModifierTimeout := 100</pre>
</div>

</body>
</html>
