<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>ComValue - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="ComValueクラスは、スクリプトで使用する値、SafeArrayまたはCOMオブジェクトをラップし、COMメソッドに渡すためのものです。" />
<meta name="ahk:equiv-v1" content="lib/ComObjActive.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComValue</h1>

<p>スクリプトで使用するため、またはCOMメソッドに渡すために、値、SafeArrayまたはCOMオブジェクトをラップします。</p>
<pre class="Syntax">ComObj := <span class="func">ComValue</span>(VarType, Value <span class="optional">, Flags</span>)</pre>
<p><code>ComValue</code>自体は<code>Any</code>から派生した<a href="Class.htm">クラス</a>ですが、COMラッパーオブジェクトを作成または識別するためにのみ使用されます。</p>

<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>VarType</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>値の種類を示す整数。タイプの一覧は<a href="ComObjType.htm#vt">ComObjType</a>をご覧ください。</p>
  </dd>

  <dt>Value</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#values">任意</a></p>
    <p>ラップする値。</p>
    <p>これが純粋な整数で、<em>VarType</em>が VT_R4、VT_R8、VT_DATE、VT_CY でない場合、その値が直接使われます。特に VT_BSTR、VT_DISPATCH、VT_UNKNOWN はポインタ値で初期化できる。</p>
    <p>それ以外の場合は、通常のCOMメソッド呼び出しと同じルールで、一時的なVARIANTに値がコピーされます。ソースバリアントタイプが<em>VarType</em>と等しくない場合、<em>wFlags</em>の値0を持つ<a href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-variantchangetype">VariantChangeType</a>を呼び出すことで変換が試みられます。変換に失敗した場合は、例外が発生します。</p>
  </dd>

  <dt>Flags</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>ラッパーオブジェクトの動作に影響を与えるフラグ。詳細は<a href="ComObjFlags.htm">ComObjFlags</a>を参照してください。</p>
  </dd>

</dl>

<h2 id="Returns">戻り値</h2>
<p>型：<a href="../Concepts.htm#objects">オブジェクト</a></p>
<p>This function returns a wrapper object containing a <a href="ComObjType.htm#vt">variant type</a> and value or pointer, specifically ComValue, ComValueRef, <a href="ComObjArray.htm">ComObjArray</a> or <a href="ComObject.htm">ComObject</a>.</p>
<p>このオブジェクトは複数の用途：</p>
<ol>
  <li>COMのメソッドの中には、AutoHotkey内で直接同等のものがない、特定のタイプの値を必要とするものがあります。COM メソッドに値を渡す際に、値の型を指定することができる機能です。例えば、<code>ComValue(0xB, true)</code>は、COM のブール値<em>true</em>を表すオブジェクトを作成します。</li>
  <li>COMオブジェクトやSafeArrayをラッピングすることで、スクリプトが<a href="../Objects.htm#Usage_Objects">オブジェクトの構文</a>を使用して、より自然に操作することができます。ただし、<a href="ComObject.htm">ComObject</a>、<a href="ComObjArray.htm">ComObjArray</a>、<a href="ComObjActive.htm">ComObjActive</a>、<a href="ComObjGet.htm">ComObjGet</a>、およびオブジェクトを返すCOMメソッドでは、ラッパーオブジェクトが自動的に作成されるため、大半のスクリプトでは手動で行う必要はない。</li>
  <li>COMインターフェイスポインターをラップすることで、スクリプトが自動参照カウントを利用することができます。インターフェイスポインターは、スクリプトに返されるとすぐにラップされるため（通常は<a href="ComCall.htm">ComCall</a>または<a href="DllCall.htm">DllCall</a>から）、後の時点で明示的に<a href="ObjAddRef.htm">リリース</a>する必要がありません。</li>
</ol>

<h2 id="Ptr">Ptr</h2>
<p>もし、ラッパーオブジェクトの <a href="ComObjType.htm#vt"><em>VarType</em></a>が VT_UNKNOWN (13) であるか、VT_BYREF (0x4000) フラグまたは VT_ARRAY (0x2000) フラグを含む場合、<code>Ptr</code>プロパティを使用してオブジェクト、型付き変数または SafeArray のアドレスを取得することができる。これにより、ComObject自体を<code>"Ptr"</code>型を持つ<a href="DllCall.htm">DllCall</a>や<a href="ComCall.htm">ComCall</a>のパラメータに渡すことができ、また、明示的に使用することもできる。例えば、<code>ComObj.Ptr</code>は、これらの場合、<code>ComObjValue(ComObj)</code>と同等です。</p>
<p>もし、ラッパーオブジェクトの <a href="ComObjType.htm#vt"><em>VarType</em></a>がVT_UNKNOWN（13）またはVT_DISPATCH（9）で、ラップされたポインタがヌル（0）の場合、<code>Ptr</code>プロパティを使って現在のヌル値を取得するか、ラッパーオブジェクトへのポインタを割り当てることができる。一度割り当てられると（nullでない場合）、ラッパー・オブジェクトが解放されるときに、ポインタは自動的に解放されます。<a href="DllCall.htm">DllCall</a>や <a href="ComCall.htm">ComCall</a>の <code>"Ptr*"</code>や<code>"PtrP"</code>型の出力パラメータで使用することで、エラー発生時などにポインタが自動的に解放されるようにすることができます。例として、<a href="ComObjQuery.htm#ExIE">ComObjQuery</a>を参照してください。</p>
<p><em>VarType</em>VT_DISPATCH（9）でNULL（0）ポインタ値を持つラッパーオブジェクトにNULL以外のポインタ値が割り当てられると、その型は<code>ComValue</code>から <code>ComObject</code>に変化します。ラップされたオブジェクトのプロパティとメソッドが利用可能になり、<code>Ptr</code>プロパティは利用不可能になります。</p>

<h2 id="ByRef">ByRef</h2>
<p>もし、ラッパーオブジェクトの <a href="ComObjType.htm#vt"><em>VarType</em></a>はVT_BYREF(0x4000)フラグを含むので、空カッコ<code>[]</code>で参照値の読み書きが可能です。</p>
<p>参照を作成する場合、<em>Value</em>には、指定された型の値を格納するのに十分な容量を持つ変数またはバッファのメモリアドレスが必要です。例えば、以下のようにすれば、VBScriptの関数が書き込むことができる変数を作成することができます：</p>
<pre>vbuf := Buffer(24, 0)
vref := ComValue(0x400C, vbuf.ptr)  <em>; 0x400C は、VT_BYREF と VT_VARIANT の組み合わせです。</em>

vref[] := "in value"
sc.Run("Example", vref)  <em>; scは、<a href="#ExByRef">以下の例</a>のように初期化する必要があります。</em>
MsgBox vref[]</pre>
<p>なお、<code>vref[]</code>やCOMメソッドで新しい値を代入すると、以前の値はすべて解放されますが、最終的な値は自動的に解放されるわけではありません。値を解放するには、その値がどのタイプであるかを知る必要があります。この場合VT_VARIANTなので、<a href="DllCall.htm">DllCall</a>で <a href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-variantclear">VariantClear</a>を呼び出すか、もっと簡単な方法で解放することができます：<code>vref[] := 0</code>のように整数を代入します。</p>
<p>上記のようにメソッドがVT_BYREFとVT_VARIANTの組み合わせを受け付ける場合、<a href="../Concepts.htm#variable-references">VarRef</a>を代わりに使用することができます。例：</p>
<pre>some_var := "in value"
sc.Run("Example", &amp;some_var)
MsgBox some_var</pre>
<p>しかし、メソッドによっては、<code>VT_BYREF | VT_I4</code>のように、より特殊なバリアントタイプを要求するものもあります。このような場合、0x400Cを適切なバリアントタイプに置き換えて、上記の最初の方法を使用する必要があります。</p>

<h2 id="Remarks">総論</h2>
<p>この関数が<a href="https://learn.microsoft.com/windows/win32/winauto/idispatch-interface">IDispatch</a>またはIUnknownインターフェイスポインタ（整数として渡される）をラップするために使用される場合、ラッパーオブジェクトは、適切なときにポインタを自動的に解放する責任を負うものとします。したがって、スクリプトがこの関数を呼び出した後にポインタを使用しようとする場合、最初に<code><a href="ObjAddRef.htm">ObjAddRef</a>(DispPtr)</code>を呼び出す必要があります。一方、<em>Value</em>自体がComValueまたはComObjectである場合には、この必要はない。</p>
<p>VT_UNKNOWNからVT_DISPATCHへの変換では、<a href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</a>が呼び出され、オリジナルとは異なるインターフェースポインタが生成される場合があり、オブジェクトがIDispatchを実装しない場合は例外が投げられる。一方、<em>Value</em>が整数で<em>VarType</em>がVT_DISPATCHの場合は、値が直接使用されるため、IDispatch互換のインターフェースポインタである必要があります。</p>
<p>ラッパーオブジェクトの<em>VarType</em>は<a href="ComObjType.htm">ComObjType</a>で取得することができます。</p>
<p>ラッパーオブジェクトの<em>値</em>は、<a href="ComObjValue.htm">ComObjValue</a>を使用して取得することができます。</p>
<p><b>既知の制限事項：</b>COMオブジェクトがラップされるたびに、新しいラッパーオブジェクトが作成されます。<code>obj1 == obj2</code>や<code>arr[obj1] := value</code>のような比較や代入は、同じバリアント型や値を含んでいても、2つのラッパーオブジェクトをユニークなものとして扱います。</p>

<h2 id="Related">関連</h2>
<p><a href="ComObjFromPtr.htm">ComObjFromPtr</a>、<a href="ComObject.htm">ComObject</a>、<a href="ComObjGet.htm">ComObjGet</a>、<a href="ComObjConnect.htm">ComObjConnect</a>、<a href="ComObjFlags.htm">ComObjFlags</a>、<a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>、<a href="ComObjQuery.htm">ComObjQuery</a>、<a href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-getactiveobject">GetActiveObject (Microsoft Docs)</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExByRef">
<p><a class="ex_number" href="#ExByRef"></a> COM関数にVARIANT ByRefを渡します。</p>
<pre>
#Requires AutoHotkey v2 32-bit <em>; 32-bit for ScriptControl.</em>
code := "
(
Sub Example(Var)
    MsgBox Var
    Var = "out value!"
End Sub
)"
sc := ComObject("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)


<em>; 例：COMメソッドにVARIANT ByRefを渡す。</em>
var := ComVar()
var[] := "in value"
sc.Run("Example", var.ref)
MsgBox var[]

<em>; 同じことをもう一度、よりダイレクトに：</em>
variant_buf := Buffer(24, 0)  <em>; VARIANTのために十分な大きさのバッファを作成します。</em>
var := ComValue(0x400C, variant_buf.ptr)  <em>; VARIANTへの参照を行う。</em>
var[] := "in value"
sc.Run("Example", var)  <em>; VT_BYREF ComValueそのものを渡す。[] や .ref は使わない。</em>
MsgBox var[]
<em>; VARIANTが文字列やオブジェクトを含む場合は、明示的に解放する必要があります。
; VariantClearを呼び出すか、純粋な数値を代入することで対応します：</em>
var[] := 0

<em>; メソッドがVT_BYREF|VT_VARIANTを受け入れる場合、最も簡単な方法です：</em>
var[] := "in value"
sc.Run("Example", &amp;var)
MsgBox var


<em>; ComVar：ByRef値を渡すために使用できるオブジェクト。
;   this[]は値を取得します。
;   this[] := Val が値を設定します。
;   this.ref は COM メソッドに渡すための ByRef オブジェクトを取得します。</em>
class ComVar {
    __new(vType := 0xC) {
        <em>; VARIANTのメモリを確保し、値を保持します。VARIANTは、次のような場合でも使用されます。
        ; VariantClearを__deleteで使用できるように、vType != VT_VARIANTのとき ;。</em>
        this.var := Buffer(24, 0)
        <em>; 変数 ByRef の受け渡しに使用できるオブジェクトを作成します。</em>
        this.ref := ComValue(0x4000|vType, this.var.ptr + (vType=0xC ? 0 : 8))
        <em>; VariantClear のバリアントタイプを格納します（VT_VARIANT でない場合）。</em>
        if vType != 0xC
            NumPut "ushort", vType, this.var
    }
    __item {
        get =&gt; this.ref[]
        set =&gt; this.ref[] := value
    }
    __delete() {
        DllCall("oleaut32\VariantClear", "ptr", this.var)
    }
}
</pre>
</div>

</body>
</html>
