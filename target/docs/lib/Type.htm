<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Type - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Type関数は、値のクラス名を返します。" />
<meta name="ahk:equiv-v1" content="index.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Type</h1>
<p>値のクラス名を返します。</p>
<pre class="Syntax">ClassName := <span class="func">Type</span>(Value)</pre>

<h2 id="Return_Value">戻り値</h2>
<p>型：<a href="../Concepts.htm#strings">文字列</a></p>
<p>この関数は、<em>Value</em>のクラス名を返します。</p>
<p>値のクラス名を決定するアルゴリズムは、おおよそ以下のようになります：</p>
<pre>
TypeOf(Value)
{
    if (comClass := ComObjType(Value, "Class")) != ""
        return comClass
    try <em>; `Value is Object` is not checked because it can be false for prototypes.</em>
        if ObjHasOwnProp(Value, "__Class")
            return "Prototype"
    while Value := ObjGetBase(Value)
        if ObjHasOwnProp(Value, "__Class")
            return Value.__Class
    return "Object"
}
</pre>
<p>COMラッパー・オブジェクトの場合、以下のように<a href="ComObjType.htm#vt">バリアント・タイプ</a>に基づいてクラス名を決定することもできます：</p>
<pre>
ComObject_Type(obj)
{
    if ComObjType(obj) &amp; 0x2000 <em>; VT_ARRAY</em>
        return "ComObjArray" <em>; ComObjArray.Prototype.__Class</em>
    if ComObjType(obj) &amp; 0x4000 <em>; VT_BYREF</em>
        return "ComValueRef" <em>; ComValueRef.Prototype.__Class</em>
    if (ComObjType(obj) = 9 || ComObjType(obj) = 13) <em>; VT_DISPATCH || VT_UNKNOWN</em>
        &amp;&amp; ComObjValue(obj) != 0
    {
        if (comClass := ComObjType(obj, "Class")) != ""
            return comClass
        if ComObjType(obj) = 9 <em>; VT_DISPATCH</em>
            return "ComObject" <em>; ComObject.Prototype.__Class</em>
    }
    return "ComValue" <em>; ComValue.Prototype.__Class</em>
}
</pre>

<h2 id="Remarks">備考</h2>
<p>数値<em>文字列</em>は数式やほとんどの組み込み関数で有効なため、通常、この関数は値が数値かどうかを判断するために使われることはありません。しかし、値の正確な型の方が重要な場合もあります。このような場合は、Typeの代わりに<code>Value is Number</code>などを使用することを検討してください。</p>
<p>ある値が数値として使えるかどうかを調べるには、<a href="Is.htm#number">IsNumber</a>関数、<a href="Is.htm#integer">IsInteger</a>関数、または<a href="Is.htm#float">IsFloat</a>関数を使います。</p>
<p>あらゆるタイプのオブジェクト（つまり、プリミティブ値でないもの）をチェックするには、<a href="IsObject.htm">IsObject</a>関数を使います。</p>
<p>値が特定のクラスのインスタンスであるかどうかをチェックするには <a href="../Variables.htm#is"><code>Is</code></a>演算子を使います。これは、プリミティブ値や<a href="ComValue.htm">COMラッパー・オブジェクト</a>の識別にも使用できます。</p>

<h2 id="Related">関連</h2>
<p><a href="../Concepts.htm#values">Values</a>, <a href="../Language.htm#expressions">Expressions</a>, <a href="Is.htm">Is functions</a>, <a href="Integer.htm">Integer</a>, <a href="Float.htm">Float</a>, <a href="String.htm">String</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> <var>a</var>、<var>b</var>、<var>c</var>に格納されている値の正確な型を取得し、報告します。</p>
<pre>
a := 1, b := 2.0, c := "3"
MsgBox Type(a)  <em>; Integer</em>
MsgBox Type(b)  <em>; Float</em>
MsgBox Type(c)  <em>; String</em>
</pre>
</div>

</body>
</html>
