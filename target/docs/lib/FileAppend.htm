<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>FileAppend - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="FileAppend関数は、テキストまたはバイナリデータをファイルの末尾に書き込みます（必要であれば、最初にファイルを作成します）。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>FileAppend</h1>

<p>テキストまたはバイナリデータをファイルの末尾に書き込みます（必要に応じて、最初にファイルを作成します）。</p>

<pre class="Syntax"><span class="func">FileAppend</span> Text <span class="optional">, Filename, Options</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Text</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a>または<a href="../Concepts.htm#objects">オブジェクト</a></p>
    <p>If blank or omitted, <em>Filename</em> will be created as an empty file (but if the file already exists, its modification time will be updated). Otherwise, specify the text or raw binary data to append to the file. テキストには改行文字(`n)を含めることができる。In addition, a single long line can be broken up into several shorter ones by means of a <a href="../Scripts.htm#continuation">continuation section</a>.</p>
    <p><a href="Buffer.htm">Buffer</a>のようなオブジェクトを渡して、生のバイナリデータを付加することができる。ファイルを作成する場合、<em>オプション</em>で"UTF-8"または "UTF-16"を指定した場合のみ、BOM（Byte Order Mark）が書き込まれます。<a href="../Variables.htm#FileEncoding">デフォルトのエンコーディング</a>は無視され、<em>Options</em>に関係なく、オブジェクトが含むデータはそのまま書き込まれます。<a href="Buffer.htm#Ptr">Ptr</a>プロパティと<a href="Buffer.htm#Size">Size</a>プロパティを実装しているオブジェクトであれば、どのようなものでも使用可能です。</p>
  </dd>

  <dt>Filename</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>If omitted, the output file of the innermost enclosing <a href="LoopRead.htm">file-reading loop</a> will be used (if available). Otherwise, specify the name of the file to be appended, which is assumed to be in <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> if an absolute path isn't specified. 保存先ディレクトリはすでに存在している必要があります。</p>
    <p id="stdout"><strong>Standard Output (stdout):</strong> Specifying an asterisk (*) for <em>Filename</em> causes <em>Text</em> to be sent to standard output (stdout). このようなテキストは、ファイルにリダイレクトしたり、別のEXEにパイプしたり、<a href="_ErrorStdOut.htm">おしゃれなテキストエディター</a>でキャプチャしたりすることができます。例えば、以下のようにコマンドプロンプトで入力した場合は有効です：</p>
      <pre class="no-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "My Script.ahk" &gt;"Error Log.txt"</pre>
    <p>ただし、stdoutに送られたテキストは、起動したコマンドプロンプトには表示されません。これは、1）<a href="../misc/Ahk2ExeDirectives.htm#ConsoleApp">Ahk2Exe ConsoleAppディレクティブ</a>でスクリプトをコンパイルする、または2）スクリプトの出力を他のコマンドやプログラムにパイプすることで回避することができます。事例：</p>
      <pre class="no-highlight">"%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "My Script.ahk" |more</pre>
      <pre class="no-highlight">For /F "tokens=*" %L in ('""%ProgramFiles%\AutoHotkey\AutoHotkey.exe" "My Script .ahk""') do @Echo %L</pre>
    <p><em>Filename</em>にアスタリスク（**）を2つ指定すると、<em>Text</em>は標準エラーストリーム（stderr）に送信されます。</p>
    </dd>

  <dt>Options</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#strings">文字列</a></p>
    <p>以下の文字列のうち、0個以上。各オプションと次のオプションは、1つのスペースまたはタブで区切ってください。事例：<code>"`n UTF-8"</code></p>
    <p><strong>Encoding:</strong> Specify any of the encoding names accepted by <a href="FileEncoding.htm">FileEncoding</a> (excluding the empty string) to use that encoding if the file lacks a UTF-8 or UTF-16 byte order mark. 省略された場合、デフォルトは<a href="../Variables.htm#FileEncoding">A_FileEncoding</a>です（ただし、<em>Text</em>がオブジェクトの場合はバイトオーダーマークを書きません）。</p>
    <p><strong>RAW:</strong> Specify the word RAW (case-insensitive) to write the exact bytes contained by <em>Text</em> to the file as-is, without any conversion. このオプションは、以前に指定されたエンコーディングを上書きし、その逆もまた然りです。<em>Text</em>がオブジェクトでない場合、UTF-16文字列を使用するため、データサイズは常に2バイトの倍数となる。</p>
    <p><strong>`n</strong>(改行文字)：キャリッジリターン(`r)がまだ存在しない場合、各ラインフィード(`n)の前に挿入されます。つまり、`nから`r`nに変換するのです。この翻訳は、通常、パフォーマンスに影響を与えません。このオプションを使用しない場合、<em>Text</em>内の行末は変更されません。</p>
  </dd>

</dl>

<h2 id="Error_Handling">エラー処理</h2>
<p>失敗したときは<a href="Error.htm#OSError">OSError</a>をスローします。</p>
<p><a href="../Variables.htm#LastError">A_LastError</a>には、オペレーティングシステムのGetLastError()関数の結果が設定されます。</p>

<h2 id="Remarks">備考</h2>
<p>既存のファイルを上書きする場合は、FileAppendを使用する前に<a href="FileDelete.htm">FileDelete</a>でファイルを削除してください。</p>
<p>テキストが追加された後、ターゲットファイルは自動的に閉じられます（FileAppendが<a href="LoopRead.htm">ファイルの読み書きのループ</a>内でシングルパラメータモードで使用されている場合を除く）。</p>
<p>アペンドモードの<a href="FileOpen.htm">FileOpen</a>は、FileAppendよりも制御性が高く、毎回ファイルを開いて閉じるのではなく、開いたままにしておくことができます。追記モードでファイルを開いたら、<code>file.<a href="File.htm#Write">Write</a>(string)</code>を使って文字列を追記します。ファイルオブジェクトは、<a href="File.htm#RawWrite">RawWrite</a>/<a href="File.htm#RawRead">RawRead</a>または<a href="File.htm#WriteNum">Write<i>Num</i></a>/<a href="File.htm#ReadNum">Read<i>Num</i></a>によるバイナリI/Oもサポートしています。</p>
<h2 id="Related">関連</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="File.htm">File Object</a>, <a href="FileRead.htm">FileRead</a>, <a href="LoopRead.htm">file-reading loop</a>, <a href="IniWrite.htm">IniWrite</a>, <a href="FileDelete.htm">FileDelete</a>, <a href="OutputDebug.htm">OutputDebug</a>, <a href="../Scripts.htm#continuation">continuation sections</a></p>
<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 必要に応じてファイルを作成し、1行を追加します。</p>
<pre>FileAppend "Another line.`n", "C:\My Documents\Test.txt"</pre>
</div>

<div class="ex" id="ExContSect">
<p><a class="ex_number" href="#ExContSect"></a> 読みやすさと保守性を高めるために、<a href="../Scripts.htm#continuation">続きのセクション</a>を使用します。</p>
<pre>FileAppend "
(
A line of text.
デフォルトでは、前の行とこの行の間のハードキャリッジリターン（Enter）がファイルに書き込まれます。
	この行はタブでインデントされています。デフォルトでは、このタブもファイルに書き込まれます。
)", A_Desktop "\My File.txt"</pre>
</div>

<div class="ex" id="ExFTP">
<p><a class="ex_number" href="#ExFTP"></a> オペレーティングシステム内蔵のFTPコマンドを使用して、FTPアップロードを自動化する方法について説明します。</p>
<pre>FTPCommandFile := A_ScriptDir "\FTPCommands.txt"
FTPLogFile := A_ScriptDir "\FTPLog.txt"
try FileDelete FTPCommandFile  <em>; 前回実行したプログラムが途中で終了してしまった場合。</em>

FileAppend
(
"open host.domain.com
username
password
binary
cd htdocs
put " VarContainingNameOfTargetFile "
delete SomeOtherFile.htm
rename OldFileName.htm NewFileName.htm
ls -l
quit"
), FTPCommandFile

RunWait Format('{1} /c ftp.exe -s:"{2}" &gt;"{3}"', A_ComSpec, FTPCommandFile, FTPLogFile)
FileDelete FTPCommandFile  <em>; セキュリティ上、削除してください。</em>
Run FTPLogFile  <em>; ログを表示させて確認します。</em></pre>
</div>

</body>
</html>
