<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Class Object - メソッドとプロパティ｜AutoHotkey v2</title>
<meta name="description" content="クラスオブジェクトは、クラス定義を表し、静的メソッドとプロパティを含みます。" />
<meta name="ahk:equiv-v1" content="index.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Class Object</h1>
<pre class="NoIndent">class Class extends Object</pre>

<p><strong>クラス</strong>オブジェクトは、クラス定義を表し、静的メソッドとプロパティを含む。</p>
<p>各クラスオブジェクトは、そのクラスが拡張するクラス、または指定されていない場合は<a href="Object.htm">Object</a>を <a href="../Objects.htm#Custom_Objects">基にして</a>います。グローバルなクラスオブジェクトである<code>Object</code>は、<code>Object.Prototype</code>をベースとする<code>Class.Prototype</code>をベースとしているので、クラスはこれらのベースオブジェクトのいずれかからメソッドとプロパティを継承することができます。</p>
<p>"Static "メソッドおよびプロパティは、クラスオブジェクト自身が所有する（したがって、特定のインスタンスには適用されない）メソッドおよびプロパティであり、クラスのインスタンスに対するメソッドおよびプロパティは、クラスの<a href="#Prototype">Prototype</a>が所有します。</p>
<p>"Class "はClassクラスそのものであるため、以下では任意のクラスオブジェクトのプレースホルダとして "ClassObj"を使用します。通常、クラスオブジェクトは、その<a href="../Objects.htm#Custom_Classes">クラス定義</a>で与えられた名前で呼ばれます。</p>

<h2 id="toc">目次</h2>
<ul class="indent">
  <li><a href="#Methods">メソッド</a>:
    <ul>
      <li>コールこのクラスの新しいインスタンスを構築します。</li>
    </ul>
  </li>
  <li><a href="#Properties">プロパティ</a>:
    <ul>
      <li><a href="#Prototype">Prototype</a>:クラスのすべてのインスタンスの基となるオブジェクトを取得または設定します。</li>
    </ul>
  </li>
</ul>

<h2 id="Methods">メソッド</h2>

<div class="methodShort" id="Call"><h3>コール</h3>
<p>このクラスの新しいインスタンスを構築します。</p>
<pre class="Syntax">Obj := ClassObj(Params*)
Obj := ClassObj.<span class="func">Call</span>(Params*)</pre>
<p>この静的メソッドは、通常、<a href="Object.htm">Object</a>、<a href="Array.htm">Array</a>、<a href="Map.htm">Map</a>クラスから継承されます。以下のような機能を備えています。</p>
<ul>
  <li>メモリを確保し、オブジェクトのバイナリ構造を初期化します。これは、オブジェクトのネイティブタイプ（例えば、配列かマップか、あるいは単なるオブジェクトか）に依存します。</li>
  <li>新しいオブジェクトのベースを<a href="#Prototype">ClassObj.Prototype</a>に設定します。</li>
  <li>Call the new object's __Init method, if it has one. このメソッドは、クラス定義によって自動的に作成され、クラス本体内で定義されたすべてのインスタンス変数のイニシャライザーを含んでいます。</li>
  <li>新しいオブジェクトに __New メソッドがある場合は、それを呼び出します。Callに渡された全てのパラメータは、__Newに転送されます。</li>
  <li>新しいオブジェクトを返す。</li>
</ul>
<p>Call は、<code>static Call()</code> のような静的メソッドを定義することにより、クラス定義内でオーバーライドすることができます。これにより、クラスは新しいインスタンスを修正したり、構築できないようにすることができます。</p>
<p>なお、<code>Class()</code>（ここでは文字通り "Class"を使用）は、<code>Class.Prototype</code>に基づいて新しいClassオブジェクトを構築するために使用することができます。しかし、この新しいオブジェクトは、<a href="Object.htm">Object</a>のサブクラスではないため、当初はCallメソッドを持ちません。<a href="Object.htm#Base">Base</a>に代入することでObjectのサブクラスになったり、Callメソッドを他のクラスから再実装またはコピーすることができます。また、標準的なCallメソッドでインスタンス化する前に、<a href="#Prototype">Prototype</a>を作成し、クラスに割り当てる必要があります。</p>
</div>

<h2 id="Properties">属性</h2>

<div class="methodShort" id="Prototype"><h3>Prototype</h3>
<p>クラスのすべてのインスタンスの基となるオブジェクトを取得または設定します。</p>
<pre class="Syntax">Proto := ClassObj.<span class="func">Prototype</span></pre>
<pre class="Syntax">ClassObj.<span class="func">Prototype</span> := Proto</pre>
<p>デフォルトでは、クラスのプロトタイプは、クラス定義内で定義されたすべてのインスタンスメソッドとダイナミックプロパティを含み、メソッドやプロパティのゲッター/セッターへの参照を取得したり、新しいものを定義したりするために使用できます。スクリプトは、すべてのインスタンスのデフォルトのプロパティ値として機能する、新しい値のプロパティを定義することもできます。</p>
<p>クラスのPrototypeは、通常、ベースクラスのPrototypeをベースにしているので、<code>ClassObj.Prototype.base == ClassObj.base.Prototype</code>.</p>
<p>プロトタイプは、クラス定義で作成されたクラスオブジェクトの自前プロパティとして自動的に定義されます。</p>
</div>

</body>
</html>
