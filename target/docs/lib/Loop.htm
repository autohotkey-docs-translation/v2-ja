<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>Loop - 構文と使用法｜AutoHotkey v2</title>
<meta name="description" content="Loop文は、一連のコード行を繰り返し実行します：指定された回数、またはBreak文に遭遇するまで、そのどちらかを行います。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (normal)</h1>

<p>一連の機能を繰り返し実行します：指定された回数、または<a href="Break.htm">ブレーク</a>が発生するまで。</p>

<pre class="Syntax"><span class="func">Loop</span> <span class="optional">Count</span></pre>
<h2 id="Parameters">パラメータ</h2>
<dl>

  <dt>Count</dt>
  <dd>
    <p>型：<a href="../Concepts.htm#numbers">整数</a></p>
    <p>ループを何回（反復）実行するか。省略された場合、Loopは<a href="Break.htm">ブレーク</a>または<a href="Return.htm">リターン</a>が発生するまで無期限に継続される。ただし、明示的な空白値や1未満の数値は、ループが完全にスキップされることになります。</p>
    <p><em>Count</em>は、ループが始まる直前に一度だけ評価されます。例えば、<em>Count</em>が関数呼び出しや代入などの副作用を持つ式の場合、副作用は一度だけ発生します。</p>
    <p><em>Count</em>が括弧で囲まれている場合、スペースやタブは必要ありません。事例：<code>Loop(2)</code></p>
  </dd>

</dl>

<h2 id="Remarks">備考</h2>
<p>ループ文の後には、通常、ループの<em>本体</em>を形成する文の集合体である<a href="Block.htm">ブロック</a>が続きます。ただし、1つの文しかないループにはブロックは必要ありません（"if"とその "else"は、この目的のために1つの文としてカウントされます）。</p>
<p>この文の一般的な使い方は、無限ループで、ループ<em>本体</em>のどこかにある<a href="Break.htm">break</a>文を使って、ループを止めるタイミングを判断するものです。</p>
<p>ループの中で<a href="Break.htm">break</a>や <a href="Continue.htm">continue</a>を使うことは、一般にスクリプトをより理解しやすく、保守しやすくするため、<a href="Goto.htm">goto</a>に代わるものとして推奨されています。ループ<em>本体</em>の最初か最後の文を、条件付きで<a href="Break.htm">break</a>文を発行するIF文にすることで、「While」または「Do...While/Until」ループを作ることもできますが、通常は<a href="While.htm">While</a>または<a href="Until.htm">Loop...Until</a>を使うことが好ましいです。</p>
<p>組込変数<strong>A_Index</strong>には、現在のループの繰り返し回数が格納されます。ループ<em>本体</em>が最初に実行されるときに1を含む。2回目には2が入り、以下同様です。内側ループが外側ループで囲まれている場合、内側ループが優先されます。A_Indexは、<a href="LoopFiles.htm">ファイルループ</a>や <a href="LoopReg.htm">レジストリループ</a>を含むすべての種類のループの内部で動作しますが、A_Indexはループの外部で0を含みます。</p>
<p>A_Indexには、スクリプトによって任意の整数値を割り当てることができる。<em>Count</em>が指定されている場合、A_Indexを変更すると、実行される反復処理の回数に影響します。例えば、<code>A_Index := 3</code>とすると、ループ文は3回目の反復にあるかのように動作し（次の反復ではA_Indexは4になります）、<code>A_Index--</code>は現在の反復が合計にカウントされないようにします。</p>
<p>ループの後には、<em>Count</em>がゼロの場合に実行される<a href="Else.htm">Else</a>文がオプションで付いていることがある。</p>
<p><a href="Block.htm#otb">OTB（One True Brace）スタイル</a>はオプションで使用することができます。事例：</p>
<pre>Loop {
    ...
}
Loop RepeatCount {
    ...
}</pre>
<p>Specialized loops:ループを使用して、ファイル、フォルダー、レジストリ項目を（1つずつ）自動的に取得することができます。詳しくは<a href="LoopFiles.htm">file-loop</a>、<a href="LoopReg.htm">registry-loop</a>をご覧ください。また、<a href="LoopRead.htm">ファイル読み込みループ</a>は、ファイルの内容全体を1行ずつ操作することができます。最後に、<a href="LoopParse.htm">解析ループ</a>は、区切られた文字列の中に含まれる個々のフィールドを操作することができます。</p>

<h2 id="Related">関連</h2>
<p><a href="Until.htm">Until</a>, <a href="While.htm">While-loop</a>, <a href="For.htm">For-loop</a>, <a href="LoopFiles.htm">Files-and-folders loop</a>, <a href="LoopReg.htm">Registry loop</a>, <a href="LoopRead.htm">File-reading loop</a>, <a href="LoopParse.htm">Parsing loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="Else.htm">Else</a></p>

<h2 id="Examples">例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 3回繰り返されるループを作成します。</p>
<pre>Loop 3
{
    MsgBox "反復番号は " A_Index  <em>; A_Index は 1, 2, そして 3の順になります。</em>
    Sleep 100
}</pre>
</div>

<div class="ex" id="ExBreakContinue">
<p><a class="ex_number" href="#ExBreakContinue"></a> 無限ループを作成しますが、25回目の反復で終了します。</p>
<pre>Loop
{
    if (A_Index &gt; 25)
        break  <em>;ループを終了させます</em>
    if (A_Index &lt; 20)
        continue  <em>; 以下をスキップして、新しい反復を開始します。</em>
    MsgBox "A_Index = " A_Index  <em>; 20から25までの数字だけを表示します。</em>
}</pre>
</div>

</body>
</html>
