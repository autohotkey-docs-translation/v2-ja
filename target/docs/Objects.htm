<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>オブジェクト - 定義と使用法｜AutoHotkey v2</title>
<meta name="description" content="オブジェクトの使用方法、新しいタイプのオブジェクトの定義、AutoHotkeyでのオブジェクトの動作に関するその他の詳細。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<style>
ul.list_of_p p { margin: 0.5em 0; }
ul.list_of_p li { margin: 1em 0; }
</style>
</head>
<body>

<h1>オブジェクト</h1>

<p><i>オブジェクト</i>は、いくつかの<em>プロパティと</em>メソッドを組み合わせたものである。 <a href="Concepts.htm#methods"><em>メソッド</em></a>.</p>
<p>関連トピック</p>
<ul>
  <li><a href="Concepts.htm#objects">オブジェクト</a>：オブジェクトの一般的な説明。</li>
  <li><a href="Concepts.htm#object-protocol">オブジェクトプロトコル</a>：スクリプトがオブジェクトとどのように相互作用するかについての詳細。</li>
  <li><a href="misc/Functor.htm">機能オブジェクト</a>：<em>呼び出す</em>ことができるオブジェクト。</li>
</ul>

<p><b>IsObject</b>は、値がオブジェクトであるかどうかを判定するために使用できます：</p>
<pre>Result := IsObject(<i>expression</i>)</pre>

<p>標準的なオブジェクト・タイプのリストについては、<a href="ObjList.htm">組み込みクラス</a>を参照のこと。基本的には2つのタイプがある：</p>
<ul>
  <li><strong>AutoHotkeyオブジェクト</strong>は <a href="lib/Object.htm">Object</a>クラスのインスタンスです。これらはアドホック・プロパティに対応し、どのプロパティが存在するかを発見するメソッドを持っている。<a href="lib/Array.htm">Array</a>、<a href="lib/Map.htm">Map</a>、そしてすべてのユーザー定義クラスと組み込みクラスはObjectから派生している。</li>
  <li><a href="lib/ComObject.htm">ComObject</a>で作成されるような<strong>COMオブジェクト</strong>。これらは外部ライブラリによって実装されているため、AutoHotkeyオブジェクトとは動作が異なることがよくあります。ComObjectは通常、<a href="https://learn.microsoft.com/windows/win32/api/oaidl/nn-oaidl-idispatch">IDispatchインターフェイスを</a>実装したCOMまたは「オートメーション」オブジェクトを表しますが、COMオブジェクトや関数に渡される<a href="lib/ComValue.htm">特定の型の値をラップ</a>するためにも使用されます。</li>
</ul>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#Usage">Basic Usage</a> - <a href="#Usage_Simple_Arrays">Arrays</a>, <a href="#Usage_Associative_Arrays">Maps (Associative Arrays)</a>, <a href="#Usage_Objects">Objects</a>, <a href="#Usage_Freeing_Objects">Freeing Objects</a></li>
  <li><a href="#Extended_Usage">拡張使用法</a>-<a href="#Usage_Arrays_of_Arrays">配列の配列</a></li>
  <li><a href="#Custom_Objects">Custom Objects</a> - <a href="#creating-a-base-object">Creating a Base Object</a>, <a href="#Custom_Classes">Classes</a>, <a href="#Custom_NewDelete">Construction and Destruction</a>, <a href="#Meta_Functions">Meta-Functions</a></li>
  <li><a href="#primitive">プリミティブ値</a></li>
  <li><a href="#Implementation">Implementation</a> - <a href="#Reference_Counting">Reference Counting</a>, <a href="#ObjPtr">Pointers to Objects</a></li>
</ul>

<span id="Syntax"></span><h2 id="Usage">基本的な使い方</h2>

<h3 id="Usage_Simple_Arrays">Arrays</h3>
<p><a href="lib/Array.htm">配列</a>を作成する：</p>
<pre>MyArray := [Item1, Item2, ..., ItemN]
MyArray := Array(Item1, Item2, ..., ItemN)</pre>
<p>項目 (または<em>配列要素</em>) を取得します：</p>
<pre>Value := MyArray[Index]</pre>
<p>項目の値を変更する（<code>Index</code>は1からLengthの間、または同等の逆インデックスでなければならない）：</p>
<pre>MyArray[Index] := Value</pre>
<p><a href="lib/Array.htm#InsertAt">InsertAt</a>メソッドを使用して、指定されたインデックスに1つ以上の項目を挿入します：</p>
<pre>MyArray.InsertAt(Index, Value, Value2, ...)</pre>
<p><a href="lib/Array.htm#Push">Push</a>メソッドを使用して、1つまたは複数のアイテムを追加します：</p>
<pre>MyArray.Push(Value, Value2, ...)</pre>
<p><a href="lib/Array.htm#RemoveAt">RemoveAt</a>メソッドを使用して項目を削除します：</p>
<pre>RemovedValue := MyArray.RemoveAt(Index)</pre>
<p><a href="lib/Array.htm#Pop">Pop</a>メソッドを使って最後の項目を削除する：</p>
<pre>RemovedValue := MyArray.Pop()</pre>
<p><a href="lib/Array.htm#Length">Length</a>は、配列の項目数を返します。配列の中身をループするには、インデックスを使う方法と、Forループを使う方法がある。事例：</p>
<pre>MyArray := ["one", "two", "three"]

<em>; Iterate from 1 to the end of the array:</em>
Loop MyArray.Length
    MsgBox MyArray[A_Index]

<em>; Enumerate the array's contents:</em>
For index, value in MyArray
    MsgBox "Item " index " is '" value "'"
    
<em>; Same thing again:</em>
For value in MyArray
    MsgBox "Item " A_Index " is '" value "'"
</pre>

<h3 id="Usage_Associative_Arrays">Maps (Associative Arrays)</h3>
<p><a href="lib/Map.htm">Map</a>または連想配列は、一意のキーと値のコレクションを含むオブジェクトで、各キーは1つの値と関連付けられています。キーは文字列、整数、オブジェクトのいずれでもよく、値はどのような型でもよい。連想配列は次のようにして作ることができる：</p>
<pre>MyMap := Map("KeyA", ValueA, "KeyB", ValueB, ..., "KeyZ", ValueZ)</pre>
<p>項目を取得する。<code>キー</code>は <a href="Concepts.htm#variables">変数</a>または<a href="Language.htm#expressions">式</a>：</p>
<pre>Value := MyMap[Key]</pre>
<p>項目を割り当てます：</p>
<pre>MyMap[Key] := Value</pre>
<p><a href="lib/Array.htm#Delete">Delete</a>メソッドを使用して項目を削除します：</p>
<pre>RemovedValue := MyMap.Delete(Key)</pre>
<p>項目を列挙する：</p>
<pre>MyMap := Map("ten", 10, "twenty", 20, "thirty", 30)
<a href="lib/For.htm">For</a> key, value in MyMap
    MsgBox key ' = ' value</pre>

<h3 id="Usage_Objects">オブジェクト</h3>
<p>オブジェクトは<em>プロパティ</em>と <em>アイテム</em>（配列要素など）を持つことができる。項目へのアクセスは、前のセクションで示したように<code>[]</code>を使用する。プロパティは通常、ドットの後に識別子（単なる<a href="Concepts.htm#names">名前</a>）を書いてアクセスする。<em>メソッド</em>は、呼び出すことができるプロパティである。</p>
<p><strong>例：</strong></p>
<p>文字どおり<em>Property</em>という名前のプロパティを取得または設定します：</p>
<pre>Value := MyObject.Property</pre>
<pre>MyObject.Property := Value</pre>
<p><a href="Language.htm#expressions">式</a>または<a href="Concepts.htm#variables">変数</a>の評価によって名前が決定されるプロパティを取得または設定します：</p>
<pre>Value := MyObject.%Expression%</pre>
<pre>MyObject.%Expression% := Value</pre>
<p>文字通り<em>Method</em>という名前のプロパティ/メソッドを呼び出す：</p>
<pre>ReturnValue := MyObject.Method(Parameters)</pre>
<p>式または変数の評価によって名前が決定されるプロパティ/メソッドを呼び出す：</p>
<pre>ReturnValue := MyObject.%Expression%(Parameters)</pre>
<p>プロパティの取得や割り当ての際にパラメータを受け付けることがある：</p>
<pre>Value := MyObject.Property[Parameters]
MyObject.Property[Parameters] := Value</pre>
<p>オブジェクトはインデックスをサポートすることもある：<code>MyArray[Index]</code>は、実際には<code>MyArray</code>の<a href="#__Item">__Item</a>プロパティを呼び出し、<code>Index</code>をパラメータとして渡す。</p>

<h3 id="object-literal">オブジェクト・リテラル</h3>
<p>オブジェクト・リテラルを<a href="Language.htm#expressions">式</a>の中で使うと、即席のオブジェクトを作ることができる。オブジェクト・リテラルは、カンマで区切られた名前と値のペアのリストを中括弧（<code>{}</code>）で囲んだものである。各ペアは、コロン（<code>:</code>）で区切られたリテラル（引用符で囲まれていない）<a href="Concepts.htm#names">プロパティ名</a>と値（サブ式）で構成されます。事例：</p>
<pre>Coord := {X:13, Y:240}</pre>
<p>これは等価だ：</p>
<pre>Coord := Object()
Coord.X := 13
Coord.Y := 240</pre>
<p>各名前と値のペアは、値のプロパティを定義させるが、例外として<a href="lib/Object.htm#Base">Base</a>を設定することができる（通常の代入と同じ制限がある）。</p>
<p><a href="Variables.htm#deref">名前の置換</a>は、<a href="Language.htm#expressions">式</a>または<a href="Concepts.htm#variables">変数</a>を評価することによってプロパティ名を決定することができます。事例：</p>
<pre>parts := StrSplit("key = value", "=", " ")
pair := {%parts[1]%:parts[2]}
MsgBox pair.key</pre>

<h3 id="Usage_Freeing_Objects">オブジェクトの解放</h3>
<p>スクリプトは明示的にオブジェクトを解放しない。オブジェクトへの最後の参照が解放されると、オブジェクトは自動的に解放される。変数に格納された参照は、その変数に他の値が代入されると自動的に解放される。事例：</p>
<pre>obj := {}  <em>; Creates an object.</em>
obj := ""  <em>; Releases the last reference, and therefore frees the object.</em></pre>
<p>同様に、プロパティや配列要素に格納された参照は、そのプロパティや配列要素に他の値が割り当てられたり、オブジェクトから削除されたりすると解放される。</p>
<pre>arr := [{}]  <em>; オブジェクトを含んだ配列を作ります。</em>
arr[1] := {}  <em>; Creates a second object, implicitly freeing the first object.</em>
arr.RemoveAt(1)  <em>; Removes and frees the second object.</em></pre>
<p id="Circular_References">オブジェクトを解放する前に、オブジェクトへの参照をすべて解放しなければならないので、循環参照を含むオブジェクトは自動的に解放されない。例えば、<code>x.child</code>が <code>y</code>を参照し、<code>y.parent</code>が <code>x</code>を参照している場合、<code>x</code>と <code>y</code>をクリアするだけでは不十分である。この状況を解決するには、循環参照を削除する。</p>
<pre>
x := {}, y := {}             <em>; Create two objects.</em>
x.child := y, y.parent := x  <em>; Create a circular reference.</em>

y.parent := ""               <em>; The circular reference must be removed before the objects can be freed.</em>
x := "", y := ""             <em>; Without the above line, this would not free the objects.</em>
</pre>
<p>より高度な使い方や詳細については、<a href="#Reference_Counting">参照カウント</a>を参照のこと。</p>

<h2 id="Extended_Usage">延長使用</h2>

<h3 id="Usage_Arrays_of_Arrays">配列の配列</h3>
<p>「多次元」配列はサポートされていないが、スクリプトは複数の配列やマップを組み合わせることができる。事例：</p>
<pre>
grid := [[1,2,3],
         [4,5,6],
         [7,8,9]]
MsgBox grid[1][3] <em>; 3</em>
MsgBox grid[3][2] <em>; 8</em>
</pre>
<p id="Array2D">カスタム・オブジェクトは、<a href="#__Item">__Item</a>プロパティを定義することで、多次元サポートを実装することができます。事例：</p>
<pre>
class Array2D extends Array {
    __new(x, y) {
        this.Length := x * y
        this.Width := x
        this.Height := y
    }
    __Item[x, y] {
        get =&gt; super.Has(this.i[x, y]) ? super[this.i[x, y]] : false
        set =&gt; super[this.i[x, y]] := value
    }
    i[x, y] =&gt; this.Width * (y-1) + x
}

grid := Array2D(4, 3)
grid[4, 1] := "#"
grid[3, 2] := "#"
grid[2, 2] := "#"
grid[1, 3] := "#"
gridtext := ""
Loop grid.Height {
    y := A_Index
    Loop grid.Width {
        x := A_Index
        gridtext .= grid[x, y] || "-"
    }
    gridtext .= "`n"
}
MsgBox gridtext
</pre>
<p>本当のスクリプトは、エラーチェックを行い、列挙をサポートする<a href="#__Enum">__Enum</a>のような他のメソッドをオーバーライドすべきである。</p>

<h2 id="Custom_Objects">カスタムオブジェクト</h2>
<p>カスタム・オブジェクトを作成するには、一般的に2つの方法がある：</p>
<ul>
  <li><em>アドホック</em>：オブジェクトを作成し、プロパティを追加する。</li>
  <li><em>代表</em>共有<em>ベース・オブジェクト</em>またはクラスのプロパティを定義する。</li>
</ul>
<p><a href="#Meta_Functions">メタファンクション</a>は、オブジェクトの振る舞いをさらにコントロールするために使うことができる。</p>
<p class="note"><strong>注：</strong>このセクションでは、<em>オブジェクト</em>とは <a href="lib/Object.htm">Object</a>クラスのインスタンスを指します。このセクションはCOMオブジェクトには適用されない。</p>

<h3 id="ad-hoc">アドホック</h3>
<p>プロパティとメソッド（呼び出し可能なプロパティ）は通常、いつでも新しいオブジェクトに追加できる。例えば、1つのプロパティと1つのメソッドを持つオブジェクトは次のように構築される：</p>
<pre><em>; Create an object.</em>
thing := {}
<em>; Store a value.</em>
thing.foo := "bar"
<em>; Define a method.</em>
thing.test := thing_test
<em>; Call the method.</em>
thing.test()

thing_test(this) {
    MsgBox this.foo
}</pre>
<p>同様に、<code>thing := {foo："bar"}</code>. {property:value}表記を使う場合、プロパティに引用符を使ってはならない。</p>
<p><code>thing.test()</code>が呼ばれると、<i>thing</i>は自動的にパラメータ・リストの先頭に挿入される。慣習上、関数はオブジェクトの「タイプ」とメソッド名を組み合わせて命名されるが、これは必須条件ではない。</p>
<p>上記の例では、<em>test</em>が定義された後に他の関数や値が割り当てられる可能性があり、その場合、元の関数は失われ、このプロパティを通じて呼び出すことはできない。別の方法として、以下のように読み取り専用のメソッドを定義することもできる：</p>
<pre>thing.DefineProp 'test', {call: thing_test}</pre>
<p>こちらもご覧ください：<a href="lib/Object.htm#DefineProp">DefineProp</a></p>

<h3 id="delegation">代表</h3>
<p>オブジェクトは<em>プロトタイプベース</em>。つまり、オブジェクト自体で定義されていないプロパティは、代わりにオブジェクトの<a href="lib/Object.htm#Base">ベース</a>で定義することができる。これは、<em>委譲による継承</em>または<em>差分継承</em>と呼ばれるもので、オブジェクトは、そのオブジェクトを異なるものにする部分のみを実装し、残りをベースに委譲することができるからである。</p>
<p>ベース・オブジェクトは一般にプロトタイプとも呼ばれるが、「クラスの<a href="lib/Class.htm#Prototype">プロトタイプ</a>」はクラスのすべてのインスタンスがベースとするオブジェクトを意味し、「ベース」はインスタンスがベースとするオブジェクトを意味する。</p>
<p class="note">AutoHotkeyのオブジェクトデザインは、主にJavaScriptとLuaの影響を受けており、C#も少し含まれています。JavaScriptの<code><i>obj</i>.__proto__</code>の代わりに<code><i>obj</i>.base&lt;//c0&gt;を使い、JavaScriptの<code><i>func</i>.prototype&lt;//c6&gt;の代わりに<code><i>cls</i>.Prototype&lt;//c4&gt;を使います。(クラス・オブジェクトはコンストラクタ関数の代わりに使われる）。</p>

<p>オブジェクトのベースは、そのタイプやクラスを識別するためにも使われる。例えば、<code>x := []</code>は<code>Array.Prototype</code>に<em>基づく</em>オブジェクトを作成する。これは、<code>xがArray</code>であり、<code>x.HasBase(Array.Prototype)</code>が真であり、<code>type(x)</code>が "Array"を返すことを意味する。各クラスのPrototypeはベース・クラスのPrototypeに基づいているので、<code>x.HasBase(Object.Prototype)</code>も真になる。</p>
<p>Objectのインスタンスや派生クラスはすべてベース・オブジェクトになることができるが、オブジェクトは同じネイティブ・タイプを持つオブジェクトの<a href="lib/Object.htm#Base">ベースとしてのみ割り当てる</a>ことができる。これは、組み込みメソッドが常にオブジェクトのネイティブ・タイプを識別し、正しいバイナリ構造を持つオブジェクトに対してのみ操作できるようにするためである。</p>
<p>ベース・オブジェクトは2つの異なる方法で定義できる：</p>
<ul>
  <li><a href="#creating-a-base-object">通常のオブジェクトを作成</a>する。</li>
  <li><a href="#Custom_Classes">クラスを定義する</a>ことによって。各クラスには、そのクラスのすべてのインスタンスがベースとするオブジェクトを含む<a href="lib/Class.htm#Prototype">Prototype</a>プロパティがあり、クラス自体は直接のサブクラスのベース・オブジェクトとなる。</li>
</ul>
<p>ベース・オブジェクトは他のオブジェクトの<a href="lib/Object.htm#Base">ベース</a>・プロパティに割り当てることができますが、通常、オブジェクトのベースはオブジェクトが作成されるときに暗黙的に設定されます。</p>

<h3 id="creating-a-base-object">ベースオブジェクトの作成</h3>
<p>どんなオブジェクトでも、同じネイティブ・タイプを持つ他のオブジェクトのベースとして使うことができる。次の例は、<a href="#ad-hoc">アドホック（Ad Hoc）</a>の前の例を基にしたものである（実行する前にこの2つを組み合わせてください）：</p>
<pre>other := {}
other.base := thing
other.test()</pre>
<p>この場合、<i>other</i>は <i>thing</i>から<i>foo</i>と <i>test</i>を継承する。この継承は動的なので、<code>thing.foo</code>が変更されると、その変更は<code>other.foo</code>に反映される。スクリプトが<code>other.foo</code>に代入した場合、その値は<i>other</i>に格納され、<code>thing.foo</code>をさらに変更しても<code>other.foo</code>には影響しません。<code>other.test()</code>が呼び出されると、<i>this</i>パラメータには<i>thing</i>の代わりに<i>other</i>への参照が含まれる。</p>

<h3 id="Custom_Classes">クラス</h3>
<blockquote>オブジェクト指向プログラミングでは、クラスはオブジェクトを作成するための拡張可能なプログラム・コード・テンプレートであり、状態の初期値（メンバ変数）や動作の実装（メンバ関数またはメソッド）を提供する。<a href="https://en.wikipedia.org/wiki/Class_(computer_programming)" class="source">ウィキペディア</a></blockquote>
<p>より一般的な言い方をすれば、<em>クラス</em>とは、何らかの特性や属性を共通に持つ物事の集合やカテゴリーのことである。AutoHotkeyでは、<code>クラス</code>はそのクラスのインスタンスで共有されるプロパティ（および呼び出し可能なプロパティであるメソッド）を定義します。<em>インスタンス</em>とは、クラスからプロパティを継承したオブジェクトのことで、通常はそのクラスに属していることを識別することもできます（<code><i>instance</i>is<i>ClassName</i>という</code>表現など）。インスタンスは通常、<a href="lib/Class.htm#Call"><em>ClassName</em>()</a>を呼び出して作成します。</p>
<p><a href="lib/Object.htm">オブジェクト</a>は <a href="#ad-hoc">動的</a>で<a href="#delegation">プロトタイプベース</a>なので、各クラスは2つの部分で構成される：</p>
<ul>
  <li>クラスには<a href="lib/Class.htm#Prototype">Prototype</a>オブジェクトがあり、このオブジェクトを基にクラスのすべてのインスタンスが作られる。クラスのインスタンスに適用されるすべてのメソッドとダイナミック・プロパティは、プロトタイプ・オブジェクトに含まれている。これには、<code>static</code>キーワードを持たないすべてのプロパティとメソッドが含まれる。</li>
  <li>クラスそのものはオブジェクトで、静的メソッドとプロパティだけを含んでいる。これには、<code>static</code>キーワードを持つすべてのプロパティとメソッド、およびすべてのネストされたクラスが含まれます。これらは特定のインスタンスには適用されず、クラス自体を名前で参照することで使用できる。</li>
</ul>
<p>以下に、クラス定義のほとんどの要素を示す：</p>
<pre>class ClassName extends BaseClassName
{
    InstanceVar := <i>Expression</i>
    
static ClassVar := <i>Expression</i>

class NestedClass
    {
        ...
    }

Method()
    {
        ...
    }
    
static Method()
    {
        ...
    }

Property[<i>Parameters</i>]  <em>; Use brackets only when parameters are present.</em>
    {
        <span class="dec">get</span> {
            return <i>value of property</i>
        }
        <span class="dec">set</span> {
            <i>Store or otherwise handle</i> <span class="biv">value</span>
        }
    }
    
ShortProperty
    {
        <span class="dec">get</span> =&gt; <i>Expression which calculates property value</i>
        <span class="dec">set</span> =&gt; <i>Expression which stores or otherwise handles</i> <span class="biv">value</span>
    }
    
ShorterProperty =&gt; <i>Expression which calculates property value</i>
}
</pre>
<p>スクリプトがロードされると、<a href="lib/Class.htm">Class</a>オブジェクトが構築され、<i>ClassName</i>という名前の<a href="Functions.htm#Global">グローバル</a>定数（読み取り専用変数）に格納されます。<code>extends BaseClassName</code>がある場合、<i>BaseClassName</i>は他のクラスの完全な名前でなければならない。各クラスの完全な名前は<code><i>ClassName</i>.Prototype.__Class</code>に格納されます。</p>
<p>クラス自体は変数を通してアクセスされるため、クラス名を使用してクラスを参照し、同じコンテキストで別の変数（クラスのインスタンスを保持するなど）を作成することはできません。例えば、<code>box := Box()</code>は、<code>box</code>も <code>Box</code>も同じものに解決されるため、機能しない。この方法でトップ・レベルの（入れ子になっていない）クラスを再割り当てしようとすると、ロード・タイム・エラーになります。</p>
<p>この文書では、「クラス」という単語は通常、<code>class</code>キーワードで構築されたクラス・オブジェクトを意味する。</p>
<p>クラス定義には、変数宣言、メソッド定義、ネストされたクラス定義を含めることができます。</p>

<h4 id="Custom_Classes_var">インスタンス変数</h4>
<p><em>インスタンス変数</em>とは、クラスの各インスタンスがそれ自身のコピーを持つ変数である。これらは宣言され、通常の代入と同じように振る舞いますが、<code>this.</code>接頭辞は省略されます（クラス本体内でのみ）：</p>
<pre>InstanceVar := Expression</pre>
<p>これらの宣言は、<a href="lib/Class.htm#Call"><em>ClassName</em>()</a>でクラスの新しいインスタンスが生成されるたびに評価され、すべての基本クラス宣言が評価された後、<a href="#Custom_NewDelete">__New</a>が呼ばれる前に評価されます。これは、<code>super.__Init(</code>)への呼び出しを含む<em>__Init</em>という名前のメソッドを自動的に作成し、そこに各宣言を挿入することで実現される。したがって、1つのクラス定義に__Initメソッドとインスタンス変数宣言の両方を含めることはできません。</p>
<p><em>式</em>は <code>これ</code>を介して他のインスタンス変数やメソッドにアクセスできる。グローバル変数は読み込むことはできるが、代入することはできない。式の中で追加の代入（または<a href="Variables.htm#ref">参照演算子</a>の使用）を行うと、一般的に__Initメソッドのローカル変数が作成される。例えば、<code>x := y := 1</code>とすると、<code>this.x</code>とローカル変数<code>y</code>が設定される（初期化子がすべて評価されると解放される）。</p>
<p>インスタンス変数にアクセスするには（メソッド内であっても）、例えば、<code><b>this</b>.InstanceVar</code>のようにします。</p>
<p><code>x.y:=z</code>のような宣言も、<code>x</code>が以前にこのクラスで定義されていればサポートされる。例えば、<code>x := {}, x.y := 42</code>は<code>x</code>を宣言し、<code>this.x.y</code>も初期化する。</p>

<h4 id="Custom_Classes_staticvar">静的クラス変数</h4>
<p>静的変数/クラス変数はクラスそのものに属しますが、その値はサブクラスに継承させることができます。インスタンス変数と同じように、staticキーワードを使って宣言する：</p>
<pre>static ClassVar := Expression</pre>
<p>これらの宣言は、クラスが<a href="#static__New">初期化</a>されるときに一度だけ評価される。この目的のために、<em>__Init</em>という静的メソッドが自動的に定義される。</p>
<p>各宣言は、クラス・オブジェクトをターゲットとして、通常のプロパティ割り当てとして動作します。<em>式</em>は、<code>this</code>がクラス自身を参照することを除いて、インスタンス変数と同じ解釈をする。</p>
<p>例えば、<code><b>ClassName</b>.ClassVar := Value</code>のようにします。サブクラスがその名前のプロパティを所有していない場合、<code><i>Subclass</i>.ClassVar</code>を使用して値を取得することもできます。したがって、値がオブジェクトへの参照である場合、サブクラスはデフォルトでそのオブジェクトを共有します。ただし、<code><i>Subclass</i>.ClassVar := y</code>は、<em>ClassName</em>ではなく<em>Subclass</em>に値を格納します。</p>
<p><code>static x.y := z</code>のような宣言も、<code>x</code>が以前にこのクラスで定義されていればサポートされる。例えば、<code>static x := {}, x.y := 42</code>は<code>x</code>を宣言し、<code><i>ClassName</i>.x.y</code>も初期化します。<a href="lib/Class.htm#Prototype">Prototype</a>は各クラスで暗黙的に定義されているため、<code>static Prototype.sharedValue := 1</code>を使用すると、クラスのすべてのインスタンスに動的に継承される値を設定できます（インスタンス自体のプロパティによってシャドウされるまで）。</p>

<h4 id="Custom_Classes_class">入れ子のクラス</h4>
<p>入れ子になったクラス定義では、クラス・オブジェクトを別のグローバル変数ではなく、外側のクラスの静的/クラス変数に関連付けることができます。上記の例では、<code>NestedClassクラス</code>が <a href="lib/Class.htm">Class</a>オブジェクトを構築し、<code>ClassName.NestedClass</code>に格納しています。Subclasses could inherit <em>NestedClass</em> or override it with their own nested class (in which case <code><i>WhichClass</i>.NestedClass()</code> could be used to instantiate whichever class is appropriate).</p>
<pre>
class NestedClass
{
    ...
}
</pre>
<p>クラスを入れ子にすることは、外側のクラスとの特定の関係を意味するものではない。ネストされたクラスは自動的にインスタンス化されないし、ネストされたクラスのインスタンスは、スクリプトが明示的にその接続を行わない限り、アウター・クラスのインスタンスとの接続を持たない。</p>
<p>Each nested class definition produces a dynamic property with <em>get</em> and <em>call</em> accessor functions instead of a simple value property. This is to support the following behaviour (where class X contains the nested class Y):</p>
<ul>
<li><code>X.Y()</code> does not pass X to <code>X.Y.Call</code> and ultimately <code>__New</code>, which would otherwise happen because this is the normal behaviour for function objects called as methods (which is how the nested class is being used here).</li>
<li><code>X.Y := 1</code> is an error by default (the property is read-only).</li>
<li>初めて参照または呼び出すと、クラスが初期化されます。</li>
</ul>

<h4 id="Custom_Classes_method">メソッド</h4>
<p>メソッド定義は関数定義と同じように見える。各メソッド定義は、<code>this</code>という名前の隠された第1パラメータを持つ<a href="lib/Func.htm">Func</a>を作成し、メソッドの呼び出しやその関数オブジェクトの取得に使用されるプロパティを定義する。</p>
<p>方法には2種類ある：</p>
<ul>
  <li>インスタンス・メソッドは以下のように定義され、クラスの<a href="lib/Class.htm#Prototype">プロトタイプ</a>にアタッチされます。メソッドが呼ばれると、<code>これ</code>はクラスのインスタンスを参照する。</li>
  <li>静的メソッドは、メソッド名の前に個別のキーワード<code>static</code>を付けて定義します。これらはクラス・オブジェクト自体に付属していますが、サブクラスにも継承されます。</li>
</ul>
<p>以下のメソッド定義では、<code><i>target</i>.DefineProp('Method', {call：<i>funcObj</i>})</code>. デフォルトでは、<code><i>target</i>.Method</code>は <em>funcObj</em>を返し、<code><i>target</i>.Method</code>に代入しようとするとエラーがスローされます。これらのデフォルトは、<a href="#Custom_Classes_property">プロパティを定義</a>するか<a href="lib/Object.htm#DefineProp">DefineProp</a>を呼び出すことでオーバーライドできます。</p>
<pre>
Method()
{
    ...
}
</pre>

<p><a href="Variables.htm#fat-arrow">ファット・アロー構文</a>は、式を返す単一行のメソッドを定義するために使用できます：</p>
<pre>Method() =&gt; <i>Expression</i></pre>

<h4 id="Custom_Classes_super">Super</h4>
<p>メソッドやプロパティのゲッター/セッターの内部では、派生クラスでオーバーライドされているメソッドやプロパティのスーパークラスのバージョンにアクセスするために、<code>this</code>の代わりに<code>super</code>キーワードを使用することができます。例えば、上で定義したクラスの<code>super.Method()</code>は、通常、<em>BaseClassName</em>の中で定義されたバージョンの<em>Method</em>を呼び出します。注：</p>
<ul>
  <li><code>super.Method()</code>は、たとえ<code>それが</code>そのクラスの<em>サブクラスや</em>他のクラスから派生したものであっても、現在のメソッドの元の定義に関連付けられたクラスやプロトタイプオブジェクトのベースを常に呼び出します。</li>
  <li><code>super.Method()</code>は、暗黙のうちに<code>これ</code>を最初の（隠し）パラメータとして渡す。</li>
  <li><em>ClassName</em>がベース・オブジェクトの連鎖のどこに存在するか（あるいは存在するかどうか）は不明なので、<em>ClassName</em>自体が開始点として使用される。したがって、<code>super.Method()</code>は、<code>(<i>ClassName</i>.Prototype.base.Method)(this)</code>とほぼ等価である（ただし、<em>Method</em>がstaticの場合は<em>Prototype</em>を含まない）。しかし、<code><i>ClassName</i>.Prototype</code>はロード時に解決される。</li>
  <li>そのプロパティがスーパークラスで定義されていないか、呼び出すことができない場合はエラーがスローされる。</li>
</ul>
<p>キーワード<code>super</code>の後には、以下の記号のいずれかをつけなければならない：<code>.[(</code></p>
<p><code>super()</code>は<code>super.call()</code>と等価である。</p>

<h4 id="Custom_Classes_property">属性</h4>
<p>プロパティ定義は、単に値を格納したり返したりするのではなく、メソッドを呼び出す<a href="lib/Object.htm#DefineProp">動的プロパティ</a>を作成します。</p>
<pre>Property[<i>Parameters</i>]
{
    <span class="dec">get</span> {
        return <i>property value</i>
    }
    <span class="dec">set</span> {
        <i>Store or otherwise handle</i> <span class="biv">value</span>
    }
}
</pre>
<p><em>Property</em>は単にプロパティの名前であり、このプロパティを呼び出すために使用される。例えば、<code>obj.Property</code>は <em>get</em>を呼び、<code>obj.Property :=value</code>は <em>set</em>を呼びます。<em>get</em>または<em>set</em>の中では、<code>これ</code>は呼び出されるオブジェクトを指す。<em>セット</em>内では、<code>value</code>に代入される値が含まれる。</p>
<p>パラメータは、プロパティ名の右側に角括弧で囲んで定義することができ、同じように渡されます - ただし、パラメータが存在しない場合は省略する必要があります（下記参照）。角括弧を使用することを除けば、プロパティのパラメータはメソッドのパラメータと同じように定義され、オプショナル、ByRef、バリアディックパラメータに対応しています。</p>
<p>プロパティがパラメータ付きで呼び出され、何も定義されていない場合、パラメータは自動的に<em>get</em>によって返されるオブジェクトの<a href="#__Item">__Item</a>プロパティに転送される。例えば、<code>this.Property[x]</code>は、<code>(this.Property)[x]</code>または<code>y := this.Property, y[x]</code>と同じ効果を持つ。空括弧（<code>this.Property[]</code>）は、常に<em>Propertyの値</em>の__Itemプロパティを呼び出しますが、<code>this.Property[args*]</code>のようなバリアディック呼び出しは、パラメータの数がゼロでない場合にのみ、この効果を持ちます。</p>
<p>スタティック・プロパティは、プロパティ名の前に<code>static</code>という個別のキーワードを付けて定義することができます。その場合、<code>this</code>はクラスそのものかサブクラスを指す。</p>
<p><em>set</em>の戻り値は無視される。例えば、<code>val := obj.Property := 42</code>は、例外をスローするかスレッドを終了しない限り、プロパティが何をするかに関係なく、常に<code>val := 42</code>を代入する。</p>
<p>各クラスはプロパティの片方または両方を定義できる。クラスがプロパティをオーバーライドする場合は <code><a href="#Custom_Classes_super">super.Property</a></code>を使用して、ベース・クラスで定義されたプロパティにアクセスできます。<em>Get</em>または<em>Set</em>が定義されていない場合は、ベース・オブジェクトから継承することができる。<em>Get</em>が未定義の場合、プロパティはベースから継承した値を返すことができます。<em>Set</em>がこのオブジェクトとすべてのベースオブジェクトで未定義である場合（または継承された値プロパティによって隠されている場合）、プロパティを設定しようとすると例外がスローされます。</p>
<p><em>get</em>と <em>set</em>の両方を持つプロパティ定義は、実際には2つの別々の関数を作成し、ローカル変数や静的変数、入れ子関数を共有することはありません。メソッドと同様、各関数には<code>this</code>という隠しパラメータがあり、<em>set</em>には <code>value</code>という2番目の隠しパラメータがある。明示的に定義されたパラメータはその後に来る。</p>
<p>プロパティ定義では、<a href="lib/Object.htm#DefineProp">DefineProp</a>と同じようにプロパティの<em>get</em>と <em>set</em>のアクセサ関数を定義しますが、メソッド定義では<em>呼び出し</em>のアクセサ関数を定義します。どのクラスも、同じ名前のプロパティ定義とメソッド定義を含むことができる。<em>呼び出し</em>アクセッサ関数（メソッド）を持たないプロパティが呼び出された場合、<em>get</em>はパラメータなしで呼び出され、その結果はメソッドとして呼び出される。</p>

<h4 id="Custom_Classes_property_short">ファット・アロー・プロパティーズ</h4>
<p><a href="Variables.htm#fat-arrow">ファット・アロー構文</a>を使用すると、式を返す<a href="#Custom_Classes_property">プロパティ・ゲッター</a>またはセッターを定義できます：</p>
<pre>ShortProperty[<i>Parameters</i>]
{
    <span class="dec">get</span> =&gt; <i>Expression which calculates property value</i>
    <span class="dec">set</span> =&gt; <i>Expression which stores or otherwise handles</i> <span class="biv">value</span>
}</pre>
<p>ゲッターだけを定義する場合、中括弧と<code>get</code>は省略できる：</p>
<pre>ShorterProperty[<i>Parameters</i>] =&gt; <i>Expression which calculates property value</i></pre>
<p>いずれの場合も、パラメータが定義されていない限り、角括弧は省略しなければならない。</p>

<h3 id="__Enum">__Enum Method</h3>
<pre class="Syntax">__Enum(NumberOfVars)</pre>
<p>Enumメソッドは、オブジェクトが<a href="lib/For.htm">forループ</a>に渡されるときに呼び出される。このメソッドは、配列要素など、オブジェクトに含まれる項目を返す<a href="lib/Enumerator.htm">列挙子</a>を返す必要があります。未定義のままだと、<a href="lib/Enumerator.htm#Call">列挙子と互換性のあるCallメソッド</a>を持たない限り、オブジェクトを直接forループに渡すことはできない。</p>
<p><em>NumberOfVars</em>には、forループに渡される変数の数が入る。<em>NumberOfVars</em>が2の場合、列挙者は項目のキーまたはインデックスを最初のパラメータに、値を2番目のパラメータに代入することが期待される。各キーまたはインデックスは、<a href="#__Item">__Item</a>プロパティのパラメータとして受け入れられるべきである。これにより、<a href="AHKL_DBGPClients.htm">DBGpベースのデバッガ</a>は、列挙器を呼び出して項目をリストアップした後、特定の項目を取得または設定できるようになる。</p>

<h3 id="__Item">__Item Property</h3>
<p>Itemプロパティは、インデックス演算子（配列構文）がオブジェクトと共に使用されるときに呼び出される。以下の例では、Envクラス自体でインデックス演算子を使用できるように、プロパティはstaticとして宣言されています。他の例としては、<a href="#Array2D">Array2D</a>を参照。</p>
<pre>class Env {
    static __Item[name] {
        get =&gt; EnvGet(name)
        set =&gt; EnvSet(name, value)
    }
}

Env["PATH"] .= ";" A_ScriptDir  <em>; Only affects this script and child processes.</em>
MsgBox Env["PATH"]</pre>
<p><code>__Item</code> is effectively a default property name (if such a property has been defined):</p>
<ul>
  <li>パラメータがある場合、<code><i>object</i>[<i>params</i>]</code>は<code><i>object</i>.__Item[<i>params</i>]</code>と等価である。</li>
  <li><code><i>object</i>[]</code>は<code><i>object</i>.__Item</code>と等価である。</li>
</ul>
<p>事例：</p>
<pre>
obj := {}
obj[] := Map()     <em>; Equivalent to obj.__Item := Map()</em>
obj["base"] := 10
MsgBox obj.base = Object.prototype  <em>; True</em>
MsgBox obj["base"]                  <em>; 10</em>
</pre>
<p class="note"><strong>注意：</strong> <code>obj.prop[]</code>のように、明示的なプロパティ名が空括弧と組み合わされている場合、それは2つの別々の操作として扱われます：まず<code>obj.prop</code>を取得し、次に結果のデフォルト・プロパティを呼び出します。これは言語構文の一部であり、オブジェクトに依存するものではない。</p>

<h3 id="Custom_NewDelete">コンストラクタとデストラクタ</h3>
<p><a href="lib/Class.htm#Call"><em>ClassName</em>()</a>のデフォルト実装によってオブジェクトが生成されるたびに、新しいオブジェクトの<code>__New</code>メソッドが呼び出されます。<code><i>ClassName</i>()</code>に渡されたパラメータはすべて<code>__New</code>に転送されるため、オブジェクトの初期内容や構築方法に影響を与える可能性があります。オブジェクトが破棄されると、<code>__Delete</code>が呼ばれる。事例：</p>
<pre>m1 := GMem(0, 10)
m2 := {base:GMem.Prototype}, m2.__New(0, 30)

<em>; Note: For general memory allocations, use <a href="lib/Buffer.htm">Buffer</a>() instead.</em>
class GMem<span id="GMem"></span>
{
    __New(aFlags, aSize)
    {
        this.ptr := DllCall("GlobalAlloc", "UInt", aFlags, "Ptr", aSize, "Ptr")
        if !this.ptr
            throw MemoryError()
        MsgBox "New GMem of " aSize " bytes at address " this.ptr "."
    }

__Delete()
    {
        MsgBox "Delete GMem at address " this.ptr "."
        DllCall("GlobalFree", "Ptr", this.ptr)
    }
}</pre>
<p>__Deleteは、"__Class"というプロパティを所有するオブジェクトに対しては呼び出されません。<a href="lib/Class.htm#Prototype">プロトタイプ・オブジェクト</a>はデフォルトでこのプロパティを持っている。</p>
<p>Deleteの実行中に例外または実行時エラーがスローされ、__Delete内で処理されない場合、__Deleteは新しい<a href="misc/Threads.htm">スレッド</a>から呼び出されたかのように動作します。つまり、エラー・ダイアログが表示され、__Deleteが戻るが、スレッドは終了しない（すでに終了していた場合を除く）。</p>
<p>トレイメニューや<a href="lib/ExitApp.htm">ExitApp</a>など、何らかの手段でスクリプトが直接終了した場合、まだ戻っていない関数はその機会を得られない。したがって、これらの関数のローカル変数によって参照されるオブジェクトは解放されないので、__Deleteは呼び出されません。Temporary references on the expression evaluation stack are also not released under such circumstances.</p>
<p>スクリプトが終了すると、グローバル変数と静的変数に含まれるオブジェクトは、実装で定義された任意の順序で自動的に解放されます。この処理中に__Deleteが呼ばれた場合、グローバル変数やスタティック変数はすでに解放されている可能性があるが、オブジェクト自身が含む参照はまだ有効である。したがって、__Deleteは完全に自己完結型とし、グローバル変数や静的変数に依存しないのがベストである。</p>

<h4 id="static__New">クラスの初期化</h4>
<p>各クラスは、そのクラスへの参照が初めて評価されるときに自動的に初期化される。例えば、<em>MyClass</em>がまだ初期化されていない場合、<code>MyClass.MyProp</code>はプロパティが取得される前にクラスを初期化します。初期化は、2つの静的メソッドを呼び出すことからなる：__Init and __New.</p>
<p><code>static __Init</code>は、すべてのクラスに対して自動的に定義され、ベース・クラスが指定されていれば常にそのクラスへの参照から始まり、確実に初期化されます。<a href="#Custom_Classes_staticvar">静的/クラス変数</a>と <a href="#Custom_Classes_class">ネストされたクラス</a>は、定義された順番に初期化されます。ただし、ネストされたクラスが前の変数やクラスの初期化中に参照された場合は除きます。</p>
<p>クラスが<code>static __New</code>メソッドを定義または継承している場合、 __Init の直後に呼び出されます。__Newは、それが定義されているクラスに対して一度だけ呼び出されることに注意することが重要であり<em>そして</em>、定義されていないサブクラス（または<code>super.__New()</code>を呼び出すサブクラス）ではそれぞれ1回呼び出されるということです。これは、各サブクラスに対して共通の初期化タスクを実行したり、サブクラスを使用する前に何らかの方法で修正したりするために使用できます。</p>
<p><code>static __New</code>が派生クラスに対して作用することを意図していない場合は、<code>this</code>の値をチェックすることで回避できる。場合によっては、<code>this.DeleteProp('__New')</code>のように、メソッド自体を削除すれば十分かもしれません。しかし、__Newの最初の実行は、サブクラスが基本クラスに入れ子になっている場合や、静的/クラス変数の初期化中に参照される場合があります。</p>
<p>クラス定義は、クラスを参照する効果もある。言い換えると、<a href="Scripts.htm#auto">スクリプトの起動</a>中に実行がクラス定義に達すると、__Initと__Newが自動的に呼び出されます。しかし、<code>return</code>や無限ループなど、実行がクラス定義に到達できない場合は、クラスが参照されている場合のみ初期化される。</p>
<p>一度自動初期化が開始されると、同じクラスで再び初期化が行われることはありません。これは、複数のクラスが互いに参照し合わない限り、一般的には問題にはなりません。例えば、以下の2つのクラスを考えてみよう。<code>A</code>が最初に初期化されるときは、<code>B.SharedArray</code>（A1）を評価すると、値を取得して返す前に<code>B</code>が初期化されますが、<code>A.SharedValue</code>（A3）は未定義であり、すでに進行中のため<code>A</code>の初期化は起こりません。言い換えれば、<code>A</code>が最初にアクセスまたは初期化された場合、順番はA1からA3となり、そうでない場合はB1からB4となる：</p>
<pre>MsgBox A.SharedArray.Length
MsgBox B.SharedValue

class A {
    static SharedArray := B.SharedArray   <em>; A1          ; B3</em>
    static SharedValue := 42                            <em>; B4</em>
}

class B {
    static SharedArray := StrSplit("XYZ") <em>; A2          ; B1</em>
    static SharedValue := A.SharedValue   <em>; A3 (Error)  ; B2</em>
}</pre>

<h3 id="Meta_Functions">Meta-Functions</h3>
<pre class="Syntax">
class <i>ClassName</i> {
    __Get(Name, Params)
    __Set(Name, Params, Value)
    __Call(Name, Params)
}
</pre>
<dl>
  <dt>名前</dt>
  <dd><p>プロパティまたはメソッドの名前です。</p></dd>
  <dt>Params</dt>
  <dd><p>パラメータの<a href="lib/Array.htm">配列</a>。これは、<code>()</code>または<code>[]</code>の間のパラメータのみを含むので、空でも差し支えありません。メタファンクションは、<code>x.</code> <code>y</code>が未定義の<code>x.y[z]</code>のようなケースを処理することが期待されます。</p></dd>
  <dt>値</dt>
  <dd><p>割り当てられている値。</p></dd>
</dl>
<p>メタファンクションは、未定義のプロパティやメソッドが呼び出されたときに何が起こるかを定義します。例えば、<code>obj.unk</code>に値が割り当てられていない場合、<i>__Get</i>メタファンクションを呼び出します。同様に、<code>obj.unk := value</code>は <i>__Set</i>を起動し、<code>obj.unk()</code>は<i>__Call</i>を起動します。</p>
<p>プロパティとメソッドは、オブジェクト自身またはその<a href="#delegation">ベース・オブジェクト</a>のいずれかに定義することができます。一般的に、すべてのプロパティに対してメタファンクションを呼び出すには、プロパティを定義しないようにしなければなりません。<a href="lib/Object.htm#Base">Base</a>のような組み込みプロパティは、<a href="#Custom_Classes_property">プロパティ定義</a>または<a href="lib/Object.htm#DefineProp">DefineProp</a>でオーバーライドできます。</p>
<p>メタファンクションが定義されているときは、そのメタファンクションは必要なデフォルトアクションを全て実行しなければなりません。例えば、次のようなことが予想される：</p>
<ul>
  <li><i>Call</i>:<a href="lib/Error.htm#MethodError">MethodError</a>をスローします。</li>
  <li>パラメータが与えられたときは、例外をスローします（パラメータを転送するオブジェクトがありません）。</li>
  <li><i>Get</i>:<a href="lib/Error.htm#PropertyError">PropertyError</a>をスローします。</li>
  <li><i>Set</i>:<a href="lib/Object.htm#DefineProp">DefineProp</a>を呼び出すなどして、指定された値を持つ新しいプロパティを定義する。 </li>
</ul>
<p><a href="misc/Functor.htm">呼び出し可能なオブジェクト</a>は、関連するプロパティに代入することで、メタファンクションとして使用することができる。</p>
<p>メタファンクションは以下の場合には呼び出されない：</p>
<ul>
  <li><code>x[y]</code>:プロパティ名なしで角括弧を使用すると、<a href="#__Item">__Item</a>プロパティのみが呼び出されます。</li>
  <li><code>x()</code>:オブジェクト自体を呼び出すと、<code>Call</code>メソッドが呼び出されるだけである。これには、<a href="lib/SetTimer.htm">SetTimer</a>や <a href="lib/Hotkey.htm">Hotkey</a>などの組込関数による内部呼び出しも含まれる。</li>
  <li>他のメタファンクションやダブルアンダースコアメソッドへの内部呼び出しは<code>__Call</code>をトリガーしない。</li>
</ul>

<h4 id="Dynamic_Properties">ダイナミック・プロパティ</h4>
<p><a href="#Custom_Classes_property">Property構文</a>と <a href="lib/Object.htm#DefineProp">DefineProp</a>は、評価されるたびに値を計算するプロパティを定義するために使用できますが、各プロパティは事前に定義する必要があります。対照的に、<em>__Get</em>と <em>__Set</em>は、呼び出された瞬間にしかわからないプロパティを実装するために使うことができる。</p>
<p>例えば、プロパティに対するリクエストをネットワーク経由で（あるいは他のチャネル経由で）送信する「プロキシ」オブジェクトを作成することができる。リモートサーバーはプロパティの値を含む応答を送り返し、プロキシはその値を呼び出し元に返す。各プロパティの名前が事前に分かっていたとしても、どのプロパティも同じこと（ネットワーク・リクエストを送信する）を行うので、プロキシ・クラスで各プロパティを個別に定義するのは論理的ではない。メタ・ファンクションはプロパティ名をパラメータとして受け取るので、この問題に対する良い解決策となる。</p>

<h2 id="primitive">プリミティブ値</h2>
<p>文字列や数値などのプリミティブ値は、独自のプロパティやメソッドを持つことはできない。しかし、プリミティブ値はオブジェクトと同じような<a href="#delegation">デリゲーション</a>をサポートする。つまり、プリミティブ値に対するプロパティやメソッドの呼び出しは、定義済みの<a href="lib/Class.htm#Prototype">プロトタイプ</a>・オブジェクトに委譲される。以下のクラスは、プリミティブ値に関するものです：</p>
<ul style="line-height: 1.5">
  <li>Primitive (extends <a href="lib/Any.htm">Any</a>) <ul style="padding-left: 1.7em">
    <li>Number <ul style="padding-left: 1.7em">
      <li>Float</li>
      <li>Integer</li>
    </ul></li>
    <li>String</li>
  </ul></li>
</ul>
<p><a href="lib/Type.htm">Type</a>文字列をチェックする方が一般的に速いが、値の型は、それが指定されたベースを持っているかどうかをチェックすることによってテストすることができる。例えば、<code>n.HasBase(Number.Prototype)</code>または<code>n is Number</code>は、<em>n</em>が純粋なIntegerまたはFloatの場合は真ですが、<em>n</em>が数値文字列の場合は真ではありません。対照的に、<code>IsNumber(n)</code>は<em>n</em>が数値または数値文字列の場合に真となる。</p>
<p><a href="lib/Any.htm#GetBase">ObjGetBase</a>と <a href="lib/Any.htm#Base">Base</a>プロパティは、適切な場合、定義済みのプロトタイプ・オブジェクトの1つを返します。</p>
<p>通常、<code>x is Any</code>はAutoHotkeyの型階層内のどの値に対してもtrueになりますが、COMオブジェクトに対してはfalseになることに注意してください。</p>

<h3 id="primitive-extension">プロパティとメソッドの追加</h3>
<p>プロパティとメソッドは、その型のプロトタイプ・オブジェクトを修正することによって、与えられた型のすべての値に対して追加することができる。しかし、プリミティブ値はObjectではなく、独自のプロパティやメソッドを持つことができないため、プリミティブプロトタイプオブジェクトは<code>Object.Prototype</code>から派生しません。つまり、<a href="lib/Object.htm#DefineProp">DefineProp</a>や <a href="lib/Object.htm#HasOwnProp">HasOwnProp</a>といったメソッドは、デフォルトではアクセスできない。間接的に呼ばれることもある。事例：</p>
<pre>
DefProp := {}.DefineProp
DefProp( "".base, "Length", { get:StrLen } )
MsgBox A_AhkPath.length " == " StrLen(A_AhkPath)
</pre>
<p>プリミティブ値はそのプロトタイプから値プロパティを継承できますが、スクリプトがプリミティブ値に値プロパティを設定しようとすると例外がスローされます。事例：</p>
<pre>"".base.test := 1  <em>; Don't try this at home.</em>
MsgBox "".test  <em>; 1</em>
"".test := 2  <em>; エラー: プロパティは読み取り専用です。</em></pre>
<p>Setやプロパティ・セッターを使うこともできるが、プリミティブ値は不変であると考えるべきであるので、これらは有用ではない。</p>

<h2 id="Implementation">実施</h2>
<span id="Refs"></span><h3 id="Reference_Counting">Reference Counting</h3>
<p>AutoHotkey uses a basic reference counting mechanism to automatically free the resources used by an object when it is no longer referenced by the script. Understanding this mechanism can be essential for properly managing the lifetime of an object, allowing it to be deleted when it is no longer needed, and not before then.</p>
<p>An object's reference count is incremented whenever a reference is stored. When a reference is released, the count is used to determine whether that reference is the last one. If it is, the object is deleted; otherwise, the count is decremented. The following example shows how references are counted in some simple cases:</p>
<pre>
a := {Name: "Bob"}  <em>; Bob's ref count is initially 1</em>
b := [a]            <em>; Bob's ref count is incremented to 2</em>
a := ""             <em>; Bob's ref count is decremented to 1</em>
c := b.Pop()        <em>; Bob is transferred, ref count still 1</em>
c := ""             <em>; Bob is deleted...</em>
</pre>
<p>式内の関数、メソッド、または演算子によって返された一時参照は、その式の評価が完了または中止された後に解放されます。次の例では、新しい<a href="#GMem">GMem</a>オブジェクトはMsgBoxが返った後にのみ解放される：</p>
<pre>MsgBox <a href="lib/DllCall.htm">DllCall</a>("GlobalSize", "ptr", GMem(0, 20).ptr, "ptr")  <em>; 20</em></pre>
<p class="note"><strong>注：</strong>この例では、<a href="lib/DllCall.htm#ptr">Ptr</a>arg型が<code>Ptr</code>プロパティを持つオブジェクトを許可しているため、<code>.ptr</code>を省略することができました。しかし、上に示したパターンは、他のプロパティ名でも機能する。</p>
<p>オブジェクトへの最後の参照が解放されるときにコードを実行するには、<a href="#Custom_NewDelete">__Delete</a>メタ関数を実装します。</p>
<h4 id="refs-problems">Problems with Reference Counting</h4>
<p>Relying solely on reference counting sometimes creates catch-22 situations: an object is designed to free its resources when deleted, but would only be deleted if its resources are first freed. Specifically, this occurs when those resources are other objects or functions which retain a reference to the object, often indirectly.</p>
<p>A <em>circular reference</em> or <em>reference cycle</em> is when an object directly or indirectly refers to itself. If each reference which is part of the cycle is included in the count, the object cannot be deleted until the cycle is manually broken. For example, the following creates a reference cycle:</p>
<pre>parent := {}  <em>; parent: 1 (reference count)</em>
child := {parent: parent}  <em>; parent: 2, child: 1</em>
parent.child := child  <em>; parent: 2, child: 2</em></pre>
<p>If the variables <code>parent</code> and <code>child</code> are reassigned, the reference count for each object is decremented to 1. Both objects would be inaccessible to the script, but would not be deleted because the last references are not released.</p>
<p>A cycle is often less obvious than this, and can involve several objects. For example, <a href="lib/Gui.htm#ExRefCycle">ShowRefCycleGui</a> demonstrates a cycle involving a Gui, MenuBar, Menu and closures. The use of a separate object to handle GUI events is also prone to cycles, if the handler object has a reference to the GUI.</p>
<p>Non-cyclic references to an object can also cause issues. For instance, objects with a dependency on built-in functions like SetTimer or OnMessage generally cause the program to hold an indirect reference to the object. This would prevent the object from being deleted, which means that it cannot use __New and __Delete to manage the timer or message monitor.</p>
<p>Below are several strategies for solving issues like those described above.</p>
<p id="ref-avoid-cycles"><strong>Avoid cycles</strong>: If reference cycles are a problem, avoid creating them. For example, either <code>parent.child</code> or <code>child.parent</code> would not be set. This is often not practical, as related objects may need a way to refer to each other.</p>
<p>When defining event handlers for <a href="lib/GuiOnEvent.htm">OnEvent (Gui)</a>, avoid capturing the source Gui in a closure or bound function and instead utilize the Gui or Gui.Control parameter. Likewise for <a href="lib/Menu.htm#Add">Add (Menu)</a> and the callback's Menu parameter, but of course, a menu item which needs to refer to a Gui cannot use this approach.</p>
<p>In some cases, the other object can be retrieved by an indirect method which doesn't rely on a counted reference. For example, retain a HWND and use <code>GuiFromHwnd(hwnd)</code> to retrieve a <a href="lib/Gui.htm">Gui</a> object. Retaining a reference is not necessary to prevent deletion while the window is visible, as the Gui itself handles this.</p>
<p id="ref-break-cycles"><strong>Break cycles</strong>: If the script can avoid relying on reference counting and instead manage the lifetime of the object directly, it need only break the cycle when the objects are to be deleted:</p>
<pre>child.parent := unset  <em>; parent: 1, child: 2</em>
child := unset  <em>; parent: 1, child: 1</em>
parent := unset  <em>; both deleted</em></pre>
<p id="ref-dispose"><strong>Dispose</strong>: __Delete is called precisely when the last reference is released, so one might come to think of a simple assignment like <code>myGui := ""</code> as a cleanup step which triggers deletion of the object. Sometimes this is done explicitly when the object is no longer needed, but it is neither reliable nor truly showing the intent of the code. An alternative pattern is to define a Dispose or Destroy method which frees the objects resources, and design it to do nothing if called a second time. It can then also be called from __Delete, as a safeguard.</p>
<p>An object following this pattern would still need to break any reference cycles when it is <em>disposed</em>, otherwise some memory would not be reclaimed, and __Delete would not be called for other objects referenced by the object.</p>
<p>Cycles caused by a Gui object's event handlers, MenuBar or event sink object are automatically "broken" when <a href="lib/Gui.htm#Destroy">Destroy</a> is called, as it releases those objects. (This is demonstrated in the <a href="lib/Gui.htm#ExRefCycle">ShowRefCycleGui example</a>.) However, this would not break cycles caused by new properties which the script has added, as Destroy does not delete them.</p>
<p>Similar to the Dispose pattern, <a href="lib/InputHook.htm">InputHook</a> has a Stop method which must be called explicitly, so it does not rely on __Delete to signal when its operation should end. While operating, the program effectively holds a reference to the object which prevents it from being deleted, but this becomes a strength rather than a flaw: event callbacks can still be called and will receive the InputHook as a parameter. When operation ends, the internal reference is released and the InputHook is deleted if the script has no reference to it.</p>
<p id="ref-ptr"><strong>Pointers</strong>: Storing any number of pointer values does not affect the reference count of the object, since a pointer is just an integer. A pointer retrieved with <a href="#ObjPtr">ObjPtr</a> can be used to produce a reference by passing it to <a href="#ObjFromPtr">ObjFromPtrAddRef</a>. The AddRef version of the function must be used because the reference count will be decremented when the temporary reference is automatically released.</p>
<p>For example, suppose that an object needs to update some properties each second. A timer holds a reference to the callback function, which has the object bound as a parameter. Normally this would prevent the object from being deleted before the timer is deleted. Storing a pointer instead of a reference allows the object to be deleted regardless of the timer, so it can be managed automatically by __New and __Delete.</p>
<pre>a := SomeClass()
Sleep 5500  <em>; Let the timer run 5 times.</em>
a := ""
Sleep 3500  <em>; Prevent exit temporarily to show that the timer has stopped.</em>

class SomeClass {
	__New() {
        <em>; The closure must be stored so that the timer can be deleted later.
; Synthesize a counted reference each time the method needs to be called.</em>
        this.Timer := (p =&gt; ObjFromPtrAddRef(p).Update()).Bind(ObjPtr(this))
        SetTimer this.Timer, 1000
    }
	__Delete() {
        SetTimer this.Timer, 0
        <em>; If this object is truly deleted, all properties will be
        ; deleted and the following __Delete method will be called.
; This is just for confirmation and wouldn't normally be used.</em>
        this.Test := {__Delete:test =&gt; ToolTip("object deleted")}
    }
    <em>; This is just to demonstrate that the timer is running.
; Hypothetically, this class has some other purpose.</em>
    count := 0
	Update() =&gt; ToolTip(++this.count)
}</pre>
<p>A drawback of this approach is that the pointer is not directly usable as an object, and is not recognized as such by <a href="lib/Type.htm">Type</a> or the <a href="AHKL_DBGPClients.htm">debugger</a>. The script must be absolutely certain not to use the pointer after the object is deleted, as doing so is invalid and the result would be indeterminate.</p>
<p>If the pointer-reference is needed in multiple places, encapsulating it might make sense. For instance, <code>b := ObjFromPtrAddRef.Bind(ObjPtr(this))</code> would produce a <a href="misc/Functor.htm#BoundFunc">BoundFunc</a> which can be called (<code>b()</code>) to retrieve the reference, while <code>((this, p) =&gt; ObjFromPtrAddRef(p)).Bind(ObjPtr(this))</code> can be used as a property getter (the property would return a reference).</p>
<p id="ref-uncounted"><strong>Uncounted references</strong>: If the object's reference count accounts for a reference, we call it a <em>counted reference</em>, otherwise we call it an <em>uncounted reference</em>. The idea of the latter is to allow the script to store a reference which does not prevent the object from being deleted.</p>
<p class="note"><strong>Note:</strong> This is about how the object's reference count relates to a given reference as per the script's logic, and doesn't affect the nature of the reference itself. The program will still attempt to release the reference automatically at whatever time it would normally, so the terms <em>weak reference</em> and <em>strong reference</em> are unsuitable.</p>
<p>A counted reference can be turned into an uncounted reference by simply decrementing the object's reference count. This <strong>must</strong> be reversed before the reference is released, which <strong>must</strong> occur before the object is deleted. Since the point of an uncounted reference is to allow the object to be deleted without first manually unsetting the reference, generally the count must be corrected within that object's own <a href="#Custom_NewDelete">__Delete</a> method.</p>
<p>For example, __New and __Delete from the previous example can be replaced with the following.</p>
<pre>	__New() {
        <em>; The BoundFunc must be stored so that the timer can be deleted later.</em>
        SetTimer this.Timer := this.Update.Bind(this), 1000
        <em>; Decrement ref count to compensate for the AddRef done by Bind.</em>
        ObjRelease(ObjPtr(this))
    }
	__Delete() {
        <em>; Increment ref count so that the ref within the BoundFunc
        ; can be safely released.</em>
        ObjPtrAddRef(this)
        <em>; Delete the timer to release its reference to the BoundFunc.</em>
        SetTimer this.Timer, 0
        <em>; Release the BoundFunc. This may not happen automatically
        ; due to the reference cycle which exists now that the ref
        ; in the BoundFunc is counted again.</em>
        this.Timer := unset
        <em>; If this object is truly deleted, all properties will be
        ; deleted and the following __Delete method will be called.
; This is just for confirmation and wouldn't normally be used.</em>
        this.Test := {__Delete:test =&gt; ToolTip("object deleted")}
    }</pre>
<p>This can generally be applied regardless of where the uncounted reference is stored and what it is used for. The key points are:</p>
<ul>
  <li>Decrement the reference count (Release) <em>after</em> storing the reference.</li>
  <li>Increment the reference count (AddRef) <em>before</em> unsetting the reference.</li>
  <li>Explicitly unset the reference before __Delete returns (doing so before it is called is fine).</li>
</ul>
<p>The reference count must be incremented and decremented as many times as there are references which are intended to be uncounted. This may not be practical if the script cannot accurately predict how many references will be stored by some function.</p>

<h3 id="ObjPtr">オブジェクトへのポインタ</h3>
<p>As part of creating an object, some memory is allocated to hold the basic structure of the object. This structure is essentially the object itself, so we call its address a <em>pointer to the object</em>. An address is an integer value which corresponds to a location within the virtual memory of the current process, and is valid only until the object is deleted.</p>
<p>まれに、DllCallを介して外部コードにオブジェクトを渡したり、後で取り出すためにバイナリ・データ構造に格納したりする必要がある場合がある。オブジェクトのアドレスは、<code>address := ObjPtr(myObject)</code>で取得することができる。しかし、これは事実上オブジェクトへの参照を2つ作ることになり、プログラムは<em>myObject</em>の中の1つしか知らない。オブジェクトへの最後の<em>既知</em>の参照が解放された場合、オブジェクトは削除される。したがって、スクリプトはオブジェクトに参照を得たことを通知しなければならない。これは以下のようにできる（以下の2行は同等）：</p>
<pre>
ObjAddRef(address := ObjPtr(myObject))
address := ObjPtrAddRef(myObject)
</pre>
<p>スクリプトはまた、その参照を終了するときにオブジェクトに通知しなければならない：</p>
<pre>ObjRelease(アドレス)</pre>
<p>一般に、オブジェクトのアドレスの新しいコピーはそれぞれ、そのオブジェクトへの別の参照として扱われるべきです。したがって、スクリプトは、コピーを得たときに<a href="lib/ObjAddRef.htm">ObjAddRef</a>を呼び出し、コピーを失う直前に<a href="lib/ObjAddRef.htm">ObjRelease</a>を呼び出す必要があります。例えば、<code>x := address</code>のようにアドレスがコピーされるときは、必ず<a href="lib/ObjAddRef.htm">ObjAddRef</a>が呼ばれなければならない。同様に、スクリプトが<em>x</em>の処理を終えたら（あるいは<em>x</em>の値を上書きしようとしたら）、<a href="lib/ObjAddRef.htm">ObjRelease</a>を呼び出すべきである。</p>
<p id="ObjFromPtr">アドレスを適切な参照に変換するには、ObjFromPtr関数を使用します：</p>
<pre>myObject := ObjFromPtr(address)</pre>
<p>ObjFromPtrは、<em>アドレス</em>がカウントされた参照であると仮定し、その所有権を主張する。つまり、<code>myObject := ""</code>とすると、もともと<em>address</em>で表されていた参照が解放される。それ以降の<em>アドレス</em>は無効とみなされる。その代わりに新しいリファレンスを作成するには、以下のいずれかを使用する：</p>
<pre>
ObjAddRef(address), myObject := ObjFromPtr(address)
myObject := ObjFromPtrAddRef(address)
</pre>

</body>
</html>
