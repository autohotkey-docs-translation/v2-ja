<!DOCTYPE HTML>
<html lang="ja">
<head>
<title>スクリプト - 定義と使用法｜AutoHotkey v2</title>
<meta name="description" content="スクリプト全般、長い行の分割、スクリプトのコンパイル、コマンドラインパラメータの渡し方、コードページ、デバッグについて詳しく学ぶ。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>スクリプト</h1>
<p>関連トピック：</p>
<ul>
  <li><a href="Program.htm">プログラムの使用</a>：AutoHotkeyの一般的な使い方。</li>
  <li><a href="Concepts.htm">概念と慣習</a>：AutoHotkeyで利用される様々な概念についての一般的な説明。</li>
  <li><a href="Language.htm">スクリプト言語</a>：構文に関する具体的な詳細（スクリプトの書き方）。</li>
</ul>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#intro">はじめに</a></li>
  <li><a href="#auto">スクリプトの起動（自動実行スレッド）</a>：スクリプトを起動したら即座にアクションを起こし、デフォルト設定を変更する。</li>
  <li><a href="#continuation">長い線を短い線に分割する</a>：これにより、スクリプトの可読性と保守性が向上する。</li>
  <li><a href="#lib">スクリプトライブラリフォルダ</a></li>
  <li><a href="#ahk2exe">スクリプトをEXEに変換する(Ahk2Exe)</a>：.ahkスクリプトをどのPCでも実行できる.exeファイルに変換します。</li>
  <li><a href="#cmd">スクリプトにコマンドラインパラメータを渡す</a>：変数A_Argsには、入力されるパラメータが格納される。</li>
  <li><a href="#cp">スクリプトファイルのコードページ</a>：スクリプトで非ASCII文字を安全に使用する。</li>
  <li><a href="#debug">スクリプトのデバッグ</a>：誤動作するスクリプトの欠陥を見つける方法。</li>
</ul>
<h2 id="intro">はじめに</h2>
<p>各スクリプトは、プログラム（AutoHotkey.exe）によって実行される行を含むプレーンテキストファイルです。スクリプトには、<a href="Hotkeys.htm">ホットキー</a>や <a href="Hotstrings.htm">ホットストリング</a>が含まれることもありますし、それらだけで構成されることもあります。しかし、ホットキーやホットストリングがない場合、スクリプトは起動した瞬間に上から下へと順次機能を実行する。</p>
<p>プログラムはスクリプトを一行ずつメモリにロードする。ロード中、スクリプトは<a href="misc/Performance.htm">最適化</a>され、検証される。構文エラーはすべて表示され、スクリプトを実行する前に修正する必要があります。</p>

<h2 id="auto">スクリプトの起動（自動実行スレッド）</h2>
<p>スクリプトが読み込まれた後、<em>自動実行スレッド</em>は、スクリプトの先頭行で実行を開始し、<a href="lib/Return.htm">Return</a>、<a href="lib/ExitApp.htm">ExitApp</a>、<a href="lib/Exit.htm">Exit</a>などの停止指示があるまで実行を続ける。スクリプトの物理的な端は、<a href="lib/Exit.htm">Exit</a>としても機能します。</p>
<p id="persistent"><a href="Hotkeys.htm">ホットキー</a>、<a href="Hotstrings.htm">ホットストリング</a>、表示可能な<a href="lib/Gui.htm">GUI</a>、アクティブ<a href="lib/SetTimer.htm">タイマー</a>、<a href="lib/OnClipboardChange.htm">クリップボードモニター</a>、<a href="lib/InputHook.htm">InputHooks</a>がなく、<a href="lib/Persistent.htm">Persistent</a>関数を呼び出していない場合、スクリプトは起動完了後に終了します。Otherwise, it will stay running in an idle state, responding to events such as <a href="Hotkeys.htm">hotkeys</a>, <a href="Hotstrings.htm">hotstrings</a>, <a href="lib/GuiOnEvent.htm">GUI events</a>, <a href="lib/Menu.htm">custom menu items</a>, and <a href="lib/SetTimer.htm">timers</a>. 起動完了後にこれらの条件が変更された場合（たとえば、最後のタイマーが無効になった場合）、最後に実行されたスレッドが完了するか、最後のGUIが閉じると、スクリプトが終了することがあります。</p>
<p>新しい<a href="misc/Threads.htm">スレッドが</a>（<a href="Hotkeys.htm">ホットキー</a>、<a href="Hotstrings.htm">ホットストリング</a>、<a href="lib/SetTimer.htm">タイマー</a>、その他のイベントによって）起動されるたびに、以下の設定が自動実行スレッドからコピーされます。自動実行スレッドによって設定されていない場合は、標準のデフォルトが適用される（以下の各ページに記載）：<a href="lib/CoordMode.htm">CoordMode</a>、<a href="lib/Critical.htm">Critical</a>、<a href="lib/DetectHiddenText.htm">DetectHiddenText</a>、<a href="lib/DetectHiddenWindows.htm">DetectHiddenWindows</a>、<a href="lib/FileEncoding.htm">FileEncoding</a>、<a href="lib/ListLines.htm">ListLines</a>、<a href="lib/SendLevel.htm">SendLevel</a>、<a href="lib/SendMode.htm">SendMode</a>、<a href="lib/SetControlDelay.htm">SetControlDelay</a>、<a href="lib/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>、<a href="lib/SetKeyDelay.htm">SetKeyDelay</a>、<a href="lib/SetMouseDelay.htm">SetMouseDelay</a>、<a href="lib/SetRegView.htm">SetRegView</a>、<a href="lib/SetStoreCapsLockMode.htm">SetStoreCapsLockMode</a>、<a href="lib/SetTitleMatchMode.htm">SetTitleMatchMode</a>、<a href="lib/SetWinDelay.htm">SetWinDelay</a>、<a href="lib/Thread.htm">Thread</a>。</p>
<p>各<a href="misc/Threads.htm">スレッド</a>は上記の設定のコレクションを保持するため、これらの設定を変更しても他のスレッドには影響しない。</p>
<p>上記の関数の「デフォルト設定」とは、通常、自動実行スレッドの現在の設定を指し、プログラム定義のデフォルト設定と同じように開始される。</p>
<p>伝統的に、スクリプトの最上部は<em>自動実行セクション</em>と呼ばれてきた。しかし、自動実行スレッドはスクリプトの先頭だけに限定されるわけではない。自動実行スレッドで呼び出される関数も、デフォルト設定に影響を与える可能性がある。ディレクティブや関数、ホットキー、ホットストリング、クラス定義は、実行中に遭遇するとスキップされるため、起動コードを各ファイル全体に配置することが可能です。例えば、ホットキーのグループで使用されるグローバル変数は、スクリプトの先頭ではなく、それらのホットキーの上（または下）で初期化することができます。</p>

<h2 id="continuation">長い線を短い線に分割する</h2>
<p>長い行を小さな行の集まりに分割することで、読みやすさと保守性を向上させることができる。このような行は、スクリプトが起動した瞬間にメモリ上にマージされるため、スクリプトの実行速度が低下することはない。</p>
<p>3つの方法があり、一般的に組み合わせて使うことができる：</p>
<ul>
  <li><a href="#continuation-line">継続オペレーター</a>：式演算子で行を開始または終了し、前の行または次の行に連結する。</li>
  <li><a href="#continuation-expr">囲い込みによる継続</a>：()、[]、{}で囲まれた部分式は、ほとんどの場合、自動的に複数行にまたがることができます。</li>
  <li><a href="#continuation-section">継続の部</a>：マージする行のグループをマークし、行間に挿入するテキスト（またはコード）などのオプションを追加する。</li>
</ul>
<p id="continuation-line"><strong>継続演算子：</strong>カンマまたはその他の<a href="Variables.htm#Operators">式演算子</a>（++と--を除く）で始まる行は、その直上の行に自動的にマージされる。同様に、式演算子で終わる行は、自動的にその下の行にマージされる。次の例では、2行目はコンマで始まっているため、1行目に追加される：</p>
<pre>FileAppend "This is the text to append.`n"   <em>; A comment is allowed here.</em>
    <strong>,</strong> A_ProgramFiles "\SomeApplication\LogFile.txt"  <em>; Comment.</em></pre>
<p>同様に、次の2行は「and」または「or」で始まるので、1行にまとめられる：</p>
<pre>if Color = "Red" or Color = "Green"  or Color = "Blue"   <em>; Comment.</em>
    <strong>or</strong> Color = "Black" or Color = "Gray" or Color = "White"   <em>; Comment.</em>
    <strong>and</strong> ProductIsAvailableInColor(Product, Color)   <em>; Comment.</em></pre>
<p><a href="Variables.htm#ternary">三項演算子も</a>良い候補である：</p>
<pre>ProductIsAvailable := (Color = "Red")
    <strong>?</strong> false  <em>; We don't have any red products, so don't bother calling the function.</em>
    <strong>:</strong> ProductIsAvailableInColor(Product, Color)</pre>
<p>以下の例は上記と同等である：</p>
<pre>FileAppend "This is the text to append.`n"<strong>,</strong>   <em>; A comment is allowed here.</em>
    A_ProgramFiles "\SomeApplication\LogFile.txt"  <em>; Comment.</em>

if Color = "Red" or Color = "Green"  or Color = "Blue" <strong>or</strong>   <em>; Comment.</em>
    Color = "Black" or Color = "Gray" or Color = "White" <strong>and</strong>   <em>; Comment.</em>
    ProductIsAvailableInColor(Product, Color)   <em>; Comment.</em>

ProductIsAvailable := (Color = "Red") <strong>?</strong>
    false <strong>:</strong> <em>; We don't have any red products, so don't bother calling the function.</em>
    ProductIsAvailableInColor(Product, Color)</pre>
<p>上の例で使われているインデントは任意だが、どの行がその上の行に属するかを示すことで、より明瞭になるかもしれない。また、上記の例の行間や行末に空行や<a href="Language.htm#comments">コメント</a>を追加してもよい。</p>
<p>継続演算子は、自動置換ホットストリングや<a href="lib/_HotIf.htm">#HotIf</a>以外のディレクティブでは使用できません。</p>
<p id="continuation-expr"><strong>囲みによる継続：</strong>ある行に式や関数・プロパティの定義があり、その定義が閉じていない<code>(</code>/<code>[</code>/<code>{</code>場合、開閉記号の数が釣り合うまで後続の行と結合される。言い換えれば、括弧、ブラケット、ブレースで囲まれた部分式は、ほとんどの場合、自動的に複数行にまたがることができる。事例：</p>
<pre>
myarray := [
  "item 1",
  "item 2",
]
MsgBox(
    "The value of item 2 is " myarray[2],
    "Title",
    "ok iconi"
    )
</pre>
<p>継続表現は両方のタイプの<a href="Language.htm#comments">コメント</a>を含むことができる。</p>
<p>継続表現は通常の<a href="#continuation-section">継続セクション</a>を含むことができる。したがって、式を含むすべての行と同様に、エスケープされていない開括弧（<code>(</code>）で始まる行は、同じ行に閉括弧（<code>)</code>）がない限り、継続セクションの開始とみなされる。</p>
<p>引用符で囲まれた文字列は、この方法だけでは複数行にまたがることはできない。ただし、上記を参照のこと。</p>
<p>囲みによる継続は、継続演算子と組み合わせることができる。事例：</p>
<pre>myarray :=  <em>; The assignment operator causes continuation.</em>
[  <em>; Brackets enclose the following two lines.</em>
  "item 1",
  "item 2",
]</pre>
<p>行末のブレース（<code>{</code>）は、<a href="Language.htm#object-literal">オブジェクト・リテラル</a>の開始ではなく、ブロックの開始（<a href="lib/Block.htm#otb">OTBスタイル</a>）として解釈されるべきであるとプログラムが判断した場合、継続を引き起こさない。具体的には（優先順位の高い順に）：</p>
<ul>
  <li>中括弧の前に閉じない<code>(</code>/<code>[</code>/<code>{</code>がある場合、中括弧はブロックの開始と解釈されることはない。例えば、<code>If ({</code>のブレースはオブジェクト・リテラルの開始である。</li>
  <li>オブジェクト・リテラルは法律上、<code>)</code>または<code>]</code>に続くことはできないので、中括弧がこれらの記号のどちらかに続く場合（空白を除く）、（関数やプロパティ定義のような）ブロックの開始として解釈される。</li>
  <li>ボディを必要とする（したがってOTBをサポートする）<a href="Language.htm#control-flow">制御フロー文の</a>場合、中括弧は、<code>:= {</code>や <code>for x <strong>in</strong> {</code>のような演算子が先行する場合に限り、オブジェクト・リテラルの開始とすることができる。特に、<code>Loop {</code>の中括弧は常にブロック開始であり、<code>If {</code>と <code>While {</code>は常にエラーである。</li>
</ul>
<p>中括弧は、本文を必要としない関数呼び出し、式、制御フロー文であれば、行の継続のために安全に使うことができる。事例：</p>
<pre>myfn() {
    return {
        key: "value"
    }
}</pre>
<p id="continuation-section"><strong>継続セクション：</strong>この方法は、多数の行を統合する場合や、行が他の方法に適さない場合に使用する。このメソッドは<a href="Hotstrings.htm">自動置換ホットストリング</a>に特に有効ですが、どんな<a href="Variables.htm#Expressions">式</a>にも使えます。事例：</p>
<pre><em>; EXAMPLE #1:</em>
Var := "
(
A line of text.
By default, the hard carriage return (Enter) between the previous line and this one will be stored.
	This line is indented with a tab; by default, that tab will also be stored.
Additionally, "quote marks" are <a href="#continuation_quotes">automatically escaped</a> when appropriate.
)"

<em>; EXAMPLE #2:</em>
FileAppend "
(
Line 1 of the text.
Line 2 of the text. By default, a linefeed (`n) is present between lines.
)", A_Desktop "\My File.txt"</pre>
<p>上記の例では、一連の線は上下に括弧で囲まれている。これは<em>継続区間</em>として知られている。閉じ括弧の後のコードも（区切り記号なしで）他の行と結合されるが、開き括弧と閉じ括弧は含まれないことに注意。</p>
<p>継続セクションの上の行が<a href="Concepts.htm#names">名前</a>文字で終わっており、そのセクションが引用符で囲まれた文字列で始まっていない場合、名前と継続セクションの内容を区切るために、1つのスペースが自動的に挿入される。</p>
<p id="continuation_quotes">上記の例のように、引用符で囲まれた文字列の中で継続セクションが始まる場合、引用符は自動的にエスケープされる（つまり、リテラル文字として解釈される）。それ以外の場合、引用符は通常と同じように機能する。つまり、継続セクションは引用符で囲まれた文字列を含むことができる。</p>
<p id="continuation_defaults">デフォルトでは、継続セクション内の最初の行のインデントに基づいて、先頭のスペースやタブが省略される。最初の行にスペースとタブが混在している場合、最初の種類の文字だけがインデントとして扱われます。もし、ある行が最初の行より小さくインデントされたり、間違った文字でインデントされた場合、その行のすべての先頭の空白はそのまま残されます。 </p>
<p>By default, trailing spaces or tabs are omitted.</p>
<p>継続セクションのデフォルトの動作は、セクションの開始括弧の右側に以下のオプションを1つ以上含めることで上書きすることができる。複数のオプションがある場合は、それぞれをスペースで区切る。事例：<code class="no-highlight">( LTrim Join|</code>。</p>
<p id="Join"><strong>Join</strong><em>String</em>：線をどのようにつなげるかを指定します。If this option is not used, each line except the last will be followed by a linefeed character (`n). If <em>String</em> is omitted, lines are connected directly to each other without any characters in between. Otherwise, specify for <em>String</em> a string of up to 15 characters. 例えば、<code>Join`s</code>は最後の行を除く各行の後にスペースを挿入する。他の例としては、行と行の間にCR+LFを挿入する<code>Join`r`n</code>がある。同様に、<code>Join|</code>は行間にパイプを挿入する。To have the final line in the section also ended by <em>String</em>, include a blank line immediately above the section's closing parenthesis.</p>
<p id="LTrim"><strong>LTrim：</strong>各行の先頭のスペースとタブをすべて削除する。<a href="#continuation_defaults">デフォルトの「スマート」な振る舞い</a>のため、これは通常不要である。</p>
<p id="LTrim0"><strong>LTrim0</strong>（LTrimの後に0が続く）：行頭のスペースとタブの省略をオフにする。</p>
<p id="RTrim0"><strong>RTrim0</strong>（RTrimの後に0が続く）：行末のスペースとタブの省略をオフにする。</p>
<p id="CommentOption"><strong>Comments</strong>（または <strong>Comment</strong> または <strong>Com</strong> または <strong>C</strong>）：継続セクション内での<a href="Language.htm#comments">セミコロン・コメント</a>を許可する（ただし<code>/*..*/</code>は不可）。そのようなコメントは（その左にあるスペースやタブとともに）、リテラルテキストとして扱われるのではなく、結合結果から完全に省略される。各コメントは、行の右側に表示することも、それ自体で改行することもできる。</p>
<p id="accent"><strong>`</strong>（アクセント）：各バックティック文字を<a href="misc/EscapeChar.htm">エスケープ文字</a>としてではなく、文字通りに扱う。また、<code>`r</code>や<code>`t</code>のような明示的に指定されたエスケープシーケンスも変換されなくなる。</p>
<p id="non-continuation"><strong>(</strong> または <strong>)</strong>：最初の開始括弧の右側に開始括弧または閉じ括弧がある場合（<a href="#Join">Join</a>オプションのパラメータを除く）、その行は継続セクションの開始ではなく、式として再解釈される。これにより、<code>(x.y)[z]()</code>のような式を行頭で使用できるようになり、また、<a href="#continuation-expr">複数行の式</a>を <code>((</code>や<code>(MyFunc(</code>のように行で始めることもできる。</p>

<h3 id="continuation-remarks">備考</h3>
<p>`n（改行）や `t（タブ）などの<a href="misc/EscapeChar.htm">エスケープシーケンス</a>は、<a href="#accent">アクセント（`）オプション</a>が指定されている場合を除き、継続セクションの内部でサポートされています。</p>
<p><a href="#CommentOption">commentオプション</a>がない場合、セミコロンと/*..*/コメントは、リテラルテキストとみなされるため、継続セクションの内部ではサポートされない。ただし、セクションの最下行と最上行にコメントを入れることができる。事例：</p>
<pre>FileAppend "   <em>; Comment.
; Comment.</em>
( LTrim Join    <em>; Comment.</em>
    &nbsp;; This is <strong>not</strong> a comment; it is literal. Include the word <i>Comments</i> in the line above to make it a comment.
)", "C:\File.txt"   <em>; Comment.</em></pre>
<p>上記の結果、セミコロンを継続セクション内で<a href="misc/EscapeChar.htm">エスケープ</a>する必要はない。</p>
<p>閉じ括弧は継続セクションの終わりを示すので、リテラルな閉じ括弧で行を開始するには、その前にアクセント記号/バックチックを付ける：<code>`)</code>。ただし、<a href="#accent">アクセント(`)オプション</a>との併用はできない。</p>
<p>継続セクションの直後に、別の継続セクションの開括弧を含む行を続けることができる。これにより、1つのラインを構築する過程で、上記のオプションを変化させることができる。</p>
<p><a href="lib/_Include.htm">Include</a>による継続セクションの断片的な構築はサポートされていない。</p>

<h2 id="lib">スクリプトライブラリフォルダ</h2>
<p>ライブラリフォルダは、<a href="lib/_Include.htm">#Include</a>によって他のスクリプトが利用する共有スクリプトを保管するための、いくつかの標準的な場所を提供する。ライブラリ・スクリプトには通常、このように使用・再利用されるように設計された関数やクラスが含まれている。ライブラリスクリプトをこれらの場所のいずれかに置くと、他の人と共有でき、複数のセットアップで動作するスクリプトを簡単に書くことができます。図書館の場所は以下の通り：</p>
<pre><a href="Variables.htm#ScriptDir">A_ScriptDir</a> "\Lib\"  <em>; Local library.</em>
<a href="Variables.htm#MyDocuments">A_MyDocuments</a> "\AutoHotkey\Lib\"  <em>; User library.</em>
"directory-of-the-currently-running-AutoHotkey.exe\Lib\"  <em>; Standard library.</em></pre>
<p>ライブラリフォルダは上記の順序で検索されます。</p>
<p>例えば、スクリプトに<code>#Include &lt;MyLib&gt;</code>という行が含まれていると、プログラムはローカル・ ライブラリから「MyLib.ahk」という名前のファイルを探す。そこで見つからなければ、ユーザー・ライブラリーを探し、次に標準ライブラリーを探す。それでも一致するものが見つからず、ライブラリ名にアンダースコア（例：<code>MyPrefix_MyFunc</code>）が含まれている場合、プログラムは接頭辞（例：<code>MyPrefix.ahk</code>）だけで再度検索を行います。</p>
<p>通常、ライブラリ・ファイルには、ファイル名と同じ名前の関数やクラスが1つだけ含まれるのが通例だが、そのファイルによってのみ呼び出されるプライベート関数が含まれることもある。しかし、このような関数は、グローバル名前空間に存在するため、かなり明確な名前を持つ必要がある。</p>

<h2 id="ahk2exe">スクリプトをEXEに変換（Ahk2Exe）</h2>
<p>A script compiler (courtesy of fincs, with additions by TAC109) is available as a separate automatic download.</p>
<p>つまり、スクリプトを実行するためにAutoHotkey.exeは必要ありません。コンパイル・プロセスは、以下を含む実行可能ファイルを作成する：AutoHotkeyインタープリタ、スクリプト、スクリプトに<a href="lib/_Include.htm">含まれる</a>ファイル、<a href="lib/FileInstall.htm">FileInstall</a>関数で取り込んだファイル。<a href="misc/Ahk2ExeDirectives.htm">コンパイラのディレクティブ</a>を使って、追加ファイルをインクルードすることができる。</p>
<p>v1.1とv2のスクリプトには同じコンパイラが使用される。コンパイラーは、提供されたベースファイルのメジャーバージョンをチェックすることで、スクリプトのバージョンを区別する。</p>
<h3 id="ahk2exe-toc">コンパイラ・トピックス</h3>
<ul>
  <li><a href="#ahk2exe-run">コンパイラの実行</a></li>
  <li><a href="#ahk2exe-base">基本実行ファイル</a></li>
  <li><a href="#CompilerDirectives">スクリプト・コンパイラ・ディレクティブ</a></li>
  <li><a href="#mpress">コンパイル済みスクリプトの圧縮</a></li>
  <li><a href="#information">背景情報</a></li>
</ul>
<h3 id="ahk2exe-run">コンパイラの実行</h3>
<p>Ahk2Exeは次のような使い方ができます：</p>
<ul>
  <li>
    <p><strong>GUIインターフェース：</strong>スタートメニューの「.ahkを.exeに変換」を実行します。（GUIを起動した後、ウィンドウが表示されるまで一時停止することがある。詳細は<a href="#information">背景情報</a>を参照。）</p>
  </li>
  <li>
    <p><strong>右クリックします：</strong>開いているエクスプローラウィンドウで、任意の.ahkファイルを右クリックし、「Compile Script」を選択します（AutoHotkeyのインストール時にスクリプトコンパイラオプションが選択されている場合のみ使用可能）。これにより、スクリプトと同じベースファイル名のEXEファイルが作成され、しばらくすると同じディレクトリに現れる。注：EXEファイルは、上記の方法#1で最後に保存したものと同じカスタムアイコン、.binファイル、<a href="#mpress">圧縮</a>設定、またはスクリプト内の関連する<a href="misc/Ahk2ExeDirectives.htm">コンパイラディレクティブ</a>で指定されたものを使用して作成されます。</p>
  </li>
  <li id="ahk2exeCmd">
    <p><strong>コマンドライン：</strong>コンパイラーは、以下に示すパラメーターを使用してコマンドラインから実行することができる。コマンドラインパラメーターが使われた場合、<code class="no-highlight">/gui</code>が使われない限り、スクリプトは直ちにコンパイルされる。<code class="no-highlight">/gui</code>または<code class="no-highlight">/in</code>パラメータが1つなければならないことを除いて、すべてのパラメータはオプションである。</p>
    <style>
      #param_pairs td:not(:last-child) {
        white-space: nowrap;
      }
    </style>
    <table class="info" id="param_pairs">
      <tr>
        <th abbr="Param">パラメータペア</th>
        <th>意味</th>
      </tr>
      <tr id="SlashIn">
        <td>/in <i>script_name</i></td>
        <td>コンパイルするスクリプトのパスと名前。これは、<code class="no-highlight">/gui</code>が使用されていない限り、他のパラメータが使用されている場合は必須である。</td>
      </tr>
      <tr id="SlashOut">
        <td>/out <i>exe_name</i></td>
        <td>作成される出力.exeのパス名。デフォルトは、入力ファイルのディレクトリベース名と拡張子.exe、またはスクリプト内の関連する<a href="misc/Ahk2ExeDirectives.htm">コンパイラディレクティブ</a>である。</td>
      </tr>
      <tr id="slashIcon">
        <td>/icon <i>icon_name</i></td>
        <td>使用するアイコンファイル。デフォルトは、GUIインターフェイスに最後に保存されたアイコンか、スクリプトの<a href="misc/Ahk2ExeDirectives.htm#SetMainIcon">SetMainIcon</a>コンパイラディレクティブです。</td>
      </tr>
      <tr id="SlashBase">
        <td>/base <i>file_name</i></td>
        <td>使用するベースファイル（.binまたは.exeファイル）。使用するベースファイルのメジャーバージョンは、コンパイルするスクリプトのバージョンと同じでなければならない。デフォルトは、GUIインターフェイスで最後に保存されたベースファイル名、またはスクリプト内の任意の<a href="misc/Ahk2ExeDirectives.htm#Bin">Base</a>コンパイラディレクティブです。</td>
      </tr>
      <tr id="SlashResourceID">
        <td>/resourceid <i>name</i></td>
        <td><a href="#SlashBase">.exe ベースファイル</a>を使用するコンパイルのメインスクリプトに使用する非標準のリソース ID を割り当てます（「<a href="Program.htm#embedded-scripts">埋め込みスクリプト</a>」を参照）。数値リソースIDは、ハッシュ記号（#）に続く10進数で構成されなければならない。デフォルトは#1、またはスクリプト中の<a href="misc/Ahk2ExeDirectives.htm#ResourceID">ResourceID</a>コンパイラディレクティブ。</td>
      </tr>
      <tr id="SlashCp">
        <td>/cp <i>codepage</i></td>
        <td>スクリプトファイルの読み込みに使われるデフォルトのコードページを上書きする。取り得る値のリストについては、<a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">コードページ識別子</a>を参照のこと。Unicodeスクリプトはバイトオーダーマーク（BOM）で始まるべきであるので、このパラメータの使用は不要であることに注意してください。</td>
      </tr>
      <tr id="SlashCompress">
        <td>/compress <i>n</i></td>
        <td><a href="#mpress">Compress</a> the exe?0 = no, 1 = use MPRESS if present, 2 = use UPX if present. デフォルトは、GUI インターフェースで最後に保存された設定です。</td>
      </tr>
      <tr id="SlashGui">
        <td>/gui</td>
        <td>すぐにコンパイルする代わりにGUIを表示する。その他のパラメーターは、GUIで最後に保存した設定を上書きするために使用できる。<code>/in</code> is optional in this case.</td>
      </tr>
      <tr id="SlashGuiSilent">
        <td>/silent [verbose]</td>
        <td>すべてのメッセージ・ボックスを無効にし、代わりに標準エラー・ストリーム（stderr）にエラーを出力する。stderrが失敗した場合は、標準出力ストリーム（stdout）にエラーを出力する。その他のメッセージも標準出力に出力される。オプションで<code>verbose</code>と入力すると、ステータス・メッセージを標準出力にも出力する。</td>
      </tr>
      <tr id="SlashAhk">
        <td class="warning"><strong>非推奨：</strong><br>/ahk <i>file_name</i></td>
        <td class="warning">スクリプトのコンパイル時にユーティリティとして使用するAutoHotkey.exeのパス名。</td>
      </tr>
      <tr id="SlashMpress">
        <td class="warning"><strong>非推奨：</strong><br>/mpress <i>0or1</i></td>
        <td class="warning">MPRESSでexeを<a href="#mpress">圧縮</a>しますか？0 = no, 1 = yes. デフォルトは、GUI インターフェースで最後に使用された設定です。</td>
      </tr>
      <tr id="SlashBin">
        <td class="warning"><strong>非推奨：</strong><br>/bin <i>file_name</i></td>
        <td class="warning">使用する .bin ファイル。デフォルトは、GUIインターフェイスで最後に保存された.binファイル名です。</td>
      </tr>
    </table>
    <p>事例：</p>
    <pre class="no-highlight">Ahk2Exe.exe /in "MyScript.ahk" /icon "MyIcon.ico"</pre>
  </li>
</ul>
<p>注：</p>
<ul>
  <li>スペースを含むパラメータは二重引用符で囲む必要があります。</li>
  <li>通常、コンパイルによってスクリプトのパフォーマンスが向上することはない。</li>
  <li><a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a>と <a href="Variables.htm#AllowMainWindow">A_AllowMainWindow</a>は、コンパイルされたスクリプトの動作に影響します。</li>
  <li>The built-in variable <a href="Variables.htm#IsCompiled">A_IsCompiled</a> contains 1 if the script is running in compiled form, otherwise 0.</li>
  <li>Ahk2Exe にパラメータが渡されると、コンパイルの成否を示すメッセージが標準出力に書き出されます。このメッセージはコマンドプロンプトには表示されないが、出力をファイルにリダイレクトするなどの方法で「キャッチ」することができる。 </li>
  <li>さらに失敗した場合、Ahk2Exeは発生したエラーの種類を示す終了コードを持っています。これらのエラーコードは<a href="https://github.com/AutoHotkey/Ahk2Exe/blob/master/ErrorCodes.md">GitHub（ErrorCodes.md）</a>で見ることができる。</li>
</ul>
<p>コンパイラーのソースコードと新しいバージョンは<a href="https://github.com/AutoHotkey/Ahk2Exe">GitHub</a>で見ることができる。</p>

<h3 id="ahk2exe-base">基本実行ファイル</h3>
<p>コンパイルされた各スクリプト.exeは、インタプリタを実装した実行ファイルをベースにしている。Compilerディレクトリに含まれる基本ファイルの拡張子は「.bin」である。これらは、外部スクリプトファイルを読み込む機能を含まないバージョンのインタープリターである。代わりに、プログラムは「&gt;AUTOHOTKEY SCRIPT&lt;」という名前のWin32 (RCDATA)リソースを探し、それをロードするか、見つからなければ失敗する。</p>
<p>標準のAutoHotkey実行ファイルは、ID 1のWin32 (RCDATA)リソースを埋め込むことで、コンパイル済みスクリプトのベースとして使用することもできます。（追加のスクリプトは<a href="misc/Ahk2ExeDirectives.htm#AddResource">AddResource</a>コンパイラディレクティブで追加できます。）　これにより、コンパイルされたスクリプト.exeを<a href="#SlashScript">/script</a>スイッチで使用し、メインの埋め込みスクリプト以外のスクリプトを実行することができます。詳しくは<a href="Program.htm#embedded-scripts">埋め込みスクリプト</a>をご覧ください。</p>

<h3 id="CompilerDirectives">スクリプト・コンパイラ・ディレクティブ</h3>
<p>スクリプトコンパイラディレクティブは、スクリプトのコンパイル方法の詳細を指定します。いくつかの特徴を挙げよう：</p>
<ul>
  <li>バージョン情報（名前、説明、バージョン...など）を変更する機能。</li>
  <li>コンパイルされたスクリプトにリソースを追加する機能。</li>
  <li>コンパイルのいくつかの雑多な面を微調整する能力。</li>
  <li>コンパイルされたスクリプトからコードセクションを削除する機能。</li>
</ul>
<p>詳しくは<a href="misc/Ahk2ExeDirectives.htm">スクリプト・コンパイラ・ディレクティブ</a>を参照してください。</p>

<h3 id="mpress">コンパイル済みスクリプトの圧縮</h3>
<p>Ahk2Exeはコンパイルされたスクリプトを圧縮するためにMPRESSまたはUPXフリーウェアをオプションで使用します。<strong>MPRESS.exe</strong>および/または<strong>UPX.exe</strong>がAutoHotkeyがインストールされた「Compiler」サブフォルダにコピーされている場合、<code>/compress</code>パラメータまたはGUI設定の指示に従い、どちらかを使用して.exeを圧縮することができます。 </p>
<p><strong>MPRESS:</strong> <a href="https://www.autohotkey.com/mpress/mpress_web.htm">archived official website</a> (downloads and information) | <a href="https://www.autohotkey.com/mpress/mpress.219.zip">direct download</a> (95 KB)</p>
<p><strong>UPX:</strong> <a href="https://upx.github.io/">official website</a> (downloads and information)</p>
<p><strong>注：</strong>スクリプトの実行ファイルを圧縮すると、メモ帳のようなプレーンテキストエディタやPEリソースエディタを使って、スクリプトのソースコードを気軽に閲覧することができなくなりますが、そのような目的に特化したツールによってソースコードが抽出されることは防げません。</p>

<h3 id="information">背景情報</h3>
 <p>以下のフォルダ構成がサポートされており、実行バージョンの<code>Ahk2Exe.exe</code>は、以下に示す1つ目の \compilerディレクトリにあります：</p>
<pre class="no-highlight">\AutoHotkey
   AutoHotkeyA32.exe
   AutoHotkeyU32.exe
   AutoHotkeyU64.exe
   \Compiler
      Ahk2Exe.exe  <em>; the master version of Ahk2Exe</em>
      ANSI 32-bit.bin
      Unicode 32-bit.bin
      Unicode 64-bit.bin
   \AutoHotkey v2.0-a135
      AutoHotkey32.exe
      AutoHotkey64.exe
      \Compiler
   \v2.0-beta.1
      AutoHotkey32.exe
      AutoHotkey64.exe</pre>
<p>ベースファイル検索アルゴリズムは、Ahk2Exeの起動時に短時間実行され、以下のように動作します：</p>
<p>修飾されたAutoHotkeyの.exeファイルとすべての.binファイルは、コンパイラのディレクトリ、コンパイラの親ディレクトリ、および<code>AutoHotkey</code>または<code>V</code>で始まり、<code>AutoHotkey_H</code>で始まらないディレクトリ名を持つコンパイラの兄弟ディレクトリで検索されます。選択されたディレクトリは再帰的に検索される。検出されたAutoHotkey.exeファイルは除外され、AutoHotkeyA32.exe、AutoHotkey64.exeなどのファイルと、検出されたすべての.binファイルが残ります。含まれるすべての.exeファイルは、<code>AutoHotkey</code>で始まる名前と、<code>AutoHotkey</code>という単語を含むファイル説明が必要で、バージョンは<code class="no-highlight">1.1.34+</code>または<code class="no-highlight">2.0-a135+</code>でなければなりません。</p>
<p>コンパイルを成功させるには、AutoHotkeyインタプリタのバージョンも（ユーティリティとして）必要で、同様のアルゴリズムで選択されます。ほとんどの場合、使用されるインタープリターのバージョンは、ユーザーがコンパイル用に選択したベースファイルのバージョンと一致する。</p>


<h2 id="cmd">スクリプトにコマンドラインパラメータを渡す</h2>
<p>スクリプトはコマンドラインパラメーターをサポートする。形式：</p>
<pre>AutoHotkey.exe [<i>Switches</i>] [<i>Script Filename</i>] [<i>Script Parameters</i>]</pre>
<p>また、コンパイルされたスクリプトの場合、フォーマットは次のようになる：</p>
<pre>CompiledScript.exe [<i>Switches</i>] [<i>Script Parameters</i>]</pre>
<p><strong>Switches：</strong>以下のうち0個以上：</p>
<table class="info">
  <tr><th>Switch</th><th>意味</th><th class="wrap" abbr="Compiled?">Works compiled?</th></tr>
  <tr id="SlashF">
    <td>/force</td>
    <td>無条件に起動し、警告ダイアログをスキップする。これは<a href="lib/_SingleInstance.htm">#SingleInstance Off</a>と同じ効果を持つ。</td>
    <td>はい</td>
  </tr>
  <tr id="SlashR">
    <td>/restart</td>
    <td>スクリプトが再起動され、スクリプトの以前のインスタンスを閉じようとしていることを示す（これは、内部的に<a href="lib/Reload.htm">Reload</a>関数でも使用される）。</td>
    <td>はい</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut<br><br>/ErrorStdOut=<em>Encoding</em></td>
    <td>
      <p>スクリプトの起動を妨げる構文エラーを、ダイアログを表示するのではなく、標準エラーストリーム（stderr）に送る。詳細は<a href="lib/_ErrorStdOut.htm">#ErrorStdOut</a>を参照。</p>
      <p>オプションで<a href="lib/FileEncoding.htm">エンコーディング</a>を指定することもできる。例えば、<code class="no-highlight">/ErrorStdOut=UTF-8</code>は、標準エラー出力に書き込む前にメッセージをUTF-8にエンコードする。</p>
    </td>
    <td>いいえ</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td>デバッグ・クライアントに接続する。詳細は<a href="#idebug">インタラクティブ・デバッグ</a>を参照。</td>
    <td>いいえ</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>
      <p>スクリプトファイルの読み込みに使われるデフォルトのコードページを上書きする。詳細は<a href="#cp">スクリプトファイルのコードページ</a>を参照。</p>
    </td>
    <td>いいえ</td>
  </tr>
  <tr id="validate">
    <td>/Validate</td>
    <td>
      <p>AutoHotkeyはスクリプトをロードし、実行せずに終了します。</p>
      <p>デフォルトでは、ロードタイムエラーと警告は通常通り表示される。<a href="#ErrorStdOut">ErrorStdOut</a>スイッチを使用すると、エラーメッセージを抑止またはキャプチャすることができる。</p>
      <p>プロセスの終了コードは、スクリプトのロードに成功した場合は0、エラーが発生した場合は0以外となる。</p>
    </td>
    <td>いいえ</td>
  </tr>
  <tr>
    <td>/iLib <em>"OutFile"</em></td>
    <td>
      <p><strong>Deprecated:</strong> Equivalent to <a href="#validate">/validate</a>; use that instead.</p>
      <p><em>"OutFile"</em> must be specified but is ignored. 以前のバージョンのAutoHotkeyでは、自動インクルードされたファイルのファイル名は、#Includeディレクティブとしてフォーマットされ、<em>OutFile</em>で指定されたファイルに書き込まれました。</p>
    </td>
    <td>いいえ</td>
  </tr>
  <tr id="SlashInclude">
    <td>/include <em>"IncFile"</em></td>
    <td>
      <p>メインスクリプトの前にファイルを<a href="lib/_Include.htm">含む</a>。このメソッドでインクルードできるファイルは1つだけです。スクリプトが<a href="lib/Reload.htm">リロード</a>されると、このスイッチは自動的に新しいインスタンスに渡される。</p>
    </td>
    <td>いいえ</td>
  </tr>
  <tr id="SlashScript">
    <td>/script</td>
    <td>
      <p>.exeファイルに基づいてコンパイルされたスクリプトで使用する場合、このスイッチは、プログラムがメインの埋め込みスクリプトを無視するようにします。これにより、コンパイルされたスクリプト.exeは、メインスクリプト以外の外部スクリプトファイルや埋め込みスクリプトを実行できるようになる。コンパイル済みスクリプトでは通常サポートされていないその他のスイッチも使用できるが、このスイッチの右側に記載する必要がある。事例：</p>
      <pre class="no-highlight">CompiledScript.exe /script /ErrorStdOut MyScript.ahk "Script's arg 1"</pre>
      <p>現在の実行ファイルにスクリプトが埋め込まれていない場合、このスイッチは許可されるが、何の効果もない。</p>
      <p>このスイッチは、.binファイルに基づいてコンパイルされたスクリプトではサポートされていません。</p>
      <p>See also: <a href="#ahk2exe-base">Base Executable File (Ahk2Exe)</a></p>
    </td>
    <td>該当なし</td>
  </tr>
</table>

<p id="defaultfile"><strong>スクリプトファイル名：</strong> <em>スクリプトパラメータ</em>がない場合は省略可能。省略した場合は、<a href="Variables.htm#AhkPath">AutoHotkey実行ファイル</a>のパスと名前がデフォルトになり、「.exe」は「.ahk」に置き換えられます。たとえば、AutoHotkey.exeの名前をMyScript.exeに変更すると、MyScript.ahkをロードしようとします。パラメータなしでAutoHotkey32.exeを実行すると、AutoHotkey32.ahkをロードしようとします。</p>
<p id="stdin">ファイル名にアスタリスク（*）を指定すると、スクリプトのテキストを標準入力（stdin）から読み込む。これによって、以下のことも有効になる：</p>
<ul>
  <li><a href="Variables.htm#InitialWorkingDir">初期作業ディレクトリ</a>は、<a href="Variables.htm#ScriptDir">A_ScriptDir</a>として使用され、<a href="#lib">ローカルのLibフォルダ</a>を見つけるために使用される。</li>
  <li><a href="Variables.htm#ScriptName">A_ScriptName</a>と<a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a>の両方に「*」が含まれている。</li>
  <li><a href="lib/_SingleInstance.htm">#SingleInstance</a>はデフォルトでオフになっている。</li>
</ul>
<p>例については<a href="lib/Run.htm#ExecScript">ExecScript()</a>を参照。</p>
<p>現在の実行ファイルに<a href="Program.htm#embedded-scripts">スクリプトが埋め込まれて</a>いる場合、このパラメータには、アスタリスクの後に埋め込みスクリプトのリソース名またはIDを付けることができる。コンパイル済みスクリプトの場合（つまり、ID #1の埋め込みスクリプトが存在する場合）、このパラメータの前に<code>/script</code>スイッチを付ける必要があります。</p>
<p><strong>スクリプトのパラメータ：</strong>スクリプトに渡す文字列を、空白で区切って指定します。スペースを含むパラメータは引用符で囲む。空文字列をパラメータとして渡したい場合は、連続する2つの引用符を指定する。リテラル引用符は、その前にバックスラッシュ（ \")を付けることで渡すことができる。その結果、引用符で囲まれたパラメータ（"C:\My Documents<span class="red">\"</span>など）の末尾のスラッシュは、リテラル引用符として扱われます（つまり、スクリプトは "C:\My Documents<span class="red">"</span>という文字列を受け取ります）。このような引用符を削除するには、<code>A_Args[1] := <a href="lib/StrReplace.htm">StrReplace</a>(A_Args[1], '"')</code>を使用する。</p>
<p id="cmd_args">入力パラメータがある場合は、組み込み変数<strong>A_Args</strong>に配列として格納され、<a href="Objects.htm#Usage_Simple_Arrays">配列構文</a>を使ってアクセスできる。<code>A_Args[1]</code>は最初のパラメーターを含む。以下の例では、渡されるパラメーターが少なすぎる場合にスクリプトを終了している：</p>
<pre>if A_Args.Length &lt; 3
{
    MsgBox "This script requires at least 3 parameters but it only received " A_Args.Length "."
    ExitApp
}</pre>
<p>スクリプトに渡されるパラメータの数がさまざまな場合（おそらく、ユーザーが一連のファイルをスクリプトにドラッグ＆ドロップしたため）、次の例を使用して、パラメータを1つずつ抽出することができます：</p>
<pre>for n, param in A_Args  <em>; 各パラメータ：</em>
{
    MsgBox "Parameter number " n " is " param "."
}
</pre>
<p>パラメータがファイル名の場合、以下の例を使用すると、完全/絶対パスを含め、（ファイルシステムに保存されている）大文字/小文字を補正した長い名前に変換することができる：</p>
<pre>for n, GivenPath in A_Args  <em>; 各パラメータ（またはスクリプトにドロップされたファイル）：</em>
{
    Loop Files, GivenPath, "FD"  <em>; ファイルやディレクトリをインクルードします。</em>
        LongPath := A_LoopFileFullPath
    MsgBox "The case-corrected long path name of file`n" GivenPath "`nis:`n" LongPath
}</pre>

<h2 id="cp">スクリプトファイルのコードページ</h2>
<p>ASCII以外の文字をファイルから正しく読み取るには、ファイルが保存されたときに使用されたエンコーディング（通常はテキストエディタ）と、AutoHotkeyがファイルを読み取るときに使用するエンコーディングが一致している必要があります。一致しない場合、文字は正しくデコードされない。AutoHotkeyは以下のルールを使用して、使用するエンコーディングを決定します：</p>
<ul>
  <li>ファイルがUTF-8またはUTF-16（LE）のバイトオーダーマークで始まる場合、適切なコードページが使用され、<a href="#CPn">/CP<i>n</i></a>スイッチは無視される。</li>
  <li>コマンドラインで<a href="#CPn">/CP<i>n</i></a>スイッチが渡されると、コードページ<i>n</i>が使われる。取り得る値のリストについては、<a href="https://learn.microsoft.com/windows/win32/intl/code-page-identifiers">コードページ識別子</a>を参照のこと。</li>
  <li>その他の場合はすべてUTF-8が使用されます（このデフォルトはAutoHotkey v1とは異なります）。</li>
</ul>
<p>これは、AutoHotkeyによってロードされたスクリプトファイルにのみ適用され、スクリプト自体のファイルI/Oには適用されないことに注意してください。<a href="lib/FileEncoding.htm">FileEncoding</a>は、スクリプトが読み書きするファイルのデフォルトエンコーディングを制御し、<a href="lib/IniRead.htm">IniRead</a>と <a href="lib/IniWrite.htm">IniWrite</a>は常にUTF-16またはANSIで処理する。</p>
<p>すべてのテキストは（必要に応じて）<a href="Compat.htm#Format">ネイティブの文字列形式</a>に変換されるため、無効な文字やネイティブのコードページに存在しない文字はプレースホルダーに置き換えられます：'�'。これは、スクリプトファイルにエンコーディングエラーがあるか、ファイルの保存と読み込みに使用されたコードページが一致しない場合にのみ発生するはずです。</p>
<p><a href="lib/RegWrite.htm">RegWrite</a>は、エクスプローラーから起動したスクリプトのデフォルトを設定するために使用することができる（ファイルをダブルクリックするなど）：</p>
<pre><em>; Uncomment the appropriate line below or leave them all commented to
;   reset to the default of the current build.  Modify as necessary:
; codepage := 0        ; System default ANSI codepage
; codepage := 65001    ; UTF-8
; codepage := 1200     ; UTF-16
; codepage := 1252     ; ANSI Latin 1; Western European (Windows)</em>
if (codepage != "")
    codepage := " /CP" . codepage
cmd := Format('"{1}"{2} "%1" %*', A_AhkPath, codepage)
key := "AutoHotkeyScript\Shell\Open\Command"
if A_IsAdmin    <em>; Set for all users.</em>
    RegWrite cmd, "REG_SZ", "HKCR\" key
else            <em>; Set for current user only.</em>
    RegWrite cmd, "REG_SZ", "HKCU\Software\Classes\" key</pre>
<p>これは、AutoHotkeyがすでにインストールされていることを前提としています。そうでない場合、結果は理想的とは言えないかもしれない。</p>

<h2 id="debug">スクリプトのデバッグ</h2>
<p><a href="lib/ListVars.htm">ListVars</a>や <a href="lib/Pause.htm">Pause</a>などの組み込み関数は、スクリプトのデバッグに役立ちます。たとえば、次の2行を注意深く選んだ位置に一時的に挿入すると、スクリプトに「ブレークポイント」ができる：</p>
<pre>ListVars
Pause</pre>
<p>スクリプトがこの2行に出会うと、すべての変数の現在の内容が表示され、閲覧できるようになる。再開の準備ができたら、ファイルメニューまたはトレイメニューからスクリプトの一時停止を解除する。スクリプトは、次の「ブレークポイント」に達するまで続けられる（もしあれば）。</p>
<p>一般的に、これらの「ブレークポイント」は、WinActivate関数の直前など、スクリプトにとってアクティブウィンドウが重要でない位置に挿入するのがベストである。これにより、一時停止を解除したときにスクリプトが適切に動作を再開する。</p>
<p>以下の関数もデバッグに役立つ：<a href="lib/ListLines.htm">ListLines</a>、<a href="lib/KeyHistory.htm">KeyHistory</a>、<a href="lib/OutputDebug.htm">OutputDebug</a>。</p>
<p>タイプミスや「グローバル」宣言の欠落など、よくあるエラーのいくつかは、<a href="lib/_Warn.htm">警告を有効</a>にすることで検出できる。</p>
<h3 id="idebug">インタラクティブ・デバッグ</h3>
<p>サポートされている<a href="AHKL_DBGPClients.htm">DBGpクライアント</a>があれば、インタラクティブなデバッグが可能です。通常、以下のようなアクションが可能である：</p>
<ul>
  <li>行のブレークポイントの設定と削除 -<a href="https://en.wikipedia.org/wiki/Breakpoint">ブレークポイント</a>に達すると実行を一時停止。</li>
  <li>コードを一行ずつステップスルー - 関数の中に入ったり、関数の上や外に出たり。</li>
  <li>すべての変数または特定の変数を検査する。</li>
  <li>実行中のスレッドと関数のスタックを表示する。</li>
</ul>
<p>この機能は、<a href="#ahk2exe-base">BINファイルに基づいて</a>コンパイルされたスクリプトには無効であることに注意してください。EXEファイルに基づいてコンパイルされたスクリプトの場合、<a href="#SlashScript">/script</a>の後に/debugを指定する必要があります。</p>
<p>対話型デバッグを有効にするには、まずサポートされているデバッガークライアントを起動し、<b>/Debug</b>コマンドラインスイッチを使用してスクリプトを起動します。</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i>と <i>PORT</i>は省略できる。例えば、以下は同等である：</p>
<pre class="no-highlight">AutoHotkey /Debug "myscript.ahk"
AutoHotkey /Debug=localhost:9000 "myscript.ahk"</pre>
<p id="debug_attach">すでに実行中のスクリプトにデバッガーをアタッチするには、以下のようにメッセージを送る：</p>
<pre>ScriptPath := "" <em>; SET THIS TO THE FULL PATH OF THE SCRIPT</em>
A_DetectHiddenWindows := true
if WinExist(ScriptPath " ahk_class AutoHotkey")
    <em>; Optional parameters:
    ;   wParam  = the IPv4 address of the debugger client, as a 32-bit integer.
    ;   lParam  = the port which the debugger client is listening on.</em>
    PostMessage DllCall("RegisterWindowMessage", "Str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>デバッガークライアントが接続されたら、「detach」DBGp コマンドを送信することで、スクリプトを終了せずにデタッチすることができる。</p>

<h2 id="Script_Showcase">スクリプト・ショーケース</h2>
<p>便利なスクリプトは<a href="scripts/">こちらのページ</a>を参照。</p>
</body>
</html>
