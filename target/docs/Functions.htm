<!DOCTYPE HTML>
<html lang="en">
<head>
<title>関数 - 定義と使用法｜AutoHotkey v2</title>
<meta name="description" content="関数全般、パラメータ、戻り値、組み込み関数、変種関数などの詳細を説明します。" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>機能紹介</h1>

<h2 id="toc">目次</h2>
<ul>
  <li><a href="#intro">導入と簡単な例</a></li>
  <li><a href="#param">パラメータ</a></li>
  <li><a href="#optional">オプションのパラメータ</a></li>
  <li><a href="#return">呼び出し元への値の返送</a></li>
  <li><a href="#Variadic">バリアディック関数</a></li>
  <li><a href="#Local">ローカル変数</a></li>
  <li><a href="#DynCall">関数を動的に呼び出す</a></li>
  <li><a href="#ShortCircuit">短絡的なブーリアン評価</a></li>
  <li><a href="#nested">ネストされた関数</a></li>
  <li><a href="#remarks">復帰・退出・総評</a></li>
  <li><a href="#include">複数のスクリプト間で関数を共有するための#Includeの使い方</a></li>
  <li><a href="#BuiltIn">搭載されている機能</a></li>
</ul>
<h2 id="intro">導入と簡単な例</h2>
<p id="define">関数は、<em>呼び出す</em>ことで実行可能な再利用可能なコードブロックです。関数は、オプションでパラメータ（入力）を受け取り、値（出力）を返すことができます。2つの数値を受け取り、その和を返す次のような単純な関数を考えてみましょう。</p>
<pre>Add(x, y)
{
    <a href="lib/Return.htm">return</a> x + y
}</pre>
<p>上記は、"Add "という名前の関数（大文字小文字を区別しない）を作成し、それを呼び出す人は正確に2つのパラメータ（xとy）を提供しなければならないと定めていることから、関数<em>定義として</em>知られています。関数を呼び出すには、その結果を<a href="Variables.htm#AssignOp"><code>:=</code>演算子で</a>変数に代入します。事例:</p>
<pre>Var := Add(2, 3)<em>; Varに数字5が格納されます。</em></pre>
<p>また、関数は戻り値を保存せずに呼び出すことができます。</p>
<pre>Add(2, 3)
Add 2, 3<em>; 行頭で使用する場合は、括弧を省略することができます。</em></pre>
<p>しかし、この場合、関数が返す値はすべて捨てられるので、関数がその戻り値以外の効果を生み出さない限り、この呼び出しは何の役にも立たない。</p>
<p>式の中で、関数呼び出しは関数の戻り値に「評価」されます。戻り値は、上記のように変数に代入することもできますし、以下のように直接使用することもできます。</p>
<pre>if <a href="lib/InStr.htm">InStr</a>(MyVar, "fox")
    MsgBox "The variable MyVar contains the word fox."</pre>

<h2 id="param">パラメータ</h2>
<p>関数を定義すると、そのパラメータが名前の横の括弧に記載されます（名前と括弧の間に空白があってはいけません）。関数がパラメータを受け付けない場合は、括弧の中を空にしてください（例）。<code>GetCurrentTimestamp()</code>.</p>
<p id="ByRef"><strong>ByRef Parameters</strong>:関数から見ると、パラメータは、この例のように<em>ByRefとして</em>マークされていない限り、基本的に<a href="#Local">ローカル変数と</a>同じである。</p>
<pre>a := 1, b := 2
Swap(&amp;a, &amp;b)
MsgBox a ',' b

Swap(&amp;Left, &amp;Right)
{
    temp := Left
    Left := Right
    Right := temp
}</pre>
<p>上記の例では、<code>&amp;を</code>使用することで、呼び出し側が<a href="Concepts.htm#variable-references">VarRefを</a>渡す必要があります。各パラメーターは、VarRefで表される変数のエイリアスになります。つまり、パラメータも呼び出し側の変数も、メモリ上の同じ内容を参照しているのです。これにより、Swap関数は、<em>左の</em>内容を<em>右に</em>移動したり、逆に右の内容を右に移動したりして、呼び出し側の変数を変更することができます。</p>
<p>一方、上記の例で<em>ByRefを</em>使用しなかった場合、<em>Leftと</em> <em>Rightは</em>呼び出し元の変数のコピーとなるため、Swap関数は外部に影響を与えることはありません。しかし、その代わりに、各 VarRef を明示的に<a href="Variables.htm#deref">非参照に</a>するように関数を変更することができます。事例:</p>
<pre>Swap(Left, Right)
{
    temp := %Left%
    %Left% := %Right%
    %Right% := temp
}</pre>
<p><a href="lib/Return.htm">returnは</a>関数の呼び出し側に1つの値しか返せないので、VarRefは余分な結果を返すために使用することができます。これは、呼び出し元が、関数が値を格納する変数（通常は空）への参照を渡すことで実現されます。</p>
<p>大きな文字列を関数に渡す場合、<em>ByRefを</em>使用すると、文字列のコピーを作成する必要がないため、パフォーマンスが向上し、メモリを節約することができます。同様に、<em>ByRefを</em>使用して長い文字列を呼び出し元に送り返すと、通常、<code>Return HugeStringの</code>ようなものよりも性能が良くなります。しかし、関数が受け取るのは、文字列への参照ではなく、<em>変数への</em>参照である。将来の改良により、これらの目的でのByRefの使用に取って代わる可能性があります。</p>
<p>既知の制限事項:</p>
<ul>
  <li>オブジェクトのプロパティ（<code>foo.barなど</code>）や<a href="lib/A_Clipboard.htm">A_Clipboardなどの</a> <a href="Variables.htm#BuiltIn">組み込み変数</a>に対してVarRefを構成することはできないので、これらを<em>ByRefで</em>渡すことはできない。</li>
  <li>関数呼び出しのパラメータが変数に解決する場合（例：<code>Var</code>、<code>++Var</code>、<code>Var*=2</code>）、その左または右の他のパラメータは、関数に渡される前にその変数を変更できます。例えば、<code>MyFunc(Var, Var++)</code>は、<em>Varが</em>最初に0である場合、予期せず1や0を渡してしまいますが、これは最初の<em>Varが</em>関数呼び出しが実行されるまで再参照されないからです。この動作は直感に反しているため、将来のリリースで変更される可能性があります。</li>
</ul>
<h2 id="optional">オプションのパラメータ</h2>
<p>関数を定義する際、1つまたは複数のパラメータをオプションとしてマークすることができます。</p>
<p><code>:= の</code>後に、リテラル数値、"fox "や""などの引用/リテラル文字列、またはパラメータをデフォルト値で初期化する必要がある場合に毎回評価されるべき式を追加します。例えば、<code>X:=[]</code>とすると、毎回新しいArrayが作成されます。</p>
<p><a href="#unset">デフォルトで設定されていない</a>パラメータを定義する場合は、<code>?</code>または<code>:= unsetを</code>付加します。</p>
<p>次の関数は、そのZパラメータがオプションと表示されています。</p>
<pre>Add(X, Y, Z := 0) {
    return X + Y + Z
}</pre>
<p>呼び出し元が上記の関数に<strong>3つの</strong>パラメータを渡すと、Zのデフォルト値は無視されます。しかし、呼び出し側が<strong>2つの</strong>パラメータだけを渡すと、Zは自動的に値0を受け取ります。</p>
<p id="missing">オプションのパラメータをパラメータリストの途中で孤立させることはできません。つまり、最初のオプショナルパラメータの右側にあるすべてのパラメータもオプショナルと表示されなければならない。ただし、オプションのパラメータは、以下のように、関数を呼び出す際に、パラメータリストの途中から省略することができます。</p>
<pre>MyFunc(1,, 3)
MyFunc(X, Y:=2, Z:=0) {<em>; この場合でも、Zはオプションでなければならないことに注意してください。</em>
    MsgBox X ", " Y ", " Z
}</pre>
<p id="OptionalByRef"><a href="#ByRef">ByRefパラメータは</a>、デフォルト値にも対応しています（例）。<code>MyFunc(&amp;p1 := "")</code>. 呼び出し側がこのようなパラメータを省略した場合、関数はローカル変数を作成し、デフォルト値を格納します。</p>

<h3 id="unset">アンセットパラメーター</h3>
<p>デフォルト値を与えずにパラメータをオプションとしてマークするには、キーワード<code>unset</code>または接尾辞<code>?</code>を使用します。その場合、パラメータが省略されるたびに、対応する変数は値を持ちません。<a href="lib/IsSet.htm">IsSetを</a>使用して、以下のように、パラメータに値が与えられているかどうかを判断します。</p>
<pre>
MyFunc(p?) {<em>MyFunc(p := unset) に相当する。</em>
    if IsSet(p)
        MsgBox "Caller passed " p
    else
        MsgBox "Caller did not pass anything"
}

MyFunc(42)
MyFunc
</pre>
<p>パラメータに値がないのに読み込もうとすると、<a href="Concepts.htm#uninitialized-variables">初期化されていない変数と</a>同じようにエラーとみなされます。オプションのパラメータに値がない場合でも他の関数に渡すには、<a href="Variables.htm#maybe">maybe演算子（<em>var</em><strong>?）</strong></a>事例:</p>
<pre>
Greet(title?) {
    MsgBox("Hello!", title?)
}

Greet "Greeting"<em>; タイトルは "Greeting "です。</em>
Greet<em>; タイトルはA_ScriptName</em>
</pre>

<h2 id="return">呼び出し元への値の返送</h2>
<p><a href="#intro">序章で</a>説明したように、関数はオプションで呼び出し元に値を<a href="lib/Return.htm">返す</a>ことができます。</p>
<pre>
MsgBox returnTest()

returnTest() {
    return 123
}
</pre>
<p>関数から余分な結果を返したい場合は、<a href="#ByRef">ByRef（&amp;）を</a>使用することもできます。</p>
<pre>
returnByRef(&amp;A,&amp;B,&amp;C)
MsgBox A "," B "," C

returnByRef(&amp;val1, &amp;val2, val3)
{
    val1 := "A"
    val2 := 100
    %val3% := 1.1<em>; &amp; が省略されているため、% が使用されています。</em>
    return
}
</pre>
<p>オブジェクトや配列は、複数の値や名前付きの値も返すことができます。</p>
<pre>
Test1 := returnArray1()
MsgBox Test1[1] "," Test1[2]

Test2 := returnArray2()
MsgBox Test2[1] "," Test2[2]

Test3 := returnObject()
MsgBox Test3.id "," Test3.val

returnArray1() {
    Test := [123,"ABC"]
    return Test
}

returnArray2() {
    x := 456
    y := "EFG"
    return [x, y]
}

returnObject() {
    Test := {id:789, val:"HIJ"}
    return Test
}
</pre>
<h2 id="Variadic">バリアディック関数</h2>
<p>関数を定義するとき、最後のパラメータの後にアスタリスクを書くと、その関数は可変パラメータとして扱われ、可変数のパラメータを受け取ることができるようになります。</p>
<pre>Join(sep, <b class="blue">params*</b>) {
    for index,param in params
        str .= param . sep
    return SubStr(str, 1, -StrLen(sep))
}
MsgBox Join("`n", "one", "two", "three")</pre>
<p>Variadic関数が呼び出されると、関数の最終パラメータに格納されているオブジェクトを介して、余剰パラメータにアクセスすることができます。最初の余剰パラメータは<code>params[1]</code>に、2番目のパラメータは<code>params[2]</code>に、といった具合に。<a href="lib/Array.htm">配列</a>なので、<code>params.<a href="lib/Array.htm#Length">Lengthで</a></code>パラメータの数を決定することができます。</p>
<p>非変数関数を、その関数が受け入れる以上のパラメータで呼び出そうとすると、エラーとみなされます。余ったパラメータを格納する配列を作成すること<em>なく</em>、関数が任意の数のパラメータを受け取ることを許可するには、最後のパラメータとして<code>*を</code>記述します（パラメータ名を指定しない）。</p>
<p class="warning"><strong>注意：</strong>"variadic "パラメータは、フォーマルパラメータリストの最後にのみ出現することができます。</p>

<h3 id="VariadicCall">バリアディックファンクションコール</h3>
<p>可変型関数は可変数のパラメータを<i>受け取る</i>ことができますが、関数呼び出しに同じ構文を適用することで、パラメータの配列を<i>任意の</i>関数に渡すことができます。</p>
<pre>substrings := ["one", "two", "three"]
MsgBox Join("`n", <b class="blue">substrings*</b>)</pre>
<p>注:</p>
<ul>
  <li>オブジェクトは、<a href="lib/Array.htm">Arrayや</a>他の種類の列挙可能なオブジェクト<a href="Objects.htm#__Enum">（__Enum</a>メソッドを持つ任意のオブジェクト）、または<a href="lib/Enumerator.htm">列挙者</a>であることができます。オブジェクトがArrayでない場合、__Enumは1カウントで呼び出され、列挙者は一度に1つのパラメータのみで呼び出されます。</li>
  <li>値がない<a href="lib/Array.htm">配列</a>要素（<code>[,2]</code>の最初の要素など）は、パラメータを省略したのと同じです。つまり、パラメータがオプションの場合はそのパラメータのデフォルト値が使用され、それ以外の場合は例外が投げられます。</li>
  <li>この構文は、メソッドの呼び出しやオブジェクトのプロパティの設定・取得の際にも使用できます。例えば、<code>Object.Property[Params*]</code>などです。</li>
</ul>
<p>既知の制限事項:</p>
<ul>
  <li>この方法で拡張できるのは、一番右のパラメータだけです。例えば、<code>MyFunc(x, y*</code>)はサポートされていますが、<code>MyFunc(x*, y)</code>はサポートされていません。</li>
  <li>アスタリスク<code>（*）と</code>パラメータリストを終了する記号の間には、空白文字以外の文字を含んではならない。</li>
  <li>つまり、パラメータリストは括弧（プロパティの場合は括弧）で囲む必要があります。</li>
</ul>
<h2 id="Locals">ローカル変数とグローバル変数</h2>
<h3 id="Local">ローカル変数</h3>
<p>ローカル変数は、1つの関数に固有のもので、その関数の内部でのみ見ることができます。その結果、ローカル変数はグローバル変数と同じ名前を持ちながら、別々の内容を持つことがあります。また、別々の関数が同じ変数名を安全に使用することができます。</p>
<p>ただし、<a href="#closures">クロージャや</a> <a href="Concepts.htm#variable-references">VarRefに</a>バインドされている変数は例外です（クロージャやVarRefと同時に解放される）。</p>
<p><a href="lib/A_Clipboard.htm">A_Clipboardや</a> <a href="Variables.htm#TimeIdle">A_TimeIdleなどの</a>組み込み変数は、決してローカルではなく（どこからでもアクセス可能）、再宣言することはできません。(<a href="lib/Object.htm">Objectなどの</a>組み込みクラスは<a href="#Global">グローバル</a>変数としてあらかじめ定義されているので、この限りではありません)。</p>
<p id="AssumeLocal">ファンクションはデフォルトで<strong>assume-local</strong>です。assume-local関数の内部でアクセスまたは作成された変数は、以下の例外を除き、デフォルトでローカルとなります。</p>
<ul>
  <li><a href="#Global">グローバル</a>変数で、関数が読み込むだけで、代入したり、<a href="Variables.htm#ref">参照演算子(&amp;)</a>で使用したりはしない。</li>
  <li><a href="#nested">ネストされた関数は</a>、包含する関数が作成したローカル変数や静的変数を参照することができます。</li>
</ul>
<p>また、<code>ローカル</code>キーワードで変数を宣言したり、関数のモードを変更することで、デフォルトをオーバーライドすることもできます（下図）。</p>

<h3 id="Global">グローバル変数</h3>
<p id="AssignLocal"><a href="#AssumeLocal">想定ローカル</a>関数内の変数参照は、それが読み込まれるだけであれば、グローバル変数に解決される可能性があります。ただし、変数が代入や<a href="Variables.htm#ref">参照演算子（&amp;）で</a>使用された場合、デフォルトで自動的にローカルになります。これにより、関数は関数内で宣言することなく、グローバル変数の読み込みや、グローバル関数や組み込み関数の呼び出しを行うことができます。また、代入されるローカル変数の名前がグローバル変数と一致する場合に、意図しない副作用からスクリプトを保護します。事例:</p>
<pre>LogToFile(TextToLog)
{
    <em>; LogFileNameは、以前この関数の外のどこかで値を与えられていました。
;FileAppend は、組み込み関数を含む事前定義されたグローバル変数である。</em>
    FileAppend TextToLog "`n", LogFileName
}</pre>
<p>それ以外の場合、関数内で既存のグローバル変数を参照する（または新規に作成する）には、その変数を使用する前にグローバル変数として宣言します。事例:</p>
<pre>SetDataDir(Dir)
{
    <strong>global</strong> LogFileName
    LogFileName := Dir . "\My.log"
    <strong>global</strong> DataDir := Dir<em>; <a href="#DeclareInit">後述</a>するアサインメントと組み合わせた宣言を行います。</em>
}
</pre>
<p id="AssumeGlobal"><strong>アシュームグローバルモード</strong>。ある関数が多数のグローバル変数にアクセスしたり作成したりする必要がある場合、その関数の最初の行を "global "とすることで、（パラメータを除く）すべての変数がグローバルであると仮定するよう定義することができます。事例:</p>
<pre>SetDefaults()
{
    <strong>global</strong>
    MyGlobal := 33<em>; グローバル変数に33を代入する。必要であれば、まず変数を作成する。</em>
    local x, y:=0, z<em>; ローカル変数はこのモードで宣言する必要があります。そうしないとグローバル変数とみなされます。</em>
}</pre>

<h3 id="static">静的変数</h3>
<p>静的変数は常に暗黙のローカル変数ですが、呼び出しの間にその値が記憶されるため、ローカル変数とは異なります。事例:</p>
<pre>LogToFile(TextToLog)
{
    <strong>static</strong> LoggedLines := 0
    LoggedLines += 1<em>; 現地でタリーを維持する（その価値はコール間で記憶される）。</em>
    global LogFileName
    FileAppend LoggedLines ":" TextToLog "`n", LogFileName
}</pre>
<p id="InitStatic">静的変数は、宣言と同じ行で、<code>:=と</code>任意の<a href="Variables.htm#Expressions">式で続けて</a>初期化することができる。事例:<code>static X:=0, Y:="fox"</code>. ただし、静的初期化子（または結合初期化子のグループ）が正常に評価された後は、制御の流れから事実上除外され、2度目は実行されない。</p>
<p>ネストした関数は、外側の関数の非静的なローカル変数を取り込まないように、<a href="#static-functions">静的に宣言</a>することができます。</p>
<p id="AssumeStatic"><strong>アシュームスタティックモード</strong>関数の最初の行を "static "とすることで、宣言されていないローカル変数はすべて（パラメータを除いて）静的であると仮定するように定義することができる。事例:</p>
<pre>GetFromStaticArray(WhichItemNumber)
{
    <strong>static</strong>
    static FirstCallToUs := true<em>; 静的宣言のイニシャライザは一度だけ実行されます。</em>
    if FirstCallToUs<em>; 最初の呼び出し時には静的配列を作成し、それ以降の呼び出し時には作成しない。</em>
    {
        FirstCallToUs := false
        StaticArray := []
        Loop 10
            StaticArray.Push("Value #" . A_Index)
    }
    return StaticArray[WhichItemNumber]
}</pre>
<p>assume-staticモードでは、staticであってはならない変数は、ローカルまたはグローバルとして宣言しなければならない（<a href="#AssumeLocal">assume-localモードと</a>同じ例外あり）。</p>

<h3 id="More_about_locals_and_globals">ローカルとグローバルの詳細</h3>
<p>以下の例のように、カンマで区切ることで複数の変数を同じ行で宣言することができます。</p>
<pre>global LogFileName, MaxRetries := 5
static TotalAttempts := 0, PrevResult</pre>
<p id="DeclareInit">変数は、宣言と同じ行で、代入を続けて初期化することができる。<a href="#InitStatic">静的イニシャライザとは</a>異なり、ローカルとグローバルのイニシャライザは、関数が呼ばれるたびに実行されます。つまり、<code>local x := 0</code>のような行は、2つの行を別々に書いたのと同じ効果がある。<code>local x</code> followed by <code>x := 0</code>. どのような<a href="Variables.htm#AssignOp">代入演算子でも</a>使用できますが、<code>global HitCount += 1</code>のような複合代入では、変数にあらかじめ値が代入されていることが必要です。</p>
<p>スクリプトの起動時に<em>local</em>、<em>global</em>、<em>staticという</em>言葉が即座に処理されるため、<a href="lib/If.htm">IF文</a>によって変数を条件付きで宣言することができない。つまり、IFの<a href="lib/Block.htm">ブロックや</a>ELSEの<a href="lib/Block.htm">ブロック</a>内の宣言は、関数全体に対して無条件に効力を発揮します（ただし、宣言に含まれる初期化子は条件付きで残っています）。<code>Array1</code>や<code>Array99</code>などの変数への非動的な参照は、すでにアドレスに解決されているため、<code>global Array%i% の</code>ような動的な宣言は不可能である。</p>

<h2 id="DynCall">関数を動的に呼び出す</h2>
<p>関数呼び出し式は通常、リテラル関数名で始まりますが、呼び出しの対象は、<a href="misc/Functor.htm">関数オブジェクトを</a>生成する任意の式にすることができます。<code>GetKeyState("Shift")</code>という表現では、<em>GetKeyStateは</em>実際には変数参照ですが、通常は組み込み関数を含む読み取り専用変数を指します。</p>
<p>関数呼び出しは、スクリプトの開始前ではなく、スクリプトの実行中に呼び出しのターゲットが決定される場合、<em>動的</em>であると言われます。通常の関数呼び出しと同じ構文が使用されます。唯一の明らかな違いは、非動的呼び出しではロード時に特定のエラーチェックが実行されますが、動的呼び出しでは実行時にのみ実行されることです。</p>
<p>例えば、<code>MyFunc()</code>は、<em>MyFuncに</em>含まれる<a href="misc/Functor.htm">関数オブジェクトを</a>呼び出しますが、これは実際の関数名であったり、関数が割り当てられた変数であったりすることがあります。</p>
<p>関数呼び出しのターゲットとして、<a href="Variables.htm#deref">ダブルデフを</a>含む他の式を使用することができます。例えば、<code>MyArray[1]()</code>はMyArrayの最初の要素に含まれる関数を呼び出し、<code>%MyVar%()</code>はMyVarに含まれる<em>名前の</em> <em>変数に</em>含まれる関数を呼び出します。つまり、パラメータリストの前にある式をまず評価して<a href="misc/Functor.htm">関数オブジェクトを</a>取得し、そのオブジェクトを呼び出すのです。</p>
<p>以下の理由により、目標値を呼び出すことができない場合は、<a href="lib/Error.htm">Errorが</a>発生します。</p>
<ul>
  <li>ターゲット値が呼び出し可能な型でない場合、<a href="lib/Error.htm#MethodError">MethodErrorが</a>投げられる。Callメソッドを持つ値はすべて呼び出せるので、<code>HasMethod(value, "Call")</code>を使うことでこのエラーを回避できる。</li>
  <li>関数の<a href="lib/Func.htm#MinParams">MinParams</a>、<a href="lib/Func.htm#MaxParams">MaxParams</a>、<a href="lib/Func.htm#IsVariadic">IsVariadic</a>プロパティを確認することで回避できることが多い。</li>
  <li><a href="lib/Func.htm#IsByRef">ByRef</a>またはOutputVarパラメータに<a href="Concepts.htm#variable-references">変数参照（VarRef</a>）以外のものを渡すこと。</li>
</ul>
<p>関数の呼び出し側は、一般に、関数を呼び出す前に各パラメータの意味と個数を知っておく必要があります。しかし、動的呼び出しの場合、関数呼び出しに合わせて関数を書くことが多く、その場合、パラメータ値の誤りではなく、関数定義の誤りが原因で失敗することがあります。</p>

<h2 id="ShortCircuit">短絡的なブーリアン評価</h2>
<p><em>AND、OR</em>、<a href="Variables.htm#ternary">三項演算</a>子を<a href="Variables.htm#Expressions">式</a>中で使用すると、（関数呼び出しの有無にかかわらず）性能を向上させるために短絡させることができます。ショートサーキットは、式の最終結果に影響を与える可能性のない部分の評価を拒否することで動作します。この概念を説明するために、この例を考えてみましょう。</p>
<pre>if (ColorName != "" AND not FindColor(ColorName))
    MsgBox ColorName " could not be found."</pre>
<p>上の例では、<em>ColorName</em>変数が空の場合、FindColor()関数が呼ばれることはありません。これは、<em>ANDの</em>左辺が<em>偽</em>であるため、その右辺は最終的な結果を<em>真に</em>することができないからである。</p>
<p>このため、ある関数が<em>ANDや</em> <em>ORの</em>右辺で呼び出された場合、その関数が生み出す副作用（グローバル変数の内容の変更など）が発生しない可能性があることを認識しておくことが重要です。</p>
<p>また、短絡的な評価は、ネストした<em>ANDと</em><em>ORに</em>カスケードすることに注意する必要があります。例えば、以下の式では、<em>ColorNameが</em>空白の場合は、左端の比較のみが行われます。そうすると、左辺だけで最終的な答えが確実に決まるからです。</p>
<pre>if (ColorName = "" <u>OR</u> FindColor(ColorName, Region1) <u>OR</u> FindColor(ColorName, Region2))
    break<em>; 検索するものがない、または一致するものが見つかった。</em></pre>
<p>上記の例で示したように、一般的に高価な（時間のかかる）関数は、パフォーマンスを高めるために<em>AND</em>または<em>ORの</em>右辺で呼び出す必要があります。また、関数のパラメータに空文字列などの不適切な値が渡された場合に、その関数が呼び出されないようにすることも可能です。</p>
<p><a href="Variables.htm#ternary">三項条件演算子(?:)</a>も、負け分岐を評価しないことで短絡させる。</p>

<h2 id="nested">ネストされた関数</h2>
<p><em>ネストされた</em>関数は、他の関数の中で定義されたものです。事例:</p>
<pre>
outer(x) {
    inner(y) {
        MsgBox(y, x)
    }
    inner("one")
    inner("two")
}
outer("title")
</pre>
<p>ネストされた関数は、それを直ちに囲む関数の外では名前によってアクセスできませんが、その関数の内部では、他のネストされた関数の内部も含めて、どこでもアクセスできます（例外あり）。</p>
<p>デフォルトでは、ネストされた関数は、それを囲む関数の<a href="#static">静的</a>変数に、動的にもアクセスすることができます。しかし、入れ子になった関数内の非動的代入は、外側の関数にその変数に対する宣言も非動的代入もない場合、通常ローカル変数に解決される。</p>
<p id="capture-var">デフォルトでは、以下の条件を満たす場合、入れ子関数は外側の関数の非静的ローカル変数を自動的に「キャプチャ」します。</p>
<ol>
  <li>外側の関数は、次のうち少なくとも1つの方法で変数を参照する必要があります。
    <ol type="a">
      <li><code>localで</code>宣言したり、パラメータやネストされた関数として宣言することで、その効果を発揮します。</li>
      <li>代入や<a href="Variables.htm#ref">参照演算子（&amp;）の</a>非動的な対象として。</li>
    </ol>
  </li>
  <li>内部関数（またはその内部にネストされた関数）は、変数を非動的に参照する必要があります。</li>
</ol>
<p>変数を捕捉した入れ子の関数は<a href="#closures">クロージャと</a>呼ばれます。</p>
<p>外側の関数の非静的なローカル変数は、キャプチャしない限り<a href="Language.htm#dynamic-variables">動的にアクセスする</a>ことはできません。</p>
<p>明示的な宣言は、それを包含する関数のローカル変数よりも常に優先される。例えば、<code>local xは</code>、外側の関数の<code>xとは</code>無関係に、現在の関数にローカルな変数を宣言します。外側関数の<a href="#Global">グローバル</a>宣言は、明示的な宣言で上書きされる場合を除き、ネストした関数にも影響します。</p>
<p>関数が<a href="#AssumeGlobal">assume-globalと</a>宣言された場合、その関数の<em>外で</em>作られたローカル変数や静的変数は、関数自身やそのネストした関数から直接アクセスできません。一方、静的と仮定された入れ子の関数は、その関数自体が<a href="#static-functions">静的と宣言されて</a>いない限り、外側の関数の変数を参照することができます。</p>
<p>関数はデフォルトで<a href="#AssumeLocal">assume-local</a>であり、これはネストされた関数、<a href="#AssumeStatic">assume-static</a>関数の内部であっても同様です。ただし、外側の関数が<a href="#AssumeGlobal">assume-globalの</a>場合、入れ子になった関数は、外側の関数のローカル変数やスタティック変数を参照できる以外は、デフォルトでassume-globalと同じように動作します。</p>
<p>各関数定義は、関数そのものを含む読み取り専用の変数、つまり<a href="lib/Func.htm">Func</a>または<a href="#closures">Closure</a>オブジェクトを作成します。使用例については、以下をご参照ください。</p>

<h3 id="static-functions">静的機能</h3>
<p>つまり、外側の関数を呼び出すたびに、同じ<a href="lib/Func.htm">Funcを</a>参照することになります。キーワード<code>staticは</code>、入れ子になった関数を明示的にstaticと宣言するために使用します。この場合、外側の関数のstaticでないローカル変数は無視されます。事例:</p>
<pre>outer() {
    x := "outer value"
    static inner() {
        x := "inner value"<em>; innerのローカルに変数を作成する。</em>
        MsgBox type(inner)<em>; Displays "Func"</em>
    }
    inner()
    MsgBox x<em>; "外側の値 "を表示する</em>
}
outer()</pre>
<p>静的関数は、明示的に静的と宣言されていない限り、自身のボディの外にある他のネストした関数を参照することはできません。なお、関数が<a href="#AssumeStatic">assume-static</a>であっても、関数パラメータを参照すれば、non-staticの入れ子関数はクロージャになる可能性があります。</p>

<h3 id="closures">クロージング</h3>
<p><em>クロージャとは</em>、<em>自由</em>変数の集合に束縛されたネストされた関数のことです。自由変数は、外側の関数のローカル変数で、ネストした関数でも使用される。クロージャは、1つまたは複数のネストした関数が、外側の関数が戻った後でも、外側の関数と変数を共有することを可能にします。</p>
<p>クロージャを作るには、外側の関数の変数を参照する入れ子関数を定義するだけです。事例:</p>
<pre>
make_greeter(f)
{
    greet(subject)<em>;これはfによる閉鎖となる。</em>
    {
        MsgBox Format(f, subject)
    }
    return greet<em>;クロージャーを返却する。</em>
}

g := make_greeter("Hello, {}!")
g(A_UserName)
g("World")
</pre>
<p>クロージャは、<a href="lib/SetTimer.htm">SetTimer</a>や<a href="lib/Hotkey.htm">Hotkey</a>などの組み込み関数で使用することもできます。事例:</p>
<pre>
app_hotkey(keyname, app_title, app_path)
{
    activate(keyname)<em>; app_title と app_path の関係でクローズとなります。</em>
    {
        if WinExist(app_title)
            WinActivate
        else
            Run app_path
    }
    Hotkey keyname, activate
}
<em>; Win+Nでメモ帳を起動、または起動します。</em>
app_hotkey "#n", "ahk_class Notepad", "notepad.exe"
<em>; Win+WでWordPadを起動、または起動します。</em>
app_hotkey "#w", "ahk_class WordPadClass", "wordpad.exe"
</pre>
<p>入れ子になった関数は、外側の関数の非静的なローカル変数をキャプチャすれば、自動的にクロージャとなります。クロージャそのものに対応する変数（<code>activateなど</code>）も非静的なローカル変数なので、クロージャを参照するネストした関数は自動的にクロージャになります。</p>
<p>外側の関数を呼び出すたびに、以前の呼び出しとは異なる新しいクロージャが作成されます。</p>
<p id="circular-closure">クロージャへの参照をクロージャ自身の自由変数に格納しないのが最善です。これは<a href="Objects.htm#Circular_References">循環参照を</a>作成し、クロージャを解放する前に（その変数をクリアするなどして）破棄しなければならないからです。しかし、クロージャは、循環参照を作成することなく、自分自身や他のクロージャを元の変数で安全に参照することができます。事例:</p>
<pre>
timertest() {
    x := "tock!"
    tick() {
        MsgBox x<em>; x でクロージャになる。</em>
        SetTimer tick, 0<em>; クロージャーのオリジナルvarを使うのが無難です。</em>
        ; SetTimer t, 0<em>; Capturing tは循環参照を作ることになる。</em>
    }
    t := tick<em>; これは、tが上で捕捉されていないので、大丈夫です。</em>
    SetTimer t, 1000
}
timertest()
</pre>

<h2 id="remarks">復帰・退出・総評</h2>
<p>関数内の実行の流れが<a href="lib/Return.htm">Returnに</a>出会う前に関数の閉じブレースに到達した場合、関数は終了し、呼び出し元に空白の値（空文字列）を返します。また、関数が明示的に<a href="lib/Return.htm">Returnの</a>パラメータを省略した場合は、空白の値が返されます。</p>
<p>関数が<a href="lib/Exit.htm">Exitを</a>使用して<a href="misc/Threads.htm">現在のスレッドを</a>終了させる場合、その呼び出し元は戻り値をまったく受け取りません。例えば、<code>Var := Add(2, 3)</code>という文は、<code>Add()が</code>終了しても<code>Varは</code>変更されないままです。<a href="lib/Throw.htm">Throwや</a>ランタイムエラー（存在しないファイルを<a href="lib/Run.htm">実行</a>したなど）により、関数が終了した場合も同様です。</p>
<p>1つ以上の空白の値（空文字列）を持つ関数を呼び出すには、この例のように空の引用符の組を使用します。<code>FindColor(ColorName, "")</code>.</p>
<p>関数を呼び出しても新しい<a href="misc/Threads.htm">スレッドは</a>始まらないので、関数で<a href="lib/SendMode.htm">SendModeや</a> <a href="lib/SetTitleMatchMode.htm">SetTitleMatchModeなどの</a>設定を変更すると、その呼び出し元にも反映されます。</p>
<p>関数内で使用すると、関数の<a href="#Local">ローカル変数を</a>その内容とともに表示します。これは、スクリプトのデバッグに役立ちます。</p>
<h2 id="Style_and_Naming_Conventions">スタイルと命名規則</h2>
<p>複雑な関数は、特殊な変数に明確な接頭辞をつけると読みやすく、保守しやすくなります。For example, naming each parameter in a function's parameter list with a leading "p" or "p_" makes their special nature easy to discern at a glance, especially when a function has several dozen <a href="#Local">local variables</a> competing for your attention. Similarly, the prefix "r" or "r_" could be used for <a href="#ByRef">ByRef parameters</a>, and "s" or "s_" could be used for <a href="#static">static variables</a>.</p>
<p>The <a href="lib/Block.htm#otb">One True Brace (OTB) style</a> may optionally be used to define functions. 事例:</p>
<pre>Add(x, y) {
    return x + y
}</pre>

<h2 id="include">複数のスクリプト間で関数を共有するための#Includeの使い方</h2>
<p>The <a href="lib/_Include.htm">#Include</a> directive may be used to load functions from an external file.</p>

<h2 id="BuiltIn">搭載されている機能</h2>
<p>A built-in function is overridden if the script defines its own function of the same name. For example, a script could have its own custom WinExist function that is called instead of the standard one. However, the script would then have no way to call the original function.</p>
<p>External functions that reside in DLL files may be called with <a href="lib/DllCall.htm">DllCall</a>.</p>
<p>To get a list of all built-in functions, see <a href="lib/index.htm">Alphabetical Function Index</a>.</p>
</body>
</html>
