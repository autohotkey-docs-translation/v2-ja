<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Changes from v1.0 to v1.1 | AutoHotkey v2</title>
<meta name="description" content="Changes between v1.0 and v1.1." />
<meta name="ahk:equiv-v1" content="Compat.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>Changes from v1.0 to v1.1</h1>

<p>This document details changes between AutoHotkey v1.0 and v1.1 that may cause scripts to behave differently, and therefore might be important to keep in mind while reading or updating old code. See also: <a href="v2-changes.htm">Changes from v1.1 to v2.0</a>.</p>
<p>AutoHotkey v1.1 is also known as "AutoHotkey_L", while AutoHotkey v1.0 was retrospectively labelled "AutoHotkey Basic". Some older versions of AutoHotkey_L used 1.0.* version numbers, so for clarity, this document refers to the two branches of AutoHotkey by name rather than version number.</p>

<h2 id="toc">Table of Contents</h2>
<p>High impact:</p>
<ul>
  <li><a href="#Syntax_Errors">Certain syntax errors are no longer tolerated</a></li>
  <li><a href="#FileRead">FileRead may return corrupt binary data</a></li>
  <li><a href="#Names">Variable and function names do not allow [, ] or ?</a></li>
  <li><a href="#DPIScale">DPI scaling is enabled by default for GUIs</a></li>
</ul>
<p>Medium impact:</p>
<ul>
  <li><a href="#Transform">Transform's <em>Unicode</em> sub-command is unavailable on Unicode versions</a></li>
  <li><a href="#Default_Script">AutoHotkey.ahk is launched instead of AutoHotkey.ini</a></li>
  <li><a href="#SetFormat">SetFormat, Integer, <strong>H</strong> is case-sensitive</a></li>
  <li><a href="#LastError">A_LastError is modified by more commands</a></li>
  <li><a href="#MsgBox">MsgBox's handles commas more consistently</a></li>
  <li><a href="#GuiOwner">GUI's Owner option overrides additional styles</a></li>
  <li><a href="#Tilde">~Tilde affects how custom modifier keys work</a></li>
  <li><a href="#ComboUpDown"><code>x &amp; y::</code> causes both <code>x::</code> and <code>x up::</code> to fire when x is released</a></li>
</ul>
<p>Low impact:</p>
<ul>
  <li><a href="#IfIs">If <em>var</em> is <em>type</em> ignores the system locale by default</a></li>
  <li><a href="#Window_Groups">GroupActivate sets ErrorLevel and GroupAdd's <em>Label</em> works differently</a></li>
  <li><a href="#Run">Run and RunWait interpret <em>Target</em> differently</a></li>
  <li><a href="#ControlZ">Control-Z is not interpreted as end-of-file</a></li>
  <li><a href="#IsCompiled">A_IsCompiled is always read-only</a></li>
  <li><a href="#DllCall">DllCall tries the A or W suffix in more cases</a></li>
</ul>

<span id="Validation"></span><h2 id="Syntax_Errors">Syntax Errors</h2>
<p>Certain syntax errors which were tolerated by AutoHotkey Basic are not tolerated by AutoHotkey_L. Most such errors can be easily corrected once they are identified. Some errors are detected at load-time, and must be corrected before the script will run at all. Other errors are raised only when specific conditions are met while the script is running.</p>
<p>Error detection in v2.0 is generally more robust, and as there have been numerous changes to usage beyond just error detection and handling, the differences in error detection between v1.0 and v1.1 are not listed here. For those details, refer to the v1.1 documentation.</p>

<h2 id="FileRead">FileRead</h2>
<p><a href="lib/FileRead.htm#Binary">FileRead</a> translates text between code pages in certain common cases and therefore might output corrupt binary data. To avoid this in v2.0, add the <code>RAW</code> option or use <a href="lib/FileOpen.htm">FileOpen</a> instead.</p>

<h2 id="Names">Variable and Function Names</h2>
<p>The characters <code>[</code>, <code>]</code> and <code>?</code> are reserved for use in <a href="Language.htm#expressions">expressions</a>, so are no longer valid in variable names.  Consequently, <code>?</code> (used in <a href="Variables.htm#ternary">ternary operations</a>) no longer requires a space on either side.  Code for v1.0 which uses these characters in a variable name would have a new interpretation in v1.1, and as such might not be detected as an error.</p>
<p>Related: <a href="Language.htm#operators-for-objects">Operators for Objects</a>, <a href="v2-changes.htm#names">Names (Changes from v1.1 to v2.0)</a></p>

<h2 id="DPIScale">DPI Scaling</h2>
<p><a href="lib/Gui.htm#DPIScale">DPI scaling</a> is enabled by default for script GUIs to ensure they scale according to the <a href="Variables.htm#ScreenDPI">system DPI setting</a>.  If enabled and the system DPI setting is not 96 (100%), positions and sizes accepted by or returned from Gui methods/properties are not compatible with other functions.  To disable DPI scaling, use <code>MyGui.Opt("-DPIScale")</code>.</p>

<h2 id="Transform">Transform</h2>
<p>Some <i>Transform</i> sub-commands are altered or unavailable:</p>
<ul>
  <li><code>Transform, Unicode</code> is available only in ANSI versions of AutoHotkey. To assign Unicode text to the clipboard, use a regular assignment. See also: <a href="lib/StrPut.htm">StrPut</a>/<a href="lib/StrGet.htm">StrGet</a>.</li>
  <li><code>Transform, HTML</code> supports additional features in Unicode versions of AutoHotkey_L.</li>
</ul>
<p><code>Transform</code> itself was removed in v2.0.</p>

<h2 id="Default_Script">Default Script</h2>
<p>When AutoHotkey_L is launched without specifying a script, an .ahk file is loaded by default instead of an .ini file.  The name of this file depends on the filename of the current executable.  For more details, see <a href="Scripts.htm#defaultfile">Script Filename</a>.</p>

<h2 id="SetFormat">SetFormat, Integer[Fast], H</h2>
<p>When an uppercase H is used, hexadecimal digits A-F will also be in uppercase. AutoHotkey Basic always produces lowercase digits.</p>
<p>SetFormat itself was removed in v2.0. <code>Format("0x{:x}", n)</code> produces lowercase a-f while <code>Format("0x{:X}", n)</code> produces uppercase A-F.</p>

<h2 id="LastError">A_LastError</h2>
<p>The following commands now set <a href="Variables.htm#LastError">A_LastError</a> to assist with debugging: FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version, FileSetAttrib/Time, FileCreateDir, RegRead, RegWrite, RegDelete.  Using any of these commands causes the previous value of A_LastError to be overwritten.</p>
<p>For v2.0, A_LastError is also set by IniRead, IniWrite and IniDelete.</p>

<h2 id="MsgBox">MsgBox</h2>
<p>MsgBox in v1.0 and v1.1 had "smart comma handling" to avoid the need to escape commas in unquoted text. This handling was slightly different between the two versions, and might need to be taken into account in very rare cases while reading v1.0 code. Refer to the v1.1 documentation for details. v2.0 uses expression syntax exclusively and as such has no need for any special handling of commas.</p>

<h2 id="GuiOwner">GUI's Owner option</h2>
<p>Applying the <a href="lib/Gui.htm#Owner">+Owner</a> option to a Gui also removes the WS_CHILD style and sets the WS_POPUP style. This may break scripts which used <code>+Owner</code> to set the parent window of a Gui <em>after</em> setting the styles.</p>

<h2 id="Tilde">~Tilde and Custom Combination Hotkeys</h2>
<p>As of v1.1.14, the <a href="Hotkeys.htm#Tilde">tilde prefix</a> affects how a key works when used as a modifier key in a custom combination.</p>

<h2 id="ComboUpDown">Custom Combinations and Down/Up Hotkeys</h2>
<p>Except when the tilde prefix is used, if both a key-down and a key-up hotkey are defined for a custom modifier key, they will both fire when the key is released.  For example, <code>x &amp; y::</code> causes both <code>x::</code> and <code>x up::</code> to fire when x is released, where previously <code>x::</code> never fired.</p>

<h2 id="IfIs">If <em>var</em> is <em>type</em></h2>
<p><code>If <i>var</i> is <i>type</i></code> identified certain (possibly locale-specific) non-ASCII characters as alphabetic/uppercase/lowercase by default in v1.0, whereas it did so in v1.1 only if <code>StringCaseSense, Locale</code> was used. Similarly, the <a href="lib/Is.htm">Is<em>Type</em></a> functions in v2.0 only identify non-ASCII characters as alphabetic if the second parameter is <code>"Locale"</code>.</p>

<h2 id="Window_Groups">Window Groups</h2>
<p><a href="lib/GroupActivate.htm">GroupActivate</a> sets ErrorLevel only in v1.1, not v1.0 or v2.0.</p>
<p><a href="lib/GroupAdd.htm">GroupAdd</a>'s <em>Label</em> parameter behaves differently between v1.0 and v1.1, but was removed in v2.0.</p>

<h2 id="Run">Run / RunWait</h2>
<p>AutoHotkey_L includes some enhancements to the way the <a href="lib/Run.htm">Run</a> and <a href="lib/Run.htm">RunWait</a> commands interpret the <em>Target</em> parameter.  This allows some things that didn't work previously, but in some very rare cases, may also affect scripts which were already working in AutoHotkey Basic.  The new behaviour is as follows:</p>
<ul>
  <li>If <i>Target</i> begins with a quotation mark, everything up to the next quotation mark is considered the action, typically an executable file.</li>
  <li>Otherwise the first substring which ends at a space and is either an existing file or ends in .exe, .bat, .com, .cmd or .hta is considered the action. This allows file types such as .ahk, .vbs or .lnk to accept parameters while still allowing "known" executables such as wordpad.exe to be launched without an absolute path as in previous versions.</li>
</ul>

<h2 id="ControlZ">Control-Z</h2>
<p><a href="lib/LoopRead.htm">Loop Read</a> and <a href="lib/File.htm#ReadLine">File.ReadLine</a> no longer interpret the character <kbd>Ctrl</kbd>+<kbd>Z</kbd> (0x1A) as an end-of-file marker.  Any <kbd>Ctrl</kbd>+<kbd>Z</kbd>, even one appearing at the very end of the file, is loaded as-is.  <a href="lib/FileRead.htm">FileRead</a> already ignored this character, so is not affected by this issue.</p>

<h2 id="IsCompiled">A_IsCompiled</h2>
<p>If the script has not been compiled, <a href="Variables.htm#IsCompiled">A_IsCompiled</a> is defined even if the script has not been compiled; its value is <code>""</code> in v1.1 and <code>0</code> in v2.0. Previously it was left undefined, which meant that assignments such as <code>A_IsCompiled := 1</code> were valid if the script hadn't been compiled. Now it is treated as a read-only built-in variable in all cases.</p>

<h2 id="DllCall">DllCall</h2>
<p>When the function name given to <a href="lib/DllCall.htm">DllCall</a> cannot be resolved, AutoHotkey_L automatically appends an "A" (ANSI) or "W" (Unicode) to the function name regardless of which DLL was specified. By contrast, AutoHotkey Basic appends the "A" suffix only for functions in User32.dll, Kernel32.dll, ComCtl32.dll, or Gdi32.dll.</p>

</body>
</html>